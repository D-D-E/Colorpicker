
rtos_usart_ll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077f0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  08007900  08007900  00017900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008090  08008090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  20000000  08008098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002e40  200001ec  08008284  000201ec  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000302c  08008284  0002302c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002ddbc  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000715f  00000000  00000000  0004dfd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001d20  00000000  00000000  00055130  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000019f8  00000000  00000000  00056e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e77d  00000000  00000000  00058848  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006e29  00000000  00000000  00066fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0006ddee  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000077d0  00000000  00000000  0006de6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	080078e8 	.word	0x080078e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	080078e8 	.word	0x080078e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <waitCallBack>:

uint8_t linkID;
uint8_t TCPServerFlag = 0;

static bool waitCallBack(char * aim, uint16_t ms)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
 8000168:	460b      	mov	r3, r1
 800016a:	807b      	strh	r3, [r7, #2]
	uint32_t time_end = getSysTick() + ms;
 800016c:	f004 fb7e 	bl	800486c <getSysTick>
 8000170:	4602      	mov	r2, r0
 8000172:	887b      	ldrh	r3, [r7, #2]
 8000174:	4413      	add	r3, r2
 8000176:	60bb      	str	r3, [r7, #8]
	uint32_t time = getSysTick();
 8000178:	f004 fb78 	bl	800486c <getSysTick>
 800017c:	60f8      	str	r0, [r7, #12]
	while(time_end > time)
 800017e:	e00e      	b.n	800019e <waitCallBack+0x3e>
	{
		time++;
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	3301      	adds	r3, #1
 8000184:	60fb      	str	r3, [r7, #12]
		if(charCallBack(aim))
 8000186:	6878      	ldr	r0, [r7, #4]
 8000188:	f000 f9c6 	bl	8000518 <charCallBack>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	d001      	beq.n	8000196 <waitCallBack+0x36>
		{
			return 1;
 8000192:	2301      	movs	r3, #1
 8000194:	e008      	b.n	80001a8 <waitCallBack+0x48>
		}
		else asm("NOP");
 8000196:	bf00      	nop

		osDelay(1);
 8000198:	2001      	movs	r0, #1
 800019a:	f002 fbcc 	bl	8002936 <osDelay>
	while(time_end > time)
 800019e:	68ba      	ldr	r2, [r7, #8]
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	429a      	cmp	r2, r3
 80001a4:	d8ec      	bhi.n	8000180 <waitCallBack+0x20>
	}
	return 0;
 80001a6:	2300      	movs	r3, #0
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	3710      	adds	r7, #16
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}

080001b0 <ESPInit>:

void ESPInit()
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
	 MX_USART1_UART_Init();
 80001b4:	f006 fb6a 	bl	800688c <MX_USART1_UART_Init>
	 RingBuff_Init();
 80001b8:	f000 fe54 	bl	8000e64 <RingBuff_Init>
}
 80001bc:	bf00      	nop
 80001be:	bd80      	pop	{r7, pc}

080001c0 <ESP_Resset>:

void ESP_Resset()
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	USART1_Device_Reset();
 80001c4:	f006 fb4e 	bl	8006864 <USART1_Device_Reset>
	if(waitCallBack("ready", 2000))
 80001c8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80001cc:	4802      	ldr	r0, [pc, #8]	; (80001d8 <ESP_Resset+0x18>)
 80001ce:	f7ff ffc7 	bl	8000160 <waitCallBack>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
	{
		return;
	}
}
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	08007900 	.word	0x08007900

080001dc <requestFlush>:

static void requestFlush()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	memset(request, 0, sizeof(request));
 80001e0:	f240 4201 	movw	r2, #1025	; 0x401
 80001e4:	2100      	movs	r1, #0
 80001e6:	4802      	ldr	r0, [pc, #8]	; (80001f0 <requestFlush+0x14>)
 80001e8:	f006 fe81 	bl	8006eee <memset>
	//request[1023] = 0;
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	200023c4 	.word	0x200023c4

080001f4 <answerFlush>:

static void answerFlush()
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	memset(answer, 0, sizeof(answer));
 80001f8:	f240 4201 	movw	r2, #1025	; 0x401
 80001fc:	2100      	movs	r1, #0
 80001fe:	4802      	ldr	r0, [pc, #8]	; (8000208 <answerFlush+0x14>)
 8000200:	f006 fe75 	bl	8006eee <memset>
	//answer[1023] = 0;
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}
 8000208:	200027c8 	.word	0x200027c8

0800020c <ESP_SetMode>:

uint8_t ESP_SetMode(int mode)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	requestFlush();
 8000214:	f7ff ffe2 	bl	80001dc <requestFlush>

	if(mode == 1 || mode == 3)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2b01      	cmp	r3, #1
 800021c:	d002      	beq.n	8000224 <ESP_SetMode+0x18>
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2b03      	cmp	r3, #3
 8000222:	d103      	bne.n	800022c <ESP_SetMode+0x20>
	{
		USART_SendData("AT+SLEEP=0\r\n", 12);
 8000224:	210c      	movs	r1, #12
 8000226:	4816      	ldr	r0, [pc, #88]	; (8000280 <ESP_SetMode+0x74>)
 8000228:	f006 fab8 	bl	800679c <USART_SendData>
	}

	sprintf(request, "AT+CWMODE=%d\r\n", mode);
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	4915      	ldr	r1, [pc, #84]	; (8000284 <ESP_SetMode+0x78>)
 8000230:	4815      	ldr	r0, [pc, #84]	; (8000288 <ESP_SetMode+0x7c>)
 8000232:	f006 fe65 	bl	8006f00 <siprintf>
	RingBuff_Clear();
 8000236:	f000 fe79 	bl	8000f2c <RingBuff_Clear>
	USART_SendData(request, strlen(request));
 800023a:	4813      	ldr	r0, [pc, #76]	; (8000288 <ESP_SetMode+0x7c>)
 800023c:	f7ff ff88 	bl	8000150 <strlen>
 8000240:	4603      	mov	r3, r0
 8000242:	4619      	mov	r1, r3
 8000244:	4810      	ldr	r0, [pc, #64]	; (8000288 <ESP_SetMode+0x7c>)
 8000246:	f006 faa9 	bl	800679c <USART_SendData>

	if(waitCallBack("OK", 20))
 800024a:	2114      	movs	r1, #20
 800024c:	480f      	ldr	r0, [pc, #60]	; (800028c <ESP_SetMode+0x80>)
 800024e:	f7ff ff87 	bl	8000160 <waitCallBack>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d00e      	beq.n	8000276 <ESP_SetMode+0x6a>
	{
		USART_SendData("AT+RST\r\n", 8); //restart to apply settings
 8000258:	2108      	movs	r1, #8
 800025a:	480d      	ldr	r0, [pc, #52]	; (8000290 <ESP_SetMode+0x84>)
 800025c:	f006 fa9e 	bl	800679c <USART_SendData>
		//delay(1000);

		if(waitCallBack("ready", 2000))
 8000260:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000264:	480b      	ldr	r0, [pc, #44]	; (8000294 <ESP_SetMode+0x88>)
 8000266:	f7ff ff7b 	bl	8000160 <waitCallBack>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <ESP_SetMode+0x68>
		{
			return 1;
 8000270:	2301      	movs	r3, #1
 8000272:	e001      	b.n	8000278 <ESP_SetMode+0x6c>
		}
		else asm("NOP");
 8000274:	bf00      	nop
	}

	return 0;
 8000276:	2300      	movs	r3, #0
}
 8000278:	4618      	mov	r0, r3
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	08007908 	.word	0x08007908
 8000284:	08007918 	.word	0x08007918
 8000288:	200023c4 	.word	0x200023c4
 800028c:	08007928 	.word	0x08007928
 8000290:	0800792c 	.word	0x0800792c
 8000294:	08007900 	.word	0x08007900

08000298 <ESP_SetModeStation>:

uint8_t ESP_SetModeStation()
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	return ESP_SetMode(1);
 800029c:	2001      	movs	r0, #1
 800029e:	f7ff ffb5 	bl	800020c <ESP_SetMode>
 80002a2:	4603      	mov	r3, r0
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <ESP_SetModeSoftAP>:

uint8_t ESP_SetModeSoftAP()
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	return ESP_SetMode(2);
 80002ac:	2002      	movs	r0, #2
 80002ae:	f7ff ffad 	bl	800020c <ESP_SetMode>
 80002b2:	4603      	mov	r3, r0
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <ESP_SetModeBoth>:

uint8_t ESP_SetModeBoth()
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	return ESP_SetMode(3);
 80002bc:	2003      	movs	r0, #3
 80002be:	f7ff ffa5 	bl	800020c <ESP_SetMode>
 80002c2:	4603      	mov	r3, r0
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <ESP_SetParamsSoftAP>:
	RingBuff_Clear();
	USART_SendData(request, strlen(request));
}

uint8_t ESP_SetParamsSoftAP(char * ssid, char * password)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	6039      	str	r1, [r7, #0]
	if(ssid != NULL && password != NULL)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d02a      	beq.n	800032e <ESP_SetParamsSoftAP+0x66>
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d027      	beq.n	800032e <ESP_SetParamsSoftAP+0x66>
	{
		requestFlush();
 80002de:	f7ff ff7d 	bl	80001dc <requestFlush>
		sprintf(request, "AT+CWSAP=\"%s\",\"%s\",5,3\r\n", ssid, password);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	4914      	ldr	r1, [pc, #80]	; (8000338 <ESP_SetParamsSoftAP+0x70>)
 80002e8:	4814      	ldr	r0, [pc, #80]	; (800033c <ESP_SetParamsSoftAP+0x74>)
 80002ea:	f006 fe09 	bl	8006f00 <siprintf>
		RingBuff_Clear();
 80002ee:	f000 fe1d 	bl	8000f2c <RingBuff_Clear>
		USART_SendData(request, strlen(request));
 80002f2:	4812      	ldr	r0, [pc, #72]	; (800033c <ESP_SetParamsSoftAP+0x74>)
 80002f4:	f7ff ff2c 	bl	8000150 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	4619      	mov	r1, r3
 80002fc:	480f      	ldr	r0, [pc, #60]	; (800033c <ESP_SetParamsSoftAP+0x74>)
 80002fe:	f006 fa4d 	bl	800679c <USART_SendData>

		if(waitCallBack("OK", 20))
 8000302:	2114      	movs	r1, #20
 8000304:	480e      	ldr	r0, [pc, #56]	; (8000340 <ESP_SetParamsSoftAP+0x78>)
 8000306:	f7ff ff2b 	bl	8000160 <waitCallBack>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d00e      	beq.n	800032e <ESP_SetParamsSoftAP+0x66>
		{
			USART_SendData("AT+RST\r\n", 8); //restart to apply settings
 8000310:	2108      	movs	r1, #8
 8000312:	480c      	ldr	r0, [pc, #48]	; (8000344 <ESP_SetParamsSoftAP+0x7c>)
 8000314:	f006 fa42 	bl	800679c <USART_SendData>

			if(waitCallBack("ready", 2000))
 8000318:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800031c:	480a      	ldr	r0, [pc, #40]	; (8000348 <ESP_SetParamsSoftAP+0x80>)
 800031e:	f7ff ff1f 	bl	8000160 <waitCallBack>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <ESP_SetParamsSoftAP+0x64>
			{
				return 1;
 8000328:	2301      	movs	r3, #1
 800032a:	e001      	b.n	8000330 <ESP_SetParamsSoftAP+0x68>
			}
			else asm("NOP");
 800032c:	bf00      	nop
		}
	}

	return 0;
 800032e:	2300      	movs	r3, #0
}
 8000330:	4618      	mov	r0, r3
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	08007950 	.word	0x08007950
 800033c:	200023c4 	.word	0x200023c4
 8000340:	08007928 	.word	0x08007928
 8000344:	0800792c 	.word	0x0800792c
 8000348:	08007900 	.word	0x08007900

0800034c <ESP_SetParamsStation>:

uint8_t ESP_SetParamsStation(char * ssid, char * password)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	6039      	str	r1, [r7, #0]
	if(ssid != NULL && password != NULL)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d01e      	beq.n	800039a <ESP_SetParamsStation+0x4e>
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d01b      	beq.n	800039a <ESP_SetParamsStation+0x4e>
	{
		requestFlush();
 8000362:	f7ff ff3b 	bl	80001dc <requestFlush>
		sprintf(request, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	490e      	ldr	r1, [pc, #56]	; (80003a4 <ESP_SetParamsStation+0x58>)
 800036c:	480e      	ldr	r0, [pc, #56]	; (80003a8 <ESP_SetParamsStation+0x5c>)
 800036e:	f006 fdc7 	bl	8006f00 <siprintf>
		RingBuff_Clear();
 8000372:	f000 fddb 	bl	8000f2c <RingBuff_Clear>
		//charCallBack("");   //clear ring buffer after restart
		USART_SendData(request, strlen(request));
 8000376:	480c      	ldr	r0, [pc, #48]	; (80003a8 <ESP_SetParamsStation+0x5c>)
 8000378:	f7ff feea 	bl	8000150 <strlen>
 800037c:	4603      	mov	r3, r0
 800037e:	4619      	mov	r1, r3
 8000380:	4809      	ldr	r0, [pc, #36]	; (80003a8 <ESP_SetParamsStation+0x5c>)
 8000382:	f006 fa0b 	bl	800679c <USART_SendData>

		if(waitCallBack("OK", 10000))
 8000386:	f242 7110 	movw	r1, #10000	; 0x2710
 800038a:	4808      	ldr	r0, [pc, #32]	; (80003ac <ESP_SetParamsStation+0x60>)
 800038c:	f7ff fee8 	bl	8000160 <waitCallBack>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <ESP_SetParamsStation+0x4e>
		{
			return 1;
 8000396:	2301      	movs	r3, #1
 8000398:	e000      	b.n	800039c <ESP_SetParamsStation+0x50>
		}
	}

	return 0;
 800039a:	2300      	movs	r3, #0
}
 800039c:	4618      	mov	r0, r3
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	0800796c 	.word	0x0800796c
 80003a8:	200023c4 	.word	0x200023c4
 80003ac:	08007928 	.word	0x08007928

080003b0 <ESP_StartTCPServer>:

	return 0;
}

uint8_t ESP_StartTCPServer(uint16_t port)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	80fb      	strh	r3, [r7, #6]
    if(!TCPServerFlag)
 80003ba:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <ESP_StartTCPServer+0x78>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d12d      	bne.n	800041e <ESP_StartTCPServer+0x6e>
    {
        USART_SendData("AT+CIPMUX=1\r\n", 13);
 80003c2:	210d      	movs	r1, #13
 80003c4:	4819      	ldr	r0, [pc, #100]	; (800042c <ESP_StartTCPServer+0x7c>)
 80003c6:	f006 f9e9 	bl	800679c <USART_SendData>
        if(!waitCallBack("OK", 100))
 80003ca:	2164      	movs	r1, #100	; 0x64
 80003cc:	4818      	ldr	r0, [pc, #96]	; (8000430 <ESP_StartTCPServer+0x80>)
 80003ce:	f7ff fec7 	bl	8000160 <waitCallBack>
 80003d2:	4603      	mov	r3, r0
 80003d4:	f083 0301 	eor.w	r3, r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <ESP_StartTCPServer+0x32>
        {
        	return 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	e01e      	b.n	8000420 <ESP_StartTCPServer+0x70>
        }

        requestFlush();
 80003e2:	f7ff fefb 	bl	80001dc <requestFlush>
        sprintf(request, "AT+CIPSERVER=1,%d\r\n", port);
 80003e6:	88fb      	ldrh	r3, [r7, #6]
 80003e8:	461a      	mov	r2, r3
 80003ea:	4912      	ldr	r1, [pc, #72]	; (8000434 <ESP_StartTCPServer+0x84>)
 80003ec:	4812      	ldr	r0, [pc, #72]	; (8000438 <ESP_StartTCPServer+0x88>)
 80003ee:	f006 fd87 	bl	8006f00 <siprintf>

        RingBuff_Clear();
 80003f2:	f000 fd9b 	bl	8000f2c <RingBuff_Clear>
        USART_SendData(request, strlen(request));
 80003f6:	4810      	ldr	r0, [pc, #64]	; (8000438 <ESP_StartTCPServer+0x88>)
 80003f8:	f7ff feaa 	bl	8000150 <strlen>
 80003fc:	4603      	mov	r3, r0
 80003fe:	4619      	mov	r1, r3
 8000400:	480d      	ldr	r0, [pc, #52]	; (8000438 <ESP_StartTCPServer+0x88>)
 8000402:	f006 f9cb 	bl	800679c <USART_SendData>
		//USART_SendData("AT+MDNS=1,\"espressif\",\"iot\",80\r\n", 32);
        if(waitCallBack("OK", 20))
 8000406:	2114      	movs	r1, #20
 8000408:	4809      	ldr	r0, [pc, #36]	; (8000430 <ESP_StartTCPServer+0x80>)
 800040a:	f7ff fea9 	bl	8000160 <waitCallBack>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d004      	beq.n	800041e <ESP_StartTCPServer+0x6e>
        {
            TCPServerFlag = 1;
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <ESP_StartTCPServer+0x78>)
 8000416:	2201      	movs	r2, #1
 8000418:	701a      	strb	r2, [r3, #0]
            return 1;
 800041a:	2301      	movs	r3, #1
 800041c:	e000      	b.n	8000420 <ESP_StartTCPServer+0x70>
        }
    }

	return 0;
 800041e:	2300      	movs	r3, #0
}
 8000420:	4618      	mov	r0, r3
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000208 	.word	0x20000208
 800042c:	0800799c 	.word	0x0800799c
 8000430:	08007928 	.word	0x08007928
 8000434:	080079ac 	.word	0x080079ac
 8000438:	200023c4 	.word	0x200023c4

0800043c <ESP_StopTCPServer>:

uint8_t ESP_StopTCPServer(uint16_t port)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	80fb      	strh	r3, [r7, #6]
	if(TCPServerFlag)
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <ESP_StopTCPServer+0x58>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d01d      	beq.n	800048a <ESP_StopTCPServer+0x4e>
	{
		requestFlush();
 800044e:	f7ff fec5 	bl	80001dc <requestFlush>
		sprintf(request, "AT+CIPSERVER=0,%d\r\n", port);
 8000452:	88fb      	ldrh	r3, [r7, #6]
 8000454:	461a      	mov	r2, r3
 8000456:	4910      	ldr	r1, [pc, #64]	; (8000498 <ESP_StopTCPServer+0x5c>)
 8000458:	4810      	ldr	r0, [pc, #64]	; (800049c <ESP_StopTCPServer+0x60>)
 800045a:	f006 fd51 	bl	8006f00 <siprintf>
		RingBuff_Clear();
 800045e:	f000 fd65 	bl	8000f2c <RingBuff_Clear>
		USART_SendData(request, strlen(request));
 8000462:	480e      	ldr	r0, [pc, #56]	; (800049c <ESP_StopTCPServer+0x60>)
 8000464:	f7ff fe74 	bl	8000150 <strlen>
 8000468:	4603      	mov	r3, r0
 800046a:	4619      	mov	r1, r3
 800046c:	480b      	ldr	r0, [pc, #44]	; (800049c <ESP_StopTCPServer+0x60>)
 800046e:	f006 f995 	bl	800679c <USART_SendData>
		TCPServerFlag = 0;
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <ESP_StopTCPServer+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	701a      	strb	r2, [r3, #0]

		if(waitCallBack("OK", 20))
 8000478:	2114      	movs	r1, #20
 800047a:	4809      	ldr	r0, [pc, #36]	; (80004a0 <ESP_StopTCPServer+0x64>)
 800047c:	f7ff fe70 	bl	8000160 <waitCallBack>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <ESP_StopTCPServer+0x4e>
		{
			return 1;
 8000486:	2301      	movs	r3, #1
 8000488:	e000      	b.n	800048c <ESP_StopTCPServer+0x50>
		}
	}
	return 0;
 800048a:	2300      	movs	r3, #0
}
 800048c:	4618      	mov	r0, r3
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000208 	.word	0x20000208
 8000498:	080079c0 	.word	0x080079c0
 800049c:	200023c4 	.word	0x200023c4
 80004a0:	08007928 	.word	0x08007928

080004a4 <requestRefresh>:

uint8_t requestRefresh()
{
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
	answerFlush();
 80004aa:	f7ff fea3 	bl	80001f4 <answerFlush>
	int i = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
	while(!(RingBuff_IsEmpty()) && i < 1024)
 80004b2:	e00b      	b.n	80004cc <requestRefresh+0x28>
	{
		answer[i++] = RingBuff_Pop();
 80004b4:	68fc      	ldr	r4, [r7, #12]
 80004b6:	1c63      	adds	r3, r4, #1
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	f000 fd05 	bl	8000ec8 <RingBuff_Pop>
 80004be:	4603      	mov	r3, r0
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b13      	ldr	r3, [pc, #76]	; (8000510 <requestRefresh+0x6c>)
 80004c4:	551a      	strb	r2, [r3, r4]
		osDelay(1);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f002 fa35 	bl	8002936 <osDelay>
	while(!(RingBuff_IsEmpty()) && i < 1024)
 80004cc:	f000 fd1a 	bl	8000f04 <RingBuff_IsEmpty>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d103      	bne.n	80004de <requestRefresh+0x3a>
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004dc:	dbea      	blt.n	80004b4 <requestRefresh+0x10>
	}

	char * search;
	search = strstr(answer, "+IPD,");
 80004de:	490d      	ldr	r1, [pc, #52]	; (8000514 <requestRefresh+0x70>)
 80004e0:	480b      	ldr	r0, [pc, #44]	; (8000510 <requestRefresh+0x6c>)
 80004e2:	f006 fd31 	bl	8006f48 <strstr>
 80004e6:	60b8      	str	r0, [r7, #8]
	if(search != NULL)
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d00b      	beq.n	8000506 <requestRefresh+0x62>
	{
		search+=5;
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	3305      	adds	r3, #5
 80004f2:	60bb      	str	r3, [r7, #8]
		uint8_t ID = strtol(search, NULL, 10);
 80004f4:	220a      	movs	r2, #10
 80004f6:	2100      	movs	r1, #0
 80004f8:	68b8      	ldr	r0, [r7, #8]
 80004fa:	f006 fdc1 	bl	8007080 <strtol>
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
		//search += 2;
		//answerLength = strtol(search, NULL, 10); // get answer length

		return ID;
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	e000      	b.n	8000508 <requestRefresh+0x64>
	}
	return 100;
 8000506:	2364      	movs	r3, #100	; 0x64
}
 8000508:	4618      	mov	r0, r3
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	bd90      	pop	{r4, r7, pc}
 8000510:	200027c8 	.word	0x200027c8
 8000514:	080079d4 	.word	0x080079d4

08000518 <charCallBack>:

uint16_t charCallBack(char * key)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	answerFlush();
 8000520:	f7ff fe68 	bl	80001f4 <answerFlush>
	uint16_t i = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	81fb      	strh	r3, [r7, #14]
	while(!(RingBuff_IsEmpty()) && i < 1024)
 8000528:	e012      	b.n	8000550 <charCallBack+0x38>
	{
		answer[i] = RingBuff_Pop();
 800052a:	89fc      	ldrh	r4, [r7, #14]
 800052c:	f000 fccc 	bl	8000ec8 <RingBuff_Pop>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <charCallBack+0x88>)
 8000536:	551a      	strb	r2, [r3, r4]

		if(answer[i] == 0)
 8000538:	89fb      	ldrh	r3, [r7, #14]
 800053a:	4a19      	ldr	r2, [pc, #100]	; (80005a0 <charCallBack+0x88>)
 800053c:	5cd3      	ldrb	r3, [r2, r3]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d103      	bne.n	800054a <charCallBack+0x32>
		{
			answer[i] = '0';
 8000542:	89fb      	ldrh	r3, [r7, #14]
 8000544:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <charCallBack+0x88>)
 8000546:	2130      	movs	r1, #48	; 0x30
 8000548:	54d1      	strb	r1, [r2, r3]
		}
		i++;
 800054a:	89fb      	ldrh	r3, [r7, #14]
 800054c:	3301      	adds	r3, #1
 800054e:	81fb      	strh	r3, [r7, #14]
	while(!(RingBuff_IsEmpty()) && i < 1024)
 8000550:	f000 fcd8 	bl	8000f04 <RingBuff_IsEmpty>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d103      	bne.n	8000562 <charCallBack+0x4a>
 800055a:	89fb      	ldrh	r3, [r7, #14]
 800055c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000560:	d3e3      	bcc.n	800052a <charCallBack+0x12>
	}
	answer[1024] = 0;
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <charCallBack+0x88>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	if(key != NULL && strlen(answer) >= strlen(key))
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d012      	beq.n	8000596 <charCallBack+0x7e>
 8000570:	480b      	ldr	r0, [pc, #44]	; (80005a0 <charCallBack+0x88>)
 8000572:	f7ff fded 	bl	8000150 <strlen>
 8000576:	4604      	mov	r4, r0
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff fde9 	bl	8000150 <strlen>
 800057e:	4603      	mov	r3, r0
 8000580:	429c      	cmp	r4, r3
 8000582:	d308      	bcc.n	8000596 <charCallBack+0x7e>
	{
		if(strstr(answer, key) != NULL)
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	4806      	ldr	r0, [pc, #24]	; (80005a0 <charCallBack+0x88>)
 8000588:	f006 fcde 	bl	8006f48 <strstr>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <charCallBack+0x7e>
		{
			return 1;
 8000592:	2301      	movs	r3, #1
 8000594:	e000      	b.n	8000598 <charCallBack+0x80>
		}
	}

	return 0;
 8000596:	2300      	movs	r3, #0
}
 8000598:	4618      	mov	r0, r3
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	bd90      	pop	{r4, r7, pc}
 80005a0:	200027c8 	.word	0x200027c8

080005a4 <ESP_SendConstData>:

	return 0;
}

uint8_t ESP_SendConstData(const char *data, uint16_t dataLength, uint8_t flagRN)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	807b      	strh	r3, [r7, #2]
 80005b0:	4613      	mov	r3, r2
 80005b2:	707b      	strb	r3, [r7, #1]
	requestFlush();
 80005b4:	f7ff fe12 	bl	80001dc <requestFlush>
	sprintf(request, "AT+CIPSEND=%d,%d\r\n", linkID, flagRN ? (dataLength + 2) : dataLength);
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <ESP_SendConstData+0x9c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	787b      	ldrb	r3, [r7, #1]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <ESP_SendConstData+0x26>
 80005c4:	887b      	ldrh	r3, [r7, #2]
 80005c6:	3302      	adds	r3, #2
 80005c8:	e000      	b.n	80005cc <ESP_SendConstData+0x28>
 80005ca:	887b      	ldrh	r3, [r7, #2]
 80005cc:	491d      	ldr	r1, [pc, #116]	; (8000644 <ESP_SendConstData+0xa0>)
 80005ce:	481e      	ldr	r0, [pc, #120]	; (8000648 <ESP_SendConstData+0xa4>)
 80005d0:	f006 fc96 	bl	8006f00 <siprintf>
	USART_SendData(request, strlen(request));
 80005d4:	481c      	ldr	r0, [pc, #112]	; (8000648 <ESP_SendConstData+0xa4>)
 80005d6:	f7ff fdbb 	bl	8000150 <strlen>
 80005da:	4603      	mov	r3, r0
 80005dc:	4619      	mov	r1, r3
 80005de:	481a      	ldr	r0, [pc, #104]	; (8000648 <ESP_SendConstData+0xa4>)
 80005e0:	f006 f8dc 	bl	800679c <USART_SendData>
	//delay(200);

	if(waitCallBack(">", 200) && data != NULL)
 80005e4:	21c8      	movs	r1, #200	; 0xc8
 80005e6:	4819      	ldr	r0, [pc, #100]	; (800064c <ESP_SendConstData+0xa8>)
 80005e8:	f7ff fdba 	bl	8000160 <waitCallBack>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d01b      	beq.n	800062a <ESP_SendConstData+0x86>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d018      	beq.n	800062a <ESP_SendConstData+0x86>
	{
		for(int i = 0; i < dataLength; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e009      	b.n	8000612 <ESP_SendConstData+0x6e>
		{
			USART_SendData_byte(data[i]);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f006 f8b0 	bl	800676c <USART_SendData_byte>
		for(int i = 0; i < dataLength; i++)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	3301      	adds	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	887a      	ldrh	r2, [r7, #2]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	429a      	cmp	r2, r3
 8000618:	dcf1      	bgt.n	80005fe <ESP_SendConstData+0x5a>
		}
		if(flagRN)
 800061a:	787b      	ldrb	r3, [r7, #1]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d006      	beq.n	800062e <ESP_SendConstData+0x8a>
		{
			USART_SendData("\r\n", 2);
 8000620:	2102      	movs	r1, #2
 8000622:	480b      	ldr	r0, [pc, #44]	; (8000650 <ESP_SendConstData+0xac>)
 8000624:	f006 f8ba 	bl	800679c <USART_SendData>
		if(flagRN)
 8000628:	e001      	b.n	800062e <ESP_SendConstData+0x8a>
		}
	}
	else return 0;
 800062a:	2300      	movs	r3, #0
 800062c:	e003      	b.n	8000636 <ESP_SendConstData+0x92>
	delay(100);
 800062e:	2064      	movs	r0, #100	; 0x64
 8000630:	f004 f90e 	bl	8004850 <delay>
//	if(waitCallBack("SEND OK", 200))
//	{
//		return 1;
//	}

	return 0;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20002bc9 	.word	0x20002bc9
 8000644:	080079dc 	.word	0x080079dc
 8000648:	200023c4 	.word	0x200023c4
 800064c:	080079f0 	.word	0x080079f0
 8000650:	080079f4 	.word	0x080079f4

08000654 <SetLinkID>:

void SetLinkID(uint8_t ID)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	linkID = ID;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <SetLinkID+0x1c>)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	7013      	strb	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20002bc9 	.word	0x20002bc9

08000674 <ESP_GetAnswer>:
{
	return linkID;
}

char * ESP_GetAnswer(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	return answer;
 8000678:	4b02      	ldr	r3, [pc, #8]	; (8000684 <ESP_GetAnswer+0x10>)
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	200027c8 	.word	0x200027c8

08000688 <SetSSID>:

void SetSSID(char * name)
{
 8000688:	b4b0      	push	{r4, r5, r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	memcpy(ssid, name, 32);
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <SetSSID+0x38>)
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	6815      	ldr	r5, [r2, #0]
 8000696:	6854      	ldr	r4, [r2, #4]
 8000698:	6890      	ldr	r0, [r2, #8]
 800069a:	68d1      	ldr	r1, [r2, #12]
 800069c:	601d      	str	r5, [r3, #0]
 800069e:	605c      	str	r4, [r3, #4]
 80006a0:	6098      	str	r0, [r3, #8]
 80006a2:	60d9      	str	r1, [r3, #12]
 80006a4:	6915      	ldr	r5, [r2, #16]
 80006a6:	6954      	ldr	r4, [r2, #20]
 80006a8:	6990      	ldr	r0, [r2, #24]
 80006aa:	69d1      	ldr	r1, [r2, #28]
 80006ac:	611d      	str	r5, [r3, #16]
 80006ae:	615c      	str	r4, [r3, #20]
 80006b0:	6198      	str	r0, [r3, #24]
 80006b2:	61d9      	str	r1, [r3, #28]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bcb0      	pop	{r4, r5, r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20002374 	.word	0x20002374

080006c4 <GetSSID>:

char * GetSSID()
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	return ssid;
 80006c8:	4b02      	ldr	r3, [pc, #8]	; (80006d4 <GetSSID+0x10>)
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	20002374 	.word	0x20002374

080006d8 <SetPASWD>:

void SetPASWD(char * passwd)
{
 80006d8:	b4b0      	push	{r4, r5, r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	memcpy(paswd, passwd, 32);
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <SetPASWD+0x38>)
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	6815      	ldr	r5, [r2, #0]
 80006e6:	6854      	ldr	r4, [r2, #4]
 80006e8:	6890      	ldr	r0, [r2, #8]
 80006ea:	68d1      	ldr	r1, [r2, #12]
 80006ec:	601d      	str	r5, [r3, #0]
 80006ee:	605c      	str	r4, [r3, #4]
 80006f0:	6098      	str	r0, [r3, #8]
 80006f2:	60d9      	str	r1, [r3, #12]
 80006f4:	6915      	ldr	r5, [r2, #16]
 80006f6:	6954      	ldr	r4, [r2, #20]
 80006f8:	6990      	ldr	r0, [r2, #24]
 80006fa:	69d1      	ldr	r1, [r2, #28]
 80006fc:	611d      	str	r5, [r3, #16]
 80006fe:	615c      	str	r4, [r3, #20]
 8000700:	6198      	str	r0, [r3, #24]
 8000702:	61d9      	str	r1, [r3, #28]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bcb0      	pop	{r4, r5, r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	200023a4 	.word	0x200023a4

08000714 <GetPasw>:

char *  GetPasw()
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	return paswd;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <GetPasw+0x10>)
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	200023a4 	.word	0x200023a4

08000728 <EncoderInit>:
#include "stdbool.h"
#include "stdint.h"
#include "encoder_driver.h"

void EncoderInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	GPIO_Init();
 800072c:	f004 f96c 	bl	8004a08 <GPIO_Init>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <Encoder_State>:

eState Encoder_State(void)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
	eState res = eNone;
 800073a:	2300      	movs	r3, #0
 800073c:	71fb      	strb	r3, [r7, #7]
    if(GetButton())
 800073e:	f004 fa01 	bl	8004b44 <GetButton>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d005      	beq.n	8000754 <Encoder_State+0x20>
    {
      res = eButton;
 8000748:	2303      	movs	r3, #3
 800074a:	71fb      	strb	r3, [r7, #7]
      ClearButton();
 800074c:	f004 fa04 	bl	8004b58 <ClearButton>
      return res;
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	e015      	b.n	8000780 <Encoder_State+0x4c>
    }
    if(GetRotateStatus())
 8000754:	f004 fa0c 	bl	8004b70 <GetRotateStatus>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d00d      	beq.n	800077a <Encoder_State+0x46>
    {
		if(GetRotatePinA() == GetRotatePinB())
 800075e:	f004 fa27 	bl	8004bb0 <GetRotatePinA>
 8000762:	4603      	mov	r3, r0
 8000764:	461c      	mov	r4, r3
 8000766:	f004 fa19 	bl	8004b9c <GetRotatePinB>
 800076a:	4603      	mov	r3, r0
 800076c:	429c      	cmp	r4, r3
 800076e:	d102      	bne.n	8000776 <Encoder_State+0x42>
		{
			res = eRight;
 8000770:	2302      	movs	r3, #2
 8000772:	71fb      	strb	r3, [r7, #7]
 8000774:	e001      	b.n	800077a <Encoder_State+0x46>
		}
		else
		{
			res = eLeft;
 8000776:	2301      	movs	r3, #1
 8000778:	71fb      	strb	r3, [r7, #7]
		}
	}
	ClearRotateStatus();
 800077a:	f004 fa03 	bl	8004b84 <ClearRotateStatus>
    return res;
 800077e:	79fb      	ldrb	r3, [r7, #7]
}
 8000780:	4618      	mov	r0, r3
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	bd90      	pop	{r4, r7, pc}

08000788 <I2C_Init>:
#include "i2c.h"
#include "led.h"
#include "delay.h"

void I2C_Init()
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	MX_I2C2_Init();
 800078c:	f004 fd0a 	bl	80051a4 <MX_I2C2_Init>
	MX_CRC_Init();
 8000790:	f004 f82a 	bl	80047e8 <MX_CRC_Init>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <ColorToEEPROM>:

uint32_t check_sum[1] = {0};
void ColorToEEPROM()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	uint16_t led[4] = {0,0,0,0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
	led[0] = Led_Get_Arr_Color()[0];
 80007a6:	f000 f929 	bl	80009fc <Led_Get_Arr_Color>
 80007aa:	4603      	mov	r3, r0
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	803b      	strh	r3, [r7, #0]
	led[1] = Led_Get_Arr_Color()[1];
 80007b0:	f000 f924 	bl	80009fc <Led_Get_Arr_Color>
 80007b4:	4603      	mov	r3, r0
 80007b6:	885b      	ldrh	r3, [r3, #2]
 80007b8:	807b      	strh	r3, [r7, #2]
	led[2] = Led_Get_Arr_Color()[2];
 80007ba:	f000 f91f 	bl	80009fc <Led_Get_Arr_Color>
 80007be:	4603      	mov	r3, r0
 80007c0:	889b      	ldrh	r3, [r3, #4]
 80007c2:	80bb      	strh	r3, [r7, #4]

	check_sum[0] = CRC_calc((uint32_t *)led, 2);
 80007c4:	463b      	mov	r3, r7
 80007c6:	2102      	movs	r1, #2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f004 f815 	bl	80047f8 <CRC_calc>
 80007ce:	4602      	mov	r2, r0
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <ColorToEEPROM+0x64>)
 80007d2:	601a      	str	r2, [r3, #0]
	I2C2_SendData(0x00, (uint8_t *)Led_Get_Arr_Color(), 6);
 80007d4:	f000 f912 	bl	80009fc <Led_Get_Arr_Color>
 80007d8:	4603      	mov	r3, r0
 80007da:	2206      	movs	r2, #6
 80007dc:	4619      	mov	r1, r3
 80007de:	2000      	movs	r0, #0
 80007e0:	f004 fd34 	bl	800524c <I2C2_SendData>
	delay(5);
 80007e4:	2005      	movs	r0, #5
 80007e6:	f004 f833 	bl	8004850 <delay>
	I2C2_SendData(0x2A, (uint8_t *)check_sum, 4);
 80007ea:	2204      	movs	r2, #4
 80007ec:	4903      	ldr	r1, [pc, #12]	; (80007fc <ColorToEEPROM+0x64>)
 80007ee:	202a      	movs	r0, #42	; 0x2a
 80007f0:	f004 fd2c 	bl	800524c <I2C2_SendData>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2000020c 	.word	0x2000020c

08000800 <setLedI2C>:

void setLedI2C()
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
	uint16_t i2c_led[4] = {0, 0, 0, 0};
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
	uint32_t check_sum[2] = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]

	I2C2_ReadData(0x00, (uint8_t *)i2c_led, 6);
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2206      	movs	r2, #6
 800081e:	4619      	mov	r1, r3
 8000820:	2000      	movs	r0, #0
 8000822:	f004 fd7b 	bl	800531c <I2C2_ReadData>
	delay(5);
 8000826:	2005      	movs	r0, #5
 8000828:	f004 f812 	bl	8004850 <delay>
	I2C2_ReadData(0x2A, (uint8_t *)check_sum, 4);
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2204      	movs	r2, #4
 8000830:	4619      	mov	r1, r3
 8000832:	202a      	movs	r0, #42	; 0x2a
 8000834:	f004 fd72 	bl	800531c <I2C2_ReadData>

	uint32_t check = CRC_calc((uint32_t *)i2c_led, 2);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2102      	movs	r1, #2
 800083e:	4618      	mov	r0, r3
 8000840:	f003 ffda 	bl	80047f8 <CRC_calc>
 8000844:	6178      	str	r0, [r7, #20]

	if(check_sum[0] == check)
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	429a      	cmp	r2, r3
 800084c:	d106      	bne.n	800085c <setLedI2C+0x5c>
	{
		Led_Set(i2c_led[eRed], i2c_led[eGreen], i2c_led[eBlue]);
 800084e:	89bb      	ldrh	r3, [r7, #12]
 8000850:	89f9      	ldrh	r1, [r7, #14]
 8000852:	8a3a      	ldrh	r2, [r7, #16]
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f859 	bl	800090c <Led_Set>
	}
	else Led_Set(0, 0, 0);
}
 800085a:	e004      	b.n	8000866 <setLedI2C+0x66>
	else Led_Set(0, 0, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2100      	movs	r1, #0
 8000860:	2000      	movs	r0, #0
 8000862:	f000 f853 	bl	800090c <Led_Set>
}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <LDRInit>:
#include "ldr.h"
#include "ldr_driver.h"
#define N 10

void LDRInit(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8000872:	f004 ff7f 	bl	8005774 <MX_ADC1_Init>
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <LDR_Get>:

uint16_t LDR_Get(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
	uint32_t adc = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
	uint16_t adc_value = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	817b      	strh	r3, [r7, #10]

	for(int i = 0; i < N; i++)
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	e015      	b.n	80008bc <LDR_Get+0x40>
	{
		ADC1_Activate();
 8000890:	f004 ffee 	bl	8005870 <ADC1_Activate>
		adc_value = ADC1_Get();
 8000894:	f005 f828 	bl	80058e8 <ADC1_Get>
 8000898:	4603      	mov	r3, r0
 800089a:	817b      	strh	r3, [r7, #10]

		if(adc_value > 4096) // additional overflow protection
 800089c:	897b      	ldrh	r3, [r7, #10]
 800089e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008a2:	d902      	bls.n	80008aa <LDR_Get+0x2e>
		    adc_value = 4096;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	817b      	strh	r3, [r7, #10]

		adc += (4096 - adc_value);
 80008aa:	897b      	ldrh	r3, [r7, #10]
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b4:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < N; i++)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3301      	adds	r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b09      	cmp	r3, #9
 80008c0:	dde6      	ble.n	8000890 <LDR_Get+0x14>
	}
	adc_value = adc / N;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <LDR_Get+0x5c>)
 80008c6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ca:	08db      	lsrs	r3, r3, #3
 80008cc:	817b      	strh	r3, [r7, #10]

	return adc_value;
 80008ce:	897b      	ldrh	r3, [r7, #10]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	cccccccd 	.word	0xcccccccd

080008dc <LedInit>:
#include "led_driver.h"

uint16_t led[3] = {0, 0, 0};

void LedInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	MX_TIM4_Init();
 80008e0:	f005 f97e 	bl	8005be0 <MX_TIM4_Init>
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <OverflowProtection>:

static uint16_t OverflowProtection(uint16_t value)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]
    if(value > 4096)
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008f8:	d902      	bls.n	8000900 <OverflowProtection+0x18>
        return 4096;
 80008fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fe:	e000      	b.n	8000902 <OverflowProtection+0x1a>
    return value;
 8000900:	88fb      	ldrh	r3, [r7, #6]
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <Led_Set>:

void Led_Set(uint16_t red, uint16_t green, uint16_t blue)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
 8000916:	460b      	mov	r3, r1
 8000918:	80bb      	strh	r3, [r7, #4]
 800091a:	4613      	mov	r3, r2
 800091c:	807b      	strh	r3, [r7, #2]
	led[0] = OverflowProtection(red);
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ffe1 	bl	80008e8 <OverflowProtection>
 8000926:	4603      	mov	r3, r0
 8000928:	461a      	mov	r2, r3
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <Led_Set+0x4c>)
 800092c:	801a      	strh	r2, [r3, #0]
	led[1] = OverflowProtection(green);
 800092e:	88bb      	ldrh	r3, [r7, #4]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ffd9 	bl	80008e8 <OverflowProtection>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <Led_Set+0x4c>)
 800093c:	805a      	strh	r2, [r3, #2]
	led[2] = OverflowProtection(blue);
 800093e:	887b      	ldrh	r3, [r7, #2]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ffd1 	bl	80008e8 <OverflowProtection>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	4b03      	ldr	r3, [pc, #12]	; (8000958 <Led_Set+0x4c>)
 800094c:	809a      	strh	r2, [r3, #4]
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000210 	.word	0x20000210

0800095c <Led_Set_Color>:

void Led_Set_Color(color color, uint16_t value)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	460a      	mov	r2, r1
 8000966:	71fb      	strb	r3, [r7, #7]
 8000968:	4613      	mov	r3, r2
 800096a:	80bb      	strh	r3, [r7, #4]
	switch(color)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d00d      	beq.n	800098e <Led_Set_Color+0x32>
 8000972:	2b02      	cmp	r3, #2
 8000974:	d014      	beq.n	80009a0 <Led_Set_Color+0x44>
 8000976:	2b00      	cmp	r3, #0
 8000978:	d000      	beq.n	800097c <Led_Set_Color+0x20>
	{
		case eRed: led[0] = OverflowProtection(value); break;
		case eGreen: led[1] = OverflowProtection(value); break;
		case eBlue: led[2] = OverflowProtection(value); break;
		default: break;
 800097a:	e01a      	b.n	80009b2 <Led_Set_Color+0x56>
		case eRed: led[0] = OverflowProtection(value); break;
 800097c:	88bb      	ldrh	r3, [r7, #4]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ffb2 	bl	80008e8 <OverflowProtection>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <Led_Set_Color+0x60>)
 800098a:	801a      	strh	r2, [r3, #0]
 800098c:	e011      	b.n	80009b2 <Led_Set_Color+0x56>
		case eGreen: led[1] = OverflowProtection(value); break;
 800098e:	88bb      	ldrh	r3, [r7, #4]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ffa9 	bl	80008e8 <OverflowProtection>
 8000996:	4603      	mov	r3, r0
 8000998:	461a      	mov	r2, r3
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <Led_Set_Color+0x60>)
 800099c:	805a      	strh	r2, [r3, #2]
 800099e:	e008      	b.n	80009b2 <Led_Set_Color+0x56>
		case eBlue: led[2] = OverflowProtection(value); break;
 80009a0:	88bb      	ldrh	r3, [r7, #4]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ffa0 	bl	80008e8 <OverflowProtection>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <Led_Set_Color+0x60>)
 80009ae:	809a      	strh	r2, [r3, #4]
 80009b0:	bf00      	nop
	}

}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000210 	.word	0x20000210

080009c0 <Led_Get_Color>:

uint16_t Led_Get_Color(color color)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	switch(color)
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d009      	beq.n	80009e4 <Led_Get_Color+0x24>
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d00a      	beq.n	80009ea <Led_Get_Color+0x2a>
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <Led_Get_Color+0x1e>
	{
		case eRed: return led[0]; break;
		case eGreen: return led[1]; break;
		case eBlue: return led[2]; break;
		default: break;
 80009d8:	bf00      	nop
	}
	return 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	e007      	b.n	80009ee <Led_Get_Color+0x2e>
		case eRed: return led[0]; break;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <Led_Get_Color+0x38>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	e004      	b.n	80009ee <Led_Get_Color+0x2e>
		case eGreen: return led[1]; break;
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <Led_Get_Color+0x38>)
 80009e6:	885b      	ldrh	r3, [r3, #2]
 80009e8:	e001      	b.n	80009ee <Led_Get_Color+0x2e>
		case eBlue: return led[2]; break;
 80009ea:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <Led_Get_Color+0x38>)
 80009ec:	889b      	ldrh	r3, [r3, #4]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	20000210 	.word	0x20000210

080009fc <Led_Get_Arr_Color>:

uint16_t * Led_Get_Arr_Color()
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
	return led;
 8000a00:	4b02      	ldr	r3, [pc, #8]	; (8000a0c <Led_Get_Arr_Color+0x10>)
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000210 	.word	0x20000210

08000a10 <map>:

static uint16_t map(uint16_t value, uint16_t max_value)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	460a      	mov	r2, r1
 8000a1a:	80fb      	strh	r3, [r7, #6]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	80bb      	strh	r3, [r7, #4]
	uint16_t map_res = value * max_value / 4096;
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	88ba      	ldrh	r2, [r7, #4]
 8000a24:	fb02 f303 	mul.w	r3, r2, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	da01      	bge.n	8000a30 <map+0x20>
 8000a2c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a30:	131b      	asrs	r3, r3, #12
 8000a32:	81fb      	strh	r3, [r7, #14]

	return map_res;
 8000a34:	89fb      	ldrh	r3, [r7, #14]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <Led_Refresh>:

void Led_Refresh(uint16_t max_value)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	80fb      	strh	r3, [r7, #6]
	TIM4_SET_CH1(map(led[0], max_value));
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <Led_Refresh+0x54>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	88fa      	ldrh	r2, [r7, #6]
 8000a50:	4611      	mov	r1, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ffdc 	bl	8000a10 <map>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f005 f964 	bl	8005d28 <TIM4_SET_CH1>
	TIM4_SET_CH2(map(led[1], max_value));
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <Led_Refresh+0x54>)
 8000a62:	885b      	ldrh	r3, [r3, #2]
 8000a64:	88fa      	ldrh	r2, [r7, #6]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ffd1 	bl	8000a10 <map>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f005 f969 	bl	8005d48 <TIM4_SET_CH2>
	TIM4_SET_CH3(map(led[2], max_value));
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <Led_Refresh+0x54>)
 8000a78:	889b      	ldrh	r3, [r3, #4]
 8000a7a:	88fa      	ldrh	r2, [r7, #6]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ffc6 	bl	8000a10 <map>
 8000a84:	4603      	mov	r3, r0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f005 f96e 	bl	8005d68 <TIM4_SET_CH3>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000210 	.word	0x20000210

08000a98 <CONFIG>:
const char statusOK_CL0[] = {"HTTP/1.1 200 OK\r\nConnection: Keep-Alive\r\nContent-Type: text/html\r\nContent-Length: 0"};

const char statusNOTFOUND[] = {"HTTP/1.1 404 Not Found"};

void CONFIG()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
	char ContentLength[23];
	ESP_SendConstData(statusOK, strlen(statusOK), 1);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2140      	movs	r1, #64	; 0x40
 8000aa2:	480e      	ldr	r0, [pc, #56]	; (8000adc <CONFIG+0x44>)
 8000aa4:	f7ff fd7e 	bl	80005a4 <ESP_SendConstData>

	int length = strlen(htmlconfig);
 8000aa8:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8000aac:	61fb      	str	r3, [r7, #28]
	sprintf(ContentLength, "Content-Length: %04d\r\n", length);
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	69fa      	ldr	r2, [r7, #28]
 8000ab2:	490b      	ldr	r1, [pc, #44]	; (8000ae0 <CONFIG+0x48>)
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f006 fa23 	bl	8006f00 <siprintf>
	ESP_SendConstData(ContentLength, 22, 1);
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2201      	movs	r2, #1
 8000abe:	2116      	movs	r1, #22
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fd6f 	bl	80005a4 <ESP_SendConstData>
	ESP_SendConstData(htmlconfig, strlen(htmlconfig), 1);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <CONFIG+0x4c>)
 8000ace:	f7ff fd69 	bl	80005a4 <ESP_SendConstData>
}
 8000ad2:	bf00      	nop
 8000ad4:	3720      	adds	r7, #32
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	08007e78 	.word	0x08007e78
 8000ae0:	08007a38 	.word	0x08007a38
 8000ae4:	08007c58 	.word	0x08007c58

08000ae8 <CONFIG_parse>:

void CONFIG_parse()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b094      	sub	sp, #80	; 0x50
 8000aec:	af00      	add	r7, sp, #0
	char * search;
	char ssid_temp[32], paswd_temp[32];
	memset(ssid_temp, 0, 32);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	2220      	movs	r2, #32
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f006 f9f9 	bl	8006eee <memset>
	memset(paswd_temp, 0, 32);
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2220      	movs	r2, #32
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f006 f9f3 	bl	8006eee <memset>

	search = strstr(ESP_GetAnswer(), "ssid=");
 8000b08:	f7ff fdb4 	bl	8000674 <ESP_GetAnswer>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	492e      	ldr	r1, [pc, #184]	; (8000bc8 <CONFIG_parse+0xe0>)
 8000b10:	4618      	mov	r0, r3
 8000b12:	f006 fa19 	bl	8006f48 <strstr>
 8000b16:	6478      	str	r0, [r7, #68]	; 0x44
	if(search != NULL)
 8000b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d01d      	beq.n	8000b5a <CONFIG_parse+0x72>
	{
		search += 5;
 8000b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b20:	3305      	adds	r3, #5
 8000b22:	647b      	str	r3, [r7, #68]	; 0x44
		for(int i = 0; i < 32; i++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b28:	e012      	b.n	8000b50 <CONFIG_parse+0x68>
		{
			if(search[i] == '&')
 8000b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b2e:	4413      	add	r3, r2
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b26      	cmp	r3, #38	; 0x26
 8000b34:	d010      	beq.n	8000b58 <CONFIG_parse+0x70>
			{
				break;
			}

			ssid_temp[i] = search[i];
 8000b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b3a:	4413      	add	r3, r2
 8000b3c:	7819      	ldrb	r1, [r3, #0]
 8000b3e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b44:	4413      	add	r3, r2
 8000b46:	460a      	mov	r2, r1
 8000b48:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++)
 8000b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b52:	2b1f      	cmp	r3, #31
 8000b54:	dde9      	ble.n	8000b2a <CONFIG_parse+0x42>
 8000b56:	e000      	b.n	8000b5a <CONFIG_parse+0x72>
				break;
 8000b58:	bf00      	nop
		}
	}
	SetSSID(ssid_temp);
 8000b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fd92 	bl	8000688 <SetSSID>

	search = strstr(ESP_GetAnswer(), "paswd=");
 8000b64:	f7ff fd86 	bl	8000674 <ESP_GetAnswer>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	4918      	ldr	r1, [pc, #96]	; (8000bcc <CONFIG_parse+0xe4>)
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f006 f9eb 	bl	8006f48 <strstr>
 8000b72:	6478      	str	r0, [r7, #68]	; 0x44
	if(search != NULL)
 8000b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d020      	beq.n	8000bbc <CONFIG_parse+0xd4>
	{
		search += 6;
 8000b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b7c:	3306      	adds	r3, #6
 8000b7e:	647b      	str	r3, [r7, #68]	; 0x44
		for(int i = 0; i < 32; i++)
 8000b80:	2300      	movs	r3, #0
 8000b82:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b84:	e011      	b.n	8000baa <CONFIG_parse+0xc2>
		{
			if(search[i] == '&')
 8000b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b8a:	4413      	add	r3, r2
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b26      	cmp	r3, #38	; 0x26
 8000b90:	d00f      	beq.n	8000bb2 <CONFIG_parse+0xca>
			{
				break;
			}
			paswd_temp[i] = search[i];
 8000b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b96:	4413      	add	r3, r2
 8000b98:	7819      	ldrb	r1, [r3, #0]
 8000b9a:	1d3a      	adds	r2, r7, #4
 8000b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b9e:	4413      	add	r3, r2
 8000ba0:	460a      	mov	r2, r1
 8000ba2:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++)
 8000ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bac:	2b1f      	cmp	r3, #31
 8000bae:	ddea      	ble.n	8000b86 <CONFIG_parse+0x9e>
 8000bb0:	e000      	b.n	8000bb4 <CONFIG_parse+0xcc>
				break;
 8000bb2:	bf00      	nop
		}

		SetPASWD(paswd_temp);
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fd8e 	bl	80006d8 <SetPASWD>
	}
	CONFIG();
 8000bbc:	f7ff ff6c 	bl	8000a98 <CONFIG>
	//ESP_SendConstData(statusOK_CL0, strlen(statusOK_CL0), 1);
}
 8000bc0:	bf00      	nop
 8000bc2:	3750      	adds	r7, #80	; 0x50
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	08007a50 	.word	0x08007a50
 8000bcc:	08007a58 	.word	0x08007a58

08000bd0 <PICKER>:

void PICKER()
{
 8000bd0:	b5b0      	push	{r4, r5, r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af02      	add	r7, sp, #8
	char hex[7], ContentLength[23];
	hex[6] = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	ESP_SendConstData(statusOK, strlen(statusOK), 1);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2140      	movs	r1, #64	; 0x40
 8000be0:	482c      	ldr	r0, [pc, #176]	; (8000c94 <PICKER+0xc4>)
 8000be2:	f7ff fcdf 	bl	80005a4 <ESP_SendConstData>

	int length = strlen(htmlpicker1) + strlen(htmlpicker2) + 6;
 8000be6:	f44f 73bf 	mov.w	r3, #382	; 0x17e
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(ContentLength, "Content-Length: %04d\r\n", length);
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bf0:	4929      	ldr	r1, [pc, #164]	; (8000c98 <PICKER+0xc8>)
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f006 f984 	bl	8006f00 <siprintf>
	ESP_SendConstData(ContentLength, 22, 1);
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2116      	movs	r1, #22
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fcd0 	bl	80005a4 <ESP_SendConstData>

	sprintf(hex, "%02x%02x%02x", Led_Get_Color(eRed)*255/4096, Led_Get_Color(eGreen)*255/4096, Led_Get_Color(eBlue)*255/4096);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff fedb 	bl	80009c0 <Led_Get_Color>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4613      	mov	r3, r2
 8000c10:	021b      	lsls	r3, r3, #8
 8000c12:	1a9b      	subs	r3, r3, r2
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	da01      	bge.n	8000c1c <PICKER+0x4c>
 8000c18:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000c1c:	131b      	asrs	r3, r3, #12
 8000c1e:	461c      	mov	r4, r3
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff fecd 	bl	80009c0 <Led_Get_Color>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	1a9b      	subs	r3, r3, r2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	da01      	bge.n	8000c38 <PICKER+0x68>
 8000c34:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000c38:	131b      	asrs	r3, r3, #12
 8000c3a:	461d      	mov	r5, r3
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f7ff febf 	bl	80009c0 <Led_Get_Color>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461a      	mov	r2, r3
 8000c46:	4613      	mov	r3, r2
 8000c48:	021b      	lsls	r3, r3, #8
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	da01      	bge.n	8000c54 <PICKER+0x84>
 8000c50:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000c54:	131b      	asrs	r3, r3, #12
 8000c56:	f107 001c 	add.w	r0, r7, #28
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	462b      	mov	r3, r5
 8000c5e:	4622      	mov	r2, r4
 8000c60:	490e      	ldr	r1, [pc, #56]	; (8000c9c <PICKER+0xcc>)
 8000c62:	f006 f94d 	bl	8006f00 <siprintf>

	ESP_SendConstData(htmlpicker1, strlen(htmlpicker1), 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f240 1111 	movw	r1, #273	; 0x111
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <PICKER+0xd0>)
 8000c6e:	f7ff fc99 	bl	80005a4 <ESP_SendConstData>
	ESP_SendConstData(hex, 6, 0);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	2200      	movs	r2, #0
 8000c78:	2106      	movs	r1, #6
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fc92 	bl	80005a4 <ESP_SendConstData>
	ESP_SendConstData(htmlpicker2, strlen(htmlpicker2), 1);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2167      	movs	r1, #103	; 0x67
 8000c84:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <PICKER+0xd4>)
 8000c86:	f7ff fc8d 	bl	80005a4 <ESP_SendConstData>
}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bdb0      	pop	{r4, r5, r7, pc}
 8000c92:	bf00      	nop
 8000c94:	08007e78 	.word	0x08007e78
 8000c98:	08007a38 	.word	0x08007a38
 8000c9c:	08007a60 	.word	0x08007a60
 8000ca0:	08007adc 	.word	0x08007adc
 8000ca4:	08007bf0 	.word	0x08007bf0

08000ca8 <PickerParseLed>:

void PickerParseLed()
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
	char * search;
	search = strstr(ESP_GetAnswer(), "picker=%23");
 8000cae:	f7ff fce1 	bl	8000674 <ESP_GetAnswer>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4936      	ldr	r1, [pc, #216]	; (8000d90 <PickerParseLed+0xe8>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f006 f946 	bl	8006f48 <strstr>
 8000cbc:	6178      	str	r0, [r7, #20]
	if(search != NULL)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d061      	beq.n	8000d88 <PickerParseLed+0xe0>
	{
		char hex[3];
		hex[2] = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73bb      	strb	r3, [r7, #14]
		uint16_t colors[3] = {0, 0, 0};
 8000cc8:	2300      	movs	r3, #0
 8000cca:	80bb      	strh	r3, [r7, #4]
 8000ccc:	2300      	movs	r3, #0
 8000cce:	80fb      	strh	r3, [r7, #6]
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	813b      	strh	r3, [r7, #8]
		for(int i = 0, l = 0; i < 6; i += 2, l++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
 8000cdc:	e02e      	b.n	8000d3c <PickerParseLed+0x94>
		{
			int position = search - ESP_GetAnswer() + 10 + i;
 8000cde:	697c      	ldr	r4, [r7, #20]
 8000ce0:	f7ff fcc8 	bl	8000674 <ESP_GetAnswer>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	1ae3      	subs	r3, r4, r3
 8000ce8:	f103 020a 	add.w	r2, r3, #10
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	4413      	add	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
			hex[0] = ESP_GetAnswer()[position];
 8000cf2:	f7ff fcbf 	bl	8000674 <ESP_GetAnswer>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	733b      	strb	r3, [r7, #12]
			hex[1] = ESP_GetAnswer()[position + 1];
 8000d00:	f7ff fcb8 	bl	8000674 <ESP_GetAnswer>
 8000d04:	4602      	mov	r2, r0
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	737b      	strb	r3, [r7, #13]
			colors[l] = strtol(hex, NULL, 16);
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2210      	movs	r2, #16
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f006 f9b1 	bl	8007080 <strtol>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	f107 0120 	add.w	r1, r7, #32
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for(int i = 0, l = 0; i < 6; i += 2, l++)
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	3302      	adds	r3, #2
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	61bb      	str	r3, [r7, #24]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	2b05      	cmp	r3, #5
 8000d40:	ddcd      	ble.n	8000cde <PickerParseLed+0x36>
		}
		Led_Set(colors[0]*4096/255, colors[1]*4096/255, colors[2]*4096/255);
 8000d42:	88bb      	ldrh	r3, [r7, #4]
 8000d44:	031b      	lsls	r3, r3, #12
 8000d46:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <PickerParseLed+0xec>)
 8000d48:	fb82 1203 	smull	r1, r2, r2, r3
 8000d4c:	441a      	add	r2, r3
 8000d4e:	11d2      	asrs	r2, r2, #7
 8000d50:	17db      	asrs	r3, r3, #31
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	b298      	uxth	r0, r3
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	031b      	lsls	r3, r3, #12
 8000d5a:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <PickerParseLed+0xec>)
 8000d5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d60:	441a      	add	r2, r3
 8000d62:	11d2      	asrs	r2, r2, #7
 8000d64:	17db      	asrs	r3, r3, #31
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	b299      	uxth	r1, r3
 8000d6a:	893b      	ldrh	r3, [r7, #8]
 8000d6c:	031b      	lsls	r3, r3, #12
 8000d6e:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <PickerParseLed+0xec>)
 8000d70:	fb82 4203 	smull	r4, r2, r2, r3
 8000d74:	441a      	add	r2, r3
 8000d76:	11d2      	asrs	r2, r2, #7
 8000d78:	17db      	asrs	r3, r3, #31
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	461a      	mov	r2, r3
 8000d80:	f7ff fdc4 	bl	800090c <Led_Set>
		ColorToEEPROM();
 8000d84:	f7ff fd08 	bl	8000798 <ColorToEEPROM>
	}
}
 8000d88:	bf00      	nop
 8000d8a:	3724      	adds	r7, #36	; 0x24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd90      	pop	{r4, r7, pc}
 8000d90:	08007a70 	.word	0x08007a70
 8000d94:	80808081 	.word	0x80808081

08000d98 <PICKER_parse>:

void PICKER_parse()
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	PickerParseLed();
 8000d9c:	f7ff ff84 	bl	8000ca8 <PickerParseLed>

	PICKER();
 8000da0:	f7ff ff16 	bl	8000bd0 <PICKER>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <requestConstFind>:

uint8_t requestConstFind(const char * key)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	if(strstr(ESP_GetAnswer(), key) != NULL)
 8000db0:	f7ff fc60 	bl	8000674 <ESP_GetAnswer>
 8000db4:	4603      	mov	r3, r0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f006 f8c5 	bl	8006f48 <strstr>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <requestConstFind+0x20>
	{
		return 1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e001      	b.n	8000dcc <requestConstFind+0x24>
	}
	else asm("NOP");
 8000dc8:	bf00      	nop
	return 0;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <ESP_Request>:


void ESP_Request(const char ** pages, const function_pointer * functions, uint8_t number)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	4613      	mov	r3, r2
 8000de0:	71fb      	strb	r3, [r7, #7]
	uint8_t linkID = requestRefresh();
 8000de2:	f7ff fb5f 	bl	80004a4 <requestRefresh>
 8000de6:	4603      	mov	r3, r0
 8000de8:	74fb      	strb	r3, [r7, #19]
	SetLinkID(linkID);
 8000dea:	7cfb      	ldrb	r3, [r7, #19]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fc31 	bl	8000654 <SetLinkID>

	if(linkID >= 0 && linkID < 5)
 8000df2:	7cfb      	ldrb	r3, [r7, #19]
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d82d      	bhi.n	8000e54 <ESP_Request+0x80>
	{
		if(pages != NULL
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d020      	beq.n	8000e40 <ESP_Request+0x6c>
	       && functions != NULL)
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d01d      	beq.n	8000e40 <ESP_Request+0x6c>
		{
			for(int i = 0; i < number; i++)
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	e016      	b.n	8000e38 <ESP_Request+0x64>
			{
				if(requestConstFind(pages[i]))
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	4413      	add	r3, r2
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ffc7 	bl	8000da8 <requestConstFind>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d008      	beq.n	8000e32 <ESP_Request+0x5e>
				{
					functions[i]();
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	4413      	add	r3, r2
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4798      	blx	r3
					RingBuff_Clear();
 8000e2c:	f000 f87e 	bl	8000f2c <RingBuff_Clear>
					return;
 8000e30:	e010      	b.n	8000e54 <ESP_Request+0x80>
			for(int i = 0; i < number; i++)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	79fa      	ldrb	r2, [r7, #7]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	dce4      	bgt.n	8000e0a <ESP_Request+0x36>
				}
			}
		}
		ESP_SendConstData(statusNOTFOUND, strlen(statusNOTFOUND), 1);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2116      	movs	r1, #22
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <ESP_Request+0x88>)
 8000e46:	f7ff fbad 	bl	80005a4 <ESP_SendConstData>
		ESP_SendConstData(statusOK_CL0, strlen(statusOK_CL0), 1);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2153      	movs	r1, #83	; 0x53
 8000e4e:	4804      	ldr	r0, [pc, #16]	; (8000e60 <ESP_Request+0x8c>)
 8000e50:	f7ff fba8 	bl	80005a4 <ESP_SendConstData>
	}
}
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	08007f10 	.word	0x08007f10
 8000e60:	08007ebc 	.word	0x08007ebc

08000e64 <RingBuff_Init>:

uint16_t index_in, index_out;
char buffer[BUF_SIZE];

void RingBuff_Init()
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	index_in = index_out = 0;
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <RingBuff_Init+0x1c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	801a      	strh	r2, [r3, #0]
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <RingBuff_Init+0x1c>)
 8000e70:	881a      	ldrh	r2, [r3, #0]
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <RingBuff_Init+0x20>)
 8000e74:	801a      	strh	r2, [r3, #0]
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20002bcc 	.word	0x20002bcc
 8000e84:	20002fd0 	.word	0x20002fd0

08000e88 <RingBuff_Push>:

void RingBuff_Push(char element)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
	buffer[index_in++] = element;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <RingBuff_Push+0x38>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	b291      	uxth	r1, r2
 8000e9a:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <RingBuff_Push+0x38>)
 8000e9c:	8011      	strh	r1, [r2, #0]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <RingBuff_Push+0x3c>)
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	5453      	strb	r3, [r2, r1]
	index_in &= BUF_MASK;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <RingBuff_Push+0x38>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <RingBuff_Push+0x38>)
 8000eb2:	801a      	strh	r2, [r3, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20002fd0 	.word	0x20002fd0
 8000ec4:	20002bd0 	.word	0x20002bd0

08000ec8 <RingBuff_Pop>:

char RingBuff_Pop()
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
	char element = buffer[index_out++];
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <RingBuff_Pop+0x34>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	1c5a      	adds	r2, r3, #1
 8000ed4:	b291      	uxth	r1, r2
 8000ed6:	4a09      	ldr	r2, [pc, #36]	; (8000efc <RingBuff_Pop+0x34>)
 8000ed8:	8011      	strh	r1, [r2, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <RingBuff_Pop+0x38>)
 8000ede:	5c9b      	ldrb	r3, [r3, r2]
 8000ee0:	71fb      	strb	r3, [r7, #7]
	index_out &= BUF_MASK;
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <RingBuff_Pop+0x34>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <RingBuff_Pop+0x34>)
 8000eee:	801a      	strh	r2, [r3, #0]
	return element;
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	20002bcc 	.word	0x20002bcc
 8000f00:	20002bd0 	.word	0x20002bd0

08000f04 <RingBuff_IsEmpty>:

uint8_t RingBuff_IsEmpty()
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
	if (index_in == index_out)
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <RingBuff_IsEmpty+0x20>)
 8000f0a:	881a      	ldrh	r2, [r3, #0]
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <RingBuff_IsEmpty+0x24>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d101      	bne.n	8000f18 <RingBuff_IsEmpty+0x14>
		return 1;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e000      	b.n	8000f1a <RingBuff_IsEmpty+0x16>
	return 0;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20002fd0 	.word	0x20002fd0
 8000f28:	20002bcc 	.word	0x20002bcc

08000f2c <RingBuff_Clear>:

void RingBuff_Clear()
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	index_out = index_in = 0;
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <RingBuff_Clear+0x1c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	801a      	strh	r2, [r3, #0]
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <RingBuff_Clear+0x1c>)
 8000f38:	881a      	ldrh	r2, [r3, #0]
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <RingBuff_Clear+0x20>)
 8000f3c:	801a      	strh	r2, [r3, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20002fd0 	.word	0x20002fd0
 8000f4c:	20002bcc 	.word	0x20002bcc

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_Init+0x28>)
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x28>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f043 0310 	orr.w	r3, r3, #16
 8000f5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 f8c1 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f005 fe8e 	bl	8006c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f005 fe54 	bl	8006c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40022000 	.word	0x40022000

08000f7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_IncTick+0x1c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_IncTick+0x20>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a03      	ldr	r2, [pc, #12]	; (8000f9c <HAL_IncTick+0x20>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	20000010 	.word	0x20000010
 8000f9c:	20002fd4 	.word	0x20002fd4

08000fa0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <NVIC_EnableIRQ+0x2c>)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	095b      	lsrs	r3, r3, #5
 8001016:	79fa      	ldrb	r2, [r7, #7]
 8001018:	f002 021f 	and.w	r2, r2, #31
 800101c:	2001      	movs	r0, #1
 800101e:	fa00 f202 	lsl.w	r2, r0, r2
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100

08001034 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	da0b      	bge.n	8001060 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	490d      	ldr	r1, [pc, #52]	; (8001080 <NVIC_SetPriority+0x4c>)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	3b04      	subs	r3, #4
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105e:	e009      	b.n	8001074 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	4908      	ldr	r1, [pc, #32]	; (8001084 <NVIC_SetPriority+0x50>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00
 8001084:	e000e100 	.word	0xe000e100

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	2201      	movs	r2, #1
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	1e5a      	subs	r2, r3, #1
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	401a      	ands	r2, r3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ce:	2101      	movs	r1, #1
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	1e59      	subs	r1, r3, #1
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff55 	bl	8000fa0 <NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff6a 	bl	8000fe8 <NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ffb4 	bl	8001088 <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff83 	bl	8001034 <NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5d 	bl	8001004 <NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001158:	4b02      	ldr	r3, [pc, #8]	; (8001164 <HAL_RCC_GetHCLKFreq+0x10>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	20000018 	.word	0x20000018

08001168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800116c:	f7ff fff2 	bl	8001154 <HAL_RCC_GetHCLKFreq>
 8001170:	4601      	mov	r1, r0
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	0adb      	lsrs	r3, r3, #11
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	4a03      	ldr	r2, [pc, #12]	; (800118c <HAL_RCC_GetPCLK2Freq+0x24>)
 800117e:	5cd3      	ldrb	r3, [r2, r3]
 8001180:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001184:	4618      	mov	r0, r3
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40021000 	.word	0x40021000
 800118c:	08007f48 	.word	0x08007f48

08001190 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	220f      	movs	r2, #15
 800119e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <HAL_RCC_GetClockConfig+0x58>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0203 	and.w	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <HAL_RCC_GetClockConfig+0x58>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_RCC_GetClockConfig+0x58>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_RCC_GetClockConfig+0x58>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	08db      	lsrs	r3, r3, #3
 80011ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	611a      	str	r2, [r3, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_RCC_GetClockConfig+0x5c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0207 	and.w	r2, r3, #7
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40022000 	.word	0x40022000

080011f0 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e01d      	b.n	800123e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d106      	bne.n	800121c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f815 	bl	8001246 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2202      	movs	r2, #2
 8001220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3304      	adds	r3, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4610      	mov	r0, r2
 8001230:	f000 f958 	bl	80014e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	68d2      	ldr	r2, [r2, #12]
 800126a:	f042 0201 	orr.w	r2, r2, #1
 800126e:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6812      	ldr	r2, [r2, #0]
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	f042 0201 	orr.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d122      	bne.n	80012e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d11b      	bne.n	80012e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f06f 0202 	mvn.w	r2, #2
 80012b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f8ed 	bl	80014ae <HAL_TIM_IC_CaptureCallback>
 80012d4:	e005      	b.n	80012e2 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 f8e0 	bl	800149c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 f8ef 	bl	80014c0 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d122      	bne.n	800133c <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b04      	cmp	r3, #4
 8001302:	d11b      	bne.n	800133c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f06f 0204 	mvn.w	r2, #4
 800130c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2202      	movs	r2, #2
 8001312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f8c3 	bl	80014ae <HAL_TIM_IC_CaptureCallback>
 8001328:	e005      	b.n	8001336 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 f8b6 	bl	800149c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f8c5 	bl	80014c0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b08      	cmp	r3, #8
 8001348:	d122      	bne.n	8001390 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	2b08      	cmp	r3, #8
 8001356:	d11b      	bne.n	8001390 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f06f 0208 	mvn.w	r2, #8
 8001360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2204      	movs	r2, #4
 8001366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f899 	bl	80014ae <HAL_TIM_IC_CaptureCallback>
 800137c:	e005      	b.n	800138a <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f88c 	bl	800149c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f89b 	bl	80014c0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	2b10      	cmp	r3, #16
 800139c:	d122      	bne.n	80013e4 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	d11b      	bne.n	80013e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f06f 0210 	mvn.w	r2, #16
 80013b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2208      	movs	r2, #8
 80013ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f86f 	bl	80014ae <HAL_TIM_IC_CaptureCallback>
 80013d0:	e005      	b.n	80013de <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f862 	bl	800149c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f871 	bl	80014c0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d10e      	bne.n	8001410 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d107      	bne.n	8001410 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f06f 0201 	mvn.w	r2, #1
 8001408:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f005 fbec 	bl	8006be8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141a:	2b80      	cmp	r3, #128	; 0x80
 800141c:	d10e      	bne.n	800143c <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001428:	2b80      	cmp	r3, #128	; 0x80
 800142a:	d107      	bne.n	800143c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001434:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f8c3 	bl	80015c2 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001446:	2b40      	cmp	r3, #64	; 0x40
 8001448:	d10e      	bne.n	8001468 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001454:	2b40      	cmp	r3, #64	; 0x40
 8001456:	d107      	bne.n	8001468 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001460:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f835 	bl	80014d2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	f003 0320 	and.w	r3, r3, #32
 8001472:	2b20      	cmp	r3, #32
 8001474:	d10e      	bne.n	8001494 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	f003 0320 	and.w	r3, r3, #32
 8001480:	2b20      	cmp	r3, #32
 8001482:	d107      	bne.n	8001494 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f06f 0220 	mvn.w	r2, #32
 800148c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f88e 	bl	80015b0 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a2a      	ldr	r2, [pc, #168]	; (80015a4 <TIM_Base_SetConfig+0xc0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d00b      	beq.n	8001518 <TIM_Base_SetConfig+0x34>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001506:	d007      	beq.n	8001518 <TIM_Base_SetConfig+0x34>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a27      	ldr	r2, [pc, #156]	; (80015a8 <TIM_Base_SetConfig+0xc4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d003      	beq.n	8001518 <TIM_Base_SetConfig+0x34>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a26      	ldr	r2, [pc, #152]	; (80015ac <TIM_Base_SetConfig+0xc8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d108      	bne.n	800152a <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800151e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <TIM_Base_SetConfig+0xc0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00b      	beq.n	800154a <TIM_Base_SetConfig+0x66>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001538:	d007      	beq.n	800154a <TIM_Base_SetConfig+0x66>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a1a      	ldr	r2, [pc, #104]	; (80015a8 <TIM_Base_SetConfig+0xc4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d003      	beq.n	800154a <TIM_Base_SetConfig+0x66>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a19      	ldr	r2, [pc, #100]	; (80015ac <TIM_Base_SetConfig+0xc8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d108      	bne.n	800155c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001562:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <TIM_Base_SetConfig+0xc0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d103      	bne.n	8001594 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	615a      	str	r2, [r3, #20]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	40012c00 	.word	0x40012c00
 80015a8:	40000400 	.word	0x40000400
 80015ac:	40000800 	.word	0x40000800

080015b0 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b01      	cmp	r3, #1
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001626:	2301      	movs	r3, #1
 8001628:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800162a:	4813      	ldr	r0, [pc, #76]	; (8001678 <LL_ADC_CommonInit+0x5c>)
 800162c:	f7ff ffe4 	bl	80015f8 <LL_ADC_IsEnabled>
 8001630:	4604      	mov	r4, r0
 8001632:	4812      	ldr	r0, [pc, #72]	; (800167c <LL_ADC_CommonInit+0x60>)
 8001634:	f7ff ffe0 	bl	80015f8 <LL_ADC_IsEnabled>
 8001638:	4603      	mov	r3, r0
 800163a:	4323      	orrs	r3, r4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d114      	bne.n	800166a <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d009      	beq.n	800165c <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	e008      	b.n	800166e <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	e001      	b.n	800166e <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800166a:	2300      	movs	r3, #0
 800166c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	40012400 	.word	0x40012400
 800167c:	40012800 	.word	0x40012800

08001680 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800168a:	2301      	movs	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffb2 	bl	80015f8 <LL_ADC_IsEnabled>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d112      	bne.n	80016c0 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	e001      	b.n	80016c4 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b084      	sub	sp, #16
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff8b 	bl	80015f8 <LL_ADC_IsEnabled>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d131      	bne.n	800174c <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00c      	beq.n	800170a <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	6859      	ldr	r1, [r3, #4]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	430b      	orrs	r3, r1
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	e008      	b.n	800171c <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8001724:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	6811      	ldr	r1, [r2, #0]
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	68d2      	ldr	r2, [r2, #12]
 8001730:	4311      	orrs	r1, r2
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	6912      	ldr	r2, [r2, #16]
 8001736:	430a      	orrs	r2, r1
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4619      	mov	r1, r3
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff45 	bl	80015d4 <LL_ADC_REG_SetSequencerLength>
 800174a:	e001      	b.n	8001750 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001764:	4905      	ldr	r1, [pc, #20]	; (800177c <LL_EXTI_EnableIT_0_31+0x20>)
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <LL_EXTI_EnableIT_0_31+0x20>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40010400 	.word	0x40010400

08001780 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001788:	4905      	ldr	r1, [pc, #20]	; (80017a0 <LL_EXTI_DisableIT_0_31+0x20>)
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <LL_EXTI_DisableIT_0_31+0x20>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	43db      	mvns	r3, r3
 8001792:	4013      	ands	r3, r2
 8001794:	600b      	str	r3, [r1, #0]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	40010400 	.word	0x40010400

080017a4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80017ac:	4905      	ldr	r1, [pc, #20]	; (80017c4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]

}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40010400 	.word	0x40010400

080017c8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80017d0:	4905      	ldr	r1, [pc, #20]	; (80017e8 <LL_EXTI_DisableEvent_0_31+0x20>)
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <LL_EXTI_DisableEvent_0_31+0x20>)
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	43db      	mvns	r3, r3
 80017da:	4013      	ands	r3, r2
 80017dc:	604b      	str	r3, [r1, #4]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40010400 	.word	0x40010400

080017ec <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80017f4:	4905      	ldr	r1, [pc, #20]	; (800180c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]

}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40010400 	.word	0x40010400

08001810 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001818:	4905      	ldr	r1, [pc, #20]	; (8001830 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	43db      	mvns	r3, r3
 8001822:	4013      	ands	r3, r2
 8001824:	608b      	str	r3, [r1, #8]

}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	40010400 	.word	0x40010400

08001834 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800183c:	4905      	ldr	r1, [pc, #20]	; (8001854 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4313      	orrs	r3, r2
 8001846:	60cb      	str	r3, [r1, #12]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40010400 	.word	0x40010400

08001858 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001860:	4905      	ldr	r1, [pc, #20]	; (8001878 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	43db      	mvns	r3, r3
 800186a:	4013      	ands	r3, r2
 800186c:	60cb      	str	r3, [r1, #12]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	40010400 	.word	0x40010400

0800187c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001884:	2301      	movs	r3, #1
 8001886:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	791b      	ldrb	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d060      	beq.n	8001952 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d066      	beq.n	8001966 <LL_EXTI_Init+0xea>
    {
      switch (EXTI_InitStruct->Mode)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	795b      	ldrb	r3, [r3, #5]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d00e      	beq.n	80018be <LL_EXTI_Init+0x42>
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d017      	beq.n	80018d4 <LL_EXTI_Init+0x58>
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d120      	bne.n	80018ea <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff8b 	bl	80017c8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff50 	bl	800175c <LL_EXTI_EnableIT_0_31>
          break;
 80018bc:	e018      	b.n	80018f0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff5c 	bl	8001780 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff69 	bl	80017a4 <LL_EXTI_EnableEvent_0_31>
          break;
 80018d2:	e00d      	b.n	80018f0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff3f 	bl	800175c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff5e 	bl	80017a4 <LL_EXTI_EnableEvent_0_31>
          break;
 80018e8:	e002      	b.n	80018f0 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 80018ea:	2300      	movs	r3, #0
 80018ec:	73fb      	strb	r3, [r7, #15]
          break;
 80018ee:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	799b      	ldrb	r3, [r3, #6]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d036      	beq.n	8001966 <LL_EXTI_Init+0xea>
      {
        switch (EXTI_InitStruct->Trigger)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	799b      	ldrb	r3, [r3, #6]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d00e      	beq.n	800191e <LL_EXTI_Init+0xa2>
 8001900:	2b03      	cmp	r3, #3
 8001902:	d017      	beq.n	8001934 <LL_EXTI_Init+0xb8>
 8001904:	2b01      	cmp	r3, #1
 8001906:	d120      	bne.n	800194a <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ffa3 	bl	8001858 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff68 	bl	80017ec <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800191c:	e023      	b.n	8001966 <LL_EXTI_Init+0xea>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ff74 	bl	8001810 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff81 	bl	8001834 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001932:	e018      	b.n	8001966 <LL_EXTI_Init+0xea>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff57 	bl	80017ec <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff76 	bl	8001834 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001948:	e00d      	b.n	8001966 <LL_EXTI_Init+0xea>
          default:
            status = ERROR;
 800194a:	2300      	movs	r3, #0
 800194c:	73fb      	strb	r3, [r7, #15]
            break;
 800194e:	bf00      	nop
 8001950:	e009      	b.n	8001966 <LL_EXTI_Init+0xea>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff12 	bl	8001780 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff31 	bl	80017c8 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001970:	b490      	push	{r4, r7}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	461a      	mov	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	0e1b      	lsrs	r3, r3, #24
 8001984:	4413      	add	r3, r2
 8001986:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001988:	6822      	ldr	r2, [r4, #0]
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	210f      	movs	r1, #15
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	401a      	ands	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	fa93 f3a3 	rbit	r3, r3
 80019b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	6023      	str	r3, [r4, #0]
}
 80019c6:	bf00      	nop
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc90      	pop	{r4, r7}
 80019ce:	4770      	bx	lr

080019d0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80019d0:	b490      	push	{r4, r7}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	461a      	mov	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	0e1b      	lsrs	r3, r3, #24
 80019e4:	4413      	add	r3, r2
 80019e6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80019e8:	6822      	ldr	r2, [r4, #0]
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	613b      	str	r3, [r7, #16]
  return(result);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	2103      	movs	r1, #3
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	401a      	ands	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	61bb      	str	r3, [r7, #24]
  return(result);
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	4313      	orrs	r3, r2
 8001a24:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8001a26:	bf00      	nop
 8001a28:	3720      	adds	r7, #32
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc90      	pop	{r4, r7}
 8001a2e:	4770      	bx	lr

08001a30 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8001a30:	b490      	push	{r4, r7}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	0e1b      	lsrs	r3, r3, #24
 8001a44:	4413      	add	r3, r2
 8001a46:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001a48:	6822      	ldr	r2, [r4, #0]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	613b      	str	r3, [r7, #16]
  return(result);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	fab3 f383 	clz	r3, r3
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	2104      	movs	r1, #4
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	401a      	ands	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	fa93 f3a3 	rbit	r3, r3
 8001a72:	61bb      	str	r3, [r7, #24]
  return(result);
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fab3 f383 	clz	r3, r3
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	4313      	orrs	r3, r2
 8001a84:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8001a86:	bf00      	nop
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc90      	pop	{r4, r7}
 8001a8e:	4770      	bx	lr

08001a90 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	613b      	str	r3, [r7, #16]
  return(result);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	60da      	str	r2, [r3, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b088      	sub	sp, #32
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	0c1b      	lsrs	r3, r3, #16
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001af2:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0U)
 8001afa:	e040      	b.n	8001b7e <LL_GPIO_Init+0xac>
  {
    /* skip if bit is not set */
    if ((pinmask & (1U << pinpos)) != 0U)
 8001afc:	2201      	movs	r2, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	409a      	lsls	r2, r3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d036      	beq.n	8001b78 <LL_GPIO_Init+0xa6>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	2b07      	cmp	r3, #7
 8001b0e:	d806      	bhi.n	8001b1e <LL_GPIO_Init+0x4c>
      {
        currentpin = (0x00000101U << pinpos);
 8001b10:	f240 1201 	movw	r2, #257	; 0x101
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	61bb      	str	r3, [r7, #24]
 8001b1c:	e008      	b.n	8001b30 <LL_GPIO_Init+0x5e>
      }
      else
      {
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3b08      	subs	r3, #8
 8001b22:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b2e:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	461a      	mov	r2, r3
 8001b36:	69b9      	ldr	r1, [r7, #24]
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff19 	bl	8001970 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	461a      	mov	r2, r3
 8001b44:	69b9      	ldr	r1, [r7, #24]
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffa2 	bl	8001a90 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d003      	beq.n	8001b5c <LL_GPIO_Init+0x8a>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	d10d      	bne.n	8001b78 <LL_GPIO_Init+0xa6>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	461a      	mov	r2, r3
 8001b62:	69b9      	ldr	r1, [r7, #24]
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff33 	bl	80019d0 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	69b9      	ldr	r1, [r7, #24]
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ff5c 	bl	8001a30 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0U)
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1b8      	bne.n	8001afc <LL_GPIO_Init+0x2a>
  }
  return (SUCCESS);
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f043 0201 	orr.w	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	601a      	str	r2, [r3, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 0201 	bic.w	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	601a      	str	r2, [r3, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001be4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	609a      	str	r2, [r3, #8]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
	...

08001c00 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8001c00:	b490      	push	{r4, r7}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8001c0e:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8001c10:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	4a3f      	ldr	r2, [pc, #252]	; (8001d14 <LL_I2C_ConfigSpeed+0x114>)
 8001c16:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1a:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c24:	ea43 0204 	orr.w	r2, r3, r4
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4938      	ldr	r1, [pc, #224]	; (8001d18 <LL_I2C_ConfigSpeed+0x118>)
 8001c38:	428b      	cmp	r3, r1
 8001c3a:	d801      	bhi.n	8001c40 <LL_I2C_ConfigSpeed+0x40>
 8001c3c:	1c63      	adds	r3, r4, #1
 8001c3e:	e008      	b.n	8001c52 <LL_I2C_ConfigSpeed+0x52>
 8001c40:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001c44:	fb03 f304 	mul.w	r3, r3, r4
 8001c48:	4934      	ldr	r1, [pc, #208]	; (8001d1c <LL_I2C_ConfigSpeed+0x11c>)
 8001c4a:	fba1 1303 	umull	r1, r3, r1, r3
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	3301      	adds	r3, #1
 8001c52:	431a      	orrs	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a2f      	ldr	r2, [pc, #188]	; (8001d18 <LL_I2C_ConfigSpeed+0x118>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d939      	bls.n	8001cd4 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d117      	bne.n	8001c96 <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d009      	beq.n	8001c90 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c8e:	e01d      	b.n	8001ccc <LL_I2C_ConfigSpeed+0xcc>
 8001c90:	f248 0301 	movw	r3, #32769	; 0x8001
 8001c94:	e01a      	b.n	8001ccc <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009a      	lsls	r2, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00b      	beq.n	8001cc8 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009a      	lsls	r2, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc6:	e001      	b.n	8001ccc <LL_I2C_ConfigSpeed+0xcc>
 8001cc8:	f248 0301 	movw	r3, #32769	; 0x8001
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	ea43 0402 	orr.w	r4, r3, r2
 8001cd2:	e010      	b.n	8001cf6 <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d905      	bls.n	8001cf2 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf0:	e000      	b.n	8001cf4 <LL_I2C_ConfigSpeed+0xf4>
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8001cfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d02:	ea43 0204 	orr.w	r2, r3, r4
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	61da      	str	r2, [r3, #28]
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc90      	pop	{r4, r7}
 8001d12:	4770      	bx	lr
 8001d14:	431bde83 	.word	0x431bde83
 8001d18:	000186a0 	.word	0x000186a0
 8001d1c:	10624dd3 	.word	0x10624dd3

08001d20 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 021a 	bic.w	r2, r3, #26
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	601a      	str	r2, [r3, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	601a      	str	r2, [r3, #0]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ff1d 	bl	8001bb2 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001d78:	f107 0308 	add.w	r3, r7, #8
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 f87b 	bl	8001e78 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8001d82:	6939      	ldr	r1, [r7, #16]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff37 	bl	8001c00 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68d9      	ldr	r1, [r3, #12]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ff17 	bl	8001bd0 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4619      	mov	r1, r3
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ffb9 	bl	8001d20 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff fef0 	bl	8001b94 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ffc2 	bl	8001d44 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001dc0:	2301      	movs	r3, #1
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <LL_RCC_GetSysClkSource+0x14>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40021000 	.word	0x40021000

08001de4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <LL_RCC_GetAHBPrescaler+0x14>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	40021000 	.word	0x40021000

08001dfc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	40021000 	.word	0x40021000

08001e14 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <LL_RCC_GetAPB2Prescaler+0x14>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	40021000 	.word	0x40021000

08001e2c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <LL_RCC_PLL_GetMainSource+0x14>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	40021000 	.word	0x40021000

08001e44 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	40021000 	.word	0x40021000

08001e5c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <LL_RCC_PLL_GetPrediv+0x18>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	0c5b      	lsrs	r3, r3, #17
 8001e66:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000

08001e78 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001e80:	f000 f820 	bl	8001ec4 <RCC_GetSystemClockFreq>
 8001e84:	4602      	mov	r2, r0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 f83a 	bl	8001f08 <RCC_GetHCLKClockFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f848 	bl	8001f34 <RCC_GetPCLK1ClockFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f854 	bl	8001f5c <RCC_GetPCLK2ClockFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60da      	str	r2, [r3, #12]
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001ece:	f7ff ff7d 	bl	8001dcc <LL_RCC_GetSysClkSource>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d006      	beq.n	8001ee6 <RCC_GetSystemClockFreq+0x22>
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d007      	beq.n	8001eec <RCC_GetSystemClockFreq+0x28>
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d109      	bne.n	8001ef4 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <RCC_GetSystemClockFreq+0x40>)
 8001ee2:	607b      	str	r3, [r7, #4]
      break;
 8001ee4:	e009      	b.n	8001efa <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <RCC_GetSystemClockFreq+0x40>)
 8001ee8:	607b      	str	r3, [r7, #4]
      break;
 8001eea:	e006      	b.n	8001efa <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001eec:	f000 f84a 	bl	8001f84 <RCC_PLL_GetFreqDomain_SYS>
 8001ef0:	6078      	str	r0, [r7, #4]
      break;
 8001ef2:	e002      	b.n	8001efa <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <RCC_GetSystemClockFreq+0x40>)
 8001ef6:	607b      	str	r3, [r7, #4]
      break;
 8001ef8:	bf00      	nop
  }

  return frequency;
 8001efa:	687b      	ldr	r3, [r7, #4]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	007a1200 	.word	0x007a1200

08001f08 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001f10:	f7ff ff68 	bl	8001de4 <LL_RCC_GetAHBPrescaler>
 8001f14:	4603      	mov	r3, r0
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <RCC_GetHCLKClockFreq+0x28>)
 8001f1e:	5cd3      	ldrb	r3, [r2, r3]
 8001f20:	461a      	mov	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	40d3      	lsrs	r3, r2
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	08007f38 	.word	0x08007f38

08001f34 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001f3c:	f7ff ff5e 	bl	8001dfc <LL_RCC_GetAPB1Prescaler>
 8001f40:	4603      	mov	r3, r0
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <RCC_GetPCLK1ClockFreq+0x24>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	40d3      	lsrs	r3, r2
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	08007f48 	.word	0x08007f48

08001f5c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001f64:	f7ff ff56 	bl	8001e14 <LL_RCC_GetAPB2Prescaler>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	0adb      	lsrs	r3, r3, #11
 8001f6c:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <RCC_GetPCLK2ClockFreq+0x24>)
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	461a      	mov	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	40d3      	lsrs	r3, r2
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	08007f48 	.word	0x08007f48

08001f84 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001f92:	f7ff ff4b 	bl	8001e2c <LL_RCC_PLL_GetMainSource>
 8001f96:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa2:	d003      	beq.n	8001fac <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001fa4:	e00b      	b.n	8001fbe <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8001fa8:	607b      	str	r3, [r7, #4]
      break;
 8001faa:	e00b      	b.n	8001fc4 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001fac:	f7ff ff56 	bl	8001e5c <LL_RCC_PLL_GetPrediv>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	607b      	str	r3, [r7, #4]
      break;
 8001fbc:	e002      	b.n	8001fc4 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8001fc0:	607b      	str	r3, [r7, #4]
      break;
 8001fc2:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001fc4:	f7ff ff3e 	bl	8001e44 <LL_RCC_PLL_GetMultiplicator>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	0c9b      	lsrs	r3, r3, #18
 8001fcc:	3302      	adds	r3, #2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	003d0900 	.word	0x003d0900
 8001fe0:	007a1200 	.word	0x007a1200

08001fe4 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff4:	2b40      	cmp	r3, #64	; 0x40
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b29b      	uxth	r3, r3
 8002016:	461a      	mov	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	611a      	str	r2, [r3, #16]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002030:	2300      	movs	r3, #0
 8002032:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ffd5 	bl	8001fe4 <LL_SPI_IsEnabled>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d139      	bne.n	80020b4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002048:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	6811      	ldr	r1, [r2, #0]
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	6852      	ldr	r2, [r2, #4]
 8002054:	4311      	orrs	r1, r2
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	6892      	ldr	r2, [r2, #8]
 800205a:	4311      	orrs	r1, r2
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	68d2      	ldr	r2, [r2, #12]
 8002060:	4311      	orrs	r1, r2
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	6912      	ldr	r2, [r2, #16]
 8002066:	4311      	orrs	r1, r2
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	6952      	ldr	r2, [r2, #20]
 800206c:	4311      	orrs	r1, r2
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	6992      	ldr	r2, [r2, #24]
 8002072:	4311      	orrs	r1, r2
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	69d2      	ldr	r2, [r2, #28]
 8002078:	4311      	orrs	r1, r2
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	6a12      	ldr	r2, [r2, #32]
 800207e:	430a      	orrs	r2, r1
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f023 0204 	bic.w	r2, r3, #4
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	0c1b      	lsrs	r3, r3, #16
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020a2:	d105      	bne.n	80020b0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	4619      	mov	r1, r3
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ffac 	bl	8002008 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	f043 0201 	orr.w	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	615a      	str	r2, [r3, #20]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
	...

08002194 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a27      	ldr	r2, [pc, #156]	; (8002248 <LL_TIM_Init+0xb4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d00b      	beq.n	80021c8 <LL_TIM_Init+0x34>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b6:	d007      	beq.n	80021c8 <LL_TIM_Init+0x34>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a24      	ldr	r2, [pc, #144]	; (800224c <LL_TIM_Init+0xb8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d003      	beq.n	80021c8 <LL_TIM_Init+0x34>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a23      	ldr	r2, [pc, #140]	; (8002250 <LL_TIM_Init+0xbc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d106      	bne.n	80021d6 <LL_TIM_Init+0x42>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <LL_TIM_Init+0xb4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00b      	beq.n	80021f6 <LL_TIM_Init+0x62>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e4:	d007      	beq.n	80021f6 <LL_TIM_Init+0x62>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a18      	ldr	r2, [pc, #96]	; (800224c <LL_TIM_Init+0xb8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d003      	beq.n	80021f6 <LL_TIM_Init+0x62>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a17      	ldr	r2, [pc, #92]	; (8002250 <LL_TIM_Init+0xbc>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d106      	bne.n	8002204 <LL_TIM_Init+0x70>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4619      	mov	r1, r3
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff61 	bl	80020d8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	4619      	mov	r1, r3
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ff4e 	bl	80020be <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a08      	ldr	r2, [pc, #32]	; (8002248 <LL_TIM_Init+0xb4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d105      	bne.n	8002236 <LL_TIM_Init+0xa2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	7c1b      	ldrb	r3, [r3, #16]
 800222e:	4619      	mov	r1, r3
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff5e 	bl	80020f2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ff9c 	bl	8002174 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800223c:	2301      	movs	r3, #1
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40012c00 	.word	0x40012c00
 800224c:	40000400 	.word	0x40000400
 8002250:	40000800 	.word	0x40000800

08002254 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002260:	2300      	movs	r3, #0
 8002262:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b10      	cmp	r3, #16
 8002268:	d012      	beq.n	8002290 <LL_TIM_OC_Init+0x3c>
 800226a:	2b10      	cmp	r3, #16
 800226c:	d802      	bhi.n	8002274 <LL_TIM_OC_Init+0x20>
 800226e:	2b01      	cmp	r3, #1
 8002270:	d007      	beq.n	8002282 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002272:	e022      	b.n	80022ba <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8002274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002278:	d011      	beq.n	800229e <LL_TIM_OC_Init+0x4a>
 800227a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227e:	d015      	beq.n	80022ac <LL_TIM_OC_Init+0x58>
      break;
 8002280:	e01b      	b.n	80022ba <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 f81d 	bl	80022c4 <OC1Config>
 800228a:	4603      	mov	r3, r0
 800228c:	75fb      	strb	r3, [r7, #23]
      break;
 800228e:	e014      	b.n	80022ba <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f882 	bl	800239c <OC2Config>
 8002298:	4603      	mov	r3, r0
 800229a:	75fb      	strb	r3, [r7, #23]
      break;
 800229c:	e00d      	b.n	80022ba <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f8eb 	bl	800247c <OC3Config>
 80022a6:	4603      	mov	r3, r0
 80022a8:	75fb      	strb	r3, [r7, #23]
      break;
 80022aa:	e006      	b.n	80022ba <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f954 	bl	800255c <OC4Config>
 80022b4:	4603      	mov	r3, r0
 80022b6:	75fb      	strb	r3, [r7, #23]
      break;
 80022b8:	bf00      	nop
  }

  return result;
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	f023 0201 	bic.w	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f023 0303 	bic.w	r3, r3, #3
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f023 0202 	bic.w	r2, r3, #2
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f023 0201 	bic.w	r2, r3, #1
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a1a      	ldr	r2, [pc, #104]	; (8002398 <OC1Config+0xd4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d11e      	bne.n	8002370 <OC1Config+0xac>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f023 0208 	bic.w	r2, r3, #8
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4313      	orrs	r3, r2
 8002340:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f023 0204 	bic.w	r2, r3, #4
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4313      	orrs	r3, r2
 8002350:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4619      	mov	r1, r3
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff fec2 	bl	800210c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800238e:	2301      	movs	r3, #1
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40012c00 	.word	0x40012c00

0800239c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	f023 0210 	bic.w	r2, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f023 0220 	bic.w	r2, r3, #32
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f023 0210 	bic.w	r2, r3, #16
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	4313      	orrs	r3, r2
 8002406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <OC2Config+0xdc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d11f      	bne.n	8002450 <OC2Config+0xb4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	019b      	lsls	r3, r3, #6
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	019b      	lsls	r3, r3, #6
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4619      	mov	r1, r3
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fe5f 	bl	8002126 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800246e:	2301      	movs	r3, #1
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40012c00 	.word	0x40012c00

0800247c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f023 0303 	bic.w	r3, r3, #3
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	4313      	orrs	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a1b      	ldr	r2, [pc, #108]	; (8002558 <OC3Config+0xdc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d11f      	bne.n	800252e <OC3Config+0xb2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	029b      	lsls	r3, r3, #10
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	029b      	lsls	r3, r3, #10
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	015b      	lsls	r3, r3, #5
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4619      	mov	r1, r3
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff fdfd 	bl	8002140 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800254c:	2301      	movs	r3, #1
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40012c00 	.word	0x40012c00

0800255c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002596:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	031b      	lsls	r3, r3, #12
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	031b      	lsls	r3, r3, #12
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <OC4Config+0xac>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d107      	bne.n	80025e0 <OC4Config+0x84>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	019b      	lsls	r3, r3, #6
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4619      	mov	r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff fdb1 	bl	800215a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40012c00 	.word	0x40012c00

0800260c <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800261c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002620:	bf0c      	ite	eq
 8002622:	2301      	moveq	r3, #1
 8002624:	2300      	movne	r3, #0
 8002626:	b2db      	uxtb	r3, r3
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	611a      	str	r2, [r3, #16]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	615a      	str	r2, [r3, #20]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
	...

0800267c <LL_USART_SetBaudRate>:
  * @param  PeriphClk Peripheral Clock
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	009a      	lsls	r2, r3, #2
 8002692:	441a      	add	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	4a25      	ldr	r2, [pc, #148]	; (8002734 <LL_USART_SetBaudRate+0xb8>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	b299      	uxth	r1, r3
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	009a      	lsls	r2, r3, #2
 80026b4:	441a      	add	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <LL_USART_SetBaudRate+0xb8>)
 80026c0:	fba3 0302 	umull	r0, r3, r3, r2
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	2064      	movs	r0, #100	; 0x64
 80026c8:	fb00 f303 	mul.w	r3, r0, r3
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	3332      	adds	r3, #50	; 0x32
 80026d2:	4a18      	ldr	r2, [pc, #96]	; (8002734 <LL_USART_SetBaudRate+0xb8>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	440b      	add	r3, r1
 80026e4:	b299      	uxth	r1, r3
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	009a      	lsls	r2, r3, #2
 80026f0:	441a      	add	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <LL_USART_SetBaudRate+0xb8>)
 80026fc:	fba3 0302 	umull	r0, r3, r3, r2
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	2064      	movs	r0, #100	; 0x64
 8002704:	fb00 f303 	mul.w	r3, r0, r3
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	3332      	adds	r3, #50	; 0x32
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <LL_USART_SetBaudRate+0xb8>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	b29b      	uxth	r3, r3
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	b29b      	uxth	r3, r3
 800271e:	440b      	add	r3, r1
 8002720:	b29b      	uxth	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	609a      	str	r2, [r3, #8]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	51eb851f 	.word	0x51eb851f

08002738 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002742:	2300      	movs	r3, #0
 8002744:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff ff5e 	bl	800260c <LL_USART_IsEnabled>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d145      	bne.n	80027e2 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800275e:	f023 030c 	bic.w	r3, r3, #12
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	6851      	ldr	r1, [r2, #4]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	68d2      	ldr	r2, [r2, #12]
 800276a:	4311      	orrs	r1, r2
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	6912      	ldr	r2, [r2, #16]
 8002770:	430a      	orrs	r2, r1
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4619      	mov	r1, r3
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ff57 	bl	8002632 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	4619      	mov	r1, r3
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ff63 	bl	8002656 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002790:	f107 0308 	add.w	r3, r7, #8
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fb6f 	bl	8001e78 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a13      	ldr	r2, [pc, #76]	; (80027ec <LL_USART_Init+0xb4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d102      	bne.n	80027a8 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	e00c      	b.n	80027c2 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a11      	ldr	r2, [pc, #68]	; (80027f0 <LL_USART_Init+0xb8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d102      	bne.n	80027b6 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	e005      	b.n	80027c2 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <LL_USART_Init+0xbc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00c      	beq.n	80027e2 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 80027d0:	2301      	movs	r3, #1
 80027d2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	69b9      	ldr	r1, [r7, #24]
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ff4d 	bl	800267c <LL_USART_SetBaudRate>
#endif /* USART_OverSampling_Feature */
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80027e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3720      	adds	r7, #32
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40004400 	.word	0x40004400
 80027f4:	40004800 	.word	0x40004800

080027f8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002802:	4909      	ldr	r1, [pc, #36]	; (8002828 <LL_InitTick+0x30>)
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <LL_InitTick+0x30>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002816:	4b04      	ldr	r3, [pc, #16]	; (8002828 <LL_InitTick+0x30>)
 8002818:	2205      	movs	r2, #5
 800281a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000e010 	.word	0xe000e010

0800282c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002834:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ffdd 	bl	80027f8 <LL_InitTick>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <LL_mDelay+0x44>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002856:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285e:	d00c      	beq.n	800287a <LL_mDelay+0x32>
  {
    Delay++;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3301      	adds	r3, #1
 8002864:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002866:	e008      	b.n	800287a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002868:	4b08      	ldr	r3, [pc, #32]	; (800288c <LL_mDelay+0x44>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <LL_mDelay+0x32>
    {
      Delay--;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	607b      	str	r3, [r7, #4]
  while (Delay)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f3      	bne.n	8002868 <LL_mDelay+0x20>
    }
  }
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	e000e010 	.word	0xe000e010

08002890 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002898:	4a03      	ldr	r2, [pc, #12]	; (80028a8 <LL_SetSystemCoreClock+0x18>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6013      	str	r3, [r2, #0]
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	20000018 	.word	0x20000018

080028ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80028ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028be:	2b84      	cmp	r3, #132	; 0x84
 80028c0:	d005      	beq.n	80028ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80028c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4413      	add	r3, r2
 80028ca:	3303      	adds	r3, #3
 80028cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80028ce:	68fb      	ldr	r3, [r7, #12]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80028de:	f001 f9c5 	bl	8003c6c <vTaskStartScheduler>
  
  return osOK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80028e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685c      	ldr	r4, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028fe:	b29e      	uxth	r6, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ffd0 	bl	80028ac <makeFreeRtosPriority>
 800290c:	4602      	mov	r2, r0
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	9200      	str	r2, [sp, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	4632      	mov	r2, r6
 800291a:	4629      	mov	r1, r5
 800291c:	4620      	mov	r0, r4
 800291e:	f001 f83f 	bl	80039a0 <xTaskCreate>
 8002922:	4603      	mov	r3, r0
 8002924:	2b01      	cmp	r3, #1
 8002926:	d001      	beq.n	800292c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002928:	2300      	movs	r3, #0
 800292a:	e000      	b.n	800292e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800292c:	68fb      	ldr	r3, [r7, #12]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002936 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <osDelay+0x16>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	e000      	b.n	800294e <osDelay+0x18>
 800294c:	2301      	movs	r3, #1
 800294e:	4618      	mov	r0, r3
 8002950:	f001 f958 	bl	8003c04 <vTaskDelay>
  
  return osOK;
 8002954:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f103 0208 	add.w	r2, r3, #8
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f04f 32ff 	mov.w	r2, #4294967295
 8002976:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f103 0208 	add.w	r2, r3, #8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f103 0208 	add.w	r2, r3, #8
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	601a      	str	r2, [r3, #0]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d103      	bne.n	8002a1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e00c      	b.n	8002a34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e002      	b.n	8002a28 <vListInsert+0x2e>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d9f6      	bls.n	8002a22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	601a      	str	r2, [r3, #0]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6892      	ldr	r2, [r2, #8]
 8002a80:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6852      	ldr	r2, [r2, #4]
 8002a8a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d103      	bne.n	8002a9e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1e5a      	subs	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3b04      	subs	r3, #4
 8002acc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3b04      	subs	r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f023 0201 	bic.w	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3b04      	subs	r3, #4
 8002aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002aec:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <pxPortInitialiseStack+0x54>)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3b14      	subs	r3, #20
 8002af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3b20      	subs	r3, #32
 8002b02:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002b04:	68fb      	ldr	r3, [r7, #12]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	08002b15 	.word	0x08002b15

08002b14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <prvTaskExitError+0x38>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b22:	d009      	beq.n	8002b38 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	e7fe      	b.n	8002b36 <prvTaskExitError+0x22>
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8002b4a:	e7fe      	b.n	8002b4a <prvTaskExitError+0x36>
 8002b4c:	20000014 	.word	0x20000014

08002b50 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <pxCurrentTCBConst2>)
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	6808      	ldr	r0, [r1, #0]
 8002b56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002b5a:	f380 8809 	msr	PSP, r0
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f04f 0000 	mov.w	r0, #0
 8002b66:	f380 8811 	msr	BASEPRI, r0
 8002b6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002b6e:	4770      	bx	lr

08002b70 <pxCurrentTCBConst2>:
 8002b70:	20002234 	.word	0x20002234
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop

08002b78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002b78:	4806      	ldr	r0, [pc, #24]	; (8002b94 <prvPortStartFirstTask+0x1c>)
 8002b7a:	6800      	ldr	r0, [r0, #0]
 8002b7c:	6800      	ldr	r0, [r0, #0]
 8002b7e:	f380 8808 	msr	MSP, r0
 8002b82:	b662      	cpsie	i
 8002b84:	b661      	cpsie	f
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	df00      	svc	0
 8002b90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002b92:	bf00      	nop
 8002b94:	e000ed08 	.word	0xe000ed08

08002b98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <xPortStartScheduler+0xa8>)
 8002ba0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	22ff      	movs	r2, #255	; 0xff
 8002bae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <xPortStartScheduler+0xac>)
 8002bc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <xPortStartScheduler+0xb0>)
 8002bc8:	2207      	movs	r2, #7
 8002bca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bcc:	e009      	b.n	8002be2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <xPortStartScheduler+0xb0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <xPortStartScheduler+0xb0>)
 8002bd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	d0ef      	beq.n	8002bce <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002bee:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <xPortStartScheduler+0xb0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <xPortStartScheduler+0xb0>)
 8002bf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002bf8:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <xPortStartScheduler+0xb0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c00:	4a11      	ldr	r2, [pc, #68]	; (8002c48 <xPortStartScheduler+0xb0>)
 8002c02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002c0c:	4a0f      	ldr	r2, [pc, #60]	; (8002c4c <xPortStartScheduler+0xb4>)
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <xPortStartScheduler+0xb4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002c18:	4a0c      	ldr	r2, [pc, #48]	; (8002c4c <xPortStartScheduler+0xb4>)
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <xPortStartScheduler+0xb4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002c22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002c24:	f000 f8b0 	bl	8002d88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <xPortStartScheduler+0xb8>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002c2e:	f7ff ffa3 	bl	8002b78 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8002c32:	f7ff ff6f 	bl	8002b14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	e000e400 	.word	0xe000e400
 8002c44:	20000216 	.word	0x20000216
 8002c48:	20000218 	.word	0x20000218
 8002c4c:	e000ed20 	.word	0xe000ed20
 8002c50:	20000014 	.word	0x20000014

08002c54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5e:	f383 8811 	msr	BASEPRI, r3
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <vPortEnterCritical+0x54>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3301      	adds	r3, #1
 8002c72:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <vPortEnterCritical+0x54>)
 8002c74:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002c76:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <vPortEnterCritical+0x54>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d10e      	bne.n	8002c9c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <vPortEnterCritical+0x58>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <vPortEnterCritical+0x48>
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	e7fe      	b.n	8002c9a <vPortEnterCritical+0x46>
	}
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000014 	.word	0x20000014
 8002cac:	e000ed04 	.word	0xe000ed04

08002cb0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <vPortExitCritical+0x48>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <vPortExitCritical+0x22>
 8002cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	f3bf 8f6f 	isb	sy
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	e7fe      	b.n	8002cd0 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <vPortExitCritical+0x48>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	4a07      	ldr	r2, [pc, #28]	; (8002cf8 <vPortExitCritical+0x48>)
 8002cda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <vPortExitCritical+0x48>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d104      	bne.n	8002cee <vPortExitCritical+0x3e>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	20000014 	.word	0x20000014
 8002cfc:	00000000 	.word	0x00000000

08002d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002d00:	f3ef 8009 	mrs	r0, PSP
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <pxCurrentTCBConst>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002d10:	6010      	str	r0, [r2, #0]
 8002d12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002d16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d1a:	f380 8811 	msr	BASEPRI, r0
 8002d1e:	f001 f951 	bl	8003fc4 <vTaskSwitchContext>
 8002d22:	f04f 0000 	mov.w	r0, #0
 8002d26:	f380 8811 	msr	BASEPRI, r0
 8002d2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002d2e:	6819      	ldr	r1, [r3, #0]
 8002d30:	6808      	ldr	r0, [r1, #0]
 8002d32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002d36:	f380 8809 	msr	PSP, r0
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	4770      	bx	lr

08002d40 <pxCurrentTCBConst>:
 8002d40:	20002234 	.word	0x20002234
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop

08002d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002d60:	f001 f874 	bl	8003e4c <xTaskIncrementTick>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <SysTick_Handler+0x3c>)
 8002d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	2300      	movs	r3, #0
 8002d74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	e000ed04 	.word	0xe000ed04

08002d88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d8c:	4a07      	ldr	r2, [pc, #28]	; (8002dac <vPortSetupTimerInterrupt+0x24>)
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <vPortSetupTimerInterrupt+0x28>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4908      	ldr	r1, [pc, #32]	; (8002db4 <vPortSetupTimerInterrupt+0x2c>)
 8002d94:	fba1 1303 	umull	r1, r3, r1, r3
 8002d98:	099b      	lsrs	r3, r3, #6
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002d9e:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <vPortSetupTimerInterrupt+0x30>)
 8002da0:	2207      	movs	r2, #7
 8002da2:	601a      	str	r2, [r3, #0]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	e000e014 	.word	0xe000e014
 8002db0:	20000018 	.word	0x20000018
 8002db4:	10624dd3 	.word	0x10624dd3
 8002db8:	e000e010 	.word	0xe000e010

08002dbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002dc8:	f000 ff96 	bl	8003cf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002dcc:	4b57      	ldr	r3, [pc, #348]	; (8002f2c <pvPortMalloc+0x170>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002dd4:	f000 f90c 	bl	8002ff0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002dd8:	4b55      	ldr	r3, [pc, #340]	; (8002f30 <pvPortMalloc+0x174>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f040 808c 	bne.w	8002efe <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01c      	beq.n	8002e26 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002dec:	2208      	movs	r2, #8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d013      	beq.n	8002e26 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f023 0307 	bic.w	r3, r3, #7
 8002e04:	3308      	adds	r3, #8
 8002e06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <pvPortMalloc+0x6a>
	__asm volatile
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e7fe      	b.n	8002e24 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d068      	beq.n	8002efe <pvPortMalloc+0x142>
 8002e2c:	4b41      	ldr	r3, [pc, #260]	; (8002f34 <pvPortMalloc+0x178>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d863      	bhi.n	8002efe <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002e36:	4b40      	ldr	r3, [pc, #256]	; (8002f38 <pvPortMalloc+0x17c>)
 8002e38:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002e3a:	4b3f      	ldr	r3, [pc, #252]	; (8002f38 <pvPortMalloc+0x17c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e40:	e004      	b.n	8002e4c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d203      	bcs.n	8002e5e <pvPortMalloc+0xa2>
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f1      	bne.n	8002e42 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002e5e:	4b33      	ldr	r3, [pc, #204]	; (8002f2c <pvPortMalloc+0x170>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d04a      	beq.n	8002efe <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	4413      	add	r3, r2
 8002e70:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	1ad2      	subs	r2, r2, r3
 8002e82:	2308      	movs	r3, #8
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d91e      	bls.n	8002ec8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4413      	add	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d009      	beq.n	8002eb0 <pvPortMalloc+0xf4>
 8002e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	e7fe      	b.n	8002eae <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	1ad2      	subs	r2, r2, r3
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ec2:	69b8      	ldr	r0, [r7, #24]
 8002ec4:	f000 f8f6 	bl	80030b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ec8:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <pvPortMalloc+0x178>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	4a18      	ldr	r2, [pc, #96]	; (8002f34 <pvPortMalloc+0x178>)
 8002ed4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ed6:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <pvPortMalloc+0x178>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <pvPortMalloc+0x180>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d203      	bcs.n	8002eea <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002ee2:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <pvPortMalloc+0x178>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <pvPortMalloc+0x180>)
 8002ee8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <pvPortMalloc+0x174>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002efe:	f000 ff09 	bl	8003d14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d009      	beq.n	8002f20 <pvPortMalloc+0x164>
 8002f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	e7fe      	b.n	8002f1e <pvPortMalloc+0x162>
	return pvReturn;
 8002f20:	69fb      	ldr	r3, [r7, #28]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3728      	adds	r7, #40	; 0x28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20002224 	.word	0x20002224
 8002f30:	20002230 	.word	0x20002230
 8002f34:	20002228 	.word	0x20002228
 8002f38:	2000221c 	.word	0x2000221c
 8002f3c:	2000222c 	.word	0x2000222c

08002f40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d046      	beq.n	8002fe0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002f52:	2308      	movs	r3, #8
 8002f54:	425b      	negs	r3, r3
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4413      	add	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <vPortFree+0xa8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <vPortFree+0x42>
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e7fe      	b.n	8002f80 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <vPortFree+0x5e>
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	e7fe      	b.n	8002f9c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <vPortFree+0xa8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d019      	beq.n	8002fe0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d115      	bne.n	8002fe0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <vPortFree+0xa8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002fc4:	f000 fe98 	bl	8003cf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <vPortFree+0xac>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	4a06      	ldr	r2, [pc, #24]	; (8002fec <vPortFree+0xac>)
 8002fd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002fd6:	6938      	ldr	r0, [r7, #16]
 8002fd8:	f000 f86c 	bl	80030b4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002fdc:	f000 fe9a 	bl	8003d14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002fe0:	bf00      	nop
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20002230 	.word	0x20002230
 8002fec:	20002228 	.word	0x20002228

08002ff0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ffa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002ffc:	4b27      	ldr	r3, [pc, #156]	; (800309c <prvHeapInit+0xac>)
 8002ffe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00c      	beq.n	8003024 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3307      	adds	r3, #7
 800300e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0307 	bic.w	r3, r3, #7
 8003016:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	4a1f      	ldr	r2, [pc, #124]	; (800309c <prvHeapInit+0xac>)
 8003020:	4413      	add	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003028:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <prvHeapInit+0xb0>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800302e:	4b1c      	ldr	r3, [pc, #112]	; (80030a0 <prvHeapInit+0xb0>)
 8003030:	2200      	movs	r2, #0
 8003032:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4413      	add	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800303c:	2208      	movs	r2, #8
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0307 	bic.w	r3, r3, #7
 800304a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <prvHeapInit+0xb4>)
 8003050:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003052:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <prvHeapInit+0xb4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2200      	movs	r2, #0
 8003058:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800305a:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <prvHeapInit+0xb4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	1ad2      	subs	r2, r2, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003070:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <prvHeapInit+0xb4>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <prvHeapInit+0xb8>)
 800307e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4a09      	ldr	r2, [pc, #36]	; (80030ac <prvHeapInit+0xbc>)
 8003086:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <prvHeapInit+0xc0>)
 800308a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800308e:	601a      	str	r2, [r3, #0]
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	2000021c 	.word	0x2000021c
 80030a0:	2000221c 	.word	0x2000221c
 80030a4:	20002224 	.word	0x20002224
 80030a8:	2000222c 	.word	0x2000222c
 80030ac:	20002228 	.word	0x20002228
 80030b0:	20002230 	.word	0x20002230

080030b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80030bc:	4b27      	ldr	r3, [pc, #156]	; (800315c <prvInsertBlockIntoFreeList+0xa8>)
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e002      	b.n	80030c8 <prvInsertBlockIntoFreeList+0x14>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d3f7      	bcc.n	80030c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	441a      	add	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d108      	bne.n	80030f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	441a      	add	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	441a      	add	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d118      	bne.n	800313c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4b14      	ldr	r3, [pc, #80]	; (8003160 <prvInsertBlockIntoFreeList+0xac>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d00d      	beq.n	8003132 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	441a      	add	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	e008      	b.n	8003144 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <prvInsertBlockIntoFreeList+0xac>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	e003      	b.n	8003144 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	429a      	cmp	r2, r3
 800314a:	d002      	beq.n	8003152 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr
 800315c:	2000221c 	.word	0x2000221c
 8003160:	20002224 	.word	0x20002224

08003164 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <xQueueGenericReset+0x28>
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	e7fe      	b.n	800318a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800318c:	f7ff fd62 	bl	8002c54 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003198:	68f9      	ldr	r1, [r7, #12]
 800319a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	441a      	add	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031bc:	3b01      	subs	r3, #1
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	441a      	add	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	22ff      	movs	r2, #255	; 0xff
 80031d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	22ff      	movs	r2, #255	; 0xff
 80031d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d114      	bne.n	800320c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01a      	beq.n	8003220 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3310      	adds	r3, #16
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 ff76 	bl	80040e0 <xTaskRemoveFromEventList>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d012      	beq.n	8003220 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <xQueueGenericReset+0xcc>)
 80031fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	e009      	b.n	8003220 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3310      	adds	r3, #16
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fba4 	bl	800295e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3324      	adds	r3, #36	; 0x24
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fb9f 	bl	800295e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003220:	f7ff fd46 	bl	8002cb0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003224:	2301      	movs	r3, #1
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	e000ed04 	.word	0xe000ed04

08003234 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	; 0x28
 8003238:	af02      	add	r7, sp, #8
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	4613      	mov	r3, r2
 8003240:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <xQueueGenericCreate+0x28>
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	e7fe      	b.n	800325a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	e004      	b.n	8003272 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	fb02 f303 	mul.w	r3, r2, r3
 8003270:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	3348      	adds	r3, #72	; 0x48
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fda0 	bl	8002dbc <pvPortMalloc>
 800327c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00b      	beq.n	800329c <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	3348      	adds	r3, #72	; 0x48
 8003288:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800328a:	79fa      	ldrb	r2, [r7, #7]
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	4613      	mov	r3, r2
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f805 	bl	80032a6 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800329c:	69bb      	ldr	r3, [r7, #24]
	}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d103      	bne.n	80032c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	e002      	b.n	80032c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032d4:	2101      	movs	r1, #1
 80032d6:	69b8      	ldr	r0, [r7, #24]
 80032d8:	f7ff ff44 	bl	8003164 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08e      	sub	sp, #56	; 0x38
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80032f2:	2300      	movs	r3, #0
 80032f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d109      	bne.n	8003314 <xQueueGenericSend+0x30>
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
 8003312:	e7fe      	b.n	8003312 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d103      	bne.n	8003322 <xQueueGenericSend+0x3e>
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <xQueueGenericSend+0x42>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <xQueueGenericSend+0x44>
 8003326:	2300      	movs	r3, #0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d109      	bne.n	8003340 <xQueueGenericSend+0x5c>
 800332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
 800333e:	e7fe      	b.n	800333e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d103      	bne.n	800334e <xQueueGenericSend+0x6a>
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <xQueueGenericSend+0x6e>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <xQueueGenericSend+0x70>
 8003352:	2300      	movs	r3, #0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d109      	bne.n	800336c <xQueueGenericSend+0x88>
 8003358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	623b      	str	r3, [r7, #32]
 800336a:	e7fe      	b.n	800336a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800336c:	f001 f86e 	bl	800444c <xTaskGetSchedulerState>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d102      	bne.n	800337c <xQueueGenericSend+0x98>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <xQueueGenericSend+0x9c>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <xQueueGenericSend+0x9e>
 8003380:	2300      	movs	r3, #0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <xQueueGenericSend+0xb6>
 8003386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	e7fe      	b.n	8003398 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800339a:	f7ff fc5b 	bl	8002c54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d302      	bcc.n	80033b0 <xQueueGenericSend+0xcc>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d129      	bne.n	8003404 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033b6:	f000 f9be 	bl	8003736 <prvCopyDataToQueue>
 80033ba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d010      	beq.n	80033e6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	3324      	adds	r3, #36	; 0x24
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fe89 	bl	80040e0 <xTaskRemoveFromEventList>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d013      	beq.n	80033fc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80033d4:	4b3f      	ldr	r3, [pc, #252]	; (80034d4 <xQueueGenericSend+0x1f0>)
 80033d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	e00a      	b.n	80033fc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80033ec:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <xQueueGenericSend+0x1f0>)
 80033ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80033fc:	f7ff fc58 	bl	8002cb0 <vPortExitCritical>
				return pdPASS;
 8003400:	2301      	movs	r3, #1
 8003402:	e063      	b.n	80034cc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d103      	bne.n	8003412 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800340a:	f7ff fc51 	bl	8002cb0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800340e:	2300      	movs	r3, #0
 8003410:	e05c      	b.n	80034cc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003414:	2b00      	cmp	r3, #0
 8003416:	d106      	bne.n	8003426 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003418:	f107 0314 	add.w	r3, r7, #20
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fec1 	bl	80041a4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003422:	2301      	movs	r3, #1
 8003424:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003426:	f7ff fc43 	bl	8002cb0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800342a:	f000 fc65 	bl	8003cf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800342e:	f7ff fc11 	bl	8002c54 <vPortEnterCritical>
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003438:	b25b      	sxtb	r3, r3
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d103      	bne.n	8003448 <xQueueGenericSend+0x164>
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800344e:	b25b      	sxtb	r3, r3
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d103      	bne.n	800345e <xQueueGenericSend+0x17a>
 8003456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800345e:	f7ff fc27 	bl	8002cb0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003462:	1d3a      	adds	r2, r7, #4
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	4611      	mov	r1, r2
 800346a:	4618      	mov	r0, r3
 800346c:	f000 febc 	bl	80041e8 <xTaskCheckForTimeOut>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d124      	bne.n	80034c0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003476:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003478:	f000 fa55 	bl	8003926 <prvIsQueueFull>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d018      	beq.n	80034b4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003484:	3310      	adds	r3, #16
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4611      	mov	r1, r2
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fe04 	bl	8004098 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003492:	f000 f9e0 	bl	8003856 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003496:	f000 fc3d 	bl	8003d14 <xTaskResumeAll>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	f47f af7c 	bne.w	800339a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <xQueueGenericSend+0x1f0>)
 80034a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	e772      	b.n	800339a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80034b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034b6:	f000 f9ce 	bl	8003856 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034ba:	f000 fc2b 	bl	8003d14 <xTaskResumeAll>
 80034be:	e76c      	b.n	800339a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80034c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034c2:	f000 f9c8 	bl	8003856 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034c6:	f000 fc25 	bl	8003d14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80034ca:	2300      	movs	r3, #0
		}
	}
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3738      	adds	r7, #56	; 0x38
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	e000ed04 	.word	0xe000ed04

080034d8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08e      	sub	sp, #56	; 0x38
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80034e6:	2300      	movs	r3, #0
 80034e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d109      	bne.n	8003508 <xQueueGenericReceive+0x30>
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
 8003506:	e7fe      	b.n	8003506 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d103      	bne.n	8003516 <xQueueGenericReceive+0x3e>
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <xQueueGenericReceive+0x42>
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <xQueueGenericReceive+0x44>
 800351a:	2300      	movs	r3, #0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d109      	bne.n	8003534 <xQueueGenericReceive+0x5c>
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	623b      	str	r3, [r7, #32]
 8003532:	e7fe      	b.n	8003532 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003534:	f000 ff8a 	bl	800444c <xTaskGetSchedulerState>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <xQueueGenericReceive+0x6c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <xQueueGenericReceive+0x70>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <xQueueGenericReceive+0x72>
 8003548:	2300      	movs	r3, #0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <xQueueGenericReceive+0x8a>
 800354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	61fb      	str	r3, [r7, #28]
 8003560:	e7fe      	b.n	8003560 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003562:	f7ff fb77 	bl	8002c54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d046      	beq.n	8003600 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8003572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800357c:	f000 f945 	bl	800380a <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d121      	bne.n	80035ca <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	1e5a      	subs	r2, r3, #1
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003596:	f001 f871 	bl	800467c <pvTaskIncrementMutexHeldCount>
 800359a:	4602      	mov	r2, r0
 800359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d027      	beq.n	80035f8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	3310      	adds	r3, #16
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fd97 	bl	80040e0 <xTaskRemoveFromEventList>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01f      	beq.n	80035f8 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80035b8:	4b4f      	ldr	r3, [pc, #316]	; (80036f8 <xQueueGenericReceive+0x220>)
 80035ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	e016      	b.n	80035f8 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ce:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00f      	beq.n	80035f8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	3324      	adds	r3, #36	; 0x24
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fd7f 	bl	80040e0 <xTaskRemoveFromEventList>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80035e8:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <xQueueGenericReceive+0x220>)
 80035ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80035f8:	f7ff fb5a 	bl	8002cb0 <vPortExitCritical>
				return pdPASS;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e077      	b.n	80036f0 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003606:	f7ff fb53 	bl	8002cb0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800360a:	2300      	movs	r3, #0
 800360c:	e070      	b.n	80036f0 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 800360e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003610:	2b00      	cmp	r3, #0
 8003612:	d106      	bne.n	8003622 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003614:	f107 0314 	add.w	r3, r7, #20
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fdc3 	bl	80041a4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800361e:	2301      	movs	r3, #1
 8003620:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003622:	f7ff fb45 	bl	8002cb0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003626:	f000 fb67 	bl	8003cf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800362a:	f7ff fb13 	bl	8002c54 <vPortEnterCritical>
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003634:	b25b      	sxtb	r3, r3
 8003636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363a:	d103      	bne.n	8003644 <xQueueGenericReceive+0x16c>
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800364a:	b25b      	sxtb	r3, r3
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d103      	bne.n	800365a <xQueueGenericReceive+0x182>
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800365a:	f7ff fb29 	bl	8002cb0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800365e:	1d3a      	adds	r2, r7, #4
 8003660:	f107 0314 	add.w	r3, r7, #20
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fdbe 	bl	80041e8 <xTaskCheckForTimeOut>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d131      	bne.n	80036d6 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003674:	f000 f941 	bl	80038fa <prvIsQueueEmpty>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d025      	beq.n	80036ca <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d108      	bne.n	8003698 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8003686:	f7ff fae5 	bl	8002c54 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fefa 	bl	8004488 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8003694:	f7ff fb0c 	bl	8002cb0 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	3324      	adds	r3, #36	; 0x24
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	4611      	mov	r1, r2
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fcf9 	bl	8004098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036a8:	f000 f8d5 	bl	8003856 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036ac:	f000 fb32 	bl	8003d14 <xTaskResumeAll>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f47f af55 	bne.w	8003562 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <xQueueGenericReceive+0x220>)
 80036ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	e74b      	b.n	8003562 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80036ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036cc:	f000 f8c3 	bl	8003856 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036d0:	f000 fb20 	bl	8003d14 <xTaskResumeAll>
 80036d4:	e745      	b.n	8003562 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80036d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036d8:	f000 f8bd 	bl	8003856 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036dc:	f000 fb1a 	bl	8003d14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036e2:	f000 f90a 	bl	80038fa <prvIsQueueEmpty>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f43f af3a 	beq.w	8003562 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3738      	adds	r7, #56	; 0x38
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	e000ed04 	.word	0xe000ed04

080036fc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <uxQueueMessagesWaiting+0x22>
 800370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	e7fe      	b.n	800371c <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800371e:	f7ff fa99 	bl	8002c54 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003728:	f7ff fac2 	bl	8002cb0 <vPortExitCritical>

	return uxReturn;
 800372c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b086      	sub	sp, #24
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10d      	bne.n	8003770 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d14d      	bne.n	80037f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 ff07 	bl	8004574 <xTaskPriorityDisinherit>
 8003766:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	e043      	b.n	80037f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d119      	bne.n	80037aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6898      	ldr	r0, [r3, #8]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	461a      	mov	r2, r3
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	f003 fba9 	bl	8006ed8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	441a      	add	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	429a      	cmp	r2, r3
 800379e:	d32b      	bcc.n	80037f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	e026      	b.n	80037f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	68d8      	ldr	r0, [r3, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	461a      	mov	r2, r3
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	f003 fb8f 	bl	8006ed8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	425b      	negs	r3, r3
 80037c4:	441a      	add	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d207      	bcs.n	80037e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	425b      	negs	r3, r3
 80037e0:	441a      	add	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d105      	bne.n	80037f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003800:	697b      	ldr	r3, [r7, #20]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	2b00      	cmp	r3, #0
 800381a:	d018      	beq.n	800384e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	441a      	add	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	429a      	cmp	r2, r3
 8003834:	d303      	bcc.n	800383e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68d9      	ldr	r1, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	461a      	mov	r2, r3
 8003848:	6838      	ldr	r0, [r7, #0]
 800384a:	f003 fb45 	bl	8006ed8 <memcpy>
	}
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800385e:	f7ff f9f9 	bl	8002c54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003868:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800386a:	e011      	b.n	8003890 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	2b00      	cmp	r3, #0
 8003872:	d012      	beq.n	800389a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3324      	adds	r3, #36	; 0x24
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fc31 	bl	80040e0 <xTaskRemoveFromEventList>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003884:	f000 fd0e 	bl	80042a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	3b01      	subs	r3, #1
 800388c:	b2db      	uxtb	r3, r3
 800388e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003894:	2b00      	cmp	r3, #0
 8003896:	dce9      	bgt.n	800386c <prvUnlockQueue+0x16>
 8003898:	e000      	b.n	800389c <prvUnlockQueue+0x46>
					break;
 800389a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	22ff      	movs	r2, #255	; 0xff
 80038a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80038a4:	f7ff fa04 	bl	8002cb0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80038a8:	f7ff f9d4 	bl	8002c54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038b4:	e011      	b.n	80038da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d012      	beq.n	80038e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3310      	adds	r3, #16
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fc0c 	bl	80040e0 <xTaskRemoveFromEventList>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038ce:	f000 fce9 	bl	80042a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038d2:	7bbb      	ldrb	r3, [r7, #14]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	dce9      	bgt.n	80038b6 <prvUnlockQueue+0x60>
 80038e2:	e000      	b.n	80038e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	22ff      	movs	r2, #255	; 0xff
 80038ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038ee:	f7ff f9df 	bl	8002cb0 <vPortExitCritical>
}
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003902:	f7ff f9a7 	bl	8002c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	2b00      	cmp	r3, #0
 800390c:	d102      	bne.n	8003914 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800390e:	2301      	movs	r3, #1
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e001      	b.n	8003918 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003918:	f7ff f9ca 	bl	8002cb0 <vPortExitCritical>

	return xReturn;
 800391c:	68fb      	ldr	r3, [r7, #12]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800392e:	f7ff f991 	bl	8002c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393a:	429a      	cmp	r2, r3
 800393c:	d102      	bne.n	8003944 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800393e:	2301      	movs	r3, #1
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	e001      	b.n	8003948 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003948:	f7ff f9b2 	bl	8002cb0 <vPortExitCritical>

	return xReturn;
 800394c:	68fb      	ldr	r3, [r7, #12]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	0a1b      	lsrs	r3, r3, #8
 8003968:	b29b      	uxth	r3, r3
 800396a:	405a      	eors	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	60da      	str	r2, [r3, #12]
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr
	...

0800397c <vApplicationStackOverflowHook>:

#pragma GCC push_options
#pragma GCC optimize ("O0") //__attribute__((optimize("O0")))

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
//
//	int free_heap = xPortGetFreeHeapSize();

	while(1)
	{
		LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_13);
 8003986:	4904      	ldr	r1, [pc, #16]	; (8003998 <vApplicationStackOverflowHook+0x1c>)
 8003988:	4804      	ldr	r0, [pc, #16]	; (800399c <vApplicationStackOverflowHook+0x20>)
 800398a:	f7ff ffe4 	bl	8003956 <LL_GPIO_TogglePin>
		delay(200);
 800398e:	20c8      	movs	r0, #200	; 0xc8
 8003990:	f000 ff5e 	bl	8004850 <delay>
		LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_13);
 8003994:	e7f7      	b.n	8003986 <vApplicationStackOverflowHook+0xa>
 8003996:	bf00      	nop
 8003998:	04200020 	.word	0x04200020
 800399c:	40010c00 	.word	0x40010c00

080039a0 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08c      	sub	sp, #48	; 0x30
 80039a4:	af04      	add	r7, sp, #16
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	4613      	mov	r3, r2
 80039ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fa01 	bl	8002dbc <pvPortMalloc>
 80039ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00e      	beq.n	80039e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80039c2:	2054      	movs	r0, #84	; 0x54
 80039c4:	f7ff f9fa 	bl	8002dbc <pvPortMalloc>
 80039c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30
 80039d6:	e005      	b.n	80039e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039d8:	6978      	ldr	r0, [r7, #20]
 80039da:	f7ff fab1 	bl	8002f40 <vPortFree>
 80039de:	e001      	b.n	80039e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d013      	beq.n	8003a12 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039ea:	88fa      	ldrh	r2, [r7, #6]
 80039ec:	2300      	movs	r3, #0
 80039ee:	9303      	str	r3, [sp, #12]
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	9302      	str	r3, [sp, #8]
 80039f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f80e 	bl	8003a22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a06:	69f8      	ldr	r0, [r7, #28]
 8003a08:	f000 f892 	bl	8003b30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	e002      	b.n	8003a18 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a12:	f04f 33ff 	mov.w	r3, #4294967295
 8003a16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a18:	69bb      	ldr	r3, [r7, #24]
	}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b088      	sub	sp, #32
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	461a      	mov	r2, r3
 8003a3a:	21a5      	movs	r1, #165	; 0xa5
 8003a3c:	f003 fa57 	bl	8006eee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	f023 0307 	bic.w	r3, r3, #7
 8003a58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d009      	beq.n	8003a78 <prvInitialiseNewTask+0x56>
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	e7fe      	b.n	8003a76 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61fb      	str	r3, [r7, #28]
 8003a7c:	e012      	b.n	8003aa4 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	7819      	ldrb	r1, [r3, #0]
 8003a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3334      	adds	r3, #52	; 0x34
 8003a8e:	460a      	mov	r2, r1
 8003a90:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	4413      	add	r3, r2
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d006      	beq.n	8003aac <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b0f      	cmp	r3, #15
 8003aa8:	d9e9      	bls.n	8003a7e <prvInitialiseNewTask+0x5c>
 8003aaa:	e000      	b.n	8003aae <prvInitialiseNewTask+0x8c>
		{
			break;
 8003aac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	2b06      	cmp	r3, #6
 8003aba:	d901      	bls.n	8003ac0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003abc:	2306      	movs	r3, #6
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ac4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	2200      	movs	r2, #0
 8003ad0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe ff60 	bl	800299c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	3318      	adds	r3, #24
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fe ff5b 	bl	800299c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aee:	f1c3 0207 	rsb	r2, r3, #7
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	2200      	movs	r2, #0
 8003b00:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	68f9      	ldr	r1, [r7, #12]
 8003b0e:	69b8      	ldr	r0, [r7, #24]
 8003b10:	f7fe ffd4 	bl	8002abc <pxPortInitialiseStack>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b18:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b26:	bf00      	nop
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b38:	f7ff f88c 	bl	8002c54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b3c:	4b2a      	ldr	r3, [pc, #168]	; (8003be8 <prvAddNewTaskToReadyList+0xb8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3301      	adds	r3, #1
 8003b42:	4a29      	ldr	r2, [pc, #164]	; (8003be8 <prvAddNewTaskToReadyList+0xb8>)
 8003b44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b46:	4b29      	ldr	r3, [pc, #164]	; (8003bec <prvAddNewTaskToReadyList+0xbc>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d109      	bne.n	8003b62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b4e:	4a27      	ldr	r2, [pc, #156]	; (8003bec <prvAddNewTaskToReadyList+0xbc>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b54:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <prvAddNewTaskToReadyList+0xb8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d110      	bne.n	8003b7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b5c:	f000 fbc6 	bl	80042ec <prvInitialiseTaskLists>
 8003b60:	e00d      	b.n	8003b7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b62:	4b23      	ldr	r3, [pc, #140]	; (8003bf0 <prvAddNewTaskToReadyList+0xc0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b6a:	4b20      	ldr	r3, [pc, #128]	; (8003bec <prvAddNewTaskToReadyList+0xbc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d802      	bhi.n	8003b7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b78:	4a1c      	ldr	r2, [pc, #112]	; (8003bec <prvAddNewTaskToReadyList+0xbc>)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <prvAddNewTaskToReadyList+0xc4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3301      	adds	r3, #1
 8003b84:	4a1b      	ldr	r2, [pc, #108]	; (8003bf4 <prvAddNewTaskToReadyList+0xc4>)
 8003b86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <prvAddNewTaskToReadyList+0xc8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	4a18      	ldr	r2, [pc, #96]	; (8003bf8 <prvAddNewTaskToReadyList+0xc8>)
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4a15      	ldr	r2, [pc, #84]	; (8003bfc <prvAddNewTaskToReadyList+0xcc>)
 8003ba8:	441a      	add	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3304      	adds	r3, #4
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	f7fe feff 	bl	80029b4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bb6:	f7ff f87b 	bl	8002cb0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <prvAddNewTaskToReadyList+0xc0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00e      	beq.n	8003be0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <prvAddNewTaskToReadyList+0xbc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d207      	bcs.n	8003be0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <prvAddNewTaskToReadyList+0xd0>)
 8003bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20002334 	.word	0x20002334
 8003bec:	20002234 	.word	0x20002234
 8003bf0:	20002340 	.word	0x20002340
 8003bf4:	20002350 	.word	0x20002350
 8003bf8:	2000233c 	.word	0x2000233c
 8003bfc:	20002238 	.word	0x20002238
 8003c00:	e000ed04 	.word	0xe000ed04

08003c04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d016      	beq.n	8003c44 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c16:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <vTaskDelay+0x60>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <vTaskDelay+0x2e>
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	e7fe      	b.n	8003c30 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003c32:	f000 f861 	bl	8003cf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c36:	2100      	movs	r1, #0
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fd33 	bl	80046a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c3e:	f000 f869 	bl	8003d14 <xTaskResumeAll>
 8003c42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d107      	bne.n	8003c5a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <vTaskDelay+0x64>)
 8003c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	2000235c 	.word	0x2000235c
 8003c68:	e000ed04 	.word	0xe000ed04

08003c6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003c72:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <vTaskStartScheduler+0x74>)
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	2300      	movs	r3, #0
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c80:	4918      	ldr	r1, [pc, #96]	; (8003ce4 <vTaskStartScheduler+0x78>)
 8003c82:	4819      	ldr	r0, [pc, #100]	; (8003ce8 <vTaskStartScheduler+0x7c>)
 8003c84:	f7ff fe8c 	bl	80039a0 <xTaskCreate>
 8003c88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d115      	bne.n	8003cbc <vTaskStartScheduler+0x50>
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ca2:	4b12      	ldr	r3, [pc, #72]	; (8003cec <vTaskStartScheduler+0x80>)
 8003ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003caa:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <vTaskStartScheduler+0x84>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <vTaskStartScheduler+0x88>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cb6:	f7fe ff6f 	bl	8002b98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cba:	e00d      	b.n	8003cd8 <vTaskStartScheduler+0x6c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	d109      	bne.n	8003cd8 <vTaskStartScheduler+0x6c>
 8003cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	607b      	str	r3, [r7, #4]
 8003cd6:	e7fe      	b.n	8003cd6 <vTaskStartScheduler+0x6a>
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20002358 	.word	0x20002358
 8003ce4:	08007a7c 	.word	0x08007a7c
 8003ce8:	080042bd 	.word	0x080042bd
 8003cec:	20002354 	.word	0x20002354
 8003cf0:	20002340 	.word	0x20002340
 8003cf4:	20002338 	.word	0x20002338

08003cf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <vTaskSuspendAll+0x18>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3301      	adds	r3, #1
 8003d02:	4a03      	ldr	r2, [pc, #12]	; (8003d10 <vTaskSuspendAll+0x18>)
 8003d04:	6013      	str	r3, [r2, #0]
}
 8003d06:	bf00      	nop
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	2000235c 	.word	0x2000235c

08003d14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d22:	4b41      	ldr	r3, [pc, #260]	; (8003e28 <xTaskResumeAll+0x114>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <xTaskResumeAll+0x2a>
 8003d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	e7fe      	b.n	8003d3c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d3e:	f7fe ff89 	bl	8002c54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d42:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <xTaskResumeAll+0x114>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	4a37      	ldr	r2, [pc, #220]	; (8003e28 <xTaskResumeAll+0x114>)
 8003d4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d4c:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <xTaskResumeAll+0x114>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d161      	bne.n	8003e18 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d54:	4b35      	ldr	r3, [pc, #212]	; (8003e2c <xTaskResumeAll+0x118>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d05d      	beq.n	8003e18 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d5c:	e02e      	b.n	8003dbc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003d5e:	4b34      	ldr	r3, [pc, #208]	; (8003e30 <xTaskResumeAll+0x11c>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3318      	adds	r3, #24
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe fe7d 	bl	8002a6a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fe fe78 	bl	8002a6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	2201      	movs	r2, #1
 8003d80:	409a      	lsls	r2, r3
 8003d82:	4b2c      	ldr	r3, [pc, #176]	; (8003e34 <xTaskResumeAll+0x120>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	4a2a      	ldr	r2, [pc, #168]	; (8003e34 <xTaskResumeAll+0x120>)
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4a27      	ldr	r2, [pc, #156]	; (8003e38 <xTaskResumeAll+0x124>)
 8003d9a:	441a      	add	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f7fe fe06 	bl	80029b4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dac:	4b23      	ldr	r3, [pc, #140]	; (8003e3c <xTaskResumeAll+0x128>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d302      	bcc.n	8003dbc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003db6:	4b22      	ldr	r3, [pc, #136]	; (8003e40 <xTaskResumeAll+0x12c>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dbc:	4b1c      	ldr	r3, [pc, #112]	; (8003e30 <xTaskResumeAll+0x11c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1cc      	bne.n	8003d5e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003dca:	f000 fb1b 	bl	8004404 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003dce:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <xTaskResumeAll+0x130>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d010      	beq.n	8003dfc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003dda:	f000 f837 	bl	8003e4c <xTaskIncrementTick>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003de4:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <xTaskResumeAll+0x12c>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f1      	bne.n	8003dda <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003df6:	4b13      	ldr	r3, [pc, #76]	; (8003e44 <xTaskResumeAll+0x130>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003dfc:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <xTaskResumeAll+0x12c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d009      	beq.n	8003e18 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e04:	2301      	movs	r3, #1
 8003e06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e08:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <xTaskResumeAll+0x134>)
 8003e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e18:	f7fe ff4a 	bl	8002cb0 <vPortExitCritical>

	return xAlreadyYielded;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2000235c 	.word	0x2000235c
 8003e2c:	20002334 	.word	0x20002334
 8003e30:	200022f4 	.word	0x200022f4
 8003e34:	2000233c 	.word	0x2000233c
 8003e38:	20002238 	.word	0x20002238
 8003e3c:	20002234 	.word	0x20002234
 8003e40:	20002348 	.word	0x20002348
 8003e44:	20002344 	.word	0x20002344
 8003e48:	e000ed04 	.word	0xe000ed04

08003e4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e56:	4b50      	ldr	r3, [pc, #320]	; (8003f98 <xTaskIncrementTick+0x14c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f040 808c 	bne.w	8003f78 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8003e60:	4b4e      	ldr	r3, [pc, #312]	; (8003f9c <xTaskIncrementTick+0x150>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3301      	adds	r3, #1
 8003e66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e68:	4a4c      	ldr	r2, [pc, #304]	; (8003f9c <xTaskIncrementTick+0x150>)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d11f      	bne.n	8003eb4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e74:	4b4a      	ldr	r3, [pc, #296]	; (8003fa0 <xTaskIncrementTick+0x154>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <xTaskIncrementTick+0x46>
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	e7fe      	b.n	8003e90 <xTaskIncrementTick+0x44>
 8003e92:	4b43      	ldr	r3, [pc, #268]	; (8003fa0 <xTaskIncrementTick+0x154>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	4b42      	ldr	r3, [pc, #264]	; (8003fa4 <xTaskIncrementTick+0x158>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a40      	ldr	r2, [pc, #256]	; (8003fa0 <xTaskIncrementTick+0x154>)
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4a40      	ldr	r2, [pc, #256]	; (8003fa4 <xTaskIncrementTick+0x158>)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4b40      	ldr	r3, [pc, #256]	; (8003fa8 <xTaskIncrementTick+0x15c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	4a3e      	ldr	r2, [pc, #248]	; (8003fa8 <xTaskIncrementTick+0x15c>)
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	f000 faa8 	bl	8004404 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003eb4:	4b3d      	ldr	r3, [pc, #244]	; (8003fac <xTaskIncrementTick+0x160>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d34d      	bcc.n	8003f5a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ebe:	4b38      	ldr	r3, [pc, #224]	; (8003fa0 <xTaskIncrementTick+0x154>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <xTaskIncrementTick+0x80>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <xTaskIncrementTick+0x82>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ed2:	4b36      	ldr	r3, [pc, #216]	; (8003fac <xTaskIncrementTick+0x160>)
 8003ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed8:	601a      	str	r2, [r3, #0]
					break;
 8003eda:	e03e      	b.n	8003f5a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003edc:	4b30      	ldr	r3, [pc, #192]	; (8003fa0 <xTaskIncrementTick+0x154>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d203      	bcs.n	8003efc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ef4:	4a2d      	ldr	r2, [pc, #180]	; (8003fac <xTaskIncrementTick+0x160>)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6013      	str	r3, [r2, #0]
						break;
 8003efa:	e02e      	b.n	8003f5a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe fdb2 	bl	8002a6a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d004      	beq.n	8003f18 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	3318      	adds	r3, #24
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe fda9 	bl	8002a6a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	4b23      	ldr	r3, [pc, #140]	; (8003fb0 <xTaskIncrementTick+0x164>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	4a22      	ldr	r2, [pc, #136]	; (8003fb0 <xTaskIncrementTick+0x164>)
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <xTaskIncrementTick+0x168>)
 8003f38:	441a      	add	r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4610      	mov	r0, r2
 8003f42:	f7fe fd37 	bl	80029b4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4a:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <xTaskIncrementTick+0x16c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d3b4      	bcc.n	8003ebe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003f54:	2301      	movs	r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f58:	e7b1      	b.n	8003ebe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f5a:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <xTaskIncrementTick+0x16c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f60:	4914      	ldr	r1, [pc, #80]	; (8003fb4 <xTaskIncrementTick+0x168>)
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d907      	bls.n	8003f82 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003f72:	2301      	movs	r3, #1
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	e004      	b.n	8003f82 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003f78:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <xTaskIncrementTick+0x170>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	4a0f      	ldr	r2, [pc, #60]	; (8003fbc <xTaskIncrementTick+0x170>)
 8003f80:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003f82:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <xTaskIncrementTick+0x174>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003f8e:	697b      	ldr	r3, [r7, #20]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	2000235c 	.word	0x2000235c
 8003f9c:	20002338 	.word	0x20002338
 8003fa0:	200022ec 	.word	0x200022ec
 8003fa4:	200022f0 	.word	0x200022f0
 8003fa8:	2000234c 	.word	0x2000234c
 8003fac:	20002354 	.word	0x20002354
 8003fb0:	2000233c 	.word	0x2000233c
 8003fb4:	20002238 	.word	0x20002238
 8003fb8:	20002234 	.word	0x20002234
 8003fbc:	20002344 	.word	0x20002344
 8003fc0:	20002348 	.word	0x20002348

08003fc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fca:	4b2e      	ldr	r3, [pc, #184]	; (8004084 <vTaskSwitchContext+0xc0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fd2:	4b2d      	ldr	r3, [pc, #180]	; (8004088 <vTaskSwitchContext+0xc4>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fd8:	e04f      	b.n	800407a <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 8003fda:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <vTaskSwitchContext+0xc4>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8003fe0:	4b2a      	ldr	r3, [pc, #168]	; (800408c <vTaskSwitchContext+0xc8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b29      	ldr	r3, [pc, #164]	; (800408c <vTaskSwitchContext+0xc8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d808      	bhi.n	8004002 <vTaskSwitchContext+0x3e>
 8003ff0:	4b26      	ldr	r3, [pc, #152]	; (800408c <vTaskSwitchContext+0xc8>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <vTaskSwitchContext+0xc8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3334      	adds	r3, #52	; 0x34
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f7ff fcbd 	bl	800397c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004002:	4b23      	ldr	r3, [pc, #140]	; (8004090 <vTaskSwitchContext+0xcc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	fab3 f383 	clz	r3, r3
 800400e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004010:	7afb      	ldrb	r3, [r7, #11]
 8004012:	f1c3 031f 	rsb	r3, r3, #31
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	491e      	ldr	r1, [pc, #120]	; (8004094 <vTaskSwitchContext+0xd0>)
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d109      	bne.n	8004040 <vTaskSwitchContext+0x7c>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	e7fe      	b.n	800403e <vTaskSwitchContext+0x7a>
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4a12      	ldr	r2, [pc, #72]	; (8004094 <vTaskSwitchContext+0xd0>)
 800404c:	4413      	add	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	3308      	adds	r3, #8
 8004062:	429a      	cmp	r2, r3
 8004064:	d104      	bne.n	8004070 <vTaskSwitchContext+0xac>
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	605a      	str	r2, [r3, #4]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	4a05      	ldr	r2, [pc, #20]	; (800408c <vTaskSwitchContext+0xc8>)
 8004078:	6013      	str	r3, [r2, #0]
}
 800407a:	bf00      	nop
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	2000235c 	.word	0x2000235c
 8004088:	20002348 	.word	0x20002348
 800408c:	20002234 	.word	0x20002234
 8004090:	2000233c 	.word	0x2000233c
 8004094:	20002238 	.word	0x20002238

08004098 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d109      	bne.n	80040bc <vTaskPlaceOnEventList+0x24>
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	e7fe      	b.n	80040ba <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040bc:	4b07      	ldr	r3, [pc, #28]	; (80040dc <vTaskPlaceOnEventList+0x44>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3318      	adds	r3, #24
 80040c2:	4619      	mov	r1, r3
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7fe fc98 	bl	80029fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040ca:	2101      	movs	r1, #1
 80040cc:	6838      	ldr	r0, [r7, #0]
 80040ce:	f000 fae9 	bl	80046a4 <prvAddCurrentTaskToDelayedList>
}
 80040d2:	bf00      	nop
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20002234 	.word	0x20002234

080040e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <xTaskRemoveFromEventList+0x2a>
 80040f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	e7fe      	b.n	8004108 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	3318      	adds	r3, #24
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe fcab 	bl	8002a6a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004114:	4b1d      	ldr	r3, [pc, #116]	; (800418c <xTaskRemoveFromEventList+0xac>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d11c      	bne.n	8004156 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	3304      	adds	r3, #4
 8004120:	4618      	mov	r0, r3
 8004122:	f7fe fca2 	bl	8002a6a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	2201      	movs	r2, #1
 800412c:	409a      	lsls	r2, r3
 800412e:	4b18      	ldr	r3, [pc, #96]	; (8004190 <xTaskRemoveFromEventList+0xb0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4313      	orrs	r3, r2
 8004134:	4a16      	ldr	r2, [pc, #88]	; (8004190 <xTaskRemoveFromEventList+0xb0>)
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413c:	4613      	mov	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4a13      	ldr	r2, [pc, #76]	; (8004194 <xTaskRemoveFromEventList+0xb4>)
 8004146:	441a      	add	r2, r3
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	3304      	adds	r3, #4
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f7fe fc30 	bl	80029b4 <vListInsertEnd>
 8004154:	e005      	b.n	8004162 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	3318      	adds	r3, #24
 800415a:	4619      	mov	r1, r3
 800415c:	480e      	ldr	r0, [pc, #56]	; (8004198 <xTaskRemoveFromEventList+0xb8>)
 800415e:	f7fe fc29 	bl	80029b4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004166:	4b0d      	ldr	r3, [pc, #52]	; (800419c <xTaskRemoveFromEventList+0xbc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	429a      	cmp	r2, r3
 800416e:	d905      	bls.n	800417c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004170:	2301      	movs	r3, #1
 8004172:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <xTaskRemoveFromEventList+0xc0>)
 8004176:	2201      	movs	r2, #1
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e001      	b.n	8004180 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004180:	697b      	ldr	r3, [r7, #20]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	2000235c 	.word	0x2000235c
 8004190:	2000233c 	.word	0x2000233c
 8004194:	20002238 	.word	0x20002238
 8004198:	200022f4 	.word	0x200022f4
 800419c:	20002234 	.word	0x20002234
 80041a0:	20002348 	.word	0x20002348

080041a4 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <vTaskSetTimeOutState+0x22>
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e7fe      	b.n	80041c4 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041c6:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <vTaskSetTimeOutState+0x3c>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <vTaskSetTimeOutState+0x40>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	605a      	str	r2, [r3, #4]
}
 80041d6:	bf00      	nop
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr
 80041e0:	2000234c 	.word	0x2000234c
 80041e4:	20002338 	.word	0x20002338

080041e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <xTaskCheckForTimeOut+0x24>
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	e7fe      	b.n	800420a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d109      	bne.n	8004226 <xTaskCheckForTimeOut+0x3e>
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	e7fe      	b.n	8004224 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004226:	f7fe fd15 	bl	8002c54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800422a:	4b1c      	ldr	r3, [pc, #112]	; (800429c <xTaskCheckForTimeOut+0xb4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d102      	bne.n	8004240 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800423a:	2300      	movs	r3, #0
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	e026      	b.n	800428e <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b16      	ldr	r3, [pc, #88]	; (80042a0 <xTaskCheckForTimeOut+0xb8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d007      	beq.n	800425c <xTaskCheckForTimeOut+0x74>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	429a      	cmp	r2, r3
 8004254:	d802      	bhi.n	800425c <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004256:	2301      	movs	r3, #1
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	e018      	b.n	800428e <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	1ad2      	subs	r2, r2, r3
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d20e      	bcs.n	800428a <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6859      	ldr	r1, [r3, #4]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1acb      	subs	r3, r1, r3
 8004278:	441a      	add	r2, r3
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff ff90 	bl	80041a4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	e001      	b.n	800428e <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 800428a:	2301      	movs	r3, #1
 800428c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800428e:	f7fe fd0f 	bl	8002cb0 <vPortExitCritical>

	return xReturn;
 8004292:	697b      	ldr	r3, [r7, #20]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20002338 	.word	0x20002338
 80042a0:	2000234c 	.word	0x2000234c

080042a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042a8:	4b03      	ldr	r3, [pc, #12]	; (80042b8 <vTaskMissedYield+0x14>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
}
 80042ae:	bf00      	nop
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20002348 	.word	0x20002348

080042bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042c4:	f000 f852 	bl	800436c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <prvIdleTask+0x28>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d9f9      	bls.n	80042c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <prvIdleTask+0x2c>)
 80042d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042e0:	e7f0      	b.n	80042c4 <prvIdleTask+0x8>
 80042e2:	bf00      	nop
 80042e4:	20002238 	.word	0x20002238
 80042e8:	e000ed04 	.word	0xe000ed04

080042ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	e00c      	b.n	8004312 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4a12      	ldr	r2, [pc, #72]	; (800434c <prvInitialiseTaskLists+0x60>)
 8004304:	4413      	add	r3, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f7fe fb29 	bl	800295e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3301      	adds	r3, #1
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b06      	cmp	r3, #6
 8004316:	d9ef      	bls.n	80042f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004318:	480d      	ldr	r0, [pc, #52]	; (8004350 <prvInitialiseTaskLists+0x64>)
 800431a:	f7fe fb20 	bl	800295e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800431e:	480d      	ldr	r0, [pc, #52]	; (8004354 <prvInitialiseTaskLists+0x68>)
 8004320:	f7fe fb1d 	bl	800295e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004324:	480c      	ldr	r0, [pc, #48]	; (8004358 <prvInitialiseTaskLists+0x6c>)
 8004326:	f7fe fb1a 	bl	800295e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800432a:	480c      	ldr	r0, [pc, #48]	; (800435c <prvInitialiseTaskLists+0x70>)
 800432c:	f7fe fb17 	bl	800295e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004330:	480b      	ldr	r0, [pc, #44]	; (8004360 <prvInitialiseTaskLists+0x74>)
 8004332:	f7fe fb14 	bl	800295e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004336:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <prvInitialiseTaskLists+0x78>)
 8004338:	4a05      	ldr	r2, [pc, #20]	; (8004350 <prvInitialiseTaskLists+0x64>)
 800433a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <prvInitialiseTaskLists+0x7c>)
 800433e:	4a05      	ldr	r2, [pc, #20]	; (8004354 <prvInitialiseTaskLists+0x68>)
 8004340:	601a      	str	r2, [r3, #0]
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20002238 	.word	0x20002238
 8004350:	200022c4 	.word	0x200022c4
 8004354:	200022d8 	.word	0x200022d8
 8004358:	200022f4 	.word	0x200022f4
 800435c:	20002308 	.word	0x20002308
 8004360:	20002320 	.word	0x20002320
 8004364:	200022ec 	.word	0x200022ec
 8004368:	200022f0 	.word	0x200022f0

0800436c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004372:	e028      	b.n	80043c6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8004374:	f7ff fcc0 	bl	8003cf8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004378:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <prvCheckTasksWaitingTermination+0x6c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8004388:	f7ff fcc4 	bl	8003d14 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d119      	bne.n	80043c6 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8004392:	f7fe fc5f 	bl	8002c54 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004396:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <prvCheckTasksWaitingTermination+0x6c>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	3304      	adds	r3, #4
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fe fb61 	bl	8002a6a <uxListRemove>
					--uxCurrentNumberOfTasks;
 80043a8:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <prvCheckTasksWaitingTermination+0x70>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	4a0b      	ldr	r2, [pc, #44]	; (80043dc <prvCheckTasksWaitingTermination+0x70>)
 80043b0:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80043b2:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <prvCheckTasksWaitingTermination+0x74>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <prvCheckTasksWaitingTermination+0x74>)
 80043ba:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80043bc:	f7fe fc78 	bl	8002cb0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80043c0:	6838      	ldr	r0, [r7, #0]
 80043c2:	f000 f80f 	bl	80043e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <prvCheckTasksWaitingTermination+0x74>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1d2      	bne.n	8004374 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20002308 	.word	0x20002308
 80043dc:	20002334 	.word	0x20002334
 80043e0:	2000231c 	.word	0x2000231c

080043e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fe fda5 	bl	8002f40 <vPortFree>
			vPortFree( pxTCB );
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fe fda2 	bl	8002f40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <prvResetNextTaskUnblockTime+0x40>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <prvResetNextTaskUnblockTime+0x14>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <prvResetNextTaskUnblockTime+0x16>
 8004418:	2300      	movs	r3, #0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800441e:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <prvResetNextTaskUnblockTime+0x44>)
 8004420:	f04f 32ff 	mov.w	r2, #4294967295
 8004424:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004426:	e008      	b.n	800443a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <prvResetNextTaskUnblockTime+0x40>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	4a04      	ldr	r2, [pc, #16]	; (8004448 <prvResetNextTaskUnblockTime+0x44>)
 8004438:	6013      	str	r3, [r2, #0]
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	200022ec 	.word	0x200022ec
 8004448:	20002354 	.word	0x20002354

0800444c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004452:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <xTaskGetSchedulerState+0x34>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800445a:	2301      	movs	r3, #1
 800445c:	607b      	str	r3, [r7, #4]
 800445e:	e008      	b.n	8004472 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004460:	4b08      	ldr	r3, [pc, #32]	; (8004484 <xTaskGetSchedulerState+0x38>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d102      	bne.n	800446e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004468:	2302      	movs	r3, #2
 800446a:	607b      	str	r3, [r7, #4]
 800446c:	e001      	b.n	8004472 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800446e:	2300      	movs	r3, #0
 8004470:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004472:	687b      	ldr	r3, [r7, #4]
	}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20002340 	.word	0x20002340
 8004484:	2000235c 	.word	0x2000235c

08004488 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d062      	beq.n	8004560 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449e:	4b32      	ldr	r3, [pc, #200]	; (8004568 <vTaskPriorityInherit+0xe0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d25b      	bcs.n	8004560 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	db06      	blt.n	80044be <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044b0:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <vTaskPriorityInherit+0xe0>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b6:	f1c3 0207 	rsb	r2, r3, #7
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6959      	ldr	r1, [r3, #20]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4a27      	ldr	r2, [pc, #156]	; (800456c <vTaskPriorityInherit+0xe4>)
 80044d0:	4413      	add	r3, r2
 80044d2:	4299      	cmp	r1, r3
 80044d4:	d101      	bne.n	80044da <vTaskPriorityInherit+0x52>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <vTaskPriorityInherit+0x54>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d03a      	beq.n	8004556 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	3304      	adds	r3, #4
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fe fac0 	bl	8002a6a <uxListRemove>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d115      	bne.n	800451c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	491d      	ldr	r1, [pc, #116]	; (800456c <vTaskPriorityInherit+0xe4>)
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <vTaskPriorityInherit+0x94>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	2201      	movs	r2, #1
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	43da      	mvns	r2, r3
 8004512:	4b17      	ldr	r3, [pc, #92]	; (8004570 <vTaskPriorityInherit+0xe8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4013      	ands	r3, r2
 8004518:	4a15      	ldr	r2, [pc, #84]	; (8004570 <vTaskPriorityInherit+0xe8>)
 800451a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800451c:	4b12      	ldr	r3, [pc, #72]	; (8004568 <vTaskPriorityInherit+0xe0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	2201      	movs	r2, #1
 800452c:	409a      	lsls	r2, r3
 800452e:	4b10      	ldr	r3, [pc, #64]	; (8004570 <vTaskPriorityInherit+0xe8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4313      	orrs	r3, r2
 8004534:	4a0e      	ldr	r2, [pc, #56]	; (8004570 <vTaskPriorityInherit+0xe8>)
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4a09      	ldr	r2, [pc, #36]	; (800456c <vTaskPriorityInherit+0xe4>)
 8004546:	441a      	add	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	3304      	adds	r3, #4
 800454c:	4619      	mov	r1, r3
 800454e:	4610      	mov	r0, r2
 8004550:	f7fe fa30 	bl	80029b4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004554:	e004      	b.n	8004560 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004556:	4b04      	ldr	r3, [pc, #16]	; (8004568 <vTaskPriorityInherit+0xe0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20002234 	.word	0x20002234
 800456c:	20002238 	.word	0x20002238
 8004570:	2000233c 	.word	0x2000233c

08004574 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d06c      	beq.n	8004664 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800458a:	4b39      	ldr	r3, [pc, #228]	; (8004670 <xTaskPriorityDisinherit+0xfc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	429a      	cmp	r2, r3
 8004592:	d009      	beq.n	80045a8 <xTaskPriorityDisinherit+0x34>
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e7fe      	b.n	80045a6 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <xTaskPriorityDisinherit+0x50>
 80045b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	60bb      	str	r3, [r7, #8]
 80045c2:	e7fe      	b.n	80045c2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c8:	1e5a      	subs	r2, r3, #1
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d044      	beq.n	8004664 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d140      	bne.n	8004664 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe fa3f 	bl	8002a6a <uxListRemove>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d115      	bne.n	800461e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f6:	491f      	ldr	r1, [pc, #124]	; (8004674 <xTaskPriorityDisinherit+0x100>)
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <xTaskPriorityDisinherit+0xaa>
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	2201      	movs	r2, #1
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43da      	mvns	r2, r3
 8004614:	4b18      	ldr	r3, [pc, #96]	; (8004678 <xTaskPriorityDisinherit+0x104>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4013      	ands	r3, r2
 800461a:	4a17      	ldr	r2, [pc, #92]	; (8004678 <xTaskPriorityDisinherit+0x104>)
 800461c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	f1c3 0207 	rsb	r2, r3, #7
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	2201      	movs	r2, #1
 8004638:	409a      	lsls	r2, r3
 800463a:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <xTaskPriorityDisinherit+0x104>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4313      	orrs	r3, r2
 8004640:	4a0d      	ldr	r2, [pc, #52]	; (8004678 <xTaskPriorityDisinherit+0x104>)
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4a08      	ldr	r2, [pc, #32]	; (8004674 <xTaskPriorityDisinherit+0x100>)
 8004652:	441a      	add	r2, r3
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	3304      	adds	r3, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4610      	mov	r0, r2
 800465c:	f7fe f9aa 	bl	80029b4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004660:	2301      	movs	r3, #1
 8004662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004664:	697b      	ldr	r3, [r7, #20]
	}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20002234 	.word	0x20002234
 8004674:	20002238 	.word	0x20002238
 8004678:	2000233c 	.word	0x2000233c

0800467c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d004      	beq.n	8004692 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800468e:	3201      	adds	r2, #1
 8004690:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004692:	4b03      	ldr	r3, [pc, #12]	; (80046a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004694:	681b      	ldr	r3, [r3, #0]
	}
 8004696:	4618      	mov	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	bc80      	pop	{r7}
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	20002234 	.word	0x20002234

080046a4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046ae:	4b29      	ldr	r3, [pc, #164]	; (8004754 <prvAddCurrentTaskToDelayedList+0xb0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046b4:	4b28      	ldr	r3, [pc, #160]	; (8004758 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3304      	adds	r3, #4
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe f9d5 	bl	8002a6a <uxListRemove>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10b      	bne.n	80046de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80046c6:	4b24      	ldr	r3, [pc, #144]	; (8004758 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	2201      	movs	r2, #1
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	43da      	mvns	r2, r3
 80046d4:	4b21      	ldr	r3, [pc, #132]	; (800475c <prvAddCurrentTaskToDelayedList+0xb8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4013      	ands	r3, r2
 80046da:	4a20      	ldr	r2, [pc, #128]	; (800475c <prvAddCurrentTaskToDelayedList+0xb8>)
 80046dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e4:	d10a      	bne.n	80046fc <prvAddCurrentTaskToDelayedList+0x58>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d007      	beq.n	80046fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ec:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3304      	adds	r3, #4
 80046f2:	4619      	mov	r1, r3
 80046f4:	481a      	ldr	r0, [pc, #104]	; (8004760 <prvAddCurrentTaskToDelayedList+0xbc>)
 80046f6:	f7fe f95d 	bl	80029b4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046fa:	e026      	b.n	800474a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4413      	add	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004704:	4b14      	ldr	r3, [pc, #80]	; (8004758 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	429a      	cmp	r2, r3
 8004712:	d209      	bcs.n	8004728 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004714:	4b13      	ldr	r3, [pc, #76]	; (8004764 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <prvAddCurrentTaskToDelayedList+0xb4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3304      	adds	r3, #4
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f7fe f96a 	bl	80029fa <vListInsert>
}
 8004726:	e010      	b.n	800474a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004728:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <prvAddCurrentTaskToDelayedList+0xc4>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <prvAddCurrentTaskToDelayedList+0xb4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3304      	adds	r3, #4
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f7fe f960 	bl	80029fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800473a:	4b0c      	ldr	r3, [pc, #48]	; (800476c <prvAddCurrentTaskToDelayedList+0xc8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	429a      	cmp	r2, r3
 8004742:	d202      	bcs.n	800474a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004744:	4a09      	ldr	r2, [pc, #36]	; (800476c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	6013      	str	r3, [r2, #0]
}
 800474a:	bf00      	nop
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20002338 	.word	0x20002338
 8004758:	20002234 	.word	0x20002234
 800475c:	2000233c 	.word	0x2000233c
 8004760:	20002320 	.word	0x20002320
 8004764:	200022f0 	.word	0x200022f0
 8004768:	200022ec 	.word	0x200022ec
 800476c:	20002354 	.word	0x20002354

08004770 <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  WRITE_REG(CRCx->CR, CRC_CR_RESET);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	609a      	str	r2, [r3, #8]
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	601a      	str	r2, [r3, #0]
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr

080047a2 <LL_CRC_ReadData32>:
  * @rmtoll DR           DR            LL_CRC_ReadData32
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (32 bits).
  */
__STATIC_INLINE uint32_t LL_CRC_ReadData32(CRC_TypeDef *CRCx)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(CRCx->DR));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr

080047b8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80047c0:	4908      	ldr	r1, [pc, #32]	; (80047e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80047c2:	4b08      	ldr	r3, [pc, #32]	; (80047e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80047c4:	695a      	ldr	r2, [r3, #20]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80047cc:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80047ce:	695a      	ldr	r2, [r3, #20]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4013      	ands	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80047d6:	68fb      	ldr	r3, [r7, #12]
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000

080047e8 <MX_CRC_Init>:
#include "crc.h"
#include "main.h"

void MX_CRC_Init(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 80047ec:	2040      	movs	r0, #64	; 0x40
 80047ee:	f7ff ffe3 	bl	80047b8 <LL_AHB1_GRP1_EnableClock>
}
 80047f2:	bf00      	nop
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <CRC_calc>:

uint32_t CRC_calc(uint32_t * data, uint32_t data_length)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
	LL_CRC_ResetCRCCalculationUnit(CRC);
 8004802:	4812      	ldr	r0, [pc, #72]	; (800484c <CRC_calc+0x54>)
 8004804:	f7ff ffb4 	bl	8004770 <LL_CRC_ResetCRCCalculationUnit>

	for(uint32_t i = 0; i < data_length; i++)
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e00e      	b.n	800482c <CRC_calc+0x34>
	{
		LL_CRC_FeedData32(CRC, __REV(data[i]));
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	4413      	add	r3, r2
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	613b      	str	r3, [r7, #16]
  return __builtin_bswap32(value);
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	ba1b      	rev	r3, r3
 800481e:	4619      	mov	r1, r3
 8004820:	480a      	ldr	r0, [pc, #40]	; (800484c <CRC_calc+0x54>)
 8004822:	f7ff ffb1 	bl	8004788 <LL_CRC_FeedData32>
	for(uint32_t i = 0; i < data_length; i++)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	3301      	adds	r3, #1
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d3ec      	bcc.n	800480e <CRC_calc+0x16>
	}

	return __REV(LL_CRC_ReadData32(CRC))^0xFFFFFFFF;
 8004834:	4805      	ldr	r0, [pc, #20]	; (800484c <CRC_calc+0x54>)
 8004836:	f7ff ffb4 	bl	80047a2 <LL_CRC_ReadData32>
 800483a:	4603      	mov	r3, r0
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	ba1b      	rev	r3, r3
 8004842:	43db      	mvns	r3, r3
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40023000 	.word	0x40023000

08004850 <delay>:
#include "delay.h"

void delay(uint16_t value)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	80fb      	strh	r3, [r7, #6]
	LL_mDelay(value);
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	4618      	mov	r0, r3
 800485e:	f7fd fff3 	bl	8002848 <LL_mDelay>
}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <getSysTick>:

uint32_t getSysTick(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
	return SysTick->VAL;
 8004870:	4b02      	ldr	r3, [pc, #8]	; (800487c <getSysTick+0x10>)
 8004872:	689b      	ldr	r3, [r3, #8]
}
 8004874:	4618      	mov	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr
 800487c:	e000e010 	.word	0xe000e010

08004880 <NVIC_GetPriorityGrouping>:
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004884:	4b04      	ldr	r3, [pc, #16]	; (8004898 <NVIC_GetPriorityGrouping+0x18>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	0a1b      	lsrs	r3, r3, #8
 800488a:	f003 0307 	and.w	r3, r3, #7
}
 800488e:	4618      	mov	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	e000ed00 	.word	0xe000ed00

0800489c <NVIC_EnableIRQ>:
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80048a6:	4908      	ldr	r1, [pc, #32]	; (80048c8 <NVIC_EnableIRQ+0x2c>)
 80048a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	79fa      	ldrb	r2, [r7, #7]
 80048b0:	f002 021f 	and.w	r2, r2, #31
 80048b4:	2001      	movs	r0, #1
 80048b6:	fa00 f202 	lsl.w	r2, r0, r2
 80048ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr
 80048c8:	e000e100 	.word	0xe000e100

080048cc <NVIC_SetPriority>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	6039      	str	r1, [r7, #0]
 80048d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80048d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	da0b      	bge.n	80048f8 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048e0:	490d      	ldr	r1, [pc, #52]	; (8004918 <NVIC_SetPriority+0x4c>)
 80048e2:	79fb      	ldrb	r3, [r7, #7]
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	3b04      	subs	r3, #4
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	0112      	lsls	r2, r2, #4
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	440b      	add	r3, r1
 80048f4:	761a      	strb	r2, [r3, #24]
}
 80048f6:	e009      	b.n	800490c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f8:	4908      	ldr	r1, [pc, #32]	; (800491c <NVIC_SetPriority+0x50>)
 80048fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	0112      	lsls	r2, r2, #4
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	440b      	add	r3, r1
 8004908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	e000ed00 	.word	0xe000ed00
 800491c:	e000e100 	.word	0xe000e100

08004920 <NVIC_EncodePriority>:
{
 8004920:	b480      	push	{r7}
 8004922:	b089      	sub	sp, #36	; 0x24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f1c3 0307 	rsb	r3, r3, #7
 800493a:	2b04      	cmp	r3, #4
 800493c:	bf28      	it	cs
 800493e:	2304      	movcs	r3, #4
 8004940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	3304      	adds	r3, #4
 8004946:	2b06      	cmp	r3, #6
 8004948:	d902      	bls.n	8004950 <NVIC_EncodePriority+0x30>
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	3b03      	subs	r3, #3
 800494e:	e000      	b.n	8004952 <NVIC_EncodePriority+0x32>
 8004950:	2300      	movs	r3, #0
 8004952:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004954:	2201      	movs	r2, #1
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	1e5a      	subs	r2, r3, #1
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	401a      	ands	r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004966:	2101      	movs	r1, #1
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	fa01 f303 	lsl.w	r3, r1, r3
 800496e:	1e59      	subs	r1, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004974:	4313      	orrs	r3, r2
}
 8004976:	4618      	mov	r0, r3
 8004978:	3724      	adds	r7, #36	; 0x24
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr

08004980 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8004988:	4a03      	ldr	r2, [pc, #12]	; (8004998 <LL_EXTI_ClearFlag_0_31+0x18>)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6153      	str	r3, [r2, #20]
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr
 8004998:	40010400 	.word	0x40010400

0800499c <LL_GPIO_ReadInputPort>:
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  return (READ_REG(GPIOx->IDR));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr
	...

080049b4 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80049b4:	b490      	push	{r4, r7}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80049be:	4c11      	ldr	r4, [pc, #68]	; (8004a04 <LL_GPIO_AF_SetEXTISource+0x50>)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	490f      	ldr	r1, [pc, #60]	; (8004a04 <LL_GPIO_AF_SetEXTISource+0x50>)
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	3202      	adds	r2, #2
 80049cc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	0c12      	lsrs	r2, r2, #16
 80049d4:	43d2      	mvns	r2, r2
 80049d6:	4011      	ands	r1, r2
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	0c12      	lsrs	r2, r2, #16
 80049dc:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	fa92 f2a2 	rbit	r2, r2
 80049e4:	60ba      	str	r2, [r7, #8]
  return(result);
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	fab2 f282 	clz	r2, r2
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	fa00 f202 	lsl.w	r2, r0, r2
 80049f2:	430a      	orrs	r2, r1
 80049f4:	3302      	adds	r3, #2
 80049f6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc90      	pop	{r4, r7}
 8004a02:	4770      	bx	lr
 8004a04:	40010000 	.word	0x40010000

08004a08 <GPIO_Init>:
#include "encoder_driver.h"

static bool button_status = false, rotate_status = false, rotate_pin_A, rotate_pin_B;

void GPIO_Init()
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
    LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8004a0e:	f107 0318 	add.w	r3, r7, #24
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	605a      	str	r2, [r3, #4]

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8004a18:	2302      	movs	r3, #2
 8004a1a:	61bb      	str	r3, [r7, #24]
    EXTI_InitStruct.LineCommand = ENABLE;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	773b      	strb	r3, [r7, #28]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8004a20:	2300      	movs	r3, #0
 8004a22:	777b      	strb	r3, [r7, #29]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8004a24:	2301      	movs	r3, #1
 8004a26:	77bb      	strb	r3, [r7, #30]
    LL_EXTI_Init(&EXTI_InitStruct);
 8004a28:	f107 0318 	add.w	r3, r7, #24
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fc ff25 	bl	800187c <LL_EXTI_Init>

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8004a32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a36:	61bb      	str	r3, [r7, #24]
    EXTI_InitStruct.LineCommand = ENABLE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	773b      	strb	r3, [r7, #28]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	777b      	strb	r3, [r7, #29]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004a40:	2302      	movs	r3, #2
 8004a42:	77bb      	strb	r3, [r7, #30]
    LL_EXTI_Init(&EXTI_InitStruct);
 8004a44:	f107 0318 	add.w	r3, r7, #24
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fc ff17 	bl	800187c <LL_EXTI_Init>

    LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE1);
 8004a4e:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8004a52:	2001      	movs	r0, #1
 8004a54:	f7ff ffae 	bl	80049b4 <LL_GPIO_AF_SetEXTISource>
    LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE14);
 8004a58:	491d      	ldr	r1, [pc, #116]	; (8004ad0 <GPIO_Init+0xc8>)
 8004a5a:	2001      	movs	r0, #1
 8004a5c:	f7ff ffaa 	bl	80049b4 <LL_GPIO_AF_SetEXTISource>


	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a60:	1d3b      	adds	r3, r7, #4
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	605a      	str	r2, [r3, #4]
 8004a68:	609a      	str	r2, [r3, #8]
 8004a6a:	60da      	str	r2, [r3, #12]
 8004a6c:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = LL_GPIO_PIN_1 | LL_GPIO_PIN_14 | LL_GPIO_PIN_15;
 8004a6e:	4b19      	ldr	r3, [pc, #100]	; (8004ad4 <GPIO_Init+0xcc>)
 8004a70:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004a72:	2308      	movs	r3, #8
 8004a74:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004a76:	2303      	movs	r3, #3
 8004a78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a7e:	1d3b      	adds	r3, r7, #4
 8004a80:	4619      	mov	r1, r3
 8004a82:	4815      	ldr	r0, [pc, #84]	; (8004ad8 <GPIO_Init+0xd0>)
 8004a84:	f7fd f825 	bl	8001ad2 <LL_GPIO_Init>

    NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),8, 0));
 8004a88:	f7ff fefa 	bl	8004880 <NVIC_GetPriorityGrouping>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2108      	movs	r1, #8
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff ff44 	bl	8004920 <NVIC_EncodePriority>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	2007      	movs	r0, #7
 8004a9e:	f7ff ff15 	bl	80048cc <NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI1_IRQn);
 8004aa2:	2007      	movs	r0, #7
 8004aa4:	f7ff fefa 	bl	800489c <NVIC_EnableIRQ>


    NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),8, 0));
 8004aa8:	f7ff feea 	bl	8004880 <NVIC_GetPriorityGrouping>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2200      	movs	r2, #0
 8004ab0:	2108      	movs	r1, #8
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff ff34 	bl	8004920 <NVIC_EncodePriority>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	4619      	mov	r1, r3
 8004abc:	2028      	movs	r0, #40	; 0x28
 8004abe:	f7ff ff05 	bl	80048cc <NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004ac2:	2028      	movs	r0, #40	; 0x28
 8004ac4:	f7ff feea 	bl	800489c <NVIC_EnableIRQ>
}
 8004ac8:	bf00      	nop
 8004aca:	3720      	adds	r7, #32
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	0f000003 	.word	0x0f000003
 8004ad4:	04c002c2 	.word	0x04c002c2
 8004ad8:	40010c00 	.word	0x40010c00

08004adc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8004ae0:	2002      	movs	r0, #2
 8004ae2:	f7ff ff4d 	bl	8004980 <LL_EXTI_ClearFlag_0_31>

	button_status = true;
 8004ae6:	4b02      	ldr	r3, [pc, #8]	; (8004af0 <EXTI1_IRQHandler+0x14>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	701a      	strb	r2, [r3, #0]
}
 8004aec:	bf00      	nop
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	20002360 	.word	0x20002360

08004af4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8004af8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004afc:	f7ff ff40 	bl	8004980 <LL_EXTI_ClearFlag_0_31>

	rotate_status = true;
 8004b00:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <EXTI15_10_IRQHandler+0x44>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	701a      	strb	r2, [r3, #0]
	rotate_pin_A = GPIO_Read_Pin(14);
 8004b06:	200e      	movs	r0, #14
 8004b08:	f000 f85c 	bl	8004bc4 <GPIO_Read_Pin>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bf14      	ite	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	2300      	moveq	r3, #0
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	4b08      	ldr	r3, [pc, #32]	; (8004b3c <EXTI15_10_IRQHandler+0x48>)
 8004b1a:	701a      	strb	r2, [r3, #0]
	rotate_pin_B = GPIO_Read_Pin(15);
 8004b1c:	200f      	movs	r0, #15
 8004b1e:	f000 f851 	bl	8004bc4 <GPIO_Read_Pin>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf14      	ite	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <EXTI15_10_IRQHandler+0x4c>)
 8004b30:	701a      	strb	r2, [r3, #0]
}
 8004b32:	bf00      	nop
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20002361 	.word	0x20002361
 8004b3c:	20002362 	.word	0x20002362
 8004b40:	20002363 	.word	0x20002363

08004b44 <GetButton>:

bool GetButton(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
	return button_status;
 8004b48:	4b02      	ldr	r3, [pc, #8]	; (8004b54 <GetButton+0x10>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr
 8004b54:	20002360 	.word	0x20002360

08004b58 <ClearButton>:

void ClearButton()
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
    button_status = false;
 8004b5c:	4b03      	ldr	r3, [pc, #12]	; (8004b6c <ClearButton+0x14>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]
}
 8004b62:	bf00      	nop
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20002360 	.word	0x20002360

08004b70 <GetRotateStatus>:

bool GetRotateStatus(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
	return rotate_status;
 8004b74:	4b02      	ldr	r3, [pc, #8]	; (8004b80 <GetRotateStatus+0x10>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr
 8004b80:	20002361 	.word	0x20002361

08004b84 <ClearRotateStatus>:

void ClearRotateStatus()
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
    rotate_status = false;
 8004b88:	4b03      	ldr	r3, [pc, #12]	; (8004b98 <ClearRotateStatus+0x14>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	701a      	strb	r2, [r3, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20002361 	.word	0x20002361

08004b9c <GetRotatePinB>:

bool GetRotatePinB()
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
	return rotate_pin_A;
 8004ba0:	4b02      	ldr	r3, [pc, #8]	; (8004bac <GetRotatePinB+0x10>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr
 8004bac:	20002362 	.word	0x20002362

08004bb0 <GetRotatePinA>:

bool GetRotatePinA()
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
	return rotate_pin_B;
 8004bb4:	4b02      	ldr	r3, [pc, #8]	; (8004bc0 <GetRotatePinA+0x10>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bc80      	pop	{r7}
 8004bbe:	4770      	bx	lr
 8004bc0:	20002363 	.word	0x20002363

08004bc4 <GPIO_Read_Pin>:

uint8_t GPIO_Read_Pin(uint8_t mask)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]
	uint16_t port_bits = LL_GPIO_ReadInputPort(GPIOB);
 8004bce:	480a      	ldr	r0, [pc, #40]	; (8004bf8 <GPIO_Read_Pin+0x34>)
 8004bd0:	f7ff fee4 	bl	800499c <LL_GPIO_ReadInputPort>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	81fb      	strh	r3, [r7, #14]
	return ((port_bits & (1 << mask)) != 0);
 8004bd8:	89fa      	ldrh	r2, [r7, #14]
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	fa42 f303 	asr.w	r3, r2, r3
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bf14      	ite	ne
 8004be8:	2301      	movne	r3, #1
 8004bea:	2300      	moveq	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40010c00 	.word	0x40010c00

08004bfc <EncoderQueueInit>:

xQueueHandle encoder_queue;
EncoderRotateInfo xEncoder_info;

void EncoderQueueInit(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
	encoder_queue = xQueueCreate( 2, sizeof(EncoderRotateInfo));
 8004c00:	2200      	movs	r2, #0
 8004c02:	2104      	movs	r1, #4
 8004c04:	2002      	movs	r0, #2
 8004c06:	f7fe fb15 	bl	8003234 <xQueueGenericCreate>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	4b01      	ldr	r3, [pc, #4]	; (8004c14 <EncoderQueueInit+0x18>)
 8004c0e:	601a      	str	r2, [r3, #0]
}
 8004c10:	bf00      	nop
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	20002fd8 	.word	0x20002fd8

08004c18 <EncoderQueue_Send>:

void EncoderQueue_Send(uint16_t value, uint8_t button)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	460a      	mov	r2, r1
 8004c22:	80fb      	strh	r3, [r7, #6]
 8004c24:	4613      	mov	r3, r2
 8004c26:	717b      	strb	r3, [r7, #5]
	const portTickType xTicksToWait = 100 / portTICK_RATE_MS;
 8004c28:	2364      	movs	r3, #100	; 0x64
 8004c2a:	60fb      	str	r3, [r7, #12]
	xEncoder_info.button = button;
 8004c2c:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8004c30:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <EncoderQueue_Send+0x3c>)
 8004c32:	709a      	strb	r2, [r3, #2]
	xEncoder_info.state = value;
 8004c34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <EncoderQueue_Send+0x3c>)
 8004c3a:	801a      	strh	r2, [r3, #0]
	xQueueSendToBack(encoder_queue, &xEncoder_info, xTicksToWait);
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <EncoderQueue_Send+0x40>)
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	2300      	movs	r3, #0
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4903      	ldr	r1, [pc, #12]	; (8004c54 <EncoderQueue_Send+0x3c>)
 8004c46:	f7fe fb4d 	bl	80032e4 <xQueueGenericSend>
}
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20002fdc 	.word	0x20002fdc
 8004c58:	20002fd8 	.word	0x20002fd8

08004c5c <EncoderQueue_Receive>:

EncoderRotateInfo EncoderQueue_Receive(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
	EncoderRotateInfo value;
	xQueueReceive(encoder_queue, &value, 0);
 8004c62:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <EncoderQueue_Receive+0x30>)
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	4639      	mov	r1, r7
 8004c68:	2300      	movs	r3, #0
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f7fe fc34 	bl	80034d8 <xQueueGenericReceive>
	return value;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	2300      	movs	r3, #0
 8004c76:	88ba      	ldrh	r2, [r7, #4]
 8004c78:	f362 030f 	bfi	r3, r2, #0, #16
 8004c7c:	88fa      	ldrh	r2, [r7, #6]
 8004c7e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20002fd8 	.word	0x20002fd8

08004c90 <EncoderQueue_IsElements>:
bool EncoderQueue_IsElements(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
	if(uxQueueMessagesWaiting(encoder_queue) > 0)
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <EncoderQueue_IsElements+0x20>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fe fd2f 	bl	80036fc <uxQueueMessagesWaiting>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <EncoderQueue_IsElements+0x18>
	{
		return true;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <EncoderQueue_IsElements+0x1a>
	}
	return false;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20002fd8 	.word	0x20002fd8

08004cb4 <pxEncoder>:
#include "encoder_queue.h"
#include "encoder.h"
#include "cmsis_os.h"

static void pxEncoder(void * arg)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	EncoderInit();
 8004cbc:	f7fb fd34 	bl	8000728 <EncoderInit>
	static uint8_t encoder_button_step = 0;

	while(1)
	{
		switch(Encoder_State())
 8004cc0:	f7fb fd38 	bl	8000734 <Encoder_State>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d828      	bhi.n	8004d1c <pxEncoder+0x68>
 8004cca:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <pxEncoder+0x1c>)
 8004ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd0:	08004d1d 	.word	0x08004d1d
 8004cd4:	08004cfd 	.word	0x08004cfd
 8004cd8:	08004d0d 	.word	0x08004d0d
 8004cdc:	08004ce1 	.word	0x08004ce1
		{
			case eNone: break;
			case eButton:
			{
				encoder_button_step++;
 8004ce0:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <pxEncoder+0x78>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	4b10      	ldr	r3, [pc, #64]	; (8004d2c <pxEncoder+0x78>)
 8004cea:	701a      	strb	r2, [r3, #0]
				if(encoder_button_step > 4)
 8004cec:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <pxEncoder+0x78>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d915      	bls.n	8004d20 <pxEncoder+0x6c>
				{
					encoder_button_step = 0;
 8004cf4:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <pxEncoder+0x78>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
				}
				break;
 8004cfa:	e011      	b.n	8004d20 <pxEncoder+0x6c>
			}
			case eLeft:
			{
				EncoderQueue_Send(-1000, encoder_button_step);
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <pxEncoder+0x78>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	4619      	mov	r1, r3
 8004d02:	f64f 4018 	movw	r0, #64536	; 0xfc18
 8004d06:	f7ff ff87 	bl	8004c18 <EncoderQueue_Send>
				break;
 8004d0a:	e00a      	b.n	8004d22 <pxEncoder+0x6e>
			}
			case eRight:
			{
				EncoderQueue_Send(1000, encoder_button_step);
 8004d0c:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <pxEncoder+0x78>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	4619      	mov	r1, r3
 8004d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d16:	f7ff ff7f 	bl	8004c18 <EncoderQueue_Send>
				break;
 8004d1a:	e002      	b.n	8004d22 <pxEncoder+0x6e>
			}
			default: break;
 8004d1c:	bf00      	nop
 8004d1e:	e000      	b.n	8004d22 <pxEncoder+0x6e>
				break;
 8004d20:	bf00      	nop
		}
		osDelay(5);
 8004d22:	2005      	movs	r0, #5
 8004d24:	f7fd fe07 	bl	8002936 <osDelay>
		switch(Encoder_State())
 8004d28:	e7ca      	b.n	8004cc0 <pxEncoder+0xc>
 8004d2a:	bf00      	nop
 8004d2c:	20002364 	.word	0x20002364

08004d30 <EncoderTaskInit>:
	}
}

void EncoderTaskInit(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af02      	add	r7, sp, #8
	xTaskCreate(pxEncoder, "Encoder", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 8004d36:	2300      	movs	r3, #0
 8004d38:	9301      	str	r3, [sp, #4]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d44:	4903      	ldr	r1, [pc, #12]	; (8004d54 <EncoderTaskInit+0x24>)
 8004d46:	4804      	ldr	r0, [pc, #16]	; (8004d58 <EncoderTaskInit+0x28>)
 8004d48:	f7fe fe2a 	bl	80039a0 <xTaskCreate>
}
 8004d4c:	bf00      	nop
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	08007a84 	.word	0x08007a84
 8004d58:	08004cb5 	.word	0x08004cb5

08004d5c <espStart>:
#include <stdbool.h>

static uint8_t gMissConnection = 0;

static uint8_t espStart(int fails)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b0a2      	sub	sp, #136	; 0x88
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	if(GPIO_Read_Pin(1) == 0)
 8004d64:	2001      	movs	r0, #1
 8004d66:	f7ff ff2d 	bl	8004bc4 <GPIO_Read_Pin>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d123      	bne.n	8004db8 <espStart+0x5c>
	{
		while(ESP_SetModeSoftAP()==0 || ESP_SetParamsSoftAP("ESP", "12345678")==0 || ESP_StartTCPServer(80)==0)
 8004d70:	e00f      	b.n	8004d92 <espStart+0x36>
		{
			gMissConnection++;
 8004d72:	4b3b      	ldr	r3, [pc, #236]	; (8004e60 <espStart+0x104>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	3301      	adds	r3, #1
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	4b39      	ldr	r3, [pc, #228]	; (8004e60 <espStart+0x104>)
 8004d7c:	701a      	strb	r2, [r3, #0]
			ESP_Resset();
 8004d7e:	f7fb fa1f 	bl	80001c0 <ESP_Resset>
			if(gMissConnection >= fails)
 8004d82:	4b37      	ldr	r3, [pc, #220]	; (8004e60 <espStart+0x104>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	db01      	blt.n	8004d92 <espStart+0x36>
			{
				return 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e061      	b.n	8004e56 <espStart+0xfa>
		while(ESP_SetModeSoftAP()==0 || ESP_SetParamsSoftAP("ESP", "12345678")==0 || ESP_StartTCPServer(80)==0)
 8004d92:	f7fb fa89 	bl	80002a8 <ESP_SetModeSoftAP>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ea      	beq.n	8004d72 <espStart+0x16>
 8004d9c:	4931      	ldr	r1, [pc, #196]	; (8004e64 <espStart+0x108>)
 8004d9e:	4832      	ldr	r0, [pc, #200]	; (8004e68 <espStart+0x10c>)
 8004da0:	f7fb fa92 	bl	80002c8 <ESP_SetParamsSoftAP>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0e3      	beq.n	8004d72 <espStart+0x16>
 8004daa:	2050      	movs	r0, #80	; 0x50
 8004dac:	f7fb fb00 	bl	80003b0 <ESP_StartTCPServer>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0dd      	beq.n	8004d72 <espStart+0x16>
 8004db6:	e04d      	b.n	8004e54 <espStart+0xf8>

	}
	else
	{
		char ssid[64], paswd[64];
		I2C2_ReadData(0xA0, (uint8_t *)ssid, 32);
 8004db8:	f107 0308 	add.w	r3, r7, #8
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	20a0      	movs	r0, #160	; 0xa0
 8004dc2:	f000 faab 	bl	800531c <I2C2_ReadData>
		delay(20);
 8004dc6:	2014      	movs	r0, #20
 8004dc8:	f7ff fd42 	bl	8004850 <delay>
		I2C2_ReadData(0xD0, (uint8_t *)paswd, 32);
 8004dcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	20d0      	movs	r0, #208	; 0xd0
 8004dd6:	f000 faa1 	bl	800531c <I2C2_ReadData>

		while(strlen(ssid)==0 || ESP_SetModeStation()==0 || ESP_SetParamsStation(ssid, paswd)==0 || ESP_StartTCPServer(80)==0)
 8004dda:	e020      	b.n	8004e1e <espStart+0xc2>
		{
			I2C2_ReadData(0xA0, (uint8_t *)ssid, 32);
 8004ddc:	f107 0308 	add.w	r3, r7, #8
 8004de0:	2220      	movs	r2, #32
 8004de2:	4619      	mov	r1, r3
 8004de4:	20a0      	movs	r0, #160	; 0xa0
 8004de6:	f000 fa99 	bl	800531c <I2C2_ReadData>
			delay(20);
 8004dea:	2014      	movs	r0, #20
 8004dec:	f7ff fd30 	bl	8004850 <delay>
			I2C2_ReadData(0xD0, (uint8_t *)paswd, 32);
 8004df0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004df4:	2220      	movs	r2, #32
 8004df6:	4619      	mov	r1, r3
 8004df8:	20d0      	movs	r0, #208	; 0xd0
 8004dfa:	f000 fa8f 	bl	800531c <I2C2_ReadData>

			gMissConnection++;
 8004dfe:	4b18      	ldr	r3, [pc, #96]	; (8004e60 <espStart+0x104>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	3301      	adds	r3, #1
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	4b16      	ldr	r3, [pc, #88]	; (8004e60 <espStart+0x104>)
 8004e08:	701a      	strb	r2, [r3, #0]
			ESP_Resset();
 8004e0a:	f7fb f9d9 	bl	80001c0 <ESP_Resset>
			if(gMissConnection >= fails)
 8004e0e:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <espStart+0x104>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	db01      	blt.n	8004e1e <espStart+0xc2>
			{
				return 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e01b      	b.n	8004e56 <espStart+0xfa>
		while(strlen(ssid)==0 || ESP_SetModeStation()==0 || ESP_SetParamsStation(ssid, paswd)==0 || ESP_StartTCPServer(80)==0)
 8004e1e:	f107 0308 	add.w	r3, r7, #8
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0d9      	beq.n	8004ddc <espStart+0x80>
 8004e28:	f7fb fa36 	bl	8000298 <ESP_SetModeStation>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0d4      	beq.n	8004ddc <espStart+0x80>
 8004e32:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e36:	f107 0308 	add.w	r3, r7, #8
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fb fa85 	bl	800034c <ESP_SetParamsStation>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0c9      	beq.n	8004ddc <espStart+0x80>
 8004e48:	2050      	movs	r0, #80	; 0x50
 8004e4a:	f7fb fab1 	bl	80003b0 <ESP_StartTCPServer>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0c3      	beq.n	8004ddc <espStart+0x80>
			}
		}
	}

	return 1;
 8004e54:	2301      	movs	r3, #1
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3788      	adds	r7, #136	; 0x88
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20002365 	.word	0x20002365
 8004e64:	08007a8c 	.word	0x08007a8c
 8004e68:	08007a98 	.word	0x08007a98

08004e6c <pxESP>:

static void pxESP(void * arg)
{
 8004e6c:	b590      	push	{r4, r7, lr}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	uint8_t config_flag = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	73fb      	strb	r3, [r7, #15]
	StatusLedInit();
 8004e78:	f001 fad4 	bl	8006424 <StatusLedInit>
	ESPInit();
 8004e7c:	f7fb f998 	bl	80001b0 <ESPInit>

	if(espStart(5))
 8004e80:	2005      	movs	r0, #5
 8004e82:	f7ff ff6b 	bl	8004d5c <espStart>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <pxESP+0x26>
	{
		StatusLedON();
 8004e8c:	f001 faf2 	bl	8006474 <StatusLedON>
 8004e90:	e001      	b.n	8004e96 <pxESP+0x2a>
	}
	else ErrorBlink();
 8004e92:	f001 fafb 	bl	800648c <ErrorBlink>

	while(1)
	{
		if(strlen(GetSSID()) > 1 && config_flag == 0)
 8004e96:	f7fb fc15 	bl	80006c4 <GetSSID>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fb f957 	bl	8000150 <strlen>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d934      	bls.n	8004f12 <pxESP+0xa6>
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d131      	bne.n	8004f12 <pxESP+0xa6>
		{
			ESP_StopTCPServer(80); //dummy for reset tcp flag
 8004eae:	2050      	movs	r0, #80	; 0x50
 8004eb0:	f7fb fac4 	bl	800043c <ESP_StopTCPServer>
			config_flag = 1;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	73fb      	strb	r3, [r7, #15]

			if(ESP_SetModeBoth()==0 || ESP_SetParamsStation(GetSSID(), GetPasw())==0 || ESP_StartTCPServer(80)==0)
 8004eb8:	f7fb f9fe 	bl	80002b8 <ESP_SetModeBoth>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d012      	beq.n	8004ee8 <pxESP+0x7c>
 8004ec2:	f7fb fbff 	bl	80006c4 <GetSSID>
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	f7fb fc24 	bl	8000714 <GetPasw>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f7fb fa3b 	bl	800034c <ESP_SetParamsStation>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <pxESP+0x7c>
 8004edc:	2050      	movs	r0, #80	; 0x50
 8004ede:	f7fb fa67 	bl	80003b0 <ESP_StartTCPServer>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <pxESP+0x80>
			{
				config_flag = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	73fb      	strb	r3, [r7, #15]
			}
			I2C2_SendData(0xA0, (uint8_t *)GetSSID(), 32);
 8004eec:	f7fb fbea 	bl	80006c4 <GetSSID>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	20a0      	movs	r0, #160	; 0xa0
 8004ef8:	f000 f9a8 	bl	800524c <I2C2_SendData>
			delay(5);
 8004efc:	2005      	movs	r0, #5
 8004efe:	f7ff fca7 	bl	8004850 <delay>
			I2C2_SendData(0xD0, (uint8_t *)GetPasw(), 32);
 8004f02:	f7fb fc07 	bl	8000714 <GetPasw>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2220      	movs	r2, #32
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	20d0      	movs	r0, #208	; 0xd0
 8004f0e:	f000 f99d 	bl	800524c <I2C2_SendData>
		}
		ESP_Request(PAGES, FUNCTIONS, 4);
 8004f12:	2204      	movs	r2, #4
 8004f14:	4903      	ldr	r1, [pc, #12]	; (8004f24 <pxESP+0xb8>)
 8004f16:	4804      	ldr	r0, [pc, #16]	; (8004f28 <pxESP+0xbc>)
 8004f18:	f7fb ff5c 	bl	8000dd4 <ESP_Request>
		osDelay(10);
 8004f1c:	200a      	movs	r0, #10
 8004f1e:	f7fd fd0a 	bl	8002936 <osDelay>
		if(strlen(GetSSID()) > 1 && config_flag == 0)
 8004f22:	e7b8      	b.n	8004e96 <pxESP+0x2a>
 8004f24:	08007acc 	.word	0x08007acc
 8004f28:	20000000 	.word	0x20000000

08004f2c <ESPTaskInit>:
	}
}


void ESPTaskInit(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af02      	add	r7, sp, #8
	xTaskCreate(pxESP, "ESP", configMINIMAL_STACK_SIZE, NULL, osPriorityAboveNormal, NULL);
 8004f32:	2300      	movs	r3, #0
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	2301      	movs	r3, #1
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f40:	4903      	ldr	r1, [pc, #12]	; (8004f50 <ESPTaskInit+0x24>)
 8004f42:	4804      	ldr	r0, [pc, #16]	; (8004f54 <ESPTaskInit+0x28>)
 8004f44:	f7fe fd2c 	bl	80039a0 <xTaskCreate>
}
 8004f48:	bf00      	nop
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	08007a98 	.word	0x08007a98
 8004f54:	08004e6d 	.word	0x08004e6d

08004f58 <LL_I2C_EnableClockStretching>:
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	601a      	str	r2, [r3, #0]
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr

08004f76 <LL_I2C_DisableGeneralCall>:
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	601a      	str	r2, [r3, #0]
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr

08004f94 <LL_I2C_SetOwnAddress2>:
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60da      	str	r2, [r3, #12]
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr

08004fb8 <LL_I2C_DisableOwnAddress2>:
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f023 0201 	bic.w	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60da      	str	r2, [r3, #12]
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr

08004fd6 <LL_I2C_IsActiveFlag_TXE>:
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe6:	2b80      	cmp	r3, #128	; 0x80
 8004fe8:	bf0c      	ite	eq
 8004fea:	2301      	moveq	r3, #1
 8004fec:	2300      	movne	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr

08004ffa <LL_I2C_IsActiveFlag_RXNE>:
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500a:	2b40      	cmp	r3, #64	; 0x40
 800500c:	bf0c      	ite	eq
 800500e:	2301      	moveq	r3, #1
 8005010:	2300      	movne	r3, #0
 8005012:	b2db      	uxtb	r3, r3
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr

0800501e <LL_I2C_IsActiveFlag_SB>:
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b01      	cmp	r3, #1
 8005030:	bf0c      	ite	eq
 8005032:	2301      	moveq	r3, #1
 8005034:	2300      	movne	r3, #0
 8005036:	b2db      	uxtb	r3, r3
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr

08005042 <LL_I2C_IsActiveFlag_ADDR>:
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b02      	cmp	r3, #2
 8005054:	bf0c      	ite	eq
 8005056:	2301      	moveq	r3, #1
 8005058:	2300      	movne	r3, #0
 800505a:	b2db      	uxtb	r3, r3
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	bc80      	pop	{r7}
 8005064:	4770      	bx	lr

08005066 <LL_I2C_ClearFlag_ADDR>:
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  tmpreg = I2Cx->SR1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8005074:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800507c:	68fb      	ldr	r3, [r7, #12]
}
 800507e:	bf00      	nop
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <LL_I2C_AcknowledgeNextData>:
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	601a      	str	r2, [r3, #0]
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr

080050ac <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	601a      	str	r2, [r3, #0]
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr

080050ca <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	601a      	str	r2, [r3, #0]
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bc80      	pop	{r7}
 80050e6:	4770      	bx	lr

080050e8 <LL_I2C_DisableBitPOS>:
  * @rmtoll CR1          POS           LL_I2C_DisableBitPOS
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableBitPOS(I2C_TypeDef *I2Cx)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	601a      	str	r2, [r3, #0]
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr

08005106 <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	b2db      	uxtb	r3, r3
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr

0800511e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	460b      	mov	r3, r1
 8005128:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	611a      	str	r2, [r3, #16]
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr

08005144 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800514c:	4908      	ldr	r1, [pc, #32]	; (8005170 <LL_APB1_GRP1_EnableClock+0x2c>)
 800514e:	4b08      	ldr	r3, [pc, #32]	; (8005170 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005150:	69da      	ldr	r2, [r3, #28]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4313      	orrs	r3, r2
 8005156:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005158:	4b05      	ldr	r3, [pc, #20]	; (8005170 <LL_APB1_GRP1_EnableClock+0x2c>)
 800515a:	69da      	ldr	r2, [r3, #28]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4013      	ands	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005162:	68fb      	ldr	r3, [r7, #12]
}
 8005164:	bf00      	nop
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000

08005174 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800517c:	4908      	ldr	r1, [pc, #32]	; (80051a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800517e:	4b08      	ldr	r3, [pc, #32]	; (80051a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4313      	orrs	r3, r2
 8005186:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005188:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800518a:	699a      	ldr	r2, [r3, #24]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4013      	ands	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005192:	68fb      	ldr	r3, [r7, #12]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40021000 	.word	0x40021000

080051a4 <MX_I2C2_Init>:
#define I2C_REQUEST_READ                        0x01
#define SLAVE_OWN_ADDRESS                       0xA0
#define TIMEOUT									100

void MX_I2C2_Init(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08c      	sub	sp, #48	; 0x30
 80051a8:	af00      	add	r7, sp, #0
	LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80051aa:	f107 0318 	add.w	r3, r7, #24
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	605a      	str	r2, [r3, #4]
 80051b4:	609a      	str	r2, [r3, #8]
 80051b6:	60da      	str	r2, [r3, #12]
 80051b8:	611a      	str	r2, [r3, #16]
 80051ba:	615a      	str	r2, [r3, #20]
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051bc:	1d3b      	adds	r3, r7, #4
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	605a      	str	r2, [r3, #4]
 80051c4:	609a      	str	r2, [r3, #8]
 80051c6:	60da      	str	r2, [r3, #12]
 80051c8:	611a      	str	r2, [r3, #16]

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80051ca:	2008      	movs	r0, #8
 80051cc:	f7ff ffd2 	bl	8005174 <LL_APB2_GRP1_EnableClock>
	  /**I2C2 GPIO Configuration
	  PB10   ------> I2C2_SCL
	  PB11   ------> I2C2_SDA
	  */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80051d0:	4b1a      	ldr	r3, [pc, #104]	; (800523c <MX_I2C2_Init+0x98>)
 80051d2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80051d4:	2309      	movs	r3, #9
 80051d6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80051d8:	2303      	movs	r3, #3
 80051da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80051dc:	2304      	movs	r3, #4
 80051de:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051e0:	1d3b      	adds	r3, r7, #4
 80051e2:	4619      	mov	r1, r3
 80051e4:	4816      	ldr	r0, [pc, #88]	; (8005240 <MX_I2C2_Init+0x9c>)
 80051e6:	f7fc fc74 	bl	8001ad2 <LL_GPIO_Init>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 80051ea:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80051ee:	f7ff ffa9 	bl	8005144 <LL_APB1_GRP1_EnableClock>

	  /** I2C Initialization
	  */
	LL_I2C_DisableOwnAddress2(I2C2);
 80051f2:	4814      	ldr	r0, [pc, #80]	; (8005244 <MX_I2C2_Init+0xa0>)
 80051f4:	f7ff fee0 	bl	8004fb8 <LL_I2C_DisableOwnAddress2>
	LL_I2C_DisableGeneralCall(I2C2);
 80051f8:	4812      	ldr	r0, [pc, #72]	; (8005244 <MX_I2C2_Init+0xa0>)
 80051fa:	f7ff febc 	bl	8004f76 <LL_I2C_DisableGeneralCall>
	LL_I2C_EnableClockStretching(I2C2);
 80051fe:	4811      	ldr	r0, [pc, #68]	; (8005244 <MX_I2C2_Init+0xa0>)
 8005200:	f7ff feaa 	bl	8004f58 <LL_I2C_EnableClockStretching>
	I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8005204:	2300      	movs	r3, #0
 8005206:	61bb      	str	r3, [r7, #24]
	I2C_InitStruct.ClockSpeed = 100000;
 8005208:	4b0f      	ldr	r3, [pc, #60]	; (8005248 <MX_I2C2_Init+0xa4>)
 800520a:	61fb      	str	r3, [r7, #28]
	I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800520c:	2300      	movs	r3, #0
 800520e:	623b      	str	r3, [r7, #32]
	I2C_InitStruct.OwnAddress1 = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8005214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005218:	62bb      	str	r3, [r7, #40]	; 0x28
	I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800521a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_I2C_Init(I2C2, &I2C_InitStruct);
 8005220:	f107 0318 	add.w	r3, r7, #24
 8005224:	4619      	mov	r1, r3
 8005226:	4807      	ldr	r0, [pc, #28]	; (8005244 <MX_I2C2_Init+0xa0>)
 8005228:	f7fc fd9e 	bl	8001d68 <LL_I2C_Init>
	LL_I2C_SetOwnAddress2(I2C2, 0);
 800522c:	2100      	movs	r1, #0
 800522e:	4805      	ldr	r0, [pc, #20]	; (8005244 <MX_I2C2_Init+0xa0>)
 8005230:	f7ff feb0 	bl	8004f94 <LL_I2C_SetOwnAddress2>
}
 8005234:	bf00      	nop
 8005236:	3730      	adds	r7, #48	; 0x30
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	040c000c 	.word	0x040c000c
 8005240:	40010c00 	.word	0x40010c00
 8005244:	40005800 	.word	0x40005800
 8005248:	000186a0 	.word	0x000186a0

0800524c <I2C2_SendData>:

bool I2C2_SendData(uint16_t addr, uint8_t * data, uint32_t data_length)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	4603      	mov	r3, r0
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	81fb      	strh	r3, [r7, #14]
	LL_I2C_DisableBitPOS(I2C2);
 800525a:	482f      	ldr	r0, [pc, #188]	; (8005318 <I2C2_SendData+0xcc>)
 800525c:	f7ff ff44 	bl	80050e8 <LL_I2C_DisableBitPOS>
	LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_ACK);
 8005260:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005264:	482c      	ldr	r0, [pc, #176]	; (8005318 <I2C2_SendData+0xcc>)
 8005266:	f7ff ff0f 	bl	8005088 <LL_I2C_AcknowledgeNextData>
	LL_I2C_GenerateStartCondition(I2C2);
 800526a:	482b      	ldr	r0, [pc, #172]	; (8005318 <I2C2_SendData+0xcc>)
 800526c:	f7ff ff1e 	bl	80050ac <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C2));
 8005270:	bf00      	nop
 8005272:	4829      	ldr	r0, [pc, #164]	; (8005318 <I2C2_SendData+0xcc>)
 8005274:	f7ff fed3 	bl	800501e <LL_I2C_IsActiveFlag_SB>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0f9      	beq.n	8005272 <I2C2_SendData+0x26>

	(void) I2C2->SR1;
 800527e:	4b26      	ldr	r3, [pc, #152]	; (8005318 <I2C2_SendData+0xcc>)
 8005280:	695b      	ldr	r3, [r3, #20]
	LL_I2C_TransmitData8(I2C2, SLAVE_OWN_ADDRESS | I2C_REQUEST_WRITE);
 8005282:	21a0      	movs	r1, #160	; 0xa0
 8005284:	4824      	ldr	r0, [pc, #144]	; (8005318 <I2C2_SendData+0xcc>)
 8005286:	f7ff ff4a 	bl	800511e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C2));
 800528a:	bf00      	nop
 800528c:	4822      	ldr	r0, [pc, #136]	; (8005318 <I2C2_SendData+0xcc>)
 800528e:	f7ff fed8 	bl	8005042 <LL_I2C_IsActiveFlag_ADDR>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f9      	beq.n	800528c <I2C2_SendData+0x40>

	LL_I2C_ClearFlag_ADDR(I2C2);
 8005298:	481f      	ldr	r0, [pc, #124]	; (8005318 <I2C2_SendData+0xcc>)
 800529a:	f7ff fee4 	bl	8005066 <LL_I2C_ClearFlag_ADDR>

	LL_I2C_TransmitData8(I2C2, (uint8_t) (addr>>8));
 800529e:	89fb      	ldrh	r3, [r7, #14]
 80052a0:	0a1b      	lsrs	r3, r3, #8
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	4619      	mov	r1, r3
 80052a8:	481b      	ldr	r0, [pc, #108]	; (8005318 <I2C2_SendData+0xcc>)
 80052aa:	f7ff ff38 	bl	800511e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C2));
 80052ae:	bf00      	nop
 80052b0:	4819      	ldr	r0, [pc, #100]	; (8005318 <I2C2_SendData+0xcc>)
 80052b2:	f7ff fe90 	bl	8004fd6 <LL_I2C_IsActiveFlag_TXE>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0f9      	beq.n	80052b0 <I2C2_SendData+0x64>

	LL_I2C_TransmitData8(I2C2, (uint8_t) addr);
 80052bc:	89fb      	ldrh	r3, [r7, #14]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	4619      	mov	r1, r3
 80052c2:	4815      	ldr	r0, [pc, #84]	; (8005318 <I2C2_SendData+0xcc>)
 80052c4:	f7ff ff2b 	bl	800511e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C2));
 80052c8:	bf00      	nop
 80052ca:	4813      	ldr	r0, [pc, #76]	; (8005318 <I2C2_SendData+0xcc>)
 80052cc:	f7ff fe83 	bl	8004fd6 <LL_I2C_IsActiveFlag_TXE>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f9      	beq.n	80052ca <I2C2_SendData+0x7e>

	for(int i = 0; i < data_length; i++)
 80052d6:	2300      	movs	r3, #0
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	e011      	b.n	8005300 <I2C2_SendData+0xb4>
	{
		LL_I2C_TransmitData8(I2C2, data[i]);
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	4413      	add	r3, r2
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	4619      	mov	r1, r3
 80052e6:	480c      	ldr	r0, [pc, #48]	; (8005318 <I2C2_SendData+0xcc>)
 80052e8:	f7ff ff19 	bl	800511e <LL_I2C_TransmitData8>
		while(!LL_I2C_IsActiveFlag_TXE(I2C2));
 80052ec:	bf00      	nop
 80052ee:	480a      	ldr	r0, [pc, #40]	; (8005318 <I2C2_SendData+0xcc>)
 80052f0:	f7ff fe71 	bl	8004fd6 <LL_I2C_IsActiveFlag_TXE>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0f9      	beq.n	80052ee <I2C2_SendData+0xa2>
	for(int i = 0; i < data_length; i++)
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	3301      	adds	r3, #1
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	429a      	cmp	r2, r3
 8005306:	d3e9      	bcc.n	80052dc <I2C2_SendData+0x90>
	}
	LL_I2C_GenerateStopCondition(I2C2);
 8005308:	4803      	ldr	r0, [pc, #12]	; (8005318 <I2C2_SendData+0xcc>)
 800530a:	f7ff fede 	bl	80050ca <LL_I2C_GenerateStopCondition>
	return 1;
 800530e:	2301      	movs	r3, #1
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40005800 	.word	0x40005800

0800531c <I2C2_ReadData>:

bool I2C2_ReadData(uint16_t addr, uint8_t * data, uint32_t data_length)
{
 800531c:	b590      	push	{r4, r7, lr}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	4603      	mov	r3, r0
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	81fb      	strh	r3, [r7, #14]
  LL_I2C_DisableBitPOS(I2C2);
 800532a:	4849      	ldr	r0, [pc, #292]	; (8005450 <I2C2_ReadData+0x134>)
 800532c:	f7ff fedc 	bl	80050e8 <LL_I2C_DisableBitPOS>
  LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_ACK);
 8005330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005334:	4846      	ldr	r0, [pc, #280]	; (8005450 <I2C2_ReadData+0x134>)
 8005336:	f7ff fea7 	bl	8005088 <LL_I2C_AcknowledgeNextData>
  LL_I2C_GenerateStartCondition(I2C2);
 800533a:	4845      	ldr	r0, [pc, #276]	; (8005450 <I2C2_ReadData+0x134>)
 800533c:	f7ff feb6 	bl	80050ac <LL_I2C_GenerateStartCondition>
  while(!LL_I2C_IsActiveFlag_SB(I2C2));
 8005340:	bf00      	nop
 8005342:	4843      	ldr	r0, [pc, #268]	; (8005450 <I2C2_ReadData+0x134>)
 8005344:	f7ff fe6b 	bl	800501e <LL_I2C_IsActiveFlag_SB>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f9      	beq.n	8005342 <I2C2_ReadData+0x26>

  (void) I2C2->SR1;
 800534e:	4b40      	ldr	r3, [pc, #256]	; (8005450 <I2C2_ReadData+0x134>)
 8005350:	695b      	ldr	r3, [r3, #20]
  LL_I2C_TransmitData8(I2C2, SLAVE_OWN_ADDRESS | I2C_REQUEST_WRITE);
 8005352:	21a0      	movs	r1, #160	; 0xa0
 8005354:	483e      	ldr	r0, [pc, #248]	; (8005450 <I2C2_ReadData+0x134>)
 8005356:	f7ff fee2 	bl	800511e <LL_I2C_TransmitData8>
  while(!LL_I2C_IsActiveFlag_ADDR(I2C2));
 800535a:	bf00      	nop
 800535c:	483c      	ldr	r0, [pc, #240]	; (8005450 <I2C2_ReadData+0x134>)
 800535e:	f7ff fe70 	bl	8005042 <LL_I2C_IsActiveFlag_ADDR>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0f9      	beq.n	800535c <I2C2_ReadData+0x40>

  LL_I2C_ClearFlag_ADDR(I2C2);
 8005368:	4839      	ldr	r0, [pc, #228]	; (8005450 <I2C2_ReadData+0x134>)
 800536a:	f7ff fe7c 	bl	8005066 <LL_I2C_ClearFlag_ADDR>
  LL_I2C_TransmitData8(I2C2, (uint8_t) (addr>>8));
 800536e:	89fb      	ldrh	r3, [r7, #14]
 8005370:	0a1b      	lsrs	r3, r3, #8
 8005372:	b29b      	uxth	r3, r3
 8005374:	b2db      	uxtb	r3, r3
 8005376:	4619      	mov	r1, r3
 8005378:	4835      	ldr	r0, [pc, #212]	; (8005450 <I2C2_ReadData+0x134>)
 800537a:	f7ff fed0 	bl	800511e <LL_I2C_TransmitData8>
  while(!LL_I2C_IsActiveFlag_TXE(I2C2));
 800537e:	bf00      	nop
 8005380:	4833      	ldr	r0, [pc, #204]	; (8005450 <I2C2_ReadData+0x134>)
 8005382:	f7ff fe28 	bl	8004fd6 <LL_I2C_IsActiveFlag_TXE>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f9      	beq.n	8005380 <I2C2_ReadData+0x64>

  LL_I2C_TransmitData8(I2C2, (uint8_t) addr);
 800538c:	89fb      	ldrh	r3, [r7, #14]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	4619      	mov	r1, r3
 8005392:	482f      	ldr	r0, [pc, #188]	; (8005450 <I2C2_ReadData+0x134>)
 8005394:	f7ff fec3 	bl	800511e <LL_I2C_TransmitData8>
  while(!LL_I2C_IsActiveFlag_TXE(I2C2));
 8005398:	bf00      	nop
 800539a:	482d      	ldr	r0, [pc, #180]	; (8005450 <I2C2_ReadData+0x134>)
 800539c:	f7ff fe1b 	bl	8004fd6 <LL_I2C_IsActiveFlag_TXE>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f9      	beq.n	800539a <I2C2_ReadData+0x7e>

  LL_I2C_GenerateStartCondition(I2C2);
 80053a6:	482a      	ldr	r0, [pc, #168]	; (8005450 <I2C2_ReadData+0x134>)
 80053a8:	f7ff fe80 	bl	80050ac <LL_I2C_GenerateStartCondition>
  while(!LL_I2C_IsActiveFlag_SB(I2C2));
 80053ac:	bf00      	nop
 80053ae:	4828      	ldr	r0, [pc, #160]	; (8005450 <I2C2_ReadData+0x134>)
 80053b0:	f7ff fe35 	bl	800501e <LL_I2C_IsActiveFlag_SB>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f9      	beq.n	80053ae <I2C2_ReadData+0x92>
  (void) I2C2->SR1;
 80053ba:	4b25      	ldr	r3, [pc, #148]	; (8005450 <I2C2_ReadData+0x134>)
 80053bc:	695b      	ldr	r3, [r3, #20]
  LL_I2C_TransmitData8(I2C2, SLAVE_OWN_ADDRESS | I2C_REQUEST_READ);
 80053be:	21a1      	movs	r1, #161	; 0xa1
 80053c0:	4823      	ldr	r0, [pc, #140]	; (8005450 <I2C2_ReadData+0x134>)
 80053c2:	f7ff feac 	bl	800511e <LL_I2C_TransmitData8>
  while (!LL_I2C_IsActiveFlag_ADDR(I2C2));
 80053c6:	bf00      	nop
 80053c8:	4821      	ldr	r0, [pc, #132]	; (8005450 <I2C2_ReadData+0x134>)
 80053ca:	f7ff fe3a 	bl	8005042 <LL_I2C_IsActiveFlag_ADDR>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0f9      	beq.n	80053c8 <I2C2_ReadData+0xac>
  LL_I2C_ClearFlag_ADDR(I2C2);
 80053d4:	481e      	ldr	r0, [pc, #120]	; (8005450 <I2C2_ReadData+0x134>)
 80053d6:	f7ff fe46 	bl	8005066 <LL_I2C_ClearFlag_ADDR>
  for(int i = 0; i < data_length; i++)
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	e02d      	b.n	800543c <I2C2_ReadData+0x120>
  {
    if(i < (data_length-1))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	1e5a      	subs	r2, r3, #1
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d90f      	bls.n	800540a <I2C2_ReadData+0xee>
    {
      while(!LL_I2C_IsActiveFlag_RXNE(I2C2));
 80053ea:	bf00      	nop
 80053ec:	4818      	ldr	r0, [pc, #96]	; (8005450 <I2C2_ReadData+0x134>)
 80053ee:	f7ff fe04 	bl	8004ffa <LL_I2C_IsActiveFlag_RXNE>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0f9      	beq.n	80053ec <I2C2_ReadData+0xd0>
      data[i] = LL_I2C_ReceiveData8(I2C2);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	18d4      	adds	r4, r2, r3
 80053fe:	4814      	ldr	r0, [pc, #80]	; (8005450 <I2C2_ReadData+0x134>)
 8005400:	f7ff fe81 	bl	8005106 <LL_I2C_ReceiveData8>
 8005404:	4603      	mov	r3, r0
 8005406:	7023      	strb	r3, [r4, #0]
 8005408:	e015      	b.n	8005436 <I2C2_ReadData+0x11a>
    }
    else
    {
      LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_NACK);
 800540a:	2100      	movs	r1, #0
 800540c:	4810      	ldr	r0, [pc, #64]	; (8005450 <I2C2_ReadData+0x134>)
 800540e:	f7ff fe3b 	bl	8005088 <LL_I2C_AcknowledgeNextData>
      LL_I2C_GenerateStopCondition(I2C2);
 8005412:	480f      	ldr	r0, [pc, #60]	; (8005450 <I2C2_ReadData+0x134>)
 8005414:	f7ff fe59 	bl	80050ca <LL_I2C_GenerateStopCondition>
      while(!LL_I2C_IsActiveFlag_RXNE(I2C2));
 8005418:	bf00      	nop
 800541a:	480d      	ldr	r0, [pc, #52]	; (8005450 <I2C2_ReadData+0x134>)
 800541c:	f7ff fded 	bl	8004ffa <LL_I2C_IsActiveFlag_RXNE>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0f9      	beq.n	800541a <I2C2_ReadData+0xfe>
      data[i] = LL_I2C_ReceiveData8(I2C2);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	18d4      	adds	r4, r2, r3
 800542c:	4808      	ldr	r0, [pc, #32]	; (8005450 <I2C2_ReadData+0x134>)
 800542e:	f7ff fe6a 	bl	8005106 <LL_I2C_ReceiveData8>
 8005432:	4603      	mov	r3, r0
 8005434:	7023      	strb	r3, [r4, #0]
  for(int i = 0; i < data_length; i++)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	3301      	adds	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	429a      	cmp	r2, r3
 8005442:	d3cd      	bcc.n	80053e0 <I2C2_ReadData+0xc4>
    }
  }
  return 1;
 8005444:	2301      	movs	r3, #1
}
 8005446:	4618      	mov	r0, r3
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	bd90      	pop	{r4, r7, pc}
 800544e:	bf00      	nop
 8005450:	40005800 	.word	0x40005800

08005454 <NVIC_GetPriorityGrouping>:
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005458:	4b04      	ldr	r3, [pc, #16]	; (800546c <NVIC_GetPriorityGrouping+0x18>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	0a1b      	lsrs	r3, r3, #8
 800545e:	f003 0307 	and.w	r3, r3, #7
}
 8005462:	4618      	mov	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	e000ed00 	.word	0xe000ed00

08005470 <NVIC_EnableIRQ>:
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800547a:	4908      	ldr	r1, [pc, #32]	; (800549c <NVIC_EnableIRQ+0x2c>)
 800547c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	79fa      	ldrb	r2, [r7, #7]
 8005484:	f002 021f 	and.w	r2, r2, #31
 8005488:	2001      	movs	r0, #1
 800548a:	fa00 f202 	lsl.w	r2, r0, r2
 800548e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr
 800549c:	e000e100 	.word	0xe000e100

080054a0 <NVIC_SetPriority>:
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	4603      	mov	r3, r0
 80054a8:	6039      	str	r1, [r7, #0]
 80054aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80054ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	da0b      	bge.n	80054cc <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054b4:	490d      	ldr	r1, [pc, #52]	; (80054ec <NVIC_SetPriority+0x4c>)
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	3b04      	subs	r3, #4
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	0112      	lsls	r2, r2, #4
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	440b      	add	r3, r1
 80054c8:	761a      	strb	r2, [r3, #24]
}
 80054ca:	e009      	b.n	80054e0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054cc:	4908      	ldr	r1, [pc, #32]	; (80054f0 <NVIC_SetPriority+0x50>)
 80054ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	0112      	lsls	r2, r2, #4
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	440b      	add	r3, r1
 80054dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bc80      	pop	{r7}
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	e000ed00 	.word	0xe000ed00
 80054f0:	e000e100 	.word	0xe000e100

080054f4 <NVIC_EncodePriority>:
{
 80054f4:	b480      	push	{r7}
 80054f6:	b089      	sub	sp, #36	; 0x24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f1c3 0307 	rsb	r3, r3, #7
 800550e:	2b04      	cmp	r3, #4
 8005510:	bf28      	it	cs
 8005512:	2304      	movcs	r3, #4
 8005514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	3304      	adds	r3, #4
 800551a:	2b06      	cmp	r3, #6
 800551c:	d902      	bls.n	8005524 <NVIC_EncodePriority+0x30>
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	3b03      	subs	r3, #3
 8005522:	e000      	b.n	8005526 <NVIC_EncodePriority+0x32>
 8005524:	2300      	movs	r3, #0
 8005526:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005528:	2201      	movs	r2, #1
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	1e5a      	subs	r2, r3, #1
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	401a      	ands	r2, r3
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800553a:	2101      	movs	r1, #1
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	fa01 f303 	lsl.w	r3, r1, r3
 8005542:	1e59      	subs	r1, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005548:	4313      	orrs	r3, r2
}
 800554a:	4618      	mov	r0, r3
 800554c:	3724      	adds	r7, #36	; 0x24
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <LL_ADC_REG_SetSequencerRanks>:
{
 8005554:	b490      	push	{r4, r7}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	332c      	adds	r3, #44	; 0x2c
 8005564:	4619      	mov	r1, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800556c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	fa93 f3a3 	rbit	r3, r3
 8005578:	613b      	str	r3, [r7, #16]
  return(result);
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	fab3 f383 	clz	r3, r3
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	440b      	add	r3, r1
 8005588:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800558a:	6822      	ldr	r2, [r4, #0]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f003 031f 	and.w	r3, r3, #31
 8005592:	211f      	movs	r1, #31
 8005594:	fa01 f303 	lsl.w	r3, r1, r3
 8005598:	43db      	mvns	r3, r3
 800559a:	401a      	ands	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f003 011f 	and.w	r1, r3, #31
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	fa01 f303 	lsl.w	r3, r1, r3
 80055ac:	4313      	orrs	r3, r2
 80055ae:	6023      	str	r3, [r4, #0]
}
 80055b0:	bf00      	nop
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bc90      	pop	{r4, r7}
 80055b8:	4770      	bx	lr

080055ba <LL_ADC_SetChannelSamplingTime>:
{
 80055ba:	b490      	push	{r4, r7}
 80055bc:	b08a      	sub	sp, #40	; 0x28
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	330c      	adds	r3, #12
 80055ca:	4619      	mov	r1, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80055d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	fa93 f3a3 	rbit	r3, r3
 80055de:	613b      	str	r3, [r7, #16]
  return(result);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	fab3 f383 	clz	r3, r3
 80055e6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80055f0:	6822      	ldr	r2, [r4, #0]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 80055f8:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 80055fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	fa93 f3a3 	rbit	r3, r3
 8005604:	61bb      	str	r3, [r7, #24]
  return(result);
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	fab3 f383 	clz	r3, r3
 800560c:	fa21 f303 	lsr.w	r3, r1, r3
 8005610:	2107      	movs	r1, #7
 8005612:	fa01 f303 	lsl.w	r3, r1, r3
 8005616:	43db      	mvns	r3, r3
 8005618:	401a      	ands	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8005620:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	fa93 f3a3 	rbit	r3, r3
 800562c:	623b      	str	r3, [r7, #32]
  return(result);
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	fab3 f383 	clz	r3, r3
 8005634:	fa21 f303 	lsr.w	r3, r1, r3
 8005638:	6879      	ldr	r1, [r7, #4]
 800563a:	fa01 f303 	lsl.w	r3, r1, r3
 800563e:	4313      	orrs	r3, r2
 8005640:	6023      	str	r3, [r4, #0]
}
 8005642:	bf00      	nop
 8005644:	3728      	adds	r7, #40	; 0x28
 8005646:	46bd      	mov	sp, r7
 8005648:	bc90      	pop	{r4, r7}
 800564a:	4770      	bx	lr

0800564c <LL_ADC_Enable>:
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f043 0201 	orr.w	r2, r3, #1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	609a      	str	r2, [r3, #8]
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr

0800566a <LL_ADC_IsEnabled>:
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	bf0c      	ite	eq
 800567e:	2301      	moveq	r3, #1
 8005680:	2300      	movne	r3, #0
 8005682:	b2db      	uxtb	r3, r3
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	bc80      	pop	{r7}
 800568c:	4770      	bx	lr

0800568e <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f043 0204 	orr.w	r2, r3, #4
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	609a      	str	r2, [r3, #8]
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b04      	cmp	r3, #4
 80056be:	bf0c      	ite	eq
 80056c0:	2301      	moveq	r3, #1
 80056c2:	2300      	movne	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr

080056d0 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056dc:	b29b      	uxth	r3, r3
}
 80056de:	4618      	mov	r0, r3
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <LL_ADC_IsActiveFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	bf0c      	ite	eq
 80056fc:	2301      	moveq	r3, #1
 80056fe:	2300      	movne	r3, #0
 8005700:	b2db      	uxtb	r3, r3
}
 8005702:	4618      	mov	r0, r3
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr

0800570c <LL_ADC_ClearFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f06f 0202 	mvn.w	r2, #2
 800571a:	601a      	str	r2, [r3, #0]
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr

08005726 <LL_ADC_EnableIT_EOS>:
  * @rmtoll CR1      EOCIE          LL_ADC_EnableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOS(ADC_TypeDef *ADCx)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  SET_BIT(ADCx->CR1, ADC_CR1_EOCIE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f043 0220 	orr.w	r2, r3, #32
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	605a      	str	r2, [r3, #4]
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr

08005744 <LL_APB2_GRP1_EnableClock>:
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800574c:	4908      	ldr	r1, [pc, #32]	; (8005770 <LL_APB2_GRP1_EnableClock+0x2c>)
 800574e:	4b08      	ldr	r3, [pc, #32]	; (8005770 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005750:	699a      	ldr	r2, [r3, #24]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4313      	orrs	r3, r2
 8005756:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005758:	4b05      	ldr	r3, [pc, #20]	; (8005770 <LL_APB2_GRP1_EnableClock+0x2c>)
 800575a:	699a      	ldr	r2, [r3, #24]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4013      	ands	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005762:	68fb      	ldr	r3, [r7, #12]
}
 8005764:	bf00      	nop
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40021000 	.word	0x40021000

08005774 <MX_ADC1_Init>:
#include "ldr_driver.h"

uint16_t ADC1_value = 0;

void MX_ADC1_Init(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08e      	sub	sp, #56	; 0x38
 8005778:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800577a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8005784:	2300      	movs	r3, #0
 8005786:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8005788:	f107 0318 	add.w	r3, r7, #24
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	609a      	str	r2, [r3, #8]
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005798:	1d3b      	adds	r3, r7, #4
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	605a      	str	r2, [r3, #4]
 80057a0:	609a      	str	r2, [r3, #8]
 80057a2:	60da      	str	r2, [r3, #12]
 80057a4:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80057a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80057aa:	f7ff ffcb 	bl	8005744 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80057ae:	2004      	movs	r0, #4
 80057b0:	f7ff ffc8 	bl	8005744 <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA4   ------> ADC1_IN4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80057b4:	f241 0310 	movw	r3, #4112	; 0x1010
 80057b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057be:	1d3b      	adds	r3, r7, #4
 80057c0:	4619      	mov	r1, r3
 80057c2:	4828      	ldr	r0, [pc, #160]	; (8005864 <MX_ADC1_Init+0xf0>)
 80057c4:	f7fc f985 	bl	8001ad2 <LL_GPIO_Init>

  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80057c8:	2300      	movs	r3, #0
 80057ca:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 80057cc:	2300      	movs	r3, #0
 80057ce:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80057d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057d4:	4619      	mov	r1, r3
 80057d6:	4824      	ldr	r0, [pc, #144]	; (8005868 <MX_ADC1_Init+0xf4>)
 80057d8:	f7fb ff52 	bl	8001680 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80057dc:	2300      	movs	r3, #0
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80057e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057e4:	4619      	mov	r1, r3
 80057e6:	4820      	ldr	r0, [pc, #128]	; (8005868 <MX_ADC1_Init+0xf4>)
 80057e8:	f7fb ff18 	bl	800161c <LL_ADC_CommonInit>

  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80057ec:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80057f0:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80057fe:	2300      	movs	r3, #0
 8005800:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8005802:	f107 0318 	add.w	r3, r7, #24
 8005806:	4619      	mov	r1, r3
 8005808:	4817      	ldr	r0, [pc, #92]	; (8005868 <MX_ADC1_Init+0xf4>)
 800580a:	f7fb ff60 	bl	80016ce <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 800580e:	4a17      	ldr	r2, [pc, #92]	; (800586c <MX_ADC1_Init+0xf8>)
 8005810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005814:	4814      	ldr	r0, [pc, #80]	; (8005868 <MX_ADC1_Init+0xf4>)
 8005816:	f7ff fe9d 	bl	8005554 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 800581a:	2200      	movs	r2, #0
 800581c:	4913      	ldr	r1, [pc, #76]	; (800586c <MX_ADC1_Init+0xf8>)
 800581e:	4812      	ldr	r0, [pc, #72]	; (8005868 <MX_ADC1_Init+0xf4>)
 8005820:	f7ff fecb 	bl	80055ba <LL_ADC_SetChannelSamplingTime>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005824:	f7ff fe16 	bl	8005454 <NVIC_GetPriorityGrouping>
 8005828:	4603      	mov	r3, r0
 800582a:	2200      	movs	r2, #0
 800582c:	2100      	movs	r1, #0
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff fe60 	bl	80054f4 <NVIC_EncodePriority>
 8005834:	4603      	mov	r3, r0
 8005836:	4619      	mov	r1, r3
 8005838:	2012      	movs	r0, #18
 800583a:	f7ff fe31 	bl	80054a0 <NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_2_IRQn);
 800583e:	2012      	movs	r0, #18
 8005840:	f7ff fe16 	bl	8005470 <NVIC_EnableIRQ>
  LL_ADC_EnableIT_EOS(ADC1);
 8005844:	4808      	ldr	r0, [pc, #32]	; (8005868 <MX_ADC1_Init+0xf4>)
 8005846:	f7ff ff6e 	bl	8005726 <LL_ADC_EnableIT_EOS>

  if (LL_ADC_IsEnabled(ADC1) == 0)
 800584a:	4807      	ldr	r0, [pc, #28]	; (8005868 <MX_ADC1_Init+0xf4>)
 800584c:	f7ff ff0d 	bl	800566a <LL_ADC_IsEnabled>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d102      	bne.n	800585c <MX_ADC1_Init+0xe8>
  {
	  LL_ADC_Enable(ADC1);
 8005856:	4804      	ldr	r0, [pc, #16]	; (8005868 <MX_ADC1_Init+0xf4>)
 8005858:	f7ff fef8 	bl	800564c <LL_ADC_Enable>
  }
}
 800585c:	bf00      	nop
 800585e:	3738      	adds	r7, #56	; 0x38
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40010800 	.word	0x40010800
 8005868:	40012400 	.word	0x40012400
 800586c:	02c00004 	.word	0x02c00004

08005870 <ADC1_Activate>:

void ADC1_Activate(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
	if (LL_ADC_IsEnabled(ADC1) == 1)
 8005874:	480e      	ldr	r0, [pc, #56]	; (80058b0 <ADC1_Activate+0x40>)
 8005876:	f7ff fef8 	bl	800566a <LL_ADC_IsEnabled>
 800587a:	4603      	mov	r3, r0
 800587c:	2b01      	cmp	r3, #1
 800587e:	d114      	bne.n	80058aa <ADC1_Activate+0x3a>
	{
		LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8005880:	2200      	movs	r2, #0
 8005882:	490c      	ldr	r1, [pc, #48]	; (80058b4 <ADC1_Activate+0x44>)
 8005884:	480a      	ldr	r0, [pc, #40]	; (80058b0 <ADC1_Activate+0x40>)
 8005886:	f7ff fe98 	bl	80055ba <LL_ADC_SetChannelSamplingTime>
		LL_ADC_Enable(ADC1);
 800588a:	4809      	ldr	r0, [pc, #36]	; (80058b0 <ADC1_Activate+0x40>)
 800588c:	f7ff fede 	bl	800564c <LL_ADC_Enable>
		LL_mDelay(1);
 8005890:	2001      	movs	r0, #1
 8005892:	f7fc ffd9 	bl	8002848 <LL_mDelay>

	    LL_ADC_StartCalibration(ADC1);
 8005896:	4806      	ldr	r0, [pc, #24]	; (80058b0 <ADC1_Activate+0x40>)
 8005898:	f7ff fef9 	bl	800568e <LL_ADC_StartCalibration>
	    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0);
 800589c:	bf00      	nop
 800589e:	4804      	ldr	r0, [pc, #16]	; (80058b0 <ADC1_Activate+0x40>)
 80058a0:	f7ff ff04 	bl	80056ac <LL_ADC_IsCalibrationOnGoing>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f9      	bne.n	800589e <ADC1_Activate+0x2e>
	}
}
 80058aa:	bf00      	nop
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40012400 	.word	0x40012400
 80058b4:	02c00004 	.word	0x02c00004

080058b8 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  if(LL_ADC_IsActiveFlag_EOS(ADC1) != 0)
 80058bc:	4808      	ldr	r0, [pc, #32]	; (80058e0 <ADC1_2_IRQHandler+0x28>)
 80058be:	f7ff ff13 	bl	80056e8 <LL_ADC_IsActiveFlag_EOS>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d009      	beq.n	80058dc <ADC1_2_IRQHandler+0x24>
  {
    LL_ADC_ClearFlag_EOS(ADC1);
 80058c8:	4805      	ldr	r0, [pc, #20]	; (80058e0 <ADC1_2_IRQHandler+0x28>)
 80058ca:	f7ff ff1f 	bl	800570c <LL_ADC_ClearFlag_EOS>

    ADC1_value = LL_ADC_REG_ReadConversionData12(ADC1);
 80058ce:	4804      	ldr	r0, [pc, #16]	; (80058e0 <ADC1_2_IRQHandler+0x28>)
 80058d0:	f7ff fefe 	bl	80056d0 <LL_ADC_REG_ReadConversionData12>
 80058d4:	4603      	mov	r3, r0
 80058d6:	461a      	mov	r2, r3
 80058d8:	4b02      	ldr	r3, [pc, #8]	; (80058e4 <ADC1_2_IRQHandler+0x2c>)
 80058da:	801a      	strh	r2, [r3, #0]
  }
}
 80058dc:	bf00      	nop
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40012400 	.word	0x40012400
 80058e4:	20002366 	.word	0x20002366

080058e8 <ADC1_Get>:

uint16_t ADC1_Get()
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
	return ADC1_value;
 80058ec:	4b02      	ldr	r3, [pc, #8]	; (80058f8 <ADC1_Get+0x10>)
 80058ee:	881b      	ldrh	r3, [r3, #0]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr
 80058f8:	20002366 	.word	0x20002366

080058fc <LDRQueueInit>:
#include "cmsis_os.h"

xQueueHandle ldr_queue;

void LDRQueueInit(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
	  ldr_queue = xQueueCreate(2, sizeof(uint16_t));
 8005900:	2200      	movs	r2, #0
 8005902:	2102      	movs	r1, #2
 8005904:	2002      	movs	r0, #2
 8005906:	f7fd fc95 	bl	8003234 <xQueueGenericCreate>
 800590a:	4602      	mov	r2, r0
 800590c:	4b01      	ldr	r3, [pc, #4]	; (8005914 <LDRQueueInit+0x18>)
 800590e:	601a      	str	r2, [r3, #0]
}
 8005910:	bf00      	nop
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20002fe0 	.word	0x20002fe0

08005918 <LDRQueue_Send>:

void LDRQueue_Send(uint16_t value)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	4603      	mov	r3, r0
 8005920:	80fb      	strh	r3, [r7, #6]
	const portTickType xTicksToWait = 100 / portTICK_RATE_MS;
 8005922:	2364      	movs	r3, #100	; 0x64
 8005924:	60fb      	str	r3, [r7, #12]
	xQueueSendToBack(ldr_queue, &value, xTicksToWait);
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <LDRQueue_Send+0x24>)
 8005928:	6818      	ldr	r0, [r3, #0]
 800592a:	1db9      	adds	r1, r7, #6
 800592c:	2300      	movs	r3, #0
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	f7fd fcd8 	bl	80032e4 <xQueueGenericSend>
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20002fe0 	.word	0x20002fe0

08005940 <LDRQueue_Receive>:

uint16_t LDRQueue_Receive(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
	uint16_t value;
	xQueueReceive(ldr_queue, &value, 0);
 8005946:	4b06      	ldr	r3, [pc, #24]	; (8005960 <LDRQueue_Receive+0x20>)
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	1db9      	adds	r1, r7, #6
 800594c:	2300      	movs	r3, #0
 800594e:	2200      	movs	r2, #0
 8005950:	f7fd fdc2 	bl	80034d8 <xQueueGenericReceive>
	return value;
 8005954:	88fb      	ldrh	r3, [r7, #6]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20002fe0 	.word	0x20002fe0

08005964 <LDRQueue_IsElements>:

bool LDRQueue_IsElements(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
	if(uxQueueMessagesWaiting(ldr_queue) > 0)
 8005968:	4b06      	ldr	r3, [pc, #24]	; (8005984 <LDRQueue_IsElements+0x20>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f7fd fec5 	bl	80036fc <uxQueueMessagesWaiting>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <LDRQueue_IsElements+0x18>
	{
		return true;
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <LDRQueue_IsElements+0x1a>
	}
	return false;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20002fe0 	.word	0x20002fe0

08005988 <pxLDR>:
#include "ldr.h"
#include "ldr_queue.h"
#include "cmsis_os.h"

static void pxLDR(void * arg)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	LDRInit();
 8005990:	f7fa ff6d 	bl	800086e <LDRInit>
	while(1)
	{
		uint16_t adc_value = LDR_Get();
 8005994:	f7fa ff72 	bl	800087c <LDR_Get>
 8005998:	4603      	mov	r3, r0
 800599a:	81fb      	strh	r3, [r7, #14]
		LDRQueue_Send(adc_value);
 800599c:	89fb      	ldrh	r3, [r7, #14]
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff ffba 	bl	8005918 <LDRQueue_Send>
		osDelay(100);
 80059a4:	2064      	movs	r0, #100	; 0x64
 80059a6:	f7fc ffc6 	bl	8002936 <osDelay>
	{
 80059aa:	e7f3      	b.n	8005994 <pxLDR+0xc>

080059ac <LDRTaskInit>:
	}
}

void LDRTaskInit(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af02      	add	r7, sp, #8
	xTaskCreate(pxLDR, "LDR", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 80059b2:	2300      	movs	r3, #0
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	2300      	movs	r3, #0
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	2300      	movs	r3, #0
 80059bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059c0:	4903      	ldr	r1, [pc, #12]	; (80059d0 <LDRTaskInit+0x24>)
 80059c2:	4804      	ldr	r0, [pc, #16]	; (80059d4 <LDRTaskInit+0x28>)
 80059c4:	f7fd ffec 	bl	80039a0 <xTaskCreate>
}
 80059c8:	bf00      	nop
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	08007a9c 	.word	0x08007a9c
 80059d4:	08005989 	.word	0x08005989

080059d8 <LL_APB1_GRP1_EnableClock>:
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80059e0:	4908      	ldr	r1, [pc, #32]	; (8005a04 <LL_APB1_GRP1_EnableClock+0x2c>)
 80059e2:	4b08      	ldr	r3, [pc, #32]	; (8005a04 <LL_APB1_GRP1_EnableClock+0x2c>)
 80059e4:	69da      	ldr	r2, [r3, #28]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <LL_APB1_GRP1_EnableClock+0x2c>)
 80059ee:	69da      	ldr	r2, [r3, #28]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4013      	ands	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80059f6:	68fb      	ldr	r3, [r7, #12]
}
 80059f8:	bf00      	nop
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40021000 	.word	0x40021000

08005a08 <LL_APB2_GRP1_EnableClock>:
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005a10:	4908      	ldr	r1, [pc, #32]	; (8005a34 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005a12:	4b08      	ldr	r3, [pc, #32]	; (8005a34 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005a1c:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005a1e:	699a      	ldr	r2, [r3, #24]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4013      	ands	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005a26:	68fb      	ldr	r3, [r7, #12]
}
 8005a28:	bf00      	nop
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40021000 	.word	0x40021000

08005a38 <LL_TIM_EnableCounter>:
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f043 0201 	orr.w	r2, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	601a      	str	r2, [r3, #0]
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bc80      	pop	{r7}
 8005a54:	4770      	bx	lr

08005a56 <LL_TIM_EnableARRPreload>:
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	601a      	str	r2, [r3, #0]
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bc80      	pop	{r7}
 8005a72:	4770      	bx	lr

08005a74 <LL_TIM_GetAutoReload>:
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bc80      	pop	{r7}
 8005a88:	4770      	bx	lr

08005a8a <LL_TIM_CC_EnableChannel>:
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1a      	ldr	r2, [r3, #32]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	621a      	str	r2, [r3, #32]
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bc80      	pop	{r7}
 8005aa8:	4770      	bx	lr
	...

08005aac <LL_TIM_OC_DisableFast>:
{
 8005aac:	b4b0      	push	{r4, r5, r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d01c      	beq.n	8005af6 <LL_TIM_OC_DisableFast+0x4a>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d017      	beq.n	8005af2 <LL_TIM_OC_DisableFast+0x46>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b10      	cmp	r3, #16
 8005ac6:	d012      	beq.n	8005aee <LL_TIM_OC_DisableFast+0x42>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d00d      	beq.n	8005aea <LL_TIM_OC_DisableFast+0x3e>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad4:	d007      	beq.n	8005ae6 <LL_TIM_OC_DisableFast+0x3a>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005adc:	d101      	bne.n	8005ae2 <LL_TIM_OC_DisableFast+0x36>
 8005ade:	2305      	movs	r3, #5
 8005ae0:	e00a      	b.n	8005af8 <LL_TIM_OC_DisableFast+0x4c>
 8005ae2:	2306      	movs	r3, #6
 8005ae4:	e008      	b.n	8005af8 <LL_TIM_OC_DisableFast+0x4c>
 8005ae6:	2304      	movs	r3, #4
 8005ae8:	e006      	b.n	8005af8 <LL_TIM_OC_DisableFast+0x4c>
 8005aea:	2303      	movs	r3, #3
 8005aec:	e004      	b.n	8005af8 <LL_TIM_OC_DisableFast+0x4c>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e002      	b.n	8005af8 <LL_TIM_OC_DisableFast+0x4c>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <LL_TIM_OC_DisableFast+0x4c>
 8005af6:	2300      	movs	r3, #0
 8005af8:	461d      	mov	r5, r3
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3318      	adds	r3, #24
 8005afe:	461a      	mov	r2, r3
 8005b00:	4629      	mov	r1, r5
 8005b02:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <LL_TIM_OC_DisableFast+0x7c>)
 8005b04:	5c5b      	ldrb	r3, [r3, r1]
 8005b06:	4413      	add	r3, r2
 8005b08:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <LL_TIM_OC_DisableFast+0x80>)
 8005b10:	5c5b      	ldrb	r3, [r3, r1]
 8005b12:	4619      	mov	r1, r3
 8005b14:	2304      	movs	r3, #4
 8005b16:	408b      	lsls	r3, r1
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	6023      	str	r3, [r4, #0]
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bcb0      	pop	{r4, r5, r7}
 8005b26:	4770      	bx	lr
 8005b28:	08007f28 	.word	0x08007f28
 8005b2c:	08007f30 	.word	0x08007f30

08005b30 <LL_TIM_OC_SetCompareCH1>:
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bc80      	pop	{r7}
 8005b48:	4770      	bx	lr

08005b4a <LL_TIM_OC_SetCompareCH2>:
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr

08005b64 <LL_TIM_OC_SetCompareCH3>:
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr

08005b7e <LL_TIM_SetTriggerOutput>:
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	605a      	str	r2, [r3, #4]
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bc80      	pop	{r7}
 8005ba0:	4770      	bx	lr

08005ba2 <LL_TIM_DisableMasterSlaveMode>:
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	609a      	str	r2, [r3, #8]
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr

08005bc0 <LL_TIM_GenerateEvent_UPDATE>:
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	f043 0201 	orr.w	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	615a      	str	r2, [r3, #20]
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr
	...

08005be0 <MX_TIM4_Init>:
#include "led_driver.h"

void MX_TIM4_Init(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b092      	sub	sp, #72	; 0x48
 8005be4:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005be6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	605a      	str	r2, [r3, #4]
 8005bf0:	609a      	str	r2, [r3, #8]
 8005bf2:	60da      	str	r2, [r3, #12]
 8005bf4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005bf6:	f107 0314 	add.w	r3, r7, #20
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 f975 	bl	8006eee <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c04:	463b      	mov	r3, r7
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	605a      	str	r2, [r3, #4]
 8005c0c:	609a      	str	r2, [r3, #8]
 8005c0e:	60da      	str	r2, [r3, #12]
 8005c10:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8005c12:	2004      	movs	r0, #4
 8005c14:	f7ff fee0 	bl	80059d8 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 4096;
 8005c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005c26:	2300      	movs	r3, #0
 8005c28:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8005c2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005c2e:	4619      	mov	r1, r3
 8005c30:	483a      	ldr	r0, [pc, #232]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005c32:	f7fc faaf 	bl	8002194 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM4);
 8005c36:	4839      	ldr	r0, [pc, #228]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005c38:	f7ff ff0d 	bl	8005a56 <LL_TIM_EnableARRPreload>

  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005c3c:	2360      	movs	r3, #96	; 0x60
 8005c3e:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = LL_TIM_GetAutoReload(TIM4);
 8005c48:	4834      	ldr	r0, [pc, #208]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005c4a:	f7ff ff13 	bl	8005a74 <LL_TIM_GetAutoReload>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005c52:	2300      	movs	r3, #0
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 8005c56:	2300      	movs	r3, #0
 8005c58:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005c62:	f107 0314 	add.w	r3, r7, #20
 8005c66:	461a      	mov	r2, r3
 8005c68:	2101      	movs	r1, #1
 8005c6a:	482c      	ldr	r0, [pc, #176]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005c6c:	f7fc faf2 	bl	8002254 <LL_TIM_OC_Init>

  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 8005c70:	2101      	movs	r1, #1
 8005c72:	482a      	ldr	r0, [pc, #168]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005c74:	f7ff ff1a 	bl	8005aac <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8005c80:	f107 0314 	add.w	r3, r7, #20
 8005c84:	461a      	mov	r2, r3
 8005c86:	2110      	movs	r1, #16
 8005c88:	4824      	ldr	r0, [pc, #144]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005c8a:	f7fc fae3 	bl	8002254 <LL_TIM_OC_Init>

  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 8005c8e:	2110      	movs	r1, #16
 8005c90:	4822      	ldr	r0, [pc, #136]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005c92:	f7ff ff0b 	bl	8005aac <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8005c9e:	f107 0314 	add.w	r3, r7, #20
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ca8:	481c      	ldr	r0, [pc, #112]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005caa:	f7fc fad3 	bl	8002254 <LL_TIM_OC_Init>

  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 8005cae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005cb2:	481a      	ldr	r0, [pc, #104]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005cb4:	f7ff fefa 	bl	8005aac <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8005cb8:	2100      	movs	r1, #0
 8005cba:	4818      	ldr	r0, [pc, #96]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005cbc:	f7ff ff5f 	bl	8005b7e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8005cc0:	4816      	ldr	r0, [pc, #88]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005cc2:	f7ff ff6e 	bl	8005ba2 <LL_TIM_DisableMasterSlaveMode>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8005cc6:	2008      	movs	r0, #8
 8005cc8:	f7ff fe9e 	bl	8005a08 <LL_APB2_GRP1_EnableClock>
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 8005ccc:	4b14      	ldr	r3, [pc, #80]	; (8005d20 <MX_TIM4_Init+0x140>)
 8005cce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005cd0:	2309      	movs	r3, #9
 8005cd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cdc:	463b      	mov	r3, r7
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4810      	ldr	r0, [pc, #64]	; (8005d24 <MX_TIM4_Init+0x144>)
 8005ce2:	f7fb fef6 	bl	8001ad2 <LL_GPIO_Init>

  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH3);
 8005ce6:	f240 1111 	movw	r1, #273	; 0x111
 8005cea:	480c      	ldr	r0, [pc, #48]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005cec:	f7ff fecd 	bl	8005a8a <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM4);
 8005cf0:	480a      	ldr	r0, [pc, #40]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005cf2:	f7ff fea1 	bl	8005a38 <LL_TIM_EnableCounter>

  LL_TIM_GenerateEvent_UPDATE(TIM4);
 8005cf6:	4809      	ldr	r0, [pc, #36]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005cf8:	f7ff ff62 	bl	8005bc0 <LL_TIM_GenerateEvent_UPDATE>

  LL_TIM_OC_SetCompareCH1(TIM4, 0);
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	4807      	ldr	r0, [pc, #28]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005d00:	f7ff ff16 	bl	8005b30 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIM4, 0);
 8005d04:	2100      	movs	r1, #0
 8005d06:	4805      	ldr	r0, [pc, #20]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005d08:	f7ff ff1f 	bl	8005b4a <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIM4, 0);
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	4803      	ldr	r0, [pc, #12]	; (8005d1c <MX_TIM4_Init+0x13c>)
 8005d10:	f7ff ff28 	bl	8005b64 <LL_TIM_OC_SetCompareCH3>
}
 8005d14:	bf00      	nop
 8005d16:	3748      	adds	r7, #72	; 0x48
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40000800 	.word	0x40000800
 8005d20:	0401c0c1 	.word	0x0401c0c1
 8005d24:	40010c00 	.word	0x40010c00

08005d28 <TIM4_SET_CH1>:

inline void TIM4_SET_CH1(uint16_t duty_cycle)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH1(TIM4, duty_cycle);
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	4619      	mov	r1, r3
 8005d36:	4803      	ldr	r0, [pc, #12]	; (8005d44 <TIM4_SET_CH1+0x1c>)
 8005d38:	f7ff fefa 	bl	8005b30 <LL_TIM_OC_SetCompareCH1>
}
 8005d3c:	bf00      	nop
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40000800 	.word	0x40000800

08005d48 <TIM4_SET_CH2>:

inline void TIM4_SET_CH2(uint16_t duty_cycle)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH2(TIM4, duty_cycle);
 8005d52:	88fb      	ldrh	r3, [r7, #6]
 8005d54:	4619      	mov	r1, r3
 8005d56:	4803      	ldr	r0, [pc, #12]	; (8005d64 <TIM4_SET_CH2+0x1c>)
 8005d58:	f7ff fef7 	bl	8005b4a <LL_TIM_OC_SetCompareCH2>
}
 8005d5c:	bf00      	nop
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40000800 	.word	0x40000800

08005d68 <TIM4_SET_CH3>:

inline void TIM4_SET_CH3(uint16_t duty_cycle)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH3(TIM4, duty_cycle);
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	4619      	mov	r1, r3
 8005d76:	4803      	ldr	r0, [pc, #12]	; (8005d84 <TIM4_SET_CH3+0x1c>)
 8005d78:	f7ff fef4 	bl	8005b64 <LL_TIM_OC_SetCompareCH3>
}
 8005d7c:	bf00      	nop
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40000800 	.word	0x40000800

08005d88 <constrain>:
#include "encoder_queue.h"
#include "ldr_queue.h"
#include "cmsis_os.h"

static uint16_t constrain(int32_t value)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	if(value > 4096) value = 4096;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d96:	dd02      	ble.n	8005d9e <constrain+0x16>
 8005d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d9c:	607b      	str	r3, [r7, #4]
	if(value < 0) value = 0;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	da01      	bge.n	8005da8 <constrain+0x20>
 8005da4:	2300      	movs	r3, #0
 8005da6:	607b      	str	r3, [r7, #4]
	return value;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	b29b      	uxth	r3, r3
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bc80      	pop	{r7}
 8005db4:	4770      	bx	lr
	...

08005db8 <pxLed>:

static void pxLed(void * arg)
{
 8005db8:	b5b0      	push	{r4, r5, r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
	I2C_Init();
 8005dc0:	f7fa fce2 	bl	8000788 <I2C_Init>
	LedInit();
 8005dc4:	f7fa fd8a 	bl	80008dc <LedInit>

	MX_SPI1_Init();
 8005dc8:	f000 fa52 	bl	8006270 <MX_SPI1_Init>
	SPI1_SendData((uint8_t *)"hello", 5);
 8005dcc:	2105      	movs	r1, #5
 8005dce:	4855      	ldr	r0, [pc, #340]	; (8005f24 <pxLed+0x16c>)
 8005dd0:	f000 fab0 	bl	8006334 <SPI1_SendData>

	uint16_t ldr_value = 4096, ldr_value_old = 4096;
 8005dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dd8:	82fb      	strh	r3, [r7, #22]
 8005dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dde:	82bb      	strh	r3, [r7, #20]
	EncoderRotateInfo xEncoder_info;

	setLedI2C();
 8005de0:	f7fa fd0e 	bl	8000800 <setLedI2C>

	while(1)
	{
		if(EncoderQueue_IsElements())
 8005de4:	f7fe ff54 	bl	8004c90 <EncoderQueue_IsElements>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d072      	beq.n	8005ed4 <pxLed+0x11c>
		{
			xEncoder_info = EncoderQueue_Receive();
 8005dee:	f7fe ff35 	bl	8004c5c <EncoderQueue_Receive>
 8005df2:	4603      	mov	r3, r0
 8005df4:	60bb      	str	r3, [r7, #8]
			int16_t red = Led_Get_Color(eRed), green = Led_Get_Color(eGreen), blue = Led_Get_Color(eBlue);
 8005df6:	2000      	movs	r0, #0
 8005df8:	f7fa fde2 	bl	80009c0 <Led_Get_Color>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	827b      	strh	r3, [r7, #18]
 8005e00:	2001      	movs	r0, #1
 8005e02:	f7fa fddd 	bl	80009c0 <Led_Get_Color>
 8005e06:	4603      	mov	r3, r0
 8005e08:	823b      	strh	r3, [r7, #16]
 8005e0a:	2002      	movs	r0, #2
 8005e0c:	f7fa fdd8 	bl	80009c0 <Led_Get_Color>
 8005e10:	4603      	mov	r3, r0
 8005e12:	81fb      	strh	r3, [r7, #14]

			switch(xEncoder_info.button)
 8005e14:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d85a      	bhi.n	8005ed2 <pxLed+0x11a>
 8005e1c:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <pxLed+0x6c>)
 8005e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e22:	bf00      	nop
 8005e24:	08005ed3 	.word	0x08005ed3
 8005e28:	08005e39 	.word	0x08005e39
 8005e2c:	08005e55 	.word	0x08005e55
 8005e30:	08005e71 	.word	0x08005e71
 8005e34:	08005e8d 	.word	0x08005e8d
			{
				case 0: break;
				case 1:
					{
						Led_Set_Color(eRed, constrain(red + xEncoder_info.state));
 8005e38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e3c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005e40:	4413      	add	r3, r2
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff ffa0 	bl	8005d88 <constrain>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	f7fa fd85 	bl	800095c <Led_Set_Color>
						break;
 8005e52:	e03f      	b.n	8005ed4 <pxLed+0x11c>
					}
				case 2:
					{
						Led_Set_Color(eGreen, constrain(green + xEncoder_info.state));
 8005e54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005e58:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff ff92 	bl	8005d88 <constrain>
 8005e64:	4603      	mov	r3, r0
 8005e66:	4619      	mov	r1, r3
 8005e68:	2001      	movs	r0, #1
 8005e6a:	f7fa fd77 	bl	800095c <Led_Set_Color>
						break;
 8005e6e:	e031      	b.n	8005ed4 <pxLed+0x11c>
					}
				case 3:
					{
						Led_Set_Color(eBlue, constrain(blue + xEncoder_info.state));
 8005e70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e74:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005e78:	4413      	add	r3, r2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff ff84 	bl	8005d88 <constrain>
 8005e80:	4603      	mov	r3, r0
 8005e82:	4619      	mov	r1, r3
 8005e84:	2002      	movs	r0, #2
 8005e86:	f7fa fd69 	bl	800095c <Led_Set_Color>
						break;
 8005e8a:	e023      	b.n	8005ed4 <pxLed+0x11c>
					}
				case 4:
					{
						Led_Set(constrain(red + xEncoder_info.state), constrain(green + xEncoder_info.state), constrain(blue + xEncoder_info.state));
 8005e8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e90:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005e94:	4413      	add	r3, r2
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff ff76 	bl	8005d88 <constrain>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	461c      	mov	r4, r3
 8005ea0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005ea4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff ff6c 	bl	8005d88 <constrain>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	461d      	mov	r5, r3
 8005eb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005eb8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff ff62 	bl	8005d88 <constrain>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	4629      	mov	r1, r5
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f7fa fd1e 	bl	800090c <Led_Set>
						break;
 8005ed0:	e000      	b.n	8005ed4 <pxLed+0x11c>
					}
				default: break;
 8005ed2:	bf00      	nop
			}
		}
		if(LDRQueue_IsElements())
 8005ed4:	f7ff fd46 	bl	8005964 <LDRQueue_IsElements>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d018      	beq.n	8005f10 <pxLed+0x158>
		{
			 ldr_value = LDRQueue_Receive();
 8005ede:	f7ff fd2f 	bl	8005940 <LDRQueue_Receive>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	82fb      	strh	r3, [r7, #22]
		}

		while(!(ldr_value_old == ldr_value))
 8005ee6:	e013      	b.n	8005f10 <pxLed+0x158>
		{
			if(ldr_value_old > ldr_value)
 8005ee8:	8aba      	ldrh	r2, [r7, #20]
 8005eea:	8afb      	ldrh	r3, [r7, #22]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d906      	bls.n	8005efe <pxLed+0x146>
			{
				Led_Refresh(ldr_value_old--);
 8005ef0:	8abb      	ldrh	r3, [r7, #20]
 8005ef2:	1e5a      	subs	r2, r3, #1
 8005ef4:	82ba      	strh	r2, [r7, #20]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fa fda2 	bl	8000a40 <Led_Refresh>
 8005efc:	e005      	b.n	8005f0a <pxLed+0x152>
			}
			else Led_Refresh(ldr_value_old++);
 8005efe:	8abb      	ldrh	r3, [r7, #20]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	82ba      	strh	r2, [r7, #20]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fa fd9b 	bl	8000a40 <Led_Refresh>

			osDelay(1);
 8005f0a:	2001      	movs	r0, #1
 8005f0c:	f7fc fd13 	bl	8002936 <osDelay>
		while(!(ldr_value_old == ldr_value))
 8005f10:	8aba      	ldrh	r2, [r7, #20]
 8005f12:	8afb      	ldrh	r3, [r7, #22]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d1e7      	bne.n	8005ee8 <pxLed+0x130>
		}
		ldr_value_old = ldr_value;
 8005f18:	8afb      	ldrh	r3, [r7, #22]
 8005f1a:	82bb      	strh	r3, [r7, #20]
		osDelay(10);
 8005f1c:	200a      	movs	r0, #10
 8005f1e:	f7fc fd0a 	bl	8002936 <osDelay>
		if(EncoderQueue_IsElements())
 8005f22:	e75f      	b.n	8005de4 <pxLed+0x2c>
 8005f24:	08007aa0 	.word	0x08007aa0

08005f28 <LedTaskInit>:
	}
}

void LedTaskInit(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af02      	add	r7, sp, #8
	xTaskCreate(pxLed, "Led", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9301      	str	r3, [sp, #4]
 8005f32:	2300      	movs	r3, #0
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	2300      	movs	r3, #0
 8005f38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f3c:	4903      	ldr	r1, [pc, #12]	; (8005f4c <LedTaskInit+0x24>)
 8005f3e:	4804      	ldr	r0, [pc, #16]	; (8005f50 <LedTaskInit+0x28>)
 8005f40:	f7fd fd2e 	bl	80039a0 <xTaskCreate>
}
 8005f44:	bf00      	nop
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	08007aa8 	.word	0x08007aa8
 8005f50:	08005db9 	.word	0x08005db9

08005f54 <NVIC_GetPriorityGrouping>:
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f58:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <NVIC_GetPriorityGrouping+0x18>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	0a1b      	lsrs	r3, r3, #8
 8005f5e:	f003 0307 	and.w	r3, r3, #7
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	e000ed00 	.word	0xe000ed00

08005f70 <NVIC_EnableIRQ>:
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005f7a:	4908      	ldr	r1, [pc, #32]	; (8005f9c <NVIC_EnableIRQ+0x2c>)
 8005f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	79fa      	ldrb	r2, [r7, #7]
 8005f84:	f002 021f 	and.w	r2, r2, #31
 8005f88:	2001      	movs	r0, #1
 8005f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bc80      	pop	{r7}
 8005f9a:	4770      	bx	lr
 8005f9c:	e000e100 	.word	0xe000e100

08005fa0 <NVIC_SetPriority>:
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	6039      	str	r1, [r7, #0]
 8005faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8005fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	da0b      	bge.n	8005fcc <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fb4:	490d      	ldr	r1, [pc, #52]	; (8005fec <NVIC_SetPriority+0x4c>)
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	f003 030f 	and.w	r3, r3, #15
 8005fbc:	3b04      	subs	r3, #4
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	0112      	lsls	r2, r2, #4
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	761a      	strb	r2, [r3, #24]
}
 8005fca:	e009      	b.n	8005fe0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fcc:	4908      	ldr	r1, [pc, #32]	; (8005ff0 <NVIC_SetPriority+0x50>)
 8005fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	0112      	lsls	r2, r2, #4
 8005fd8:	b2d2      	uxtb	r2, r2
 8005fda:	440b      	add	r3, r1
 8005fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	e000ed00 	.word	0xe000ed00
 8005ff0:	e000e100 	.word	0xe000e100

08005ff4 <NVIC_EncodePriority>:
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b089      	sub	sp, #36	; 0x24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f1c3 0307 	rsb	r3, r3, #7
 800600e:	2b04      	cmp	r3, #4
 8006010:	bf28      	it	cs
 8006012:	2304      	movcs	r3, #4
 8006014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	3304      	adds	r3, #4
 800601a:	2b06      	cmp	r3, #6
 800601c:	d902      	bls.n	8006024 <NVIC_EncodePriority+0x30>
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	3b03      	subs	r3, #3
 8006022:	e000      	b.n	8006026 <NVIC_EncodePriority+0x32>
 8006024:	2300      	movs	r3, #0
 8006026:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006028:	2201      	movs	r2, #1
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	1e5a      	subs	r2, r3, #1
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	401a      	ands	r2, r3
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800603a:	2101      	movs	r1, #1
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	fa01 f303 	lsl.w	r3, r1, r3
 8006042:	1e59      	subs	r1, r3, #1
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006048:	4313      	orrs	r3, r2
}
 800604a:	4618      	mov	r0, r3
 800604c:	3724      	adds	r7, #36	; 0x24
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr

08006054 <LL_EXTI_ClearFlag_0_31>:
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800605c:	4a03      	ldr	r2, [pc, #12]	; (800606c <LL_EXTI_ClearFlag_0_31+0x18>)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6153      	str	r3, [r2, #20]
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	bc80      	pop	{r7}
 800606a:	4770      	bx	lr
 800606c:	40010400 	.word	0x40010400

08006070 <LL_GPIO_AF_SetEXTISource>:
{
 8006070:	b490      	push	{r4, r7}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800607a:	4c11      	ldr	r4, [pc, #68]	; (80060c0 <LL_GPIO_AF_SetEXTISource+0x50>)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	490f      	ldr	r1, [pc, #60]	; (80060c0 <LL_GPIO_AF_SetEXTISource+0x50>)
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	3202      	adds	r2, #2
 8006088:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	0c12      	lsrs	r2, r2, #16
 8006090:	43d2      	mvns	r2, r2
 8006092:	4011      	ands	r1, r2
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	0c12      	lsrs	r2, r2, #16
 8006098:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	fa92 f2a2 	rbit	r2, r2
 80060a0:	60ba      	str	r2, [r7, #8]
  return(result);
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	fab2 f282 	clz	r2, r2
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	fa00 f202 	lsl.w	r2, r0, r2
 80060ae:	430a      	orrs	r2, r1
 80060b0:	3302      	adds	r3, #2
 80060b2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc90      	pop	{r4, r7}
 80060be:	4770      	bx	lr
 80060c0:	40010000 	.word	0x40010000

080060c4 <PowerStatusInit>:
#include "i2c_data.h"
#include "crc.h"
#include "cmsis_os.h"

void PowerStatusInit(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
	LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80060ca:	f107 0318 	add.w	r3, r7, #24
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	605a      	str	r2, [r3, #4]

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80060d4:	2301      	movs	r3, #1
 80060d6:	61bb      	str	r3, [r7, #24]
    EXTI_InitStruct.LineCommand = ENABLE;
 80060d8:	2301      	movs	r3, #1
 80060da:	773b      	strb	r3, [r7, #28]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80060dc:	2300      	movs	r3, #0
 80060de:	777b      	strb	r3, [r7, #29]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80060e0:	2302      	movs	r3, #2
 80060e2:	77bb      	strb	r3, [r7, #30]
    LL_EXTI_Init(&EXTI_InitStruct);
 80060e4:	f107 0318 	add.w	r3, r7, #24
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fb fbc7 	bl	800187c <LL_EXTI_Init>

    LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE0);
 80060ee:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80060f2:	2000      	movs	r0, #0
 80060f4:	f7ff ffbc 	bl	8006070 <LL_GPIO_AF_SetEXTISource>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060f8:	1d3b      	adds	r3, r7, #4
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	605a      	str	r2, [r3, #4]
 8006100:	609a      	str	r2, [r3, #8]
 8006102:	60da      	str	r2, [r3, #12]
 8006104:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8006106:	f240 1301 	movw	r3, #257	; 0x101
 800610a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800610c:	2308      	movs	r3, #8
 800610e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8006110:	2303      	movs	r3, #3
 8006112:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006114:	2301      	movs	r3, #1
 8006116:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006118:	1d3b      	adds	r3, r7, #4
 800611a:	4619      	mov	r1, r3
 800611c:	480b      	ldr	r0, [pc, #44]	; (800614c <PowerStatusInit+0x88>)
 800611e:	f7fb fcd8 	bl	8001ad2 <LL_GPIO_Init>

    NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 8, 0));
 8006122:	f7ff ff17 	bl	8005f54 <NVIC_GetPriorityGrouping>
 8006126:	4603      	mov	r3, r0
 8006128:	2200      	movs	r2, #0
 800612a:	2108      	movs	r1, #8
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff ff61 	bl	8005ff4 <NVIC_EncodePriority>
 8006132:	4603      	mov	r3, r0
 8006134:	4619      	mov	r1, r3
 8006136:	2006      	movs	r0, #6
 8006138:	f7ff ff32 	bl	8005fa0 <NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 800613c:	2006      	movs	r0, #6
 800613e:	f7ff ff17 	bl	8005f70 <NVIC_EnableIRQ>
}
 8006142:	bf00      	nop
 8006144:	3720      	adds	r7, #32
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	40010800 	.word	0x40010800

08006150 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8006154:	2001      	movs	r0, #1
 8006156:	f7ff ff7d 	bl	8006054 <LL_EXTI_ClearFlag_0_31>

	ColorToEEPROM();
 800615a:	f7fa fb1d 	bl	8000798 <ColorToEEPROM>
}
 800615e:	bf00      	nop
 8006160:	bd80      	pop	{r7, pc}

08006162 <LL_SPI_Enable>:
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	601a      	str	r2, [r3, #0]
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr

08006180 <LL_SPI_Disable>:
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	601a      	str	r2, [r3, #0]
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	bc80      	pop	{r7}
 800619c:	4770      	bx	lr

0800619e <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	bf0c      	ite	eq
 80061b2:	2301      	moveq	r3, #1
 80061b4:	2300      	movne	r3, #0
 80061b6:	b2db      	uxtb	r3, r3
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr

080061c2 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d2:	2b80      	cmp	r3, #128	; 0x80
 80061d4:	bf0c      	ite	eq
 80061d6:	2301      	moveq	r3, #1
 80061d8:	2300      	movne	r3, #0
 80061da:	b2db      	uxtb	r3, r3
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr

080061e6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	460b      	mov	r3, r1
 80061f0:	70fb      	strb	r3, [r7, #3]
  SPIx->DR = TxData;
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	60da      	str	r2, [r3, #12]
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bc80      	pop	{r7}
 8006200:	4770      	bx	lr
	...

08006204 <LL_APB2_GRP1_EnableClock>:
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800620c:	4908      	ldr	r1, [pc, #32]	; (8006230 <LL_APB2_GRP1_EnableClock+0x2c>)
 800620e:	4b08      	ldr	r3, [pc, #32]	; (8006230 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4313      	orrs	r3, r2
 8006216:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006218:	4b05      	ldr	r3, [pc, #20]	; (8006230 <LL_APB2_GRP1_EnableClock+0x2c>)
 800621a:	699a      	ldr	r2, [r3, #24]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4013      	ands	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006222:	68fb      	ldr	r3, [r7, #12]
}
 8006224:	bf00      	nop
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40021000 	.word	0x40021000

08006234 <LL_GPIO_SetOutputPin>:
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	0a1b      	lsrs	r3, r3, #8
 8006242:	b29a      	uxth	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	611a      	str	r2, [r3, #16]
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	bc80      	pop	{r7}
 8006250:	4770      	bx	lr

08006252 <LL_GPIO_ResetOutputPin>:
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	0a1b      	lsrs	r3, r3, #8
 8006260:	b29a      	uxth	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	615a      	str	r2, [r3, #20]
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	bc80      	pop	{r7}
 800626e:	4770      	bx	lr

08006270 <MX_SPI1_Init>:
#include "spi.h"
#include "main.h"

void MX_SPI1_Init(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b090      	sub	sp, #64	; 0x40
 8006274:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8006276:	f107 0318 	add.w	r3, r7, #24
 800627a:	2228      	movs	r2, #40	; 0x28
 800627c:	2100      	movs	r1, #0
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fe35 	bl	8006eee <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006284:	1d3b      	adds	r3, r7, #4
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	605a      	str	r2, [r3, #4]
 800628c:	609a      	str	r2, [r3, #8]
 800628e:	60da      	str	r2, [r3, #12]
 8006290:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8006292:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006296:	f7ff ffb5 	bl	8006204 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800629a:	2004      	movs	r0, #4
 800629c:	f7ff ffb2 	bl	8006204 <LL_APB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 80062a0:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 80062a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80062a6:	2309      	movs	r3, #9
 80062a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80062aa:	2303      	movs	r3, #3
 80062ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062b2:	1d3b      	adds	r3, r7, #4
 80062b4:	4619      	mov	r1, r3
 80062b6:	481d      	ldr	r0, [pc, #116]	; (800632c <MX_SPI1_Init+0xbc>)
 80062b8:	f7fb fc0b 	bl	8001ad2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80062bc:	f240 4304 	movw	r3, #1028	; 0x404
 80062c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80062c2:	2301      	movs	r3, #1
 80062c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80062c6:	2303      	movs	r3, #3
 80062c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062ce:	1d3b      	adds	r3, r7, #4
 80062d0:	4619      	mov	r1, r3
 80062d2:	4816      	ldr	r0, [pc, #88]	; (800632c <MX_SPI1_Init+0xbc>)
 80062d4:	f7fb fbfd 	bl	8001ad2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80062d8:	f244 0340 	movw	r3, #16448	; 0x4040
 80062dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80062de:	2304      	movs	r3, #4
 80062e0:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062e2:	1d3b      	adds	r3, r7, #4
 80062e4:	4619      	mov	r1, r3
 80062e6:	4811      	ldr	r0, [pc, #68]	; (800632c <MX_SPI1_Init+0xbc>)
 80062e8:	f7fb fbf3 	bl	8001ad2 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80062f0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80062f4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80062f6:	2300      	movs	r3, #0
 80062f8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80062fa:	2300      	movs	r3, #0
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80062fe:	2300      	movs	r3, #0
 8006300:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8006302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006306:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8006308:	2310      	movs	r3, #16
 800630a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800630c:	2300      	movs	r3, #0
 800630e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8006310:	2300      	movs	r3, #0
 8006312:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8006314:	230a      	movs	r3, #10
 8006316:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8006318:	f107 0318 	add.w	r3, r7, #24
 800631c:	4619      	mov	r1, r3
 800631e:	4804      	ldr	r0, [pc, #16]	; (8006330 <MX_SPI1_Init+0xc0>)
 8006320:	f7fb fe81 	bl	8002026 <LL_SPI_Init>
}
 8006324:	bf00      	nop
 8006326:	3740      	adds	r7, #64	; 0x40
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	40010800 	.word	0x40010800
 8006330:	40013000 	.word	0x40013000

08006334 <SPI1_SendData>:

void SPI1_SendData(uint8_t * data, uint32_t data_length)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
	LL_SPI_Enable(SPI1);
 800633e:	481a      	ldr	r0, [pc, #104]	; (80063a8 <SPI1_SendData+0x74>)
 8006340:	f7ff ff0f 	bl	8006162 <LL_SPI_Enable>

	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8006344:	f240 4104 	movw	r1, #1028	; 0x404
 8006348:	4818      	ldr	r0, [pc, #96]	; (80063ac <SPI1_SendData+0x78>)
 800634a:	f7ff ff82 	bl	8006252 <LL_GPIO_ResetOutputPin>
	for(int i = 0; i < data_length; i++)
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	e011      	b.n	8006378 <SPI1_SendData+0x44>
	{
		while(!LL_SPI_IsActiveFlag_TXE(SPI1));
 8006354:	bf00      	nop
 8006356:	4814      	ldr	r0, [pc, #80]	; (80063a8 <SPI1_SendData+0x74>)
 8006358:	f7ff ff21 	bl	800619e <LL_SPI_IsActiveFlag_TXE>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0f9      	beq.n	8006356 <SPI1_SendData+0x22>
		LL_SPI_TransmitData8(SPI1, data[i]);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	4413      	add	r3, r2
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	4619      	mov	r1, r3
 800636c:	480e      	ldr	r0, [pc, #56]	; (80063a8 <SPI1_SendData+0x74>)
 800636e:	f7ff ff3a 	bl	80061e6 <LL_SPI_TransmitData8>
	for(int i = 0; i < data_length; i++)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3301      	adds	r3, #1
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d3e9      	bcc.n	8006354 <SPI1_SendData+0x20>
	}
	while(LL_SPI_IsActiveFlag_BSY(SPI1));
 8006380:	bf00      	nop
 8006382:	4809      	ldr	r0, [pc, #36]	; (80063a8 <SPI1_SendData+0x74>)
 8006384:	f7ff ff1d 	bl	80061c2 <LL_SPI_IsActiveFlag_BSY>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1f9      	bne.n	8006382 <SPI1_SendData+0x4e>
	LL_SPI_Disable(SPI1);
 800638e:	4806      	ldr	r0, [pc, #24]	; (80063a8 <SPI1_SendData+0x74>)
 8006390:	f7ff fef6 	bl	8006180 <LL_SPI_Disable>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8006394:	f240 4104 	movw	r1, #1028	; 0x404
 8006398:	4804      	ldr	r0, [pc, #16]	; (80063ac <SPI1_SendData+0x78>)
 800639a:	f7ff ff4b 	bl	8006234 <LL_GPIO_SetOutputPin>
}
 800639e:	bf00      	nop
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	40013000 	.word	0x40013000
 80063ac:	40010800 	.word	0x40010800

080063b0 <LL_APB2_GRP1_EnableClock>:
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80063b8:	4908      	ldr	r1, [pc, #32]	; (80063dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80063ba:	4b08      	ldr	r3, [pc, #32]	; (80063dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80063bc:	699a      	ldr	r2, [r3, #24]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80063c4:	4b05      	ldr	r3, [pc, #20]	; (80063dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80063c6:	699a      	ldr	r2, [r3, #24]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4013      	ands	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80063ce:	68fb      	ldr	r3, [r7, #12]
}
 80063d0:	bf00      	nop
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc80      	pop	{r7}
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	40021000 	.word	0x40021000

080063e0 <LL_GPIO_SetOutputPin>:
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	0a1b      	lsrs	r3, r3, #8
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	611a      	str	r2, [r3, #16]
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bc80      	pop	{r7}
 80063fc:	4770      	bx	lr

080063fe <LL_GPIO_TogglePin>:
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	0a1b      	lsrs	r3, r3, #8
 8006410:	b29b      	uxth	r3, r3
 8006412:	405a      	eors	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	60da      	str	r2, [r3, #12]
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	bc80      	pop	{r7}
 8006420:	4770      	bx	lr
	...

08006424 <StatusLedInit>:
#include "delay.h"
#include "cmsis_os.h"


void StatusLedInit(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800642a:	2004      	movs	r0, #4
 800642c:	f7ff ffc0 	bl	80063b0 <LL_APB2_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8006430:	2008      	movs	r0, #8
 8006432:	f7ff ffbd 	bl	80063b0 <LL_APB2_GRP1_EnableClock>

  	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006436:	1d3b      	adds	r3, r7, #4
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	605a      	str	r2, [r3, #4]
 800643e:	609a      	str	r2, [r3, #8]
 8006440:	60da      	str	r2, [r3, #12]
 8006442:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8006444:	4b09      	ldr	r3, [pc, #36]	; (800646c <StatusLedInit+0x48>)
 8006446:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006448:	2301      	movs	r3, #1
 800644a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800644c:	2303      	movs	r3, #3
 800644e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006450:	2300      	movs	r3, #0
 8006452:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8006454:	2300      	movs	r3, #0
 8006456:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006458:	1d3b      	adds	r3, r7, #4
 800645a:	4619      	mov	r1, r3
 800645c:	4804      	ldr	r0, [pc, #16]	; (8006470 <StatusLedInit+0x4c>)
 800645e:	f7fb fb38 	bl	8001ad2 <LL_GPIO_Init>
}
 8006462:	bf00      	nop
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	04200020 	.word	0x04200020
 8006470:	40010c00 	.word	0x40010c00

08006474 <StatusLedON>:

void StatusLedON()
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_13);
 8006478:	4902      	ldr	r1, [pc, #8]	; (8006484 <StatusLedON+0x10>)
 800647a:	4803      	ldr	r0, [pc, #12]	; (8006488 <StatusLedON+0x14>)
 800647c:	f7ff ffb0 	bl	80063e0 <LL_GPIO_SetOutputPin>
}
 8006480:	bf00      	nop
 8006482:	bd80      	pop	{r7, pc}
 8006484:	04200020 	.word	0x04200020
 8006488:	40010c00 	.word	0x40010c00

0800648c <ErrorBlink>:
{
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_13);
}

void ErrorBlink()
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
	while(1)
	{
		LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_13);
 8006490:	4903      	ldr	r1, [pc, #12]	; (80064a0 <ErrorBlink+0x14>)
 8006492:	4804      	ldr	r0, [pc, #16]	; (80064a4 <ErrorBlink+0x18>)
 8006494:	f7ff ffb3 	bl	80063fe <LL_GPIO_TogglePin>
		delay(200);
 8006498:	20c8      	movs	r0, #200	; 0xc8
 800649a:	f7fe f9d9 	bl	8004850 <delay>
		LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_13);
 800649e:	e7f7      	b.n	8006490 <ErrorBlink+0x4>
 80064a0:	04200020 	.word	0x04200020
 80064a4:	40010c00 	.word	0x40010c00

080064a8 <NVIC_GetPriorityGrouping>:
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064ac:	4b04      	ldr	r3, [pc, #16]	; (80064c0 <NVIC_GetPriorityGrouping+0x18>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	0a1b      	lsrs	r3, r3, #8
 80064b2:	f003 0307 	and.w	r3, r3, #7
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	e000ed00 	.word	0xe000ed00

080064c4 <NVIC_EnableIRQ>:
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4603      	mov	r3, r0
 80064cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80064ce:	4908      	ldr	r1, [pc, #32]	; (80064f0 <NVIC_EnableIRQ+0x2c>)
 80064d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d4:	095b      	lsrs	r3, r3, #5
 80064d6:	79fa      	ldrb	r2, [r7, #7]
 80064d8:	f002 021f 	and.w	r2, r2, #31
 80064dc:	2001      	movs	r0, #1
 80064de:	fa00 f202 	lsl.w	r2, r0, r2
 80064e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bc80      	pop	{r7}
 80064ee:	4770      	bx	lr
 80064f0:	e000e100 	.word	0xe000e100

080064f4 <NVIC_DisableIRQ>:
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	4603      	mov	r3, r0
 80064fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80064fe:	4909      	ldr	r1, [pc, #36]	; (8006524 <NVIC_DisableIRQ+0x30>)
 8006500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	79fa      	ldrb	r2, [r7, #7]
 8006508:	f002 021f 	and.w	r2, r2, #31
 800650c:	2001      	movs	r0, #1
 800650e:	fa00 f202 	lsl.w	r2, r0, r2
 8006512:	3320      	adds	r3, #32
 8006514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	e000e100 	.word	0xe000e100

08006528 <NVIC_SetPriority>:
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	6039      	str	r1, [r7, #0]
 8006532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8006534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006538:	2b00      	cmp	r3, #0
 800653a:	da0b      	bge.n	8006554 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800653c:	490d      	ldr	r1, [pc, #52]	; (8006574 <NVIC_SetPriority+0x4c>)
 800653e:	79fb      	ldrb	r3, [r7, #7]
 8006540:	f003 030f 	and.w	r3, r3, #15
 8006544:	3b04      	subs	r3, #4
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	0112      	lsls	r2, r2, #4
 800654c:	b2d2      	uxtb	r2, r2
 800654e:	440b      	add	r3, r1
 8006550:	761a      	strb	r2, [r3, #24]
}
 8006552:	e009      	b.n	8006568 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006554:	4908      	ldr	r1, [pc, #32]	; (8006578 <NVIC_SetPriority+0x50>)
 8006556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	0112      	lsls	r2, r2, #4
 8006560:	b2d2      	uxtb	r2, r2
 8006562:	440b      	add	r3, r1
 8006564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	e000ed00 	.word	0xe000ed00
 8006578:	e000e100 	.word	0xe000e100

0800657c <NVIC_EncodePriority>:
{
 800657c:	b480      	push	{r7}
 800657e:	b089      	sub	sp, #36	; 0x24
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	f1c3 0307 	rsb	r3, r3, #7
 8006596:	2b04      	cmp	r3, #4
 8006598:	bf28      	it	cs
 800659a:	2304      	movcs	r3, #4
 800659c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	3304      	adds	r3, #4
 80065a2:	2b06      	cmp	r3, #6
 80065a4:	d902      	bls.n	80065ac <NVIC_EncodePriority+0x30>
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	3b03      	subs	r3, #3
 80065aa:	e000      	b.n	80065ae <NVIC_EncodePriority+0x32>
 80065ac:	2300      	movs	r3, #0
 80065ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065b0:	2201      	movs	r2, #1
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	1e5a      	subs	r2, r3, #1
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	401a      	ands	r2, r3
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065c2:	2101      	movs	r1, #1
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ca:	1e59      	subs	r1, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065d0:	4313      	orrs	r3, r2
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3724      	adds	r7, #36	; 0x24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bc80      	pop	{r7}
 80065da:	4770      	bx	lr

080065dc <LL_APB2_GRP1_EnableClock>:
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80065e4:	4908      	ldr	r1, [pc, #32]	; (8006608 <LL_APB2_GRP1_EnableClock+0x2c>)
 80065e6:	4b08      	ldr	r3, [pc, #32]	; (8006608 <LL_APB2_GRP1_EnableClock+0x2c>)
 80065e8:	699a      	ldr	r2, [r3, #24]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80065f0:	4b05      	ldr	r3, [pc, #20]	; (8006608 <LL_APB2_GRP1_EnableClock+0x2c>)
 80065f2:	699a      	ldr	r2, [r3, #24]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4013      	ands	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80065fa:	68fb      	ldr	r3, [r7, #12]
}
 80065fc:	bf00      	nop
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	bc80      	pop	{r7}
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40021000 	.word	0x40021000

0800660c <LL_USART_Enable>:
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	60da      	str	r2, [r3, #12]
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	bc80      	pop	{r7}
 8006628:	4770      	bx	lr

0800662a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	615a      	str	r2, [r3, #20]
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	bc80      	pop	{r7}
 8006652:	4770      	bx	lr

08006654 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b20      	cmp	r3, #32
 8006666:	bf0c      	ite	eq
 8006668:	2301      	moveq	r3, #1
 800666a:	2300      	movne	r3, #0
 800666c:	b2db      	uxtb	r3, r3
}
 800666e:	4618      	mov	r0, r3
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	bc80      	pop	{r7}
 8006676:	4770      	bx	lr

08006678 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006688:	2b40      	cmp	r3, #64	; 0x40
 800668a:	bf0c      	ite	eq
 800668c:	2301      	moveq	r3, #1
 800668e:	2300      	movne	r3, #0
 8006690:	b2db      	uxtb	r3, r3
}
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr

0800669c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f043 0220 	orr.w	r2, r3, #32
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	60da      	str	r2, [r3, #12]
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bc80      	pop	{r7}
 80066b8:	4770      	bx	lr

080066ba <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f043 0201 	orr.w	r2, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	615a      	str	r2, [r3, #20]
}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr

080066d8 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f003 0320 	and.w	r3, r3, #32
 80066e8:	2b20      	cmp	r3, #32
 80066ea:	bf0c      	ite	eq
 80066ec:	2301      	moveq	r3, #1
 80066ee:	2300      	movne	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr

080066fc <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	b2db      	uxtb	r3, r3
}
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	bc80      	pop	{r7}
 8006712:	4770      	bx	lr

08006714 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8006720:	78fa      	ldrb	r2, [r7, #3]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	605a      	str	r2, [r3, #4]
}
 8006726:	bf00      	nop
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr

08006730 <LL_GPIO_SetOutputPin>:
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	0a1b      	lsrs	r3, r3, #8
 800673e:	b29a      	uxth	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	611a      	str	r2, [r3, #16]
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	bc80      	pop	{r7}
 800674c:	4770      	bx	lr

0800674e <LL_GPIO_ResetOutputPin>:
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	0a1b      	lsrs	r3, r3, #8
 800675c:	b29a      	uxth	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	615a      	str	r2, [r3, #20]
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr

0800676c <USART_SendData_byte>:
#include "ring_buffer.h"

//char uart_rx_buffer[512];

void USART_SendData_byte(char data)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	4603      	mov	r3, r0
 8006774:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART1, data);
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	4619      	mov	r1, r3
 800677a:	4807      	ldr	r0, [pc, #28]	; (8006798 <USART_SendData_byte+0x2c>)
 800677c:	f7ff ffca 	bl	8006714 <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TC(USART1));
 8006780:	bf00      	nop
 8006782:	4805      	ldr	r0, [pc, #20]	; (8006798 <USART_SendData_byte+0x2c>)
 8006784:	f7ff ff78 	bl	8006678 <LL_USART_IsActiveFlag_TC>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0f9      	beq.n	8006782 <USART_SendData_byte+0x16>
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	40013800 	.word	0x40013800

0800679c <USART_SendData>:

void USART_SendData(char * data, uint32_t data_length)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < data_length; i++)
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	e014      	b.n	80067d6 <USART_SendData+0x3a>
	{
		LL_USART_TransmitData8(USART1, data[i]);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	4413      	add	r3, r2
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	4619      	mov	r1, r3
 80067b6:	480c      	ldr	r0, [pc, #48]	; (80067e8 <USART_SendData+0x4c>)
 80067b8:	f7ff ffac 	bl	8006714 <LL_USART_TransmitData8>
		LL_mDelay(2);
 80067bc:	2002      	movs	r0, #2
 80067be:	f7fc f843 	bl	8002848 <LL_mDelay>
		while (!LL_USART_IsActiveFlag_TC(USART1));
 80067c2:	bf00      	nop
 80067c4:	4808      	ldr	r0, [pc, #32]	; (80067e8 <USART_SendData+0x4c>)
 80067c6:	f7ff ff57 	bl	8006678 <LL_USART_IsActiveFlag_TC>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0f9      	beq.n	80067c4 <USART_SendData+0x28>
	for(int i = 0; i < data_length; i++)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3301      	adds	r3, #1
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d3e6      	bcc.n	80067ac <USART_SendData+0x10>
	}
}
 80067de:	bf00      	nop
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	40013800 	.word	0x40013800

080067ec <USART_CharReception_Callback>:

void USART_CharReception_Callback(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
	__IO uint32_t received_char;
	received_char = LL_USART_ReceiveData8(USART1);
 80067f2:	4807      	ldr	r0, [pc, #28]	; (8006810 <USART_CharReception_Callback+0x24>)
 80067f4:	f7ff ff82 	bl	80066fc <LL_USART_ReceiveData8>
 80067f8:	4603      	mov	r3, r0
 80067fa:	607b      	str	r3, [r7, #4]

	RingBuff_Push(received_char);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	4618      	mov	r0, r3
 8006802:	f7fa fb41 	bl	8000e88 <RingBuff_Push>
  //LL_USART_TransmitData8(USART1, received_char);
}
 8006806:	bf00      	nop
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40013800 	.word	0x40013800

08006814 <Error_Callback>:

void Error_Callback(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
  __IO uint32_t sr_reg;

  NVIC_DisableIRQ(USART1_IRQn);
 800681a:	2025      	movs	r0, #37	; 0x25
 800681c:	f7ff fe6a 	bl	80064f4 <NVIC_DisableIRQ>

  sr_reg = LL_USART_ReadReg(USART1, SR);
 8006820:	4b03      	ldr	r3, [pc, #12]	; (8006830 <Error_Callback+0x1c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	607b      	str	r3, [r7, #4]
  if (sr_reg & LL_USART_SR_NE)
 8006826:	687b      	ldr	r3, [r7, #4]
  {

  }
}
 8006828:	bf00      	nop
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40013800 	.word	0x40013800

08006834 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
  if(LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
 8006838:	4809      	ldr	r0, [pc, #36]	; (8006860 <USART1_IRQHandler+0x2c>)
 800683a:	f7ff ff0b 	bl	8006654 <LL_USART_IsActiveFlag_RXNE>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <USART1_IRQHandler+0x22>
 8006844:	4806      	ldr	r0, [pc, #24]	; (8006860 <USART1_IRQHandler+0x2c>)
 8006846:	f7ff ff47 	bl	80066d8 <LL_USART_IsEnabledIT_RXNE>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <USART1_IRQHandler+0x22>
  {
    USART_CharReception_Callback();
 8006850:	f7ff ffcc 	bl	80067ec <USART_CharReception_Callback>
 8006854:	e001      	b.n	800685a <USART1_IRQHandler+0x26>
  }
  else
  {
    Error_Callback();
 8006856:	f7ff ffdd 	bl	8006814 <Error_Callback>
  }
}
 800685a:	bf00      	nop
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	40013800 	.word	0x40013800

08006864 <USART1_Device_Reset>:

void USART1_Device_Reset(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8006868:	4906      	ldr	r1, [pc, #24]	; (8006884 <USART1_Device_Reset+0x20>)
 800686a:	4807      	ldr	r0, [pc, #28]	; (8006888 <USART1_Device_Reset+0x24>)
 800686c:	f7ff ff6f 	bl	800674e <LL_GPIO_ResetOutputPin>
	LL_mDelay(100);
 8006870:	2064      	movs	r0, #100	; 0x64
 8006872:	f7fb ffe9 	bl	8002848 <LL_mDelay>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8006876:	4903      	ldr	r1, [pc, #12]	; (8006884 <USART1_Device_Reset+0x20>)
 8006878:	4803      	ldr	r0, [pc, #12]	; (8006888 <USART1_Device_Reset+0x24>)
 800687a:	f7ff ff59 	bl	8006730 <LL_GPIO_SetOutputPin>
}
 800687e:	bf00      	nop
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	04010001 	.word	0x04010001
 8006888:	40010800 	.word	0x40010800

0800688c <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08c      	sub	sp, #48	; 0x30
 8006890:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8006892:	f107 0318 	add.w	r3, r7, #24
 8006896:	2200      	movs	r2, #0
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	605a      	str	r2, [r3, #4]
 800689c:	609a      	str	r2, [r3, #8]
 800689e:	60da      	str	r2, [r3, #12]
 80068a0:	611a      	str	r2, [r3, #16]
 80068a2:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068a4:	1d3b      	adds	r3, r7, #4
 80068a6:	2200      	movs	r2, #0
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	605a      	str	r2, [r3, #4]
 80068ac:	609a      	str	r2, [r3, #8]
 80068ae:	60da      	str	r2, [r3, #12]
 80068b0:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80068b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80068b6:	f7ff fe91 	bl	80065dc <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80068ba:	2004      	movs	r0, #4
 80068bc:	f7ff fe8e 	bl	80065dc <LL_APB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80068c0:	4b30      	ldr	r3, [pc, #192]	; (8006984 <MX_USART1_UART_Init+0xf8>)
 80068c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80068c4:	2309      	movs	r3, #9
 80068c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80068c8:	2303      	movs	r3, #3
 80068ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80068cc:	2300      	movs	r3, #0
 80068ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80068d0:	2301      	movs	r3, #1
 80068d2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068d4:	1d3b      	adds	r3, r7, #4
 80068d6:	4619      	mov	r1, r3
 80068d8:	482b      	ldr	r0, [pc, #172]	; (8006988 <MX_USART1_UART_Init+0xfc>)
 80068da:	f7fb f8fa 	bl	8001ad2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80068de:	4b2b      	ldr	r3, [pc, #172]	; (800698c <MX_USART1_UART_Init+0x100>)
 80068e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80068e2:	2304      	movs	r3, #4
 80068e4:	60bb      	str	r3, [r7, #8]

  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80068e6:	2303      	movs	r3, #3
 80068e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80068ea:	2301      	movs	r3, #1
 80068ec:	617b      	str	r3, [r7, #20]

  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068ee:	1d3b      	adds	r3, r7, #4
 80068f0:	4619      	mov	r1, r3
 80068f2:	4825      	ldr	r0, [pc, #148]	; (8006988 <MX_USART1_UART_Init+0xfc>)
 80068f4:	f7fb f8ed 	bl	8001ad2 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80068f8:	f7ff fdd6 	bl	80064a8 <NVIC_GetPriorityGrouping>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2200      	movs	r2, #0
 8006900:	2100      	movs	r1, #0
 8006902:	4618      	mov	r0, r3
 8006904:	f7ff fe3a 	bl	800657c <NVIC_EncodePriority>
 8006908:	4603      	mov	r3, r0
 800690a:	4619      	mov	r1, r3
 800690c:	2025      	movs	r0, #37	; 0x25
 800690e:	f7ff fe0b 	bl	8006528 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8006912:	2025      	movs	r0, #37	; 0x25
 8006914:	f7ff fdd6 	bl	80064c4 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8006918:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800691c:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800691e:	2300      	movs	r3, #0
 8006920:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8006922:	2300      	movs	r3, #0
 8006924:	623b      	str	r3, [r7, #32]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006926:	2300      	movs	r3, #0
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800692a:	230c      	movs	r3, #12
 800692c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800692e:	2300      	movs	r3, #0
 8006930:	62fb      	str	r3, [r7, #44]	; 0x2c

  LL_USART_Init(USART1, &USART_InitStruct);
 8006932:	f107 0318 	add.w	r3, r7, #24
 8006936:	4619      	mov	r1, r3
 8006938:	4815      	ldr	r0, [pc, #84]	; (8006990 <MX_USART1_UART_Init+0x104>)
 800693a:	f7fb fefd 	bl	8002738 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800693e:	4814      	ldr	r0, [pc, #80]	; (8006990 <MX_USART1_UART_Init+0x104>)
 8006940:	f7ff fe73 	bl	800662a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8006944:	4812      	ldr	r0, [pc, #72]	; (8006990 <MX_USART1_UART_Init+0x104>)
 8006946:	f7ff fe61 	bl	800660c <LL_USART_Enable>

  LL_USART_EnableIT_RXNE(USART1);
 800694a:	4811      	ldr	r0, [pc, #68]	; (8006990 <MX_USART1_UART_Init+0x104>)
 800694c:	f7ff fea6 	bl	800669c <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_ERROR(USART1);
 8006950:	480f      	ldr	r0, [pc, #60]	; (8006990 <MX_USART1_UART_Init+0x104>)
 8006952:	f7ff feb2 	bl	80066ba <LL_USART_EnableIT_ERROR>

  //Reset gpio
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8006956:	4b0f      	ldr	r3, [pc, #60]	; (8006994 <MX_USART1_UART_Init+0x108>)
 8006958:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800695a:	2301      	movs	r3, #1
 800695c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800695e:	2303      	movs	r3, #3
 8006960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006962:	2300      	movs	r3, #0
 8006964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006966:	2301      	movs	r3, #1
 8006968:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800696a:	1d3b      	adds	r3, r7, #4
 800696c:	4619      	mov	r1, r3
 800696e:	4806      	ldr	r0, [pc, #24]	; (8006988 <MX_USART1_UART_Init+0xfc>)
 8006970:	f7fb f8af 	bl	8001ad2 <LL_GPIO_Init>

  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8006974:	4907      	ldr	r1, [pc, #28]	; (8006994 <MX_USART1_UART_Init+0x108>)
 8006976:	4804      	ldr	r0, [pc, #16]	; (8006988 <MX_USART1_UART_Init+0xfc>)
 8006978:	f7ff feda 	bl	8006730 <LL_GPIO_SetOutputPin>
}
 800697c:	bf00      	nop
 800697e:	3730      	adds	r7, #48	; 0x30
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	04020002 	.word	0x04020002
 8006988:	40010800 	.word	0x40010800
 800698c:	04040004 	.word	0x04040004
 8006990:	40013800 	.word	0x40013800
 8006994:	04010001 	.word	0x04010001

08006998 <MX_FREERTOS_Init>:
//
//	int free_heap = xPortGetFreeHeapSize();
//}
//#pragma GCC pop_options

void __attribute__((optimize("O0"))) MX_FREERTOS_Init(void) {
 8006998:	b5b0      	push	{r4, r5, r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0

  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800699e:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <MX_FREERTOS_Init+0x44>)
 80069a0:	1d3c      	adds	r4, r7, #4
 80069a2:	461d      	mov	r5, r3
 80069a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80069ac:	1d3b      	adds	r3, r7, #4
 80069ae:	2100      	movs	r1, #0
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fb ff99 	bl	80028e8 <osThreadCreate>
 80069b6:	4602      	mov	r2, r0
 80069b8:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <MX_FREERTOS_Init+0x48>)
 80069ba:	601a      	str	r2, [r3, #0]

  EncoderQueueInit();
 80069bc:	f7fe f91e 	bl	8004bfc <EncoderQueueInit>
  LDRQueueInit();
 80069c0:	f7fe ff9c 	bl	80058fc <LDRQueueInit>

  LedTaskInit();
 80069c4:	f7ff fab0 	bl	8005f28 <LedTaskInit>
  LDRTaskInit();
 80069c8:	f7fe fff0 	bl	80059ac <LDRTaskInit>
  EncoderTaskInit();
 80069cc:	f7fe f9b0 	bl	8004d30 <EncoderTaskInit>
  ESPTaskInit();
 80069d0:	f7fe faac 	bl	8004f2c <ESPTaskInit>
}
 80069d4:	bf00      	nop
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bdb0      	pop	{r4, r5, r7, pc}
 80069dc:	08007ab8 	.word	0x08007ab8
 80069e0:	20002fe4 	.word	0x20002fe4

080069e4 <StartDefaultTask>:

void StartDefaultTask(void const * argument)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80069ec:	2001      	movs	r0, #1
 80069ee:	f7fb ffa2 	bl	8002936 <osDelay>
 80069f2:	e7fb      	b.n	80069ec <StartDefaultTask+0x8>

080069f4 <LL_RCC_HSE_Enable>:
{
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80069f8:	4a04      	ldr	r2, [pc, #16]	; (8006a0c <LL_RCC_HSE_Enable+0x18>)
 80069fa:	4b04      	ldr	r3, [pc, #16]	; (8006a0c <LL_RCC_HSE_Enable+0x18>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a02:	6013      	str	r3, [r2, #0]
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr
 8006a0c:	40021000 	.word	0x40021000

08006a10 <LL_RCC_HSE_IsReady>:
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8006a14:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <LL_RCC_HSE_IsReady+0x20>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a20:	bf0c      	ite	eq
 8006a22:	2301      	moveq	r3, #1
 8006a24:	2300      	movne	r3, #0
 8006a26:	b2db      	uxtb	r3, r3
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bc80      	pop	{r7}
 8006a2e:	4770      	bx	lr
 8006a30:	40021000 	.word	0x40021000

08006a34 <LL_RCC_SetSysClkSource>:
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006a3c:	4906      	ldr	r1, [pc, #24]	; (8006a58 <LL_RCC_SetSysClkSource+0x24>)
 8006a3e:	4b06      	ldr	r3, [pc, #24]	; (8006a58 <LL_RCC_SetSysClkSource+0x24>)
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f023 0203 	bic.w	r2, r3, #3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	604b      	str	r3, [r1, #4]
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	40021000 	.word	0x40021000

08006a5c <LL_RCC_GetSysClkSource>:
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006a60:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <LL_RCC_GetSysClkSource+0x14>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f003 030c 	and.w	r3, r3, #12
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr
 8006a70:	40021000 	.word	0x40021000

08006a74 <LL_RCC_SetAHBPrescaler>:
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006a7c:	4906      	ldr	r1, [pc, #24]	; (8006a98 <LL_RCC_SetAHBPrescaler+0x24>)
 8006a7e:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <LL_RCC_SetAHBPrescaler+0x24>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	604b      	str	r3, [r1, #4]
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bc80      	pop	{r7}
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	40021000 	.word	0x40021000

08006a9c <LL_RCC_SetAPB1Prescaler>:
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006aa4:	4906      	ldr	r1, [pc, #24]	; (8006ac0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8006aa6:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	604b      	str	r3, [r1, #4]
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40021000 	.word	0x40021000

08006ac4 <LL_RCC_SetAPB2Prescaler>:
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006acc:	4906      	ldr	r1, [pc, #24]	; (8006ae8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8006ace:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	604b      	str	r3, [r1, #4]
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bc80      	pop	{r7}
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40021000 	.word	0x40021000

08006aec <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8006af4:	4906      	ldr	r1, [pc, #24]	; (8006b10 <LL_FLASH_SetLatency+0x24>)
 8006af6:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <LL_FLASH_SetLatency+0x24>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f023 0207 	bic.w	r2, r3, #7
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	600b      	str	r3, [r1, #0]
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bc80      	pop	{r7}
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40022000 	.word	0x40022000

08006b14 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8006b14:	b480      	push	{r7}
 8006b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8006b18:	4b03      	ldr	r3, [pc, #12]	; (8006b28 <LL_FLASH_GetLatency+0x14>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0307 	and.w	r3, r3, #7
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bc80      	pop	{r7}
 8006b26:	4770      	bx	lr
 8006b28:	40022000 	.word	0x40022000

08006b2c <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d106      	bne.n	8006b48 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8006b3a:	4a09      	ldr	r2, [pc, #36]	; (8006b60 <LL_SYSTICK_SetClkSource+0x34>)
 8006b3c:	4b08      	ldr	r3, [pc, #32]	; (8006b60 <LL_SYSTICK_SetClkSource+0x34>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f043 0304 	orr.w	r3, r3, #4
 8006b44:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8006b46:	e005      	b.n	8006b54 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8006b48:	4a05      	ldr	r2, [pc, #20]	; (8006b60 <LL_SYSTICK_SetClkSource+0x34>)
 8006b4a:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <LL_SYSTICK_SetClkSource+0x34>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f023 0304 	bic.w	r3, r3, #4
 8006b52:	6013      	str	r3, [r2, #0]
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	e000e010 	.word	0xe000e010

08006b64 <main>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);

int main(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	af00      	add	r7, sp, #0
  HAL_Init();
 8006b68:	f7fa f9f2 	bl	8000f50 <HAL_Init>
  SystemClock_Config();
 8006b6c:	f000 f808 	bl	8006b80 <SystemClock_Config>
  MX_FREERTOS_Init(); //recalc stack size
 8006b70:	f7ff ff12 	bl	8006998 <MX_FREERTOS_Init>

  PowerStatusInit();
 8006b74:	f7ff faa6 	bl	80060c4 <PowerStatusInit>

  osKernelStart();
 8006b78:	f7fb feaf 	bl	80028da <osKernelStart>

  while (1)
 8006b7c:	e7fe      	b.n	8006b7c <main+0x18>
	...

08006b80 <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8006b84:	2000      	movs	r0, #0
 8006b86:	f7ff ffb1 	bl	8006aec <LL_FLASH_SetLatency>

    if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8006b8a:	f7ff ffc3 	bl	8006b14 <LL_FLASH_GetLatency>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <SystemClock_Config+0x18>
    {
      Error_Handler();
 8006b94:	f000 f83a 	bl	8006c0c <Error_Handler>
    }
    LL_RCC_HSE_Enable();
 8006b98:	f7ff ff2c 	bl	80069f4 <LL_RCC_HSE_Enable>

    while(LL_RCC_HSE_IsReady() != 1)
 8006b9c:	bf00      	nop
 8006b9e:	f7ff ff37 	bl	8006a10 <LL_RCC_HSE_IsReady>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d1fa      	bne.n	8006b9e <SystemClock_Config+0x1e>
    {

    }
    LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8006ba8:	2000      	movs	r0, #0
 8006baa:	f7ff ff63 	bl	8006a74 <LL_RCC_SetAHBPrescaler>
    LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8006bae:	2000      	movs	r0, #0
 8006bb0:	f7ff ff74 	bl	8006a9c <LL_RCC_SetAPB1Prescaler>
    LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8006bb4:	2000      	movs	r0, #0
 8006bb6:	f7ff ff85 	bl	8006ac4 <LL_RCC_SetAPB2Prescaler>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8006bba:	2001      	movs	r0, #1
 8006bbc:	f7ff ff3a 	bl	8006a34 <LL_RCC_SetSysClkSource>

    while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)
 8006bc0:	bf00      	nop
 8006bc2:	f7ff ff4b 	bl	8006a5c <LL_RCC_GetSysClkSource>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d1fa      	bne.n	8006bc2 <SystemClock_Config+0x42>
    {
    
    }
    LL_Init1msTick(8000000);
 8006bcc:	4805      	ldr	r0, [pc, #20]	; (8006be4 <SystemClock_Config+0x64>)
 8006bce:	f7fb fe2d 	bl	800282c <LL_Init1msTick>
    LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8006bd2:	2004      	movs	r0, #4
 8006bd4:	f7ff ffaa 	bl	8006b2c <LL_SYSTICK_SetClkSource>
    LL_SetSystemCoreClock(8000000);
 8006bd8:	4802      	ldr	r0, [pc, #8]	; (8006be4 <SystemClock_Config+0x64>)
 8006bda:	f7fb fe59 	bl	8002890 <LL_SetSystemCoreClock>
}
 8006bde:	bf00      	nop
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	007a1200 	.word	0x007a1200

08006be8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a04      	ldr	r2, [pc, #16]	; (8006c08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d101      	bne.n	8006bfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006bfa:	f7fa f9bf 	bl	8000f7c <HAL_IncTick>
  }
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	40012c00 	.word	0x40012c00

08006c0c <Error_Handler>:

void Error_Handler(void)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	af00      	add	r7, sp, #0

}
 8006c10:	bf00      	nop
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr

08006c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006c1e:	4a18      	ldr	r2, [pc, #96]	; (8006c80 <HAL_MspInit+0x68>)
 8006c20:	4b17      	ldr	r3, [pc, #92]	; (8006c80 <HAL_MspInit+0x68>)
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	f043 0301 	orr.w	r3, r3, #1
 8006c28:	6193      	str	r3, [r2, #24]
 8006c2a:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <HAL_MspInit+0x68>)
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	60bb      	str	r3, [r7, #8]
 8006c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c36:	4a12      	ldr	r2, [pc, #72]	; (8006c80 <HAL_MspInit+0x68>)
 8006c38:	4b11      	ldr	r3, [pc, #68]	; (8006c80 <HAL_MspInit+0x68>)
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c40:	61d3      	str	r3, [r2, #28]
 8006c42:	4b0f      	ldr	r3, [pc, #60]	; (8006c80 <HAL_MspInit+0x68>)
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c4a:	607b      	str	r3, [r7, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006c4e:	2200      	movs	r2, #0
 8006c50:	210f      	movs	r1, #15
 8006c52:	f06f 0001 	mvn.w	r0, #1
 8006c56:	f7fa fa52 	bl	80010fe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006c5a:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <HAL_MspInit+0x6c>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	4a04      	ldr	r2, [pc, #16]	; (8006c84 <HAL_MspInit+0x6c>)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c76:	bf00      	nop
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40021000 	.word	0x40021000
 8006c84:	40010000 	.word	0x40010000

08006c88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08c      	sub	sp, #48	; 0x30
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006c94:	2300      	movs	r3, #0
 8006c96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8006c98:	2200      	movs	r2, #0
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	2019      	movs	r0, #25
 8006c9e:	f7fa fa2e 	bl	80010fe <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8006ca2:	2019      	movs	r0, #25
 8006ca4:	f7fa fa47 	bl	8001136 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006ca8:	4a1e      	ldr	r2, [pc, #120]	; (8006d24 <HAL_InitTick+0x9c>)
 8006caa:	4b1e      	ldr	r3, [pc, #120]	; (8006d24 <HAL_InitTick+0x9c>)
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006cb2:	6193      	str	r3, [r2, #24]
 8006cb4:	4b1b      	ldr	r3, [pc, #108]	; (8006d24 <HAL_InitTick+0x9c>)
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006cc0:	f107 0210 	add.w	r2, r7, #16
 8006cc4:	f107 0314 	add.w	r3, r7, #20
 8006cc8:	4611      	mov	r1, r2
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fa fa60 	bl	8001190 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006cd0:	f7fa fa4a 	bl	8001168 <HAL_RCC_GetPCLK2Freq>
 8006cd4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	4a13      	ldr	r2, [pc, #76]	; (8006d28 <HAL_InitTick+0xa0>)
 8006cda:	fba2 2303 	umull	r2, r3, r2, r3
 8006cde:	0c9b      	lsrs	r3, r3, #18
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006ce4:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <HAL_InitTick+0xa4>)
 8006ce6:	4a12      	ldr	r2, [pc, #72]	; (8006d30 <HAL_InitTick+0xa8>)
 8006ce8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8006cea:	4b10      	ldr	r3, [pc, #64]	; (8006d2c <HAL_InitTick+0xa4>)
 8006cec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006cf0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8006cf2:	4a0e      	ldr	r2, [pc, #56]	; (8006d2c <HAL_InitTick+0xa4>)
 8006cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8006cf8:	4b0c      	ldr	r3, [pc, #48]	; (8006d2c <HAL_InitTick+0xa4>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cfe:	4b0b      	ldr	r3, [pc, #44]	; (8006d2c <HAL_InitTick+0xa4>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8006d04:	4809      	ldr	r0, [pc, #36]	; (8006d2c <HAL_InitTick+0xa4>)
 8006d06:	f7fa fa73 	bl	80011f0 <HAL_TIM_Base_Init>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d104      	bne.n	8006d1a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8006d10:	4806      	ldr	r0, [pc, #24]	; (8006d2c <HAL_InitTick+0xa4>)
 8006d12:	f7fa faa1 	bl	8001258 <HAL_TIM_Base_Start_IT>
 8006d16:	4603      	mov	r3, r0
 8006d18:	e000      	b.n	8006d1c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3730      	adds	r7, #48	; 0x30
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	40021000 	.word	0x40021000
 8006d28:	431bde83 	.word	0x431bde83
 8006d2c:	20002fe8 	.word	0x20002fe8
 8006d30:	40012c00 	.word	0x40012c00

08006d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006d38:	bf00      	nop
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr

08006d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d44:	e7fe      	b.n	8006d44 <HardFault_Handler+0x4>

08006d46 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d46:	b480      	push	{r7}
 8006d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d4a:	e7fe      	b.n	8006d4a <MemManage_Handler+0x4>

08006d4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d50:	e7fe      	b.n	8006d50 <BusFault_Handler+0x4>

08006d52 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d52:	b480      	push	{r7}
 8006d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d56:	e7fe      	b.n	8006d56 <UsageFault_Handler+0x4>

08006d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d5c:	bf00      	nop
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr

08006d64 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006d68:	4802      	ldr	r0, [pc, #8]	; (8006d74 <TIM1_UP_IRQHandler+0x10>)
 8006d6a:	f7fa fa8f 	bl	800128c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8006d6e:	bf00      	nop
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20002fe8 	.word	0x20002fe8

08006d78 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006d80:	4b11      	ldr	r3, [pc, #68]	; (8006dc8 <_sbrk+0x50>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d102      	bne.n	8006d8e <_sbrk+0x16>
		heap_end = &end;
 8006d88:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <_sbrk+0x50>)
 8006d8a:	4a10      	ldr	r2, [pc, #64]	; (8006dcc <_sbrk+0x54>)
 8006d8c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006d8e:	4b0e      	ldr	r3, [pc, #56]	; (8006dc8 <_sbrk+0x50>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006d94:	4b0c      	ldr	r3, [pc, #48]	; (8006dc8 <_sbrk+0x50>)
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	466a      	mov	r2, sp
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d907      	bls.n	8006db2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006da2:	f000 f86f 	bl	8006e84 <__errno>
 8006da6:	4602      	mov	r2, r0
 8006da8:	230c      	movs	r3, #12
 8006daa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006dac:	f04f 33ff 	mov.w	r3, #4294967295
 8006db0:	e006      	b.n	8006dc0 <_sbrk+0x48>
	}

	heap_end += incr;
 8006db2:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <_sbrk+0x50>)
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4413      	add	r3, r2
 8006dba:	4a03      	ldr	r2, [pc, #12]	; (8006dc8 <_sbrk+0x50>)
 8006dbc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	20002368 	.word	0x20002368
 8006dcc:	2000302c 	.word	0x2000302c

08006dd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006dd4:	4a15      	ldr	r2, [pc, #84]	; (8006e2c <SystemInit+0x5c>)
 8006dd6:	4b15      	ldr	r3, [pc, #84]	; (8006e2c <SystemInit+0x5c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f043 0301 	orr.w	r3, r3, #1
 8006dde:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006de0:	4912      	ldr	r1, [pc, #72]	; (8006e2c <SystemInit+0x5c>)
 8006de2:	4b12      	ldr	r3, [pc, #72]	; (8006e2c <SystemInit+0x5c>)
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	4b12      	ldr	r3, [pc, #72]	; (8006e30 <SystemInit+0x60>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006dec:	4a0f      	ldr	r2, [pc, #60]	; (8006e2c <SystemInit+0x5c>)
 8006dee:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <SystemInit+0x5c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dfa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006dfc:	4a0b      	ldr	r2, [pc, #44]	; (8006e2c <SystemInit+0x5c>)
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <SystemInit+0x5c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e06:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006e08:	4a08      	ldr	r2, [pc, #32]	; (8006e2c <SystemInit+0x5c>)
 8006e0a:	4b08      	ldr	r3, [pc, #32]	; (8006e2c <SystemInit+0x5c>)
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006e12:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <SystemInit+0x5c>)
 8006e16:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006e1a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006e1c:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <SystemInit+0x64>)
 8006e1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e22:	609a      	str	r2, [r3, #8]
#endif 
}
 8006e24:	bf00      	nop
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr
 8006e2c:	40021000 	.word	0x40021000
 8006e30:	f8ff0000 	.word	0xf8ff0000
 8006e34:	e000ed00 	.word	0xe000ed00

08006e38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006e38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006e3a:	e003      	b.n	8006e44 <LoopCopyDataInit>

08006e3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006e3c:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006e3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006e40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006e42:	3104      	adds	r1, #4

08006e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006e44:	480a      	ldr	r0, [pc, #40]	; (8006e70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006e46:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006e48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006e4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006e4c:	d3f6      	bcc.n	8006e3c <CopyDataInit>
  ldr r2, =_sbss
 8006e4e:	4a0a      	ldr	r2, [pc, #40]	; (8006e78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006e50:	e002      	b.n	8006e58 <LoopFillZerobss>

08006e52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006e52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006e54:	f842 3b04 	str.w	r3, [r2], #4

08006e58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006e58:	4b08      	ldr	r3, [pc, #32]	; (8006e7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006e5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006e5c:	d3f9      	bcc.n	8006e52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006e5e:	f7ff ffb7 	bl	8006dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e62:	f000 f815 	bl	8006e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006e66:	f7ff fe7d 	bl	8006b64 <main>
  bx lr
 8006e6a:	4770      	bx	lr
  ldr r3, =_sidata
 8006e6c:	08008098 	.word	0x08008098
  ldr r0, =_sdata
 8006e70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006e74:	200001ec 	.word	0x200001ec
  ldr r2, =_sbss
 8006e78:	200001ec 	.word	0x200001ec
  ldr r3, = _ebss
 8006e7c:	2000302c 	.word	0x2000302c

08006e80 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006e80:	e7fe      	b.n	8006e80 <CAN1_RX1_IRQHandler>
	...

08006e84 <__errno>:
 8006e84:	4b01      	ldr	r3, [pc, #4]	; (8006e8c <__errno+0x8>)
 8006e86:	6818      	ldr	r0, [r3, #0]
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	2000001c 	.word	0x2000001c

08006e90 <__libc_init_array>:
 8006e90:	b570      	push	{r4, r5, r6, lr}
 8006e92:	2500      	movs	r5, #0
 8006e94:	4e0c      	ldr	r6, [pc, #48]	; (8006ec8 <__libc_init_array+0x38>)
 8006e96:	4c0d      	ldr	r4, [pc, #52]	; (8006ecc <__libc_init_array+0x3c>)
 8006e98:	1ba4      	subs	r4, r4, r6
 8006e9a:	10a4      	asrs	r4, r4, #2
 8006e9c:	42a5      	cmp	r5, r4
 8006e9e:	d109      	bne.n	8006eb4 <__libc_init_array+0x24>
 8006ea0:	f000 fd22 	bl	80078e8 <_init>
 8006ea4:	2500      	movs	r5, #0
 8006ea6:	4e0a      	ldr	r6, [pc, #40]	; (8006ed0 <__libc_init_array+0x40>)
 8006ea8:	4c0a      	ldr	r4, [pc, #40]	; (8006ed4 <__libc_init_array+0x44>)
 8006eaa:	1ba4      	subs	r4, r4, r6
 8006eac:	10a4      	asrs	r4, r4, #2
 8006eae:	42a5      	cmp	r5, r4
 8006eb0:	d105      	bne.n	8006ebe <__libc_init_array+0x2e>
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
 8006eb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006eb8:	4798      	blx	r3
 8006eba:	3501      	adds	r5, #1
 8006ebc:	e7ee      	b.n	8006e9c <__libc_init_array+0xc>
 8006ebe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ec2:	4798      	blx	r3
 8006ec4:	3501      	adds	r5, #1
 8006ec6:	e7f2      	b.n	8006eae <__libc_init_array+0x1e>
 8006ec8:	08008090 	.word	0x08008090
 8006ecc:	08008090 	.word	0x08008090
 8006ed0:	08008090 	.word	0x08008090
 8006ed4:	08008094 	.word	0x08008094

08006ed8 <memcpy>:
 8006ed8:	b510      	push	{r4, lr}
 8006eda:	1e43      	subs	r3, r0, #1
 8006edc:	440a      	add	r2, r1
 8006ede:	4291      	cmp	r1, r2
 8006ee0:	d100      	bne.n	8006ee4 <memcpy+0xc>
 8006ee2:	bd10      	pop	{r4, pc}
 8006ee4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eec:	e7f7      	b.n	8006ede <memcpy+0x6>

08006eee <memset>:
 8006eee:	4603      	mov	r3, r0
 8006ef0:	4402      	add	r2, r0
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d100      	bne.n	8006ef8 <memset+0xa>
 8006ef6:	4770      	bx	lr
 8006ef8:	f803 1b01 	strb.w	r1, [r3], #1
 8006efc:	e7f9      	b.n	8006ef2 <memset+0x4>
	...

08006f00 <siprintf>:
 8006f00:	b40e      	push	{r1, r2, r3}
 8006f02:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006f06:	b500      	push	{lr}
 8006f08:	b09c      	sub	sp, #112	; 0x70
 8006f0a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006f0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f12:	9104      	str	r1, [sp, #16]
 8006f14:	9107      	str	r1, [sp, #28]
 8006f16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006f1a:	ab1d      	add	r3, sp, #116	; 0x74
 8006f1c:	9002      	str	r0, [sp, #8]
 8006f1e:	9006      	str	r0, [sp, #24]
 8006f20:	4808      	ldr	r0, [pc, #32]	; (8006f44 <siprintf+0x44>)
 8006f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f26:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006f2a:	6800      	ldr	r0, [r0, #0]
 8006f2c:	a902      	add	r1, sp, #8
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	f000 f92c 	bl	800718c <_svfiprintf_r>
 8006f34:	2200      	movs	r2, #0
 8006f36:	9b02      	ldr	r3, [sp, #8]
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	b01c      	add	sp, #112	; 0x70
 8006f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f40:	b003      	add	sp, #12
 8006f42:	4770      	bx	lr
 8006f44:	2000001c 	.word	0x2000001c

08006f48 <strstr>:
 8006f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f4a:	7803      	ldrb	r3, [r0, #0]
 8006f4c:	b133      	cbz	r3, 8006f5c <strstr+0x14>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	4618      	mov	r0, r3
 8006f52:	1c5e      	adds	r6, r3, #1
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	b933      	cbnz	r3, 8006f66 <strstr+0x1e>
 8006f58:	4618      	mov	r0, r3
 8006f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f5c:	780b      	ldrb	r3, [r1, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	bf18      	it	ne
 8006f62:	2000      	movne	r0, #0
 8006f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f66:	1e4d      	subs	r5, r1, #1
 8006f68:	1e44      	subs	r4, r0, #1
 8006f6a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8006f6e:	2a00      	cmp	r2, #0
 8006f70:	d0f3      	beq.n	8006f5a <strstr+0x12>
 8006f72:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8006f76:	4633      	mov	r3, r6
 8006f78:	4297      	cmp	r7, r2
 8006f7a:	d0f6      	beq.n	8006f6a <strstr+0x22>
 8006f7c:	e7e8      	b.n	8006f50 <strstr+0x8>

08006f7e <_strtol_l.isra.0>:
 8006f7e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f82:	4680      	mov	r8, r0
 8006f84:	4689      	mov	r9, r1
 8006f86:	4692      	mov	sl, r2
 8006f88:	461f      	mov	r7, r3
 8006f8a:	468b      	mov	fp, r1
 8006f8c:	465d      	mov	r5, fp
 8006f8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f94:	f000 f88a 	bl	80070ac <__locale_ctype_ptr_l>
 8006f98:	4420      	add	r0, r4
 8006f9a:	7846      	ldrb	r6, [r0, #1]
 8006f9c:	f016 0608 	ands.w	r6, r6, #8
 8006fa0:	d10b      	bne.n	8006fba <_strtol_l.isra.0+0x3c>
 8006fa2:	2c2d      	cmp	r4, #45	; 0x2d
 8006fa4:	d10b      	bne.n	8006fbe <_strtol_l.isra.0+0x40>
 8006fa6:	2601      	movs	r6, #1
 8006fa8:	782c      	ldrb	r4, [r5, #0]
 8006faa:	f10b 0502 	add.w	r5, fp, #2
 8006fae:	b167      	cbz	r7, 8006fca <_strtol_l.isra.0+0x4c>
 8006fb0:	2f10      	cmp	r7, #16
 8006fb2:	d114      	bne.n	8006fde <_strtol_l.isra.0+0x60>
 8006fb4:	2c30      	cmp	r4, #48	; 0x30
 8006fb6:	d00a      	beq.n	8006fce <_strtol_l.isra.0+0x50>
 8006fb8:	e011      	b.n	8006fde <_strtol_l.isra.0+0x60>
 8006fba:	46ab      	mov	fp, r5
 8006fbc:	e7e6      	b.n	8006f8c <_strtol_l.isra.0+0xe>
 8006fbe:	2c2b      	cmp	r4, #43	; 0x2b
 8006fc0:	bf04      	itt	eq
 8006fc2:	782c      	ldrbeq	r4, [r5, #0]
 8006fc4:	f10b 0502 	addeq.w	r5, fp, #2
 8006fc8:	e7f1      	b.n	8006fae <_strtol_l.isra.0+0x30>
 8006fca:	2c30      	cmp	r4, #48	; 0x30
 8006fcc:	d127      	bne.n	800701e <_strtol_l.isra.0+0xa0>
 8006fce:	782b      	ldrb	r3, [r5, #0]
 8006fd0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006fd4:	2b58      	cmp	r3, #88	; 0x58
 8006fd6:	d14b      	bne.n	8007070 <_strtol_l.isra.0+0xf2>
 8006fd8:	2710      	movs	r7, #16
 8006fda:	786c      	ldrb	r4, [r5, #1]
 8006fdc:	3502      	adds	r5, #2
 8006fde:	2e00      	cmp	r6, #0
 8006fe0:	bf0c      	ite	eq
 8006fe2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006fe6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006fea:	2200      	movs	r2, #0
 8006fec:	fbb1 fef7 	udiv	lr, r1, r7
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	fb07 1c1e 	mls	ip, r7, lr, r1
 8006ff6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006ffa:	2b09      	cmp	r3, #9
 8006ffc:	d811      	bhi.n	8007022 <_strtol_l.isra.0+0xa4>
 8006ffe:	461c      	mov	r4, r3
 8007000:	42a7      	cmp	r7, r4
 8007002:	dd1d      	ble.n	8007040 <_strtol_l.isra.0+0xc2>
 8007004:	1c53      	adds	r3, r2, #1
 8007006:	d007      	beq.n	8007018 <_strtol_l.isra.0+0x9a>
 8007008:	4586      	cmp	lr, r0
 800700a:	d316      	bcc.n	800703a <_strtol_l.isra.0+0xbc>
 800700c:	d101      	bne.n	8007012 <_strtol_l.isra.0+0x94>
 800700e:	45a4      	cmp	ip, r4
 8007010:	db13      	blt.n	800703a <_strtol_l.isra.0+0xbc>
 8007012:	2201      	movs	r2, #1
 8007014:	fb00 4007 	mla	r0, r0, r7, r4
 8007018:	f815 4b01 	ldrb.w	r4, [r5], #1
 800701c:	e7eb      	b.n	8006ff6 <_strtol_l.isra.0+0x78>
 800701e:	270a      	movs	r7, #10
 8007020:	e7dd      	b.n	8006fde <_strtol_l.isra.0+0x60>
 8007022:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007026:	2b19      	cmp	r3, #25
 8007028:	d801      	bhi.n	800702e <_strtol_l.isra.0+0xb0>
 800702a:	3c37      	subs	r4, #55	; 0x37
 800702c:	e7e8      	b.n	8007000 <_strtol_l.isra.0+0x82>
 800702e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007032:	2b19      	cmp	r3, #25
 8007034:	d804      	bhi.n	8007040 <_strtol_l.isra.0+0xc2>
 8007036:	3c57      	subs	r4, #87	; 0x57
 8007038:	e7e2      	b.n	8007000 <_strtol_l.isra.0+0x82>
 800703a:	f04f 32ff 	mov.w	r2, #4294967295
 800703e:	e7eb      	b.n	8007018 <_strtol_l.isra.0+0x9a>
 8007040:	1c53      	adds	r3, r2, #1
 8007042:	d108      	bne.n	8007056 <_strtol_l.isra.0+0xd8>
 8007044:	2322      	movs	r3, #34	; 0x22
 8007046:	4608      	mov	r0, r1
 8007048:	f8c8 3000 	str.w	r3, [r8]
 800704c:	f1ba 0f00 	cmp.w	sl, #0
 8007050:	d107      	bne.n	8007062 <_strtol_l.isra.0+0xe4>
 8007052:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007056:	b106      	cbz	r6, 800705a <_strtol_l.isra.0+0xdc>
 8007058:	4240      	negs	r0, r0
 800705a:	f1ba 0f00 	cmp.w	sl, #0
 800705e:	d00c      	beq.n	800707a <_strtol_l.isra.0+0xfc>
 8007060:	b122      	cbz	r2, 800706c <_strtol_l.isra.0+0xee>
 8007062:	3d01      	subs	r5, #1
 8007064:	f8ca 5000 	str.w	r5, [sl]
 8007068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706c:	464d      	mov	r5, r9
 800706e:	e7f9      	b.n	8007064 <_strtol_l.isra.0+0xe6>
 8007070:	2430      	movs	r4, #48	; 0x30
 8007072:	2f00      	cmp	r7, #0
 8007074:	d1b3      	bne.n	8006fde <_strtol_l.isra.0+0x60>
 8007076:	2708      	movs	r7, #8
 8007078:	e7b1      	b.n	8006fde <_strtol_l.isra.0+0x60>
 800707a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007080 <strtol>:
 8007080:	4b08      	ldr	r3, [pc, #32]	; (80070a4 <strtol+0x24>)
 8007082:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007084:	681c      	ldr	r4, [r3, #0]
 8007086:	4d08      	ldr	r5, [pc, #32]	; (80070a8 <strtol+0x28>)
 8007088:	6a23      	ldr	r3, [r4, #32]
 800708a:	2b00      	cmp	r3, #0
 800708c:	bf08      	it	eq
 800708e:	462b      	moveq	r3, r5
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	4613      	mov	r3, r2
 8007094:	460a      	mov	r2, r1
 8007096:	4601      	mov	r1, r0
 8007098:	4620      	mov	r0, r4
 800709a:	f7ff ff70 	bl	8006f7e <_strtol_l.isra.0>
 800709e:	b003      	add	sp, #12
 80070a0:	bd30      	pop	{r4, r5, pc}
 80070a2:	bf00      	nop
 80070a4:	2000001c 	.word	0x2000001c
 80070a8:	20000080 	.word	0x20000080

080070ac <__locale_ctype_ptr_l>:
 80070ac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80070b0:	4770      	bx	lr

080070b2 <__ascii_mbtowc>:
 80070b2:	b082      	sub	sp, #8
 80070b4:	b901      	cbnz	r1, 80070b8 <__ascii_mbtowc+0x6>
 80070b6:	a901      	add	r1, sp, #4
 80070b8:	b142      	cbz	r2, 80070cc <__ascii_mbtowc+0x1a>
 80070ba:	b14b      	cbz	r3, 80070d0 <__ascii_mbtowc+0x1e>
 80070bc:	7813      	ldrb	r3, [r2, #0]
 80070be:	600b      	str	r3, [r1, #0]
 80070c0:	7812      	ldrb	r2, [r2, #0]
 80070c2:	1c10      	adds	r0, r2, #0
 80070c4:	bf18      	it	ne
 80070c6:	2001      	movne	r0, #1
 80070c8:	b002      	add	sp, #8
 80070ca:	4770      	bx	lr
 80070cc:	4610      	mov	r0, r2
 80070ce:	e7fb      	b.n	80070c8 <__ascii_mbtowc+0x16>
 80070d0:	f06f 0001 	mvn.w	r0, #1
 80070d4:	e7f8      	b.n	80070c8 <__ascii_mbtowc+0x16>

080070d6 <__ssputs_r>:
 80070d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070da:	688e      	ldr	r6, [r1, #8]
 80070dc:	4682      	mov	sl, r0
 80070de:	429e      	cmp	r6, r3
 80070e0:	460c      	mov	r4, r1
 80070e2:	4691      	mov	r9, r2
 80070e4:	4698      	mov	r8, r3
 80070e6:	d835      	bhi.n	8007154 <__ssputs_r+0x7e>
 80070e8:	898a      	ldrh	r2, [r1, #12]
 80070ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070ee:	d031      	beq.n	8007154 <__ssputs_r+0x7e>
 80070f0:	2302      	movs	r3, #2
 80070f2:	6825      	ldr	r5, [r4, #0]
 80070f4:	6909      	ldr	r1, [r1, #16]
 80070f6:	1a6f      	subs	r7, r5, r1
 80070f8:	6965      	ldr	r5, [r4, #20]
 80070fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070fe:	fb95 f5f3 	sdiv	r5, r5, r3
 8007102:	f108 0301 	add.w	r3, r8, #1
 8007106:	443b      	add	r3, r7
 8007108:	429d      	cmp	r5, r3
 800710a:	bf38      	it	cc
 800710c:	461d      	movcc	r5, r3
 800710e:	0553      	lsls	r3, r2, #21
 8007110:	d531      	bpl.n	8007176 <__ssputs_r+0xa0>
 8007112:	4629      	mov	r1, r5
 8007114:	f000 fb48 	bl	80077a8 <_malloc_r>
 8007118:	4606      	mov	r6, r0
 800711a:	b950      	cbnz	r0, 8007132 <__ssputs_r+0x5c>
 800711c:	230c      	movs	r3, #12
 800711e:	f8ca 3000 	str.w	r3, [sl]
 8007122:	89a3      	ldrh	r3, [r4, #12]
 8007124:	f04f 30ff 	mov.w	r0, #4294967295
 8007128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800712c:	81a3      	strh	r3, [r4, #12]
 800712e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007132:	463a      	mov	r2, r7
 8007134:	6921      	ldr	r1, [r4, #16]
 8007136:	f7ff fecf 	bl	8006ed8 <memcpy>
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007144:	81a3      	strh	r3, [r4, #12]
 8007146:	6126      	str	r6, [r4, #16]
 8007148:	443e      	add	r6, r7
 800714a:	6026      	str	r6, [r4, #0]
 800714c:	4646      	mov	r6, r8
 800714e:	6165      	str	r5, [r4, #20]
 8007150:	1bed      	subs	r5, r5, r7
 8007152:	60a5      	str	r5, [r4, #8]
 8007154:	4546      	cmp	r6, r8
 8007156:	bf28      	it	cs
 8007158:	4646      	movcs	r6, r8
 800715a:	4649      	mov	r1, r9
 800715c:	4632      	mov	r2, r6
 800715e:	6820      	ldr	r0, [r4, #0]
 8007160:	f000 fabb 	bl	80076da <memmove>
 8007164:	68a3      	ldr	r3, [r4, #8]
 8007166:	2000      	movs	r0, #0
 8007168:	1b9b      	subs	r3, r3, r6
 800716a:	60a3      	str	r3, [r4, #8]
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	441e      	add	r6, r3
 8007170:	6026      	str	r6, [r4, #0]
 8007172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007176:	462a      	mov	r2, r5
 8007178:	f000 fb74 	bl	8007864 <_realloc_r>
 800717c:	4606      	mov	r6, r0
 800717e:	2800      	cmp	r0, #0
 8007180:	d1e1      	bne.n	8007146 <__ssputs_r+0x70>
 8007182:	6921      	ldr	r1, [r4, #16]
 8007184:	4650      	mov	r0, sl
 8007186:	f000 fac3 	bl	8007710 <_free_r>
 800718a:	e7c7      	b.n	800711c <__ssputs_r+0x46>

0800718c <_svfiprintf_r>:
 800718c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	b09d      	sub	sp, #116	; 0x74
 8007192:	9303      	str	r3, [sp, #12]
 8007194:	898b      	ldrh	r3, [r1, #12]
 8007196:	4680      	mov	r8, r0
 8007198:	061c      	lsls	r4, r3, #24
 800719a:	460d      	mov	r5, r1
 800719c:	4616      	mov	r6, r2
 800719e:	d50f      	bpl.n	80071c0 <_svfiprintf_r+0x34>
 80071a0:	690b      	ldr	r3, [r1, #16]
 80071a2:	b96b      	cbnz	r3, 80071c0 <_svfiprintf_r+0x34>
 80071a4:	2140      	movs	r1, #64	; 0x40
 80071a6:	f000 faff 	bl	80077a8 <_malloc_r>
 80071aa:	6028      	str	r0, [r5, #0]
 80071ac:	6128      	str	r0, [r5, #16]
 80071ae:	b928      	cbnz	r0, 80071bc <_svfiprintf_r+0x30>
 80071b0:	230c      	movs	r3, #12
 80071b2:	f8c8 3000 	str.w	r3, [r8]
 80071b6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ba:	e0c4      	b.n	8007346 <_svfiprintf_r+0x1ba>
 80071bc:	2340      	movs	r3, #64	; 0x40
 80071be:	616b      	str	r3, [r5, #20]
 80071c0:	2300      	movs	r3, #0
 80071c2:	9309      	str	r3, [sp, #36]	; 0x24
 80071c4:	2320      	movs	r3, #32
 80071c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071ca:	2330      	movs	r3, #48	; 0x30
 80071cc:	f04f 0b01 	mov.w	fp, #1
 80071d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071d4:	4637      	mov	r7, r6
 80071d6:	463c      	mov	r4, r7
 80071d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d13c      	bne.n	800725a <_svfiprintf_r+0xce>
 80071e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80071e4:	d00b      	beq.n	80071fe <_svfiprintf_r+0x72>
 80071e6:	4653      	mov	r3, sl
 80071e8:	4632      	mov	r2, r6
 80071ea:	4629      	mov	r1, r5
 80071ec:	4640      	mov	r0, r8
 80071ee:	f7ff ff72 	bl	80070d6 <__ssputs_r>
 80071f2:	3001      	adds	r0, #1
 80071f4:	f000 80a2 	beq.w	800733c <_svfiprintf_r+0x1b0>
 80071f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071fa:	4453      	add	r3, sl
 80071fc:	9309      	str	r3, [sp, #36]	; 0x24
 80071fe:	783b      	ldrb	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 809b 	beq.w	800733c <_svfiprintf_r+0x1b0>
 8007206:	2300      	movs	r3, #0
 8007208:	f04f 32ff 	mov.w	r2, #4294967295
 800720c:	9304      	str	r3, [sp, #16]
 800720e:	9307      	str	r3, [sp, #28]
 8007210:	9205      	str	r2, [sp, #20]
 8007212:	9306      	str	r3, [sp, #24]
 8007214:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007218:	931a      	str	r3, [sp, #104]	; 0x68
 800721a:	2205      	movs	r2, #5
 800721c:	7821      	ldrb	r1, [r4, #0]
 800721e:	4850      	ldr	r0, [pc, #320]	; (8007360 <_svfiprintf_r+0x1d4>)
 8007220:	f000 fa4d 	bl	80076be <memchr>
 8007224:	1c67      	adds	r7, r4, #1
 8007226:	9b04      	ldr	r3, [sp, #16]
 8007228:	b9d8      	cbnz	r0, 8007262 <_svfiprintf_r+0xd6>
 800722a:	06d9      	lsls	r1, r3, #27
 800722c:	bf44      	itt	mi
 800722e:	2220      	movmi	r2, #32
 8007230:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007234:	071a      	lsls	r2, r3, #28
 8007236:	bf44      	itt	mi
 8007238:	222b      	movmi	r2, #43	; 0x2b
 800723a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800723e:	7822      	ldrb	r2, [r4, #0]
 8007240:	2a2a      	cmp	r2, #42	; 0x2a
 8007242:	d016      	beq.n	8007272 <_svfiprintf_r+0xe6>
 8007244:	2100      	movs	r1, #0
 8007246:	200a      	movs	r0, #10
 8007248:	9a07      	ldr	r2, [sp, #28]
 800724a:	4627      	mov	r7, r4
 800724c:	783b      	ldrb	r3, [r7, #0]
 800724e:	3401      	adds	r4, #1
 8007250:	3b30      	subs	r3, #48	; 0x30
 8007252:	2b09      	cmp	r3, #9
 8007254:	d950      	bls.n	80072f8 <_svfiprintf_r+0x16c>
 8007256:	b1c9      	cbz	r1, 800728c <_svfiprintf_r+0x100>
 8007258:	e011      	b.n	800727e <_svfiprintf_r+0xf2>
 800725a:	2b25      	cmp	r3, #37	; 0x25
 800725c:	d0c0      	beq.n	80071e0 <_svfiprintf_r+0x54>
 800725e:	4627      	mov	r7, r4
 8007260:	e7b9      	b.n	80071d6 <_svfiprintf_r+0x4a>
 8007262:	4a3f      	ldr	r2, [pc, #252]	; (8007360 <_svfiprintf_r+0x1d4>)
 8007264:	463c      	mov	r4, r7
 8007266:	1a80      	subs	r0, r0, r2
 8007268:	fa0b f000 	lsl.w	r0, fp, r0
 800726c:	4318      	orrs	r0, r3
 800726e:	9004      	str	r0, [sp, #16]
 8007270:	e7d3      	b.n	800721a <_svfiprintf_r+0x8e>
 8007272:	9a03      	ldr	r2, [sp, #12]
 8007274:	1d11      	adds	r1, r2, #4
 8007276:	6812      	ldr	r2, [r2, #0]
 8007278:	9103      	str	r1, [sp, #12]
 800727a:	2a00      	cmp	r2, #0
 800727c:	db01      	blt.n	8007282 <_svfiprintf_r+0xf6>
 800727e:	9207      	str	r2, [sp, #28]
 8007280:	e004      	b.n	800728c <_svfiprintf_r+0x100>
 8007282:	4252      	negs	r2, r2
 8007284:	f043 0302 	orr.w	r3, r3, #2
 8007288:	9207      	str	r2, [sp, #28]
 800728a:	9304      	str	r3, [sp, #16]
 800728c:	783b      	ldrb	r3, [r7, #0]
 800728e:	2b2e      	cmp	r3, #46	; 0x2e
 8007290:	d10d      	bne.n	80072ae <_svfiprintf_r+0x122>
 8007292:	787b      	ldrb	r3, [r7, #1]
 8007294:	1c79      	adds	r1, r7, #1
 8007296:	2b2a      	cmp	r3, #42	; 0x2a
 8007298:	d132      	bne.n	8007300 <_svfiprintf_r+0x174>
 800729a:	9b03      	ldr	r3, [sp, #12]
 800729c:	3702      	adds	r7, #2
 800729e:	1d1a      	adds	r2, r3, #4
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	9203      	str	r2, [sp, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	bfb8      	it	lt
 80072a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80072ac:	9305      	str	r3, [sp, #20]
 80072ae:	4c2d      	ldr	r4, [pc, #180]	; (8007364 <_svfiprintf_r+0x1d8>)
 80072b0:	2203      	movs	r2, #3
 80072b2:	7839      	ldrb	r1, [r7, #0]
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 fa02 	bl	80076be <memchr>
 80072ba:	b138      	cbz	r0, 80072cc <_svfiprintf_r+0x140>
 80072bc:	2340      	movs	r3, #64	; 0x40
 80072be:	1b00      	subs	r0, r0, r4
 80072c0:	fa03 f000 	lsl.w	r0, r3, r0
 80072c4:	9b04      	ldr	r3, [sp, #16]
 80072c6:	3701      	adds	r7, #1
 80072c8:	4303      	orrs	r3, r0
 80072ca:	9304      	str	r3, [sp, #16]
 80072cc:	7839      	ldrb	r1, [r7, #0]
 80072ce:	2206      	movs	r2, #6
 80072d0:	4825      	ldr	r0, [pc, #148]	; (8007368 <_svfiprintf_r+0x1dc>)
 80072d2:	1c7e      	adds	r6, r7, #1
 80072d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072d8:	f000 f9f1 	bl	80076be <memchr>
 80072dc:	2800      	cmp	r0, #0
 80072de:	d035      	beq.n	800734c <_svfiprintf_r+0x1c0>
 80072e0:	4b22      	ldr	r3, [pc, #136]	; (800736c <_svfiprintf_r+0x1e0>)
 80072e2:	b9fb      	cbnz	r3, 8007324 <_svfiprintf_r+0x198>
 80072e4:	9b03      	ldr	r3, [sp, #12]
 80072e6:	3307      	adds	r3, #7
 80072e8:	f023 0307 	bic.w	r3, r3, #7
 80072ec:	3308      	adds	r3, #8
 80072ee:	9303      	str	r3, [sp, #12]
 80072f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f2:	444b      	add	r3, r9
 80072f4:	9309      	str	r3, [sp, #36]	; 0x24
 80072f6:	e76d      	b.n	80071d4 <_svfiprintf_r+0x48>
 80072f8:	fb00 3202 	mla	r2, r0, r2, r3
 80072fc:	2101      	movs	r1, #1
 80072fe:	e7a4      	b.n	800724a <_svfiprintf_r+0xbe>
 8007300:	2300      	movs	r3, #0
 8007302:	240a      	movs	r4, #10
 8007304:	4618      	mov	r0, r3
 8007306:	9305      	str	r3, [sp, #20]
 8007308:	460f      	mov	r7, r1
 800730a:	783a      	ldrb	r2, [r7, #0]
 800730c:	3101      	adds	r1, #1
 800730e:	3a30      	subs	r2, #48	; 0x30
 8007310:	2a09      	cmp	r2, #9
 8007312:	d903      	bls.n	800731c <_svfiprintf_r+0x190>
 8007314:	2b00      	cmp	r3, #0
 8007316:	d0ca      	beq.n	80072ae <_svfiprintf_r+0x122>
 8007318:	9005      	str	r0, [sp, #20]
 800731a:	e7c8      	b.n	80072ae <_svfiprintf_r+0x122>
 800731c:	fb04 2000 	mla	r0, r4, r0, r2
 8007320:	2301      	movs	r3, #1
 8007322:	e7f1      	b.n	8007308 <_svfiprintf_r+0x17c>
 8007324:	ab03      	add	r3, sp, #12
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	462a      	mov	r2, r5
 800732a:	4b11      	ldr	r3, [pc, #68]	; (8007370 <_svfiprintf_r+0x1e4>)
 800732c:	a904      	add	r1, sp, #16
 800732e:	4640      	mov	r0, r8
 8007330:	f3af 8000 	nop.w
 8007334:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007338:	4681      	mov	r9, r0
 800733a:	d1d9      	bne.n	80072f0 <_svfiprintf_r+0x164>
 800733c:	89ab      	ldrh	r3, [r5, #12]
 800733e:	065b      	lsls	r3, r3, #25
 8007340:	f53f af39 	bmi.w	80071b6 <_svfiprintf_r+0x2a>
 8007344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007346:	b01d      	add	sp, #116	; 0x74
 8007348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734c:	ab03      	add	r3, sp, #12
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	462a      	mov	r2, r5
 8007352:	4b07      	ldr	r3, [pc, #28]	; (8007370 <_svfiprintf_r+0x1e4>)
 8007354:	a904      	add	r1, sp, #16
 8007356:	4640      	mov	r0, r8
 8007358:	f000 f884 	bl	8007464 <_printf_i>
 800735c:	e7ea      	b.n	8007334 <_svfiprintf_r+0x1a8>
 800735e:	bf00      	nop
 8007360:	08007f5a 	.word	0x08007f5a
 8007364:	08007f60 	.word	0x08007f60
 8007368:	08007f64 	.word	0x08007f64
 800736c:	00000000 	.word	0x00000000
 8007370:	080070d7 	.word	0x080070d7

08007374 <_printf_common>:
 8007374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007378:	4691      	mov	r9, r2
 800737a:	461f      	mov	r7, r3
 800737c:	688a      	ldr	r2, [r1, #8]
 800737e:	690b      	ldr	r3, [r1, #16]
 8007380:	4606      	mov	r6, r0
 8007382:	4293      	cmp	r3, r2
 8007384:	bfb8      	it	lt
 8007386:	4613      	movlt	r3, r2
 8007388:	f8c9 3000 	str.w	r3, [r9]
 800738c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007390:	460c      	mov	r4, r1
 8007392:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007396:	b112      	cbz	r2, 800739e <_printf_common+0x2a>
 8007398:	3301      	adds	r3, #1
 800739a:	f8c9 3000 	str.w	r3, [r9]
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	0699      	lsls	r1, r3, #26
 80073a2:	bf42      	ittt	mi
 80073a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80073a8:	3302      	addmi	r3, #2
 80073aa:	f8c9 3000 	strmi.w	r3, [r9]
 80073ae:	6825      	ldr	r5, [r4, #0]
 80073b0:	f015 0506 	ands.w	r5, r5, #6
 80073b4:	d107      	bne.n	80073c6 <_printf_common+0x52>
 80073b6:	f104 0a19 	add.w	sl, r4, #25
 80073ba:	68e3      	ldr	r3, [r4, #12]
 80073bc:	f8d9 2000 	ldr.w	r2, [r9]
 80073c0:	1a9b      	subs	r3, r3, r2
 80073c2:	429d      	cmp	r5, r3
 80073c4:	db2a      	blt.n	800741c <_printf_common+0xa8>
 80073c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80073ca:	6822      	ldr	r2, [r4, #0]
 80073cc:	3300      	adds	r3, #0
 80073ce:	bf18      	it	ne
 80073d0:	2301      	movne	r3, #1
 80073d2:	0692      	lsls	r2, r2, #26
 80073d4:	d42f      	bmi.n	8007436 <_printf_common+0xc2>
 80073d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073da:	4639      	mov	r1, r7
 80073dc:	4630      	mov	r0, r6
 80073de:	47c0      	blx	r8
 80073e0:	3001      	adds	r0, #1
 80073e2:	d022      	beq.n	800742a <_printf_common+0xb6>
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	68e5      	ldr	r5, [r4, #12]
 80073e8:	f003 0306 	and.w	r3, r3, #6
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	bf18      	it	ne
 80073f0:	2500      	movne	r5, #0
 80073f2:	f8d9 2000 	ldr.w	r2, [r9]
 80073f6:	f04f 0900 	mov.w	r9, #0
 80073fa:	bf08      	it	eq
 80073fc:	1aad      	subeq	r5, r5, r2
 80073fe:	68a3      	ldr	r3, [r4, #8]
 8007400:	6922      	ldr	r2, [r4, #16]
 8007402:	bf08      	it	eq
 8007404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007408:	4293      	cmp	r3, r2
 800740a:	bfc4      	itt	gt
 800740c:	1a9b      	subgt	r3, r3, r2
 800740e:	18ed      	addgt	r5, r5, r3
 8007410:	341a      	adds	r4, #26
 8007412:	454d      	cmp	r5, r9
 8007414:	d11b      	bne.n	800744e <_printf_common+0xda>
 8007416:	2000      	movs	r0, #0
 8007418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741c:	2301      	movs	r3, #1
 800741e:	4652      	mov	r2, sl
 8007420:	4639      	mov	r1, r7
 8007422:	4630      	mov	r0, r6
 8007424:	47c0      	blx	r8
 8007426:	3001      	adds	r0, #1
 8007428:	d103      	bne.n	8007432 <_printf_common+0xbe>
 800742a:	f04f 30ff 	mov.w	r0, #4294967295
 800742e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007432:	3501      	adds	r5, #1
 8007434:	e7c1      	b.n	80073ba <_printf_common+0x46>
 8007436:	2030      	movs	r0, #48	; 0x30
 8007438:	18e1      	adds	r1, r4, r3
 800743a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007444:	4422      	add	r2, r4
 8007446:	3302      	adds	r3, #2
 8007448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800744c:	e7c3      	b.n	80073d6 <_printf_common+0x62>
 800744e:	2301      	movs	r3, #1
 8007450:	4622      	mov	r2, r4
 8007452:	4639      	mov	r1, r7
 8007454:	4630      	mov	r0, r6
 8007456:	47c0      	blx	r8
 8007458:	3001      	adds	r0, #1
 800745a:	d0e6      	beq.n	800742a <_printf_common+0xb6>
 800745c:	f109 0901 	add.w	r9, r9, #1
 8007460:	e7d7      	b.n	8007412 <_printf_common+0x9e>
	...

08007464 <_printf_i>:
 8007464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007468:	4617      	mov	r7, r2
 800746a:	7e0a      	ldrb	r2, [r1, #24]
 800746c:	b085      	sub	sp, #20
 800746e:	2a6e      	cmp	r2, #110	; 0x6e
 8007470:	4698      	mov	r8, r3
 8007472:	4606      	mov	r6, r0
 8007474:	460c      	mov	r4, r1
 8007476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007478:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800747c:	f000 80bc 	beq.w	80075f8 <_printf_i+0x194>
 8007480:	d81a      	bhi.n	80074b8 <_printf_i+0x54>
 8007482:	2a63      	cmp	r2, #99	; 0x63
 8007484:	d02e      	beq.n	80074e4 <_printf_i+0x80>
 8007486:	d80a      	bhi.n	800749e <_printf_i+0x3a>
 8007488:	2a00      	cmp	r2, #0
 800748a:	f000 80c8 	beq.w	800761e <_printf_i+0x1ba>
 800748e:	2a58      	cmp	r2, #88	; 0x58
 8007490:	f000 808a 	beq.w	80075a8 <_printf_i+0x144>
 8007494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007498:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800749c:	e02a      	b.n	80074f4 <_printf_i+0x90>
 800749e:	2a64      	cmp	r2, #100	; 0x64
 80074a0:	d001      	beq.n	80074a6 <_printf_i+0x42>
 80074a2:	2a69      	cmp	r2, #105	; 0x69
 80074a4:	d1f6      	bne.n	8007494 <_printf_i+0x30>
 80074a6:	6821      	ldr	r1, [r4, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80074ae:	d023      	beq.n	80074f8 <_printf_i+0x94>
 80074b0:	1d11      	adds	r1, r2, #4
 80074b2:	6019      	str	r1, [r3, #0]
 80074b4:	6813      	ldr	r3, [r2, #0]
 80074b6:	e027      	b.n	8007508 <_printf_i+0xa4>
 80074b8:	2a73      	cmp	r2, #115	; 0x73
 80074ba:	f000 80b4 	beq.w	8007626 <_printf_i+0x1c2>
 80074be:	d808      	bhi.n	80074d2 <_printf_i+0x6e>
 80074c0:	2a6f      	cmp	r2, #111	; 0x6f
 80074c2:	d02a      	beq.n	800751a <_printf_i+0xb6>
 80074c4:	2a70      	cmp	r2, #112	; 0x70
 80074c6:	d1e5      	bne.n	8007494 <_printf_i+0x30>
 80074c8:	680a      	ldr	r2, [r1, #0]
 80074ca:	f042 0220 	orr.w	r2, r2, #32
 80074ce:	600a      	str	r2, [r1, #0]
 80074d0:	e003      	b.n	80074da <_printf_i+0x76>
 80074d2:	2a75      	cmp	r2, #117	; 0x75
 80074d4:	d021      	beq.n	800751a <_printf_i+0xb6>
 80074d6:	2a78      	cmp	r2, #120	; 0x78
 80074d8:	d1dc      	bne.n	8007494 <_printf_i+0x30>
 80074da:	2278      	movs	r2, #120	; 0x78
 80074dc:	496f      	ldr	r1, [pc, #444]	; (800769c <_printf_i+0x238>)
 80074de:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80074e2:	e064      	b.n	80075ae <_printf_i+0x14a>
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80074ea:	1d11      	adds	r1, r2, #4
 80074ec:	6019      	str	r1, [r3, #0]
 80074ee:	6813      	ldr	r3, [r2, #0]
 80074f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074f4:	2301      	movs	r3, #1
 80074f6:	e0a3      	b.n	8007640 <_printf_i+0x1dc>
 80074f8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80074fc:	f102 0104 	add.w	r1, r2, #4
 8007500:	6019      	str	r1, [r3, #0]
 8007502:	d0d7      	beq.n	80074b4 <_printf_i+0x50>
 8007504:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007508:	2b00      	cmp	r3, #0
 800750a:	da03      	bge.n	8007514 <_printf_i+0xb0>
 800750c:	222d      	movs	r2, #45	; 0x2d
 800750e:	425b      	negs	r3, r3
 8007510:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007514:	4962      	ldr	r1, [pc, #392]	; (80076a0 <_printf_i+0x23c>)
 8007516:	220a      	movs	r2, #10
 8007518:	e017      	b.n	800754a <_printf_i+0xe6>
 800751a:	6820      	ldr	r0, [r4, #0]
 800751c:	6819      	ldr	r1, [r3, #0]
 800751e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007522:	d003      	beq.n	800752c <_printf_i+0xc8>
 8007524:	1d08      	adds	r0, r1, #4
 8007526:	6018      	str	r0, [r3, #0]
 8007528:	680b      	ldr	r3, [r1, #0]
 800752a:	e006      	b.n	800753a <_printf_i+0xd6>
 800752c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007530:	f101 0004 	add.w	r0, r1, #4
 8007534:	6018      	str	r0, [r3, #0]
 8007536:	d0f7      	beq.n	8007528 <_printf_i+0xc4>
 8007538:	880b      	ldrh	r3, [r1, #0]
 800753a:	2a6f      	cmp	r2, #111	; 0x6f
 800753c:	bf14      	ite	ne
 800753e:	220a      	movne	r2, #10
 8007540:	2208      	moveq	r2, #8
 8007542:	4957      	ldr	r1, [pc, #348]	; (80076a0 <_printf_i+0x23c>)
 8007544:	2000      	movs	r0, #0
 8007546:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800754a:	6865      	ldr	r5, [r4, #4]
 800754c:	2d00      	cmp	r5, #0
 800754e:	60a5      	str	r5, [r4, #8]
 8007550:	f2c0 809c 	blt.w	800768c <_printf_i+0x228>
 8007554:	6820      	ldr	r0, [r4, #0]
 8007556:	f020 0004 	bic.w	r0, r0, #4
 800755a:	6020      	str	r0, [r4, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d13f      	bne.n	80075e0 <_printf_i+0x17c>
 8007560:	2d00      	cmp	r5, #0
 8007562:	f040 8095 	bne.w	8007690 <_printf_i+0x22c>
 8007566:	4675      	mov	r5, lr
 8007568:	2a08      	cmp	r2, #8
 800756a:	d10b      	bne.n	8007584 <_printf_i+0x120>
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	07da      	lsls	r2, r3, #31
 8007570:	d508      	bpl.n	8007584 <_printf_i+0x120>
 8007572:	6923      	ldr	r3, [r4, #16]
 8007574:	6862      	ldr	r2, [r4, #4]
 8007576:	429a      	cmp	r2, r3
 8007578:	bfde      	ittt	le
 800757a:	2330      	movle	r3, #48	; 0x30
 800757c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007580:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007584:	ebae 0305 	sub.w	r3, lr, r5
 8007588:	6123      	str	r3, [r4, #16]
 800758a:	f8cd 8000 	str.w	r8, [sp]
 800758e:	463b      	mov	r3, r7
 8007590:	aa03      	add	r2, sp, #12
 8007592:	4621      	mov	r1, r4
 8007594:	4630      	mov	r0, r6
 8007596:	f7ff feed 	bl	8007374 <_printf_common>
 800759a:	3001      	adds	r0, #1
 800759c:	d155      	bne.n	800764a <_printf_i+0x1e6>
 800759e:	f04f 30ff 	mov.w	r0, #4294967295
 80075a2:	b005      	add	sp, #20
 80075a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075a8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80075ac:	493c      	ldr	r1, [pc, #240]	; (80076a0 <_printf_i+0x23c>)
 80075ae:	6822      	ldr	r2, [r4, #0]
 80075b0:	6818      	ldr	r0, [r3, #0]
 80075b2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80075b6:	f100 0504 	add.w	r5, r0, #4
 80075ba:	601d      	str	r5, [r3, #0]
 80075bc:	d001      	beq.n	80075c2 <_printf_i+0x15e>
 80075be:	6803      	ldr	r3, [r0, #0]
 80075c0:	e002      	b.n	80075c8 <_printf_i+0x164>
 80075c2:	0655      	lsls	r5, r2, #25
 80075c4:	d5fb      	bpl.n	80075be <_printf_i+0x15a>
 80075c6:	8803      	ldrh	r3, [r0, #0]
 80075c8:	07d0      	lsls	r0, r2, #31
 80075ca:	bf44      	itt	mi
 80075cc:	f042 0220 	orrmi.w	r2, r2, #32
 80075d0:	6022      	strmi	r2, [r4, #0]
 80075d2:	b91b      	cbnz	r3, 80075dc <_printf_i+0x178>
 80075d4:	6822      	ldr	r2, [r4, #0]
 80075d6:	f022 0220 	bic.w	r2, r2, #32
 80075da:	6022      	str	r2, [r4, #0]
 80075dc:	2210      	movs	r2, #16
 80075de:	e7b1      	b.n	8007544 <_printf_i+0xe0>
 80075e0:	4675      	mov	r5, lr
 80075e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80075e6:	fb02 3310 	mls	r3, r2, r0, r3
 80075ea:	5ccb      	ldrb	r3, [r1, r3]
 80075ec:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80075f0:	4603      	mov	r3, r0
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d1f5      	bne.n	80075e2 <_printf_i+0x17e>
 80075f6:	e7b7      	b.n	8007568 <_printf_i+0x104>
 80075f8:	6808      	ldr	r0, [r1, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007600:	6949      	ldr	r1, [r1, #20]
 8007602:	d004      	beq.n	800760e <_printf_i+0x1aa>
 8007604:	1d10      	adds	r0, r2, #4
 8007606:	6018      	str	r0, [r3, #0]
 8007608:	6813      	ldr	r3, [r2, #0]
 800760a:	6019      	str	r1, [r3, #0]
 800760c:	e007      	b.n	800761e <_printf_i+0x1ba>
 800760e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007612:	f102 0004 	add.w	r0, r2, #4
 8007616:	6018      	str	r0, [r3, #0]
 8007618:	6813      	ldr	r3, [r2, #0]
 800761a:	d0f6      	beq.n	800760a <_printf_i+0x1a6>
 800761c:	8019      	strh	r1, [r3, #0]
 800761e:	2300      	movs	r3, #0
 8007620:	4675      	mov	r5, lr
 8007622:	6123      	str	r3, [r4, #16]
 8007624:	e7b1      	b.n	800758a <_printf_i+0x126>
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	1d11      	adds	r1, r2, #4
 800762a:	6019      	str	r1, [r3, #0]
 800762c:	6815      	ldr	r5, [r2, #0]
 800762e:	2100      	movs	r1, #0
 8007630:	6862      	ldr	r2, [r4, #4]
 8007632:	4628      	mov	r0, r5
 8007634:	f000 f843 	bl	80076be <memchr>
 8007638:	b108      	cbz	r0, 800763e <_printf_i+0x1da>
 800763a:	1b40      	subs	r0, r0, r5
 800763c:	6060      	str	r0, [r4, #4]
 800763e:	6863      	ldr	r3, [r4, #4]
 8007640:	6123      	str	r3, [r4, #16]
 8007642:	2300      	movs	r3, #0
 8007644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007648:	e79f      	b.n	800758a <_printf_i+0x126>
 800764a:	6923      	ldr	r3, [r4, #16]
 800764c:	462a      	mov	r2, r5
 800764e:	4639      	mov	r1, r7
 8007650:	4630      	mov	r0, r6
 8007652:	47c0      	blx	r8
 8007654:	3001      	adds	r0, #1
 8007656:	d0a2      	beq.n	800759e <_printf_i+0x13a>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	079b      	lsls	r3, r3, #30
 800765c:	d507      	bpl.n	800766e <_printf_i+0x20a>
 800765e:	2500      	movs	r5, #0
 8007660:	f104 0919 	add.w	r9, r4, #25
 8007664:	68e3      	ldr	r3, [r4, #12]
 8007666:	9a03      	ldr	r2, [sp, #12]
 8007668:	1a9b      	subs	r3, r3, r2
 800766a:	429d      	cmp	r5, r3
 800766c:	db05      	blt.n	800767a <_printf_i+0x216>
 800766e:	68e0      	ldr	r0, [r4, #12]
 8007670:	9b03      	ldr	r3, [sp, #12]
 8007672:	4298      	cmp	r0, r3
 8007674:	bfb8      	it	lt
 8007676:	4618      	movlt	r0, r3
 8007678:	e793      	b.n	80075a2 <_printf_i+0x13e>
 800767a:	2301      	movs	r3, #1
 800767c:	464a      	mov	r2, r9
 800767e:	4639      	mov	r1, r7
 8007680:	4630      	mov	r0, r6
 8007682:	47c0      	blx	r8
 8007684:	3001      	adds	r0, #1
 8007686:	d08a      	beq.n	800759e <_printf_i+0x13a>
 8007688:	3501      	adds	r5, #1
 800768a:	e7eb      	b.n	8007664 <_printf_i+0x200>
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1a7      	bne.n	80075e0 <_printf_i+0x17c>
 8007690:	780b      	ldrb	r3, [r1, #0]
 8007692:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007696:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800769a:	e765      	b.n	8007568 <_printf_i+0x104>
 800769c:	08007f7c 	.word	0x08007f7c
 80076a0:	08007f6b 	.word	0x08007f6b

080076a4 <__ascii_wctomb>:
 80076a4:	b149      	cbz	r1, 80076ba <__ascii_wctomb+0x16>
 80076a6:	2aff      	cmp	r2, #255	; 0xff
 80076a8:	bf8b      	itete	hi
 80076aa:	238a      	movhi	r3, #138	; 0x8a
 80076ac:	700a      	strbls	r2, [r1, #0]
 80076ae:	6003      	strhi	r3, [r0, #0]
 80076b0:	2001      	movls	r0, #1
 80076b2:	bf88      	it	hi
 80076b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80076b8:	4770      	bx	lr
 80076ba:	4608      	mov	r0, r1
 80076bc:	4770      	bx	lr

080076be <memchr>:
 80076be:	b510      	push	{r4, lr}
 80076c0:	b2c9      	uxtb	r1, r1
 80076c2:	4402      	add	r2, r0
 80076c4:	4290      	cmp	r0, r2
 80076c6:	4603      	mov	r3, r0
 80076c8:	d101      	bne.n	80076ce <memchr+0x10>
 80076ca:	2000      	movs	r0, #0
 80076cc:	bd10      	pop	{r4, pc}
 80076ce:	781c      	ldrb	r4, [r3, #0]
 80076d0:	3001      	adds	r0, #1
 80076d2:	428c      	cmp	r4, r1
 80076d4:	d1f6      	bne.n	80076c4 <memchr+0x6>
 80076d6:	4618      	mov	r0, r3
 80076d8:	bd10      	pop	{r4, pc}

080076da <memmove>:
 80076da:	4288      	cmp	r0, r1
 80076dc:	b510      	push	{r4, lr}
 80076de:	eb01 0302 	add.w	r3, r1, r2
 80076e2:	d803      	bhi.n	80076ec <memmove+0x12>
 80076e4:	1e42      	subs	r2, r0, #1
 80076e6:	4299      	cmp	r1, r3
 80076e8:	d10c      	bne.n	8007704 <memmove+0x2a>
 80076ea:	bd10      	pop	{r4, pc}
 80076ec:	4298      	cmp	r0, r3
 80076ee:	d2f9      	bcs.n	80076e4 <memmove+0xa>
 80076f0:	1881      	adds	r1, r0, r2
 80076f2:	1ad2      	subs	r2, r2, r3
 80076f4:	42d3      	cmn	r3, r2
 80076f6:	d100      	bne.n	80076fa <memmove+0x20>
 80076f8:	bd10      	pop	{r4, pc}
 80076fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007702:	e7f7      	b.n	80076f4 <memmove+0x1a>
 8007704:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007708:	f802 4f01 	strb.w	r4, [r2, #1]!
 800770c:	e7eb      	b.n	80076e6 <memmove+0xc>
	...

08007710 <_free_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4605      	mov	r5, r0
 8007714:	2900      	cmp	r1, #0
 8007716:	d043      	beq.n	80077a0 <_free_r+0x90>
 8007718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800771c:	1f0c      	subs	r4, r1, #4
 800771e:	2b00      	cmp	r3, #0
 8007720:	bfb8      	it	lt
 8007722:	18e4      	addlt	r4, r4, r3
 8007724:	f000 f8d4 	bl	80078d0 <__malloc_lock>
 8007728:	4a1e      	ldr	r2, [pc, #120]	; (80077a4 <_free_r+0x94>)
 800772a:	6813      	ldr	r3, [r2, #0]
 800772c:	4610      	mov	r0, r2
 800772e:	b933      	cbnz	r3, 800773e <_free_r+0x2e>
 8007730:	6063      	str	r3, [r4, #4]
 8007732:	6014      	str	r4, [r2, #0]
 8007734:	4628      	mov	r0, r5
 8007736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800773a:	f000 b8ca 	b.w	80078d2 <__malloc_unlock>
 800773e:	42a3      	cmp	r3, r4
 8007740:	d90b      	bls.n	800775a <_free_r+0x4a>
 8007742:	6821      	ldr	r1, [r4, #0]
 8007744:	1862      	adds	r2, r4, r1
 8007746:	4293      	cmp	r3, r2
 8007748:	bf01      	itttt	eq
 800774a:	681a      	ldreq	r2, [r3, #0]
 800774c:	685b      	ldreq	r3, [r3, #4]
 800774e:	1852      	addeq	r2, r2, r1
 8007750:	6022      	streq	r2, [r4, #0]
 8007752:	6063      	str	r3, [r4, #4]
 8007754:	6004      	str	r4, [r0, #0]
 8007756:	e7ed      	b.n	8007734 <_free_r+0x24>
 8007758:	4613      	mov	r3, r2
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	b10a      	cbz	r2, 8007762 <_free_r+0x52>
 800775e:	42a2      	cmp	r2, r4
 8007760:	d9fa      	bls.n	8007758 <_free_r+0x48>
 8007762:	6819      	ldr	r1, [r3, #0]
 8007764:	1858      	adds	r0, r3, r1
 8007766:	42a0      	cmp	r0, r4
 8007768:	d10b      	bne.n	8007782 <_free_r+0x72>
 800776a:	6820      	ldr	r0, [r4, #0]
 800776c:	4401      	add	r1, r0
 800776e:	1858      	adds	r0, r3, r1
 8007770:	4282      	cmp	r2, r0
 8007772:	6019      	str	r1, [r3, #0]
 8007774:	d1de      	bne.n	8007734 <_free_r+0x24>
 8007776:	6810      	ldr	r0, [r2, #0]
 8007778:	6852      	ldr	r2, [r2, #4]
 800777a:	4401      	add	r1, r0
 800777c:	6019      	str	r1, [r3, #0]
 800777e:	605a      	str	r2, [r3, #4]
 8007780:	e7d8      	b.n	8007734 <_free_r+0x24>
 8007782:	d902      	bls.n	800778a <_free_r+0x7a>
 8007784:	230c      	movs	r3, #12
 8007786:	602b      	str	r3, [r5, #0]
 8007788:	e7d4      	b.n	8007734 <_free_r+0x24>
 800778a:	6820      	ldr	r0, [r4, #0]
 800778c:	1821      	adds	r1, r4, r0
 800778e:	428a      	cmp	r2, r1
 8007790:	bf01      	itttt	eq
 8007792:	6811      	ldreq	r1, [r2, #0]
 8007794:	6852      	ldreq	r2, [r2, #4]
 8007796:	1809      	addeq	r1, r1, r0
 8007798:	6021      	streq	r1, [r4, #0]
 800779a:	6062      	str	r2, [r4, #4]
 800779c:	605c      	str	r4, [r3, #4]
 800779e:	e7c9      	b.n	8007734 <_free_r+0x24>
 80077a0:	bd38      	pop	{r3, r4, r5, pc}
 80077a2:	bf00      	nop
 80077a4:	2000236c 	.word	0x2000236c

080077a8 <_malloc_r>:
 80077a8:	b570      	push	{r4, r5, r6, lr}
 80077aa:	1ccd      	adds	r5, r1, #3
 80077ac:	f025 0503 	bic.w	r5, r5, #3
 80077b0:	3508      	adds	r5, #8
 80077b2:	2d0c      	cmp	r5, #12
 80077b4:	bf38      	it	cc
 80077b6:	250c      	movcc	r5, #12
 80077b8:	2d00      	cmp	r5, #0
 80077ba:	4606      	mov	r6, r0
 80077bc:	db01      	blt.n	80077c2 <_malloc_r+0x1a>
 80077be:	42a9      	cmp	r1, r5
 80077c0:	d903      	bls.n	80077ca <_malloc_r+0x22>
 80077c2:	230c      	movs	r3, #12
 80077c4:	6033      	str	r3, [r6, #0]
 80077c6:	2000      	movs	r0, #0
 80077c8:	bd70      	pop	{r4, r5, r6, pc}
 80077ca:	f000 f881 	bl	80078d0 <__malloc_lock>
 80077ce:	4a23      	ldr	r2, [pc, #140]	; (800785c <_malloc_r+0xb4>)
 80077d0:	6814      	ldr	r4, [r2, #0]
 80077d2:	4621      	mov	r1, r4
 80077d4:	b991      	cbnz	r1, 80077fc <_malloc_r+0x54>
 80077d6:	4c22      	ldr	r4, [pc, #136]	; (8007860 <_malloc_r+0xb8>)
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	b91b      	cbnz	r3, 80077e4 <_malloc_r+0x3c>
 80077dc:	4630      	mov	r0, r6
 80077de:	f000 f867 	bl	80078b0 <_sbrk_r>
 80077e2:	6020      	str	r0, [r4, #0]
 80077e4:	4629      	mov	r1, r5
 80077e6:	4630      	mov	r0, r6
 80077e8:	f000 f862 	bl	80078b0 <_sbrk_r>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d126      	bne.n	800783e <_malloc_r+0x96>
 80077f0:	230c      	movs	r3, #12
 80077f2:	4630      	mov	r0, r6
 80077f4:	6033      	str	r3, [r6, #0]
 80077f6:	f000 f86c 	bl	80078d2 <__malloc_unlock>
 80077fa:	e7e4      	b.n	80077c6 <_malloc_r+0x1e>
 80077fc:	680b      	ldr	r3, [r1, #0]
 80077fe:	1b5b      	subs	r3, r3, r5
 8007800:	d41a      	bmi.n	8007838 <_malloc_r+0x90>
 8007802:	2b0b      	cmp	r3, #11
 8007804:	d90f      	bls.n	8007826 <_malloc_r+0x7e>
 8007806:	600b      	str	r3, [r1, #0]
 8007808:	18cc      	adds	r4, r1, r3
 800780a:	50cd      	str	r5, [r1, r3]
 800780c:	4630      	mov	r0, r6
 800780e:	f000 f860 	bl	80078d2 <__malloc_unlock>
 8007812:	f104 000b 	add.w	r0, r4, #11
 8007816:	1d23      	adds	r3, r4, #4
 8007818:	f020 0007 	bic.w	r0, r0, #7
 800781c:	1ac3      	subs	r3, r0, r3
 800781e:	d01b      	beq.n	8007858 <_malloc_r+0xb0>
 8007820:	425a      	negs	r2, r3
 8007822:	50e2      	str	r2, [r4, r3]
 8007824:	bd70      	pop	{r4, r5, r6, pc}
 8007826:	428c      	cmp	r4, r1
 8007828:	bf0b      	itete	eq
 800782a:	6863      	ldreq	r3, [r4, #4]
 800782c:	684b      	ldrne	r3, [r1, #4]
 800782e:	6013      	streq	r3, [r2, #0]
 8007830:	6063      	strne	r3, [r4, #4]
 8007832:	bf18      	it	ne
 8007834:	460c      	movne	r4, r1
 8007836:	e7e9      	b.n	800780c <_malloc_r+0x64>
 8007838:	460c      	mov	r4, r1
 800783a:	6849      	ldr	r1, [r1, #4]
 800783c:	e7ca      	b.n	80077d4 <_malloc_r+0x2c>
 800783e:	1cc4      	adds	r4, r0, #3
 8007840:	f024 0403 	bic.w	r4, r4, #3
 8007844:	42a0      	cmp	r0, r4
 8007846:	d005      	beq.n	8007854 <_malloc_r+0xac>
 8007848:	1a21      	subs	r1, r4, r0
 800784a:	4630      	mov	r0, r6
 800784c:	f000 f830 	bl	80078b0 <_sbrk_r>
 8007850:	3001      	adds	r0, #1
 8007852:	d0cd      	beq.n	80077f0 <_malloc_r+0x48>
 8007854:	6025      	str	r5, [r4, #0]
 8007856:	e7d9      	b.n	800780c <_malloc_r+0x64>
 8007858:	bd70      	pop	{r4, r5, r6, pc}
 800785a:	bf00      	nop
 800785c:	2000236c 	.word	0x2000236c
 8007860:	20002370 	.word	0x20002370

08007864 <_realloc_r>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	4607      	mov	r7, r0
 8007868:	4614      	mov	r4, r2
 800786a:	460e      	mov	r6, r1
 800786c:	b921      	cbnz	r1, 8007878 <_realloc_r+0x14>
 800786e:	4611      	mov	r1, r2
 8007870:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007874:	f7ff bf98 	b.w	80077a8 <_malloc_r>
 8007878:	b922      	cbnz	r2, 8007884 <_realloc_r+0x20>
 800787a:	f7ff ff49 	bl	8007710 <_free_r>
 800787e:	4625      	mov	r5, r4
 8007880:	4628      	mov	r0, r5
 8007882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007884:	f000 f826 	bl	80078d4 <_malloc_usable_size_r>
 8007888:	4284      	cmp	r4, r0
 800788a:	d90f      	bls.n	80078ac <_realloc_r+0x48>
 800788c:	4621      	mov	r1, r4
 800788e:	4638      	mov	r0, r7
 8007890:	f7ff ff8a 	bl	80077a8 <_malloc_r>
 8007894:	4605      	mov	r5, r0
 8007896:	2800      	cmp	r0, #0
 8007898:	d0f2      	beq.n	8007880 <_realloc_r+0x1c>
 800789a:	4631      	mov	r1, r6
 800789c:	4622      	mov	r2, r4
 800789e:	f7ff fb1b 	bl	8006ed8 <memcpy>
 80078a2:	4631      	mov	r1, r6
 80078a4:	4638      	mov	r0, r7
 80078a6:	f7ff ff33 	bl	8007710 <_free_r>
 80078aa:	e7e9      	b.n	8007880 <_realloc_r+0x1c>
 80078ac:	4635      	mov	r5, r6
 80078ae:	e7e7      	b.n	8007880 <_realloc_r+0x1c>

080078b0 <_sbrk_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	2300      	movs	r3, #0
 80078b4:	4c05      	ldr	r4, [pc, #20]	; (80078cc <_sbrk_r+0x1c>)
 80078b6:	4605      	mov	r5, r0
 80078b8:	4608      	mov	r0, r1
 80078ba:	6023      	str	r3, [r4, #0]
 80078bc:	f7ff fa5c 	bl	8006d78 <_sbrk>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d102      	bne.n	80078ca <_sbrk_r+0x1a>
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	b103      	cbz	r3, 80078ca <_sbrk_r+0x1a>
 80078c8:	602b      	str	r3, [r5, #0]
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	20003028 	.word	0x20003028

080078d0 <__malloc_lock>:
 80078d0:	4770      	bx	lr

080078d2 <__malloc_unlock>:
 80078d2:	4770      	bx	lr

080078d4 <_malloc_usable_size_r>:
 80078d4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80078d8:	2800      	cmp	r0, #0
 80078da:	f1a0 0004 	sub.w	r0, r0, #4
 80078de:	bfbc      	itt	lt
 80078e0:	580b      	ldrlt	r3, [r1, r0]
 80078e2:	18c0      	addlt	r0, r0, r3
 80078e4:	4770      	bx	lr
	...

080078e8 <_init>:
 80078e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ea:	bf00      	nop
 80078ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ee:	bc08      	pop	{r3}
 80078f0:	469e      	mov	lr, r3
 80078f2:	4770      	bx	lr

080078f4 <_fini>:
 80078f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f6:	bf00      	nop
 80078f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fa:	bc08      	pop	{r3}
 80078fc:	469e      	mov	lr, r3
 80078fe:	4770      	bx	lr
