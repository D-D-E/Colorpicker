
rtos_usart_ll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d44  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  08007e54  08007e54  00017e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080086d0  080086d0  000186d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080086d4  080086d4  000186d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000268  20000000  080086d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002e40  20000268  08008940  00020268  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200030a8  08008940  000230a8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002eac9  00000000  00000000  00020291  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000073a9  00000000  00000000  0004ed5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001dc8  00000000  00000000  00056108  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001a90  00000000  00000000  00057ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ec61  00000000  00000000  00059960  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006f4e  00000000  00000000  000685c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0006f50f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00007a28  00000000  00000000  0006f58c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000268 	.word	0x20000268
 800012c:	00000000 	.word	0x00000000
 8000130:	08007e3c 	.word	0x08007e3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000026c 	.word	0x2000026c
 800014c:	08007e3c 	.word	0x08007e3c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <waitCallBack>:

uint8_t linkID;
uint8_t TCPServerFlag = 0;

static bool waitCallBack(char * aim, uint16_t ms)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
 8000168:	460b      	mov	r3, r1
 800016a:	807b      	strh	r3, [r7, #2]
	uint32_t time_end = getSysTick() + ms;
 800016c:	f004 fe2e 	bl	8004dcc <getSysTick>
 8000170:	4602      	mov	r2, r0
 8000172:	887b      	ldrh	r3, [r7, #2]
 8000174:	4413      	add	r3, r2
 8000176:	60bb      	str	r3, [r7, #8]
	uint32_t time = getSysTick();
 8000178:	f004 fe28 	bl	8004dcc <getSysTick>
 800017c:	60f8      	str	r0, [r7, #12]
	while(time_end > time)
 800017e:	e00e      	b.n	800019e <waitCallBack+0x3e>
	{
		time++;
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	3301      	adds	r3, #1
 8000184:	60fb      	str	r3, [r7, #12]
		if(charCallBack(aim))
 8000186:	6878      	ldr	r0, [r7, #4]
 8000188:	f000 f9c6 	bl	8000518 <charCallBack>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	d001      	beq.n	8000196 <waitCallBack+0x36>
		{
			return 1;
 8000192:	2301      	movs	r3, #1
 8000194:	e008      	b.n	80001a8 <waitCallBack+0x48>
		}
		else asm("NOP");
 8000196:	bf00      	nop

		delay(1);
 8000198:	2001      	movs	r0, #1
 800019a:	f004 fe09 	bl	8004db0 <delay>
	while(time_end > time)
 800019e:	68ba      	ldr	r2, [r7, #8]
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	429a      	cmp	r2, r3
 80001a4:	d8ec      	bhi.n	8000180 <waitCallBack+0x20>
	}
	return 0;
 80001a6:	2300      	movs	r3, #0
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	3710      	adds	r7, #16
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}

080001b0 <ESPInit>:

void ESPInit()
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
	 MX_USART1_UART_Init();
 80001b4:	f006 fe14 	bl	8006de0 <MX_USART1_UART_Init>
	 RingBuff_Init();
 80001b8:	f001 f904 	bl	80013c4 <RingBuff_Init>
}
 80001bc:	bf00      	nop
 80001be:	bd80      	pop	{r7, pc}

080001c0 <ESP_Resset>:

void ESP_Resset()
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	USART1_Device_Reset();
 80001c4:	f006 fdf8 	bl	8006db8 <USART1_Device_Reset>
	if(waitCallBack("ready", 2000))
 80001c8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80001cc:	4802      	ldr	r0, [pc, #8]	; (80001d8 <ESP_Resset+0x18>)
 80001ce:	f7ff ffc7 	bl	8000160 <waitCallBack>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
	{
		return;
	}
}
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	08007e54 	.word	0x08007e54

080001dc <requestFlush>:

static void requestFlush()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	memset(request, 0, sizeof(request));
 80001e0:	f240 4201 	movw	r2, #1025	; 0x401
 80001e4:	2100      	movs	r1, #0
 80001e6:	4802      	ldr	r0, [pc, #8]	; (80001f0 <requestFlush+0x14>)
 80001e8:	f007 f92b 	bl	8007442 <memset>
	//request[1023] = 0;
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20002440 	.word	0x20002440

080001f4 <answerFlush>:

static void answerFlush()
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	memset(answer, 0, sizeof(answer));
 80001f8:	f240 4201 	movw	r2, #1025	; 0x401
 80001fc:	2100      	movs	r1, #0
 80001fe:	4802      	ldr	r0, [pc, #8]	; (8000208 <answerFlush+0x14>)
 8000200:	f007 f91f 	bl	8007442 <memset>
	//answer[1023] = 0;
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}
 8000208:	20002844 	.word	0x20002844

0800020c <ESP_SetMode>:

uint8_t ESP_SetMode(int mode)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	requestFlush();
 8000214:	f7ff ffe2 	bl	80001dc <requestFlush>

	if(mode == 1 || mode == 3)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2b01      	cmp	r3, #1
 800021c:	d002      	beq.n	8000224 <ESP_SetMode+0x18>
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2b03      	cmp	r3, #3
 8000222:	d103      	bne.n	800022c <ESP_SetMode+0x20>
	{
		USART_SendData("AT+SLEEP=0\r\n", 12);
 8000224:	210c      	movs	r1, #12
 8000226:	4816      	ldr	r0, [pc, #88]	; (8000280 <ESP_SetMode+0x74>)
 8000228:	f006 fd62 	bl	8006cf0 <USART_SendData>
	}

	sprintf(request, "AT+CWMODE=%d\r\n", mode);
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	4915      	ldr	r1, [pc, #84]	; (8000284 <ESP_SetMode+0x78>)
 8000230:	4815      	ldr	r0, [pc, #84]	; (8000288 <ESP_SetMode+0x7c>)
 8000232:	f007 f90f 	bl	8007454 <siprintf>
	RingBuff_Clear();
 8000236:	f001 f929 	bl	800148c <RingBuff_Clear>
	USART_SendData(request, strlen(request));
 800023a:	4813      	ldr	r0, [pc, #76]	; (8000288 <ESP_SetMode+0x7c>)
 800023c:	f7ff ff88 	bl	8000150 <strlen>
 8000240:	4603      	mov	r3, r0
 8000242:	4619      	mov	r1, r3
 8000244:	4810      	ldr	r0, [pc, #64]	; (8000288 <ESP_SetMode+0x7c>)
 8000246:	f006 fd53 	bl	8006cf0 <USART_SendData>

	if(waitCallBack("OK", 20))
 800024a:	2114      	movs	r1, #20
 800024c:	480f      	ldr	r0, [pc, #60]	; (800028c <ESP_SetMode+0x80>)
 800024e:	f7ff ff87 	bl	8000160 <waitCallBack>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d00e      	beq.n	8000276 <ESP_SetMode+0x6a>
	{
		USART_SendData("AT+RST\r\n", 8); //restart to apply settings
 8000258:	2108      	movs	r1, #8
 800025a:	480d      	ldr	r0, [pc, #52]	; (8000290 <ESP_SetMode+0x84>)
 800025c:	f006 fd48 	bl	8006cf0 <USART_SendData>
		//delay(1000);

		if(waitCallBack("ready", 2000))
 8000260:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000264:	480b      	ldr	r0, [pc, #44]	; (8000294 <ESP_SetMode+0x88>)
 8000266:	f7ff ff7b 	bl	8000160 <waitCallBack>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <ESP_SetMode+0x68>
		{
			return 1;
 8000270:	2301      	movs	r3, #1
 8000272:	e001      	b.n	8000278 <ESP_SetMode+0x6c>
		}
		else asm("NOP");
 8000274:	bf00      	nop
	}

	return 0;
 8000276:	2300      	movs	r3, #0
}
 8000278:	4618      	mov	r0, r3
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	08007e5c 	.word	0x08007e5c
 8000284:	08007e6c 	.word	0x08007e6c
 8000288:	20002440 	.word	0x20002440
 800028c:	08007e7c 	.word	0x08007e7c
 8000290:	08007e80 	.word	0x08007e80
 8000294:	08007e54 	.word	0x08007e54

08000298 <ESP_SetModeStation>:

uint8_t ESP_SetModeStation()
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	return ESP_SetMode(1);
 800029c:	2001      	movs	r0, #1
 800029e:	f7ff ffb5 	bl	800020c <ESP_SetMode>
 80002a2:	4603      	mov	r3, r0
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <ESP_SetModeSoftAP>:

uint8_t ESP_SetModeSoftAP()
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	return ESP_SetMode(2);
 80002ac:	2002      	movs	r0, #2
 80002ae:	f7ff ffad 	bl	800020c <ESP_SetMode>
 80002b2:	4603      	mov	r3, r0
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <ESP_SetModeBoth>:

uint8_t ESP_SetModeBoth()
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	return ESP_SetMode(3);
 80002bc:	2003      	movs	r0, #3
 80002be:	f7ff ffa5 	bl	800020c <ESP_SetMode>
 80002c2:	4603      	mov	r3, r0
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <ESP_SetParamsSoftAP>:
	RingBuff_Clear();
	USART_SendData(request, strlen(request));
}

uint8_t ESP_SetParamsSoftAP(char * ssid, char * password)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	6039      	str	r1, [r7, #0]
	if(ssid != NULL && password != NULL)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d02a      	beq.n	800032e <ESP_SetParamsSoftAP+0x66>
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d027      	beq.n	800032e <ESP_SetParamsSoftAP+0x66>
	{
		requestFlush();
 80002de:	f7ff ff7d 	bl	80001dc <requestFlush>
		sprintf(request, "AT+CWSAP=\"%s\",\"%s\",5,3\r\n", ssid, password);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	4914      	ldr	r1, [pc, #80]	; (8000338 <ESP_SetParamsSoftAP+0x70>)
 80002e8:	4814      	ldr	r0, [pc, #80]	; (800033c <ESP_SetParamsSoftAP+0x74>)
 80002ea:	f007 f8b3 	bl	8007454 <siprintf>
		RingBuff_Clear();
 80002ee:	f001 f8cd 	bl	800148c <RingBuff_Clear>
		USART_SendData(request, strlen(request));
 80002f2:	4812      	ldr	r0, [pc, #72]	; (800033c <ESP_SetParamsSoftAP+0x74>)
 80002f4:	f7ff ff2c 	bl	8000150 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	4619      	mov	r1, r3
 80002fc:	480f      	ldr	r0, [pc, #60]	; (800033c <ESP_SetParamsSoftAP+0x74>)
 80002fe:	f006 fcf7 	bl	8006cf0 <USART_SendData>

		if(waitCallBack("OK", 20))
 8000302:	2114      	movs	r1, #20
 8000304:	480e      	ldr	r0, [pc, #56]	; (8000340 <ESP_SetParamsSoftAP+0x78>)
 8000306:	f7ff ff2b 	bl	8000160 <waitCallBack>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d00e      	beq.n	800032e <ESP_SetParamsSoftAP+0x66>
		{
			USART_SendData("AT+RST\r\n", 8); //restart to apply settings
 8000310:	2108      	movs	r1, #8
 8000312:	480c      	ldr	r0, [pc, #48]	; (8000344 <ESP_SetParamsSoftAP+0x7c>)
 8000314:	f006 fcec 	bl	8006cf0 <USART_SendData>

			if(waitCallBack("ready", 2000))
 8000318:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800031c:	480a      	ldr	r0, [pc, #40]	; (8000348 <ESP_SetParamsSoftAP+0x80>)
 800031e:	f7ff ff1f 	bl	8000160 <waitCallBack>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <ESP_SetParamsSoftAP+0x64>
			{
				return 1;
 8000328:	2301      	movs	r3, #1
 800032a:	e001      	b.n	8000330 <ESP_SetParamsSoftAP+0x68>
			}
			else asm("NOP");
 800032c:	bf00      	nop
		}
	}

	return 0;
 800032e:	2300      	movs	r3, #0
}
 8000330:	4618      	mov	r0, r3
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	08007ea4 	.word	0x08007ea4
 800033c:	20002440 	.word	0x20002440
 8000340:	08007e7c 	.word	0x08007e7c
 8000344:	08007e80 	.word	0x08007e80
 8000348:	08007e54 	.word	0x08007e54

0800034c <ESP_SetParamsStation>:

uint8_t ESP_SetParamsStation(char * ssid, char * password)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	6039      	str	r1, [r7, #0]
	if(ssid != NULL && password != NULL)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d01e      	beq.n	800039a <ESP_SetParamsStation+0x4e>
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d01b      	beq.n	800039a <ESP_SetParamsStation+0x4e>
	{
		requestFlush();
 8000362:	f7ff ff3b 	bl	80001dc <requestFlush>
		sprintf(request, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	490e      	ldr	r1, [pc, #56]	; (80003a4 <ESP_SetParamsStation+0x58>)
 800036c:	480e      	ldr	r0, [pc, #56]	; (80003a8 <ESP_SetParamsStation+0x5c>)
 800036e:	f007 f871 	bl	8007454 <siprintf>
		RingBuff_Clear();
 8000372:	f001 f88b 	bl	800148c <RingBuff_Clear>
		//charCallBack("");   //clear ring buffer after restart
		USART_SendData(request, strlen(request));
 8000376:	480c      	ldr	r0, [pc, #48]	; (80003a8 <ESP_SetParamsStation+0x5c>)
 8000378:	f7ff feea 	bl	8000150 <strlen>
 800037c:	4603      	mov	r3, r0
 800037e:	4619      	mov	r1, r3
 8000380:	4809      	ldr	r0, [pc, #36]	; (80003a8 <ESP_SetParamsStation+0x5c>)
 8000382:	f006 fcb5 	bl	8006cf0 <USART_SendData>

		if(waitCallBack("OK", 10000))
 8000386:	f242 7110 	movw	r1, #10000	; 0x2710
 800038a:	4808      	ldr	r0, [pc, #32]	; (80003ac <ESP_SetParamsStation+0x60>)
 800038c:	f7ff fee8 	bl	8000160 <waitCallBack>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <ESP_SetParamsStation+0x4e>
		{
			return 1;
 8000396:	2301      	movs	r3, #1
 8000398:	e000      	b.n	800039c <ESP_SetParamsStation+0x50>
		}
	}

	return 0;
 800039a:	2300      	movs	r3, #0
}
 800039c:	4618      	mov	r0, r3
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	08007ec0 	.word	0x08007ec0
 80003a8:	20002440 	.word	0x20002440
 80003ac:	08007e7c 	.word	0x08007e7c

080003b0 <ESP_StartTCPServer>:

	return 0;
}

uint8_t ESP_StartTCPServer(uint16_t port)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	80fb      	strh	r3, [r7, #6]
    if(!TCPServerFlag)
 80003ba:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <ESP_StartTCPServer+0x78>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d12d      	bne.n	800041e <ESP_StartTCPServer+0x6e>
    {
        USART_SendData("AT+CIPMUX=1\r\n", 13);
 80003c2:	210d      	movs	r1, #13
 80003c4:	4819      	ldr	r0, [pc, #100]	; (800042c <ESP_StartTCPServer+0x7c>)
 80003c6:	f006 fc93 	bl	8006cf0 <USART_SendData>
        if(!waitCallBack("OK", 100))
 80003ca:	2164      	movs	r1, #100	; 0x64
 80003cc:	4818      	ldr	r0, [pc, #96]	; (8000430 <ESP_StartTCPServer+0x80>)
 80003ce:	f7ff fec7 	bl	8000160 <waitCallBack>
 80003d2:	4603      	mov	r3, r0
 80003d4:	f083 0301 	eor.w	r3, r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <ESP_StartTCPServer+0x32>
        {
        	return 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	e01e      	b.n	8000420 <ESP_StartTCPServer+0x70>
        }

        requestFlush();
 80003e2:	f7ff fefb 	bl	80001dc <requestFlush>
        sprintf(request, "AT+CIPSERVER=1,%d\r\n", port);
 80003e6:	88fb      	ldrh	r3, [r7, #6]
 80003e8:	461a      	mov	r2, r3
 80003ea:	4912      	ldr	r1, [pc, #72]	; (8000434 <ESP_StartTCPServer+0x84>)
 80003ec:	4812      	ldr	r0, [pc, #72]	; (8000438 <ESP_StartTCPServer+0x88>)
 80003ee:	f007 f831 	bl	8007454 <siprintf>

        RingBuff_Clear();
 80003f2:	f001 f84b 	bl	800148c <RingBuff_Clear>
        USART_SendData(request, strlen(request));
 80003f6:	4810      	ldr	r0, [pc, #64]	; (8000438 <ESP_StartTCPServer+0x88>)
 80003f8:	f7ff feaa 	bl	8000150 <strlen>
 80003fc:	4603      	mov	r3, r0
 80003fe:	4619      	mov	r1, r3
 8000400:	480d      	ldr	r0, [pc, #52]	; (8000438 <ESP_StartTCPServer+0x88>)
 8000402:	f006 fc75 	bl	8006cf0 <USART_SendData>
		//USART_SendData("AT+MDNS=1,\"espressif\",\"iot\",80\r\n", 32);
        if(waitCallBack("OK", 20))
 8000406:	2114      	movs	r1, #20
 8000408:	4809      	ldr	r0, [pc, #36]	; (8000430 <ESP_StartTCPServer+0x80>)
 800040a:	f7ff fea9 	bl	8000160 <waitCallBack>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d004      	beq.n	800041e <ESP_StartTCPServer+0x6e>
        {
            TCPServerFlag = 1;
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <ESP_StartTCPServer+0x78>)
 8000416:	2201      	movs	r2, #1
 8000418:	701a      	strb	r2, [r3, #0]
            return 1;
 800041a:	2301      	movs	r3, #1
 800041c:	e000      	b.n	8000420 <ESP_StartTCPServer+0x70>
        }
    }

	return 0;
 800041e:	2300      	movs	r3, #0
}
 8000420:	4618      	mov	r0, r3
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000284 	.word	0x20000284
 800042c:	08007ef0 	.word	0x08007ef0
 8000430:	08007e7c 	.word	0x08007e7c
 8000434:	08007f00 	.word	0x08007f00
 8000438:	20002440 	.word	0x20002440

0800043c <ESP_StopTCPServer>:

uint8_t ESP_StopTCPServer(uint16_t port)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	80fb      	strh	r3, [r7, #6]
	if(TCPServerFlag)
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <ESP_StopTCPServer+0x58>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d01d      	beq.n	800048a <ESP_StopTCPServer+0x4e>
	{
		requestFlush();
 800044e:	f7ff fec5 	bl	80001dc <requestFlush>
		sprintf(request, "AT+CIPSERVER=0,%d\r\n", port);
 8000452:	88fb      	ldrh	r3, [r7, #6]
 8000454:	461a      	mov	r2, r3
 8000456:	4910      	ldr	r1, [pc, #64]	; (8000498 <ESP_StopTCPServer+0x5c>)
 8000458:	4810      	ldr	r0, [pc, #64]	; (800049c <ESP_StopTCPServer+0x60>)
 800045a:	f006 fffb 	bl	8007454 <siprintf>
		RingBuff_Clear();
 800045e:	f001 f815 	bl	800148c <RingBuff_Clear>
		USART_SendData(request, strlen(request));
 8000462:	480e      	ldr	r0, [pc, #56]	; (800049c <ESP_StopTCPServer+0x60>)
 8000464:	f7ff fe74 	bl	8000150 <strlen>
 8000468:	4603      	mov	r3, r0
 800046a:	4619      	mov	r1, r3
 800046c:	480b      	ldr	r0, [pc, #44]	; (800049c <ESP_StopTCPServer+0x60>)
 800046e:	f006 fc3f 	bl	8006cf0 <USART_SendData>
		TCPServerFlag = 0;
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <ESP_StopTCPServer+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	701a      	strb	r2, [r3, #0]

		if(waitCallBack("OK", 20))
 8000478:	2114      	movs	r1, #20
 800047a:	4809      	ldr	r0, [pc, #36]	; (80004a0 <ESP_StopTCPServer+0x64>)
 800047c:	f7ff fe70 	bl	8000160 <waitCallBack>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <ESP_StopTCPServer+0x4e>
		{
			return 1;
 8000486:	2301      	movs	r3, #1
 8000488:	e000      	b.n	800048c <ESP_StopTCPServer+0x50>
		}
	}
	return 0;
 800048a:	2300      	movs	r3, #0
}
 800048c:	4618      	mov	r0, r3
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000284 	.word	0x20000284
 8000498:	08007f14 	.word	0x08007f14
 800049c:	20002440 	.word	0x20002440
 80004a0:	08007e7c 	.word	0x08007e7c

080004a4 <requestRefresh>:

uint8_t requestRefresh()
{
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
	answerFlush();
 80004aa:	f7ff fea3 	bl	80001f4 <answerFlush>
	int i = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
	while(!(RingBuff_IsEmpty()) && i < 1024)
 80004b2:	e00b      	b.n	80004cc <requestRefresh+0x28>
	{
		answer[i++] = RingBuff_Pop();
 80004b4:	68fc      	ldr	r4, [r7, #12]
 80004b6:	1c63      	adds	r3, r4, #1
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	f000 ffb5 	bl	8001428 <RingBuff_Pop>
 80004be:	4603      	mov	r3, r0
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b13      	ldr	r3, [pc, #76]	; (8000510 <requestRefresh+0x6c>)
 80004c4:	551a      	strb	r2, [r3, r4]
		delay(1);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f004 fc72 	bl	8004db0 <delay>
	while(!(RingBuff_IsEmpty()) && i < 1024)
 80004cc:	f000 ffca 	bl	8001464 <RingBuff_IsEmpty>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d103      	bne.n	80004de <requestRefresh+0x3a>
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004dc:	dbea      	blt.n	80004b4 <requestRefresh+0x10>
	}

	char * search;
	search = strstr(answer, "+IPD,");
 80004de:	490d      	ldr	r1, [pc, #52]	; (8000514 <requestRefresh+0x70>)
 80004e0:	480b      	ldr	r0, [pc, #44]	; (8000510 <requestRefresh+0x6c>)
 80004e2:	f006 ffdb 	bl	800749c <strstr>
 80004e6:	60b8      	str	r0, [r7, #8]
	if(search != NULL)
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d00b      	beq.n	8000506 <requestRefresh+0x62>
	{
		search+=5;
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	3305      	adds	r3, #5
 80004f2:	60bb      	str	r3, [r7, #8]
		uint8_t ID = strtol(search, NULL, 10);
 80004f4:	220a      	movs	r2, #10
 80004f6:	2100      	movs	r1, #0
 80004f8:	68b8      	ldr	r0, [r7, #8]
 80004fa:	f007 f86b 	bl	80075d4 <strtol>
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
		//search += 2;
		//answerLength = strtol(search, NULL, 10); // get answer length

		return ID;
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	e000      	b.n	8000508 <requestRefresh+0x64>
	}
	return 100;
 8000506:	2364      	movs	r3, #100	; 0x64
}
 8000508:	4618      	mov	r0, r3
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	bd90      	pop	{r4, r7, pc}
 8000510:	20002844 	.word	0x20002844
 8000514:	08007f28 	.word	0x08007f28

08000518 <charCallBack>:

uint16_t charCallBack(char * key)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	answerFlush();
 8000520:	f7ff fe68 	bl	80001f4 <answerFlush>
	uint16_t i = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	81fb      	strh	r3, [r7, #14]
	while(!(RingBuff_IsEmpty()) && i < 1024)
 8000528:	e012      	b.n	8000550 <charCallBack+0x38>
	{
		answer[i] = RingBuff_Pop();
 800052a:	89fc      	ldrh	r4, [r7, #14]
 800052c:	f000 ff7c 	bl	8001428 <RingBuff_Pop>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <charCallBack+0x88>)
 8000536:	551a      	strb	r2, [r3, r4]

		if(answer[i] == 0)
 8000538:	89fb      	ldrh	r3, [r7, #14]
 800053a:	4a19      	ldr	r2, [pc, #100]	; (80005a0 <charCallBack+0x88>)
 800053c:	5cd3      	ldrb	r3, [r2, r3]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d103      	bne.n	800054a <charCallBack+0x32>
		{
			answer[i] = '0';
 8000542:	89fb      	ldrh	r3, [r7, #14]
 8000544:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <charCallBack+0x88>)
 8000546:	2130      	movs	r1, #48	; 0x30
 8000548:	54d1      	strb	r1, [r2, r3]
		}
		i++;
 800054a:	89fb      	ldrh	r3, [r7, #14]
 800054c:	3301      	adds	r3, #1
 800054e:	81fb      	strh	r3, [r7, #14]
	while(!(RingBuff_IsEmpty()) && i < 1024)
 8000550:	f000 ff88 	bl	8001464 <RingBuff_IsEmpty>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d103      	bne.n	8000562 <charCallBack+0x4a>
 800055a:	89fb      	ldrh	r3, [r7, #14]
 800055c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000560:	d3e3      	bcc.n	800052a <charCallBack+0x12>
	}
	answer[1024] = 0;
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <charCallBack+0x88>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	if(key != NULL && strlen(answer) >= strlen(key))
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d012      	beq.n	8000596 <charCallBack+0x7e>
 8000570:	480b      	ldr	r0, [pc, #44]	; (80005a0 <charCallBack+0x88>)
 8000572:	f7ff fded 	bl	8000150 <strlen>
 8000576:	4604      	mov	r4, r0
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff fde9 	bl	8000150 <strlen>
 800057e:	4603      	mov	r3, r0
 8000580:	429c      	cmp	r4, r3
 8000582:	d308      	bcc.n	8000596 <charCallBack+0x7e>
	{
		if(strstr(answer, key) != NULL)
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	4806      	ldr	r0, [pc, #24]	; (80005a0 <charCallBack+0x88>)
 8000588:	f006 ff88 	bl	800749c <strstr>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <charCallBack+0x7e>
		{
			return 1;
 8000592:	2301      	movs	r3, #1
 8000594:	e000      	b.n	8000598 <charCallBack+0x80>
		}
	}

	return 0;
 8000596:	2300      	movs	r3, #0
}
 8000598:	4618      	mov	r0, r3
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	bd90      	pop	{r4, r7, pc}
 80005a0:	20002844 	.word	0x20002844

080005a4 <ESP_SendConstData>:

	return 0;
}

uint8_t ESP_SendConstData(const char *data, uint16_t dataLength, uint8_t flagRN)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	807b      	strh	r3, [r7, #2]
 80005b0:	4613      	mov	r3, r2
 80005b2:	707b      	strb	r3, [r7, #1]
	requestFlush();
 80005b4:	f7ff fe12 	bl	80001dc <requestFlush>
	sprintf(request, "AT+CIPSEND=%d,%d\r\n", linkID, flagRN ? (dataLength + 2) : dataLength);
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <ESP_SendConstData+0x9c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	787b      	ldrb	r3, [r7, #1]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <ESP_SendConstData+0x26>
 80005c4:	887b      	ldrh	r3, [r7, #2]
 80005c6:	3302      	adds	r3, #2
 80005c8:	e000      	b.n	80005cc <ESP_SendConstData+0x28>
 80005ca:	887b      	ldrh	r3, [r7, #2]
 80005cc:	491d      	ldr	r1, [pc, #116]	; (8000644 <ESP_SendConstData+0xa0>)
 80005ce:	481e      	ldr	r0, [pc, #120]	; (8000648 <ESP_SendConstData+0xa4>)
 80005d0:	f006 ff40 	bl	8007454 <siprintf>
	USART_SendData(request, strlen(request));
 80005d4:	481c      	ldr	r0, [pc, #112]	; (8000648 <ESP_SendConstData+0xa4>)
 80005d6:	f7ff fdbb 	bl	8000150 <strlen>
 80005da:	4603      	mov	r3, r0
 80005dc:	4619      	mov	r1, r3
 80005de:	481a      	ldr	r0, [pc, #104]	; (8000648 <ESP_SendConstData+0xa4>)
 80005e0:	f006 fb86 	bl	8006cf0 <USART_SendData>
	//delay(200);

	if(waitCallBack(">", 200) && data != NULL)
 80005e4:	21c8      	movs	r1, #200	; 0xc8
 80005e6:	4819      	ldr	r0, [pc, #100]	; (800064c <ESP_SendConstData+0xa8>)
 80005e8:	f7ff fdba 	bl	8000160 <waitCallBack>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d01b      	beq.n	800062a <ESP_SendConstData+0x86>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d018      	beq.n	800062a <ESP_SendConstData+0x86>
	{
		for(int i = 0; i < dataLength; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e009      	b.n	8000612 <ESP_SendConstData+0x6e>
		{
			USART_SendData_byte(data[i]);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f006 fb5a 	bl	8006cc0 <USART_SendData_byte>
		for(int i = 0; i < dataLength; i++)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	3301      	adds	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	887a      	ldrh	r2, [r7, #2]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	429a      	cmp	r2, r3
 8000618:	dcf1      	bgt.n	80005fe <ESP_SendConstData+0x5a>
		}
		if(flagRN)
 800061a:	787b      	ldrb	r3, [r7, #1]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d006      	beq.n	800062e <ESP_SendConstData+0x8a>
		{
			USART_SendData("\r\n", 2);
 8000620:	2102      	movs	r1, #2
 8000622:	480b      	ldr	r0, [pc, #44]	; (8000650 <ESP_SendConstData+0xac>)
 8000624:	f006 fb64 	bl	8006cf0 <USART_SendData>
		if(flagRN)
 8000628:	e001      	b.n	800062e <ESP_SendConstData+0x8a>
		}
	}
	else return 0;
 800062a:	2300      	movs	r3, #0
 800062c:	e003      	b.n	8000636 <ESP_SendConstData+0x92>
	delay(100);
 800062e:	2064      	movs	r0, #100	; 0x64
 8000630:	f004 fbbe 	bl	8004db0 <delay>
//	if(waitCallBack("Recv", 200))
//	{
//		return 1;
//	}

	return 0;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20002c45 	.word	0x20002c45
 8000644:	08007f30 	.word	0x08007f30
 8000648:	20002440 	.word	0x20002440
 800064c:	08007f44 	.word	0x08007f44
 8000650:	08007f48 	.word	0x08007f48

08000654 <SetLinkID>:

void SetLinkID(uint8_t ID)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	linkID = ID;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <SetLinkID+0x1c>)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	7013      	strb	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20002c45 	.word	0x20002c45

08000674 <ESP_GetAnswer>:
{
	return linkID;
}

char * ESP_GetAnswer(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	return answer;
 8000678:	4b02      	ldr	r3, [pc, #8]	; (8000684 <ESP_GetAnswer+0x10>)
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20002844 	.word	0x20002844

08000688 <SetSSID>:

void SetSSID(char * name)
{
 8000688:	b4b0      	push	{r4, r5, r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	memcpy(ssid, name, 32);
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <SetSSID+0x38>)
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	6815      	ldr	r5, [r2, #0]
 8000696:	6854      	ldr	r4, [r2, #4]
 8000698:	6890      	ldr	r0, [r2, #8]
 800069a:	68d1      	ldr	r1, [r2, #12]
 800069c:	601d      	str	r5, [r3, #0]
 800069e:	605c      	str	r4, [r3, #4]
 80006a0:	6098      	str	r0, [r3, #8]
 80006a2:	60d9      	str	r1, [r3, #12]
 80006a4:	6915      	ldr	r5, [r2, #16]
 80006a6:	6954      	ldr	r4, [r2, #20]
 80006a8:	6990      	ldr	r0, [r2, #24]
 80006aa:	69d1      	ldr	r1, [r2, #28]
 80006ac:	611d      	str	r5, [r3, #16]
 80006ae:	615c      	str	r4, [r3, #20]
 80006b0:	6198      	str	r0, [r3, #24]
 80006b2:	61d9      	str	r1, [r3, #28]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bcb0      	pop	{r4, r5, r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	200023f0 	.word	0x200023f0

080006c4 <GetSSID>:

char * GetSSID()
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	return ssid;
 80006c8:	4b02      	ldr	r3, [pc, #8]	; (80006d4 <GetSSID+0x10>)
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	200023f0 	.word	0x200023f0

080006d8 <SetPASWD>:

void SetPASWD(char * passwd)
{
 80006d8:	b4b0      	push	{r4, r5, r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	memcpy(paswd, passwd, 32);
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <SetPASWD+0x38>)
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	6815      	ldr	r5, [r2, #0]
 80006e6:	6854      	ldr	r4, [r2, #4]
 80006e8:	6890      	ldr	r0, [r2, #8]
 80006ea:	68d1      	ldr	r1, [r2, #12]
 80006ec:	601d      	str	r5, [r3, #0]
 80006ee:	605c      	str	r4, [r3, #4]
 80006f0:	6098      	str	r0, [r3, #8]
 80006f2:	60d9      	str	r1, [r3, #12]
 80006f4:	6915      	ldr	r5, [r2, #16]
 80006f6:	6954      	ldr	r4, [r2, #20]
 80006f8:	6990      	ldr	r0, [r2, #24]
 80006fa:	69d1      	ldr	r1, [r2, #28]
 80006fc:	611d      	str	r5, [r3, #16]
 80006fe:	615c      	str	r4, [r3, #20]
 8000700:	6198      	str	r0, [r3, #24]
 8000702:	61d9      	str	r1, [r3, #28]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bcb0      	pop	{r4, r5, r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20002420 	.word	0x20002420

08000714 <GetPasw>:

char *  GetPasw()
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	return paswd;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <GetPasw+0x10>)
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	20002420 	.word	0x20002420

08000728 <GetStationIP>:

void GetStationIP(void)
{
 8000728:	b5b0      	push	{r4, r5, r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
	char * search;
	requestFlush();
 800072e:	f7ff fd55 	bl	80001dc <requestFlush>
	sprintf(request, "AT+CIPSTA_CUR?\r\n");
 8000732:	4a26      	ldr	r2, [pc, #152]	; (80007cc <GetStationIP+0xa4>)
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <GetStationIP+0xa8>)
 8000736:	4615      	mov	r5, r2
 8000738:	461c      	mov	r4, r3
 800073a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073c:	6028      	str	r0, [r5, #0]
 800073e:	6069      	str	r1, [r5, #4]
 8000740:	60aa      	str	r2, [r5, #8]
 8000742:	60eb      	str	r3, [r5, #12]
 8000744:	7823      	ldrb	r3, [r4, #0]
 8000746:	742b      	strb	r3, [r5, #16]
	RingBuff_Clear();
 8000748:	f000 fea0 	bl	800148c <RingBuff_Clear>
	USART_SendData(request, strlen(request));
 800074c:	481f      	ldr	r0, [pc, #124]	; (80007cc <GetStationIP+0xa4>)
 800074e:	f7ff fcff 	bl	8000150 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	4619      	mov	r1, r3
 8000756:	481d      	ldr	r0, [pc, #116]	; (80007cc <GetStationIP+0xa4>)
 8000758:	f006 faca 	bl	8006cf0 <USART_SendData>

	uint16_t i = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	80fb      	strh	r3, [r7, #6]
	while(!(RingBuff_IsEmpty()) && i < 1024)
 8000760:	e012      	b.n	8000788 <GetStationIP+0x60>
	{
		answer[i] = RingBuff_Pop();
 8000762:	88fc      	ldrh	r4, [r7, #6]
 8000764:	f000 fe60 	bl	8001428 <RingBuff_Pop>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <GetStationIP+0xac>)
 800076e:	551a      	strb	r2, [r3, r4]
		if(answer[i] == 0)
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <GetStationIP+0xac>)
 8000774:	5cd3      	ldrb	r3, [r2, r3]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d103      	bne.n	8000782 <GetStationIP+0x5a>
		{
			answer[i] = '0';
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <GetStationIP+0xac>)
 800077e:	2130      	movs	r1, #48	; 0x30
 8000780:	54d1      	strb	r1, [r2, r3]
		}
		i++;
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	3301      	adds	r3, #1
 8000786:	80fb      	strh	r3, [r7, #6]
	while(!(RingBuff_IsEmpty()) && i < 1024)
 8000788:	f000 fe6c 	bl	8001464 <RingBuff_IsEmpty>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d103      	bne.n	800079a <GetStationIP+0x72>
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000798:	d3e3      	bcc.n	8000762 <GetStationIP+0x3a>
	}
	search = strstr(answer, "ip:"); //search request for ip and copy to buffer
 800079a:	490f      	ldr	r1, [pc, #60]	; (80007d8 <GetStationIP+0xb0>)
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <GetStationIP+0xac>)
 800079e:	f006 fe7d 	bl	800749c <strstr>
 80007a2:	6038      	str	r0, [r7, #0]
	if(search != NULL)
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d00c      	beq.n	80007c4 <GetStationIP+0x9c>
	{
		memcpy(ip, search + 4, 15);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	1d1a      	adds	r2, r3, #4
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <GetStationIP+0xb4>)
 80007b0:	6814      	ldr	r4, [r2, #0]
 80007b2:	6850      	ldr	r0, [r2, #4]
 80007b4:	6891      	ldr	r1, [r2, #8]
 80007b6:	601c      	str	r4, [r3, #0]
 80007b8:	6058      	str	r0, [r3, #4]
 80007ba:	6099      	str	r1, [r3, #8]
 80007bc:	8991      	ldrh	r1, [r2, #12]
 80007be:	7b92      	ldrb	r2, [r2, #14]
 80007c0:	8199      	strh	r1, [r3, #12]
 80007c2:	739a      	strb	r2, [r3, #14]
	}
	//else memcpy(ip, "000.000.000.000", 15);
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bdb0      	pop	{r4, r5, r7, pc}
 80007cc:	20002440 	.word	0x20002440
 80007d0:	08007f4c 	.word	0x08007f4c
 80007d4:	20002844 	.word	0x20002844
 80007d8:	08007f60 	.word	0x08007f60
 80007dc:	20002410 	.word	0x20002410

080007e0 <GetIP>:

char * GetIP(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
	return ip;
 80007e4:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <GetIP+0x10>)
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	20002410 	.word	0x20002410

080007f4 <Display_ON>:
		0x7E, 0x7E, 0x81, 0xB1, 0x91, 0x62, 0x00, // G
		0xFF, 0xFF, 0x89, 0x89, 0x89, 0x76, 0x00  // B
};

void Display_ON(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	MX_SPI1_Init();
 80007f8:	f005 fff2 	bl	80067e0 <MX_SPI1_Init>

	Reset();
 80007fc:	f006 f88e 	bl	800691c <Reset>
	delay(100);
 8000800:	2064      	movs	r0, #100	; 0x64
 8000802:	f004 fad5 	bl	8004db0 <delay>

	ClearDC();
 8000806:	f006 f87d 	bl	8006904 <ClearDC>
	SPI1_SendByte(0xAE);
 800080a:	20ae      	movs	r0, #174	; 0xae
 800080c:	f006 f850 	bl	80068b0 <SPI1_SendByte>

	SPI1_SendByte(0xA8); //multiplex ratio
 8000810:	20a8      	movs	r0, #168	; 0xa8
 8000812:	f006 f84d 	bl	80068b0 <SPI1_SendByte>
	SPI1_SendByte(0x3F);
 8000816:	203f      	movs	r0, #63	; 0x3f
 8000818:	f006 f84a 	bl	80068b0 <SPI1_SendByte>

	SPI1_SendByte(0xD3); //offset
 800081c:	20d3      	movs	r0, #211	; 0xd3
 800081e:	f006 f847 	bl	80068b0 <SPI1_SendByte>
	SPI1_SendByte(0x00);
 8000822:	2000      	movs	r0, #0
 8000824:	f006 f844 	bl	80068b0 <SPI1_SendByte>

	SPI1_SendByte(0x40); //start line
 8000828:	2040      	movs	r0, #64	; 0x40
 800082a:	f006 f841 	bl	80068b0 <SPI1_SendByte>

	SPI1_SendByte(0xA1); //segment re-map
 800082e:	20a1      	movs	r0, #161	; 0xa1
 8000830:	f006 f83e 	bl	80068b0 <SPI1_SendByte>

	SPI1_SendByte(0xC8); //scan direction
 8000834:	20c8      	movs	r0, #200	; 0xc8
 8000836:	f006 f83b 	bl	80068b0 <SPI1_SendByte>

	SPI1_SendByte(0xDA); //COM pins
 800083a:	20da      	movs	r0, #218	; 0xda
 800083c:	f006 f838 	bl	80068b0 <SPI1_SendByte>
	SPI1_SendByte(0x12);
 8000840:	2012      	movs	r0, #18
 8000842:	f006 f835 	bl	80068b0 <SPI1_SendByte>

	SPI1_SendByte(0xD5); //clock div
 8000846:	20d5      	movs	r0, #213	; 0xd5
 8000848:	f006 f832 	bl	80068b0 <SPI1_SendByte>
	SPI1_SendByte(0x30);
 800084c:	2030      	movs	r0, #48	; 0x30
 800084e:	f006 f82f 	bl	80068b0 <SPI1_SendByte>

	SPI1_SendByte(0xA4);
 8000852:	20a4      	movs	r0, #164	; 0xa4
 8000854:	f006 f82c 	bl	80068b0 <SPI1_SendByte>

	SPI1_SendByte(0x8D); //charge bump
 8000858:	208d      	movs	r0, #141	; 0x8d
 800085a:	f006 f829 	bl	80068b0 <SPI1_SendByte>
	SPI1_SendByte(0x14); //VCC gen by DC/DC
 800085e:	2014      	movs	r0, #20
 8000860:	f006 f826 	bl	80068b0 <SPI1_SendByte>

	SPI1_SendByte(0xD9); //pre-charged period
 8000864:	20d9      	movs	r0, #217	; 0xd9
 8000866:	f006 f823 	bl	80068b0 <SPI1_SendByte>
	SPI1_SendByte(0xF1);
 800086a:	20f1      	movs	r0, #241	; 0xf1
 800086c:	f006 f820 	bl	80068b0 <SPI1_SendByte>

	SPI1_SendByte(0xB0); //start page
 8000870:	20b0      	movs	r0, #176	; 0xb0
 8000872:	f006 f81d 	bl	80068b0 <SPI1_SendByte>

	SPI1_SendByte(0xDB); //VCOM level
 8000876:	20db      	movs	r0, #219	; 0xdb
 8000878:	f006 f81a 	bl	80068b0 <SPI1_SendByte>
	SPI1_SendByte(0x40); //20
 800087c:	2040      	movs	r0, #64	; 0x40
 800087e:	f006 f817 	bl	80068b0 <SPI1_SendByte>

	SPI1_SendByte(0x20); //page mode
 8000882:	2020      	movs	r0, #32
 8000884:	f006 f814 	bl	80068b0 <SPI1_SendByte>
	SPI1_SendByte(0x22);
 8000888:	2022      	movs	r0, #34	; 0x22
 800088a:	f006 f811 	bl	80068b0 <SPI1_SendByte>

	SPI1_SendByte(0x2E); //off scroll
 800088e:	202e      	movs	r0, #46	; 0x2e
 8000890:	f006 f80e 	bl	80068b0 <SPI1_SendByte>

	SPI1_SendByte(0xAF);
 8000894:	20af      	movs	r0, #175	; 0xaf
 8000896:	f006 f80b 	bl	80068b0 <SPI1_SendByte>
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}

0800089e <Display_SetPage>:
	ClearDC();
	SPI1_SendByte(0xAE);
}

void Display_SetPage(uint8_t addr)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	ClearDC();
 80008a8:	f006 f82c 	bl	8006904 <ClearDC>
	SPI1_SendByte(0xB0 + addr);
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	3b50      	subs	r3, #80	; 0x50
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f005 fffc 	bl	80068b0 <SPI1_SendByte>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <Display_Write>:

void Display_Write(uint8_t data)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	SetDC();
 80008ca:	f006 f80f 	bl	80068ec <SetDC>
	SPI1_SendByte(data);
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f005 ffed 	bl	80068b0 <SPI1_SendByte>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <Display_SetColumn>:

void Display_SetColumn(uint8_t data)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	4603      	mov	r3, r0
 80008e6:	71fb      	strb	r3, [r7, #7]
	ClearDC();
 80008e8:	f006 f80c 	bl	8006904 <ClearDC>
	SPI1_SendByte(0x00 + data);
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f005 ffde 	bl	80068b0 <SPI1_SendByte>
	SPI1_SendByte(0x10 + (data >> 4));
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	091b      	lsrs	r3, r3, #4
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	3310      	adds	r3, #16
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f005 ffd6 	bl	80068b0 <SPI1_SendByte>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <Display_Contrast>:

void Display_Contrast(uint8_t data)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
	ClearDC();
 8000916:	f005 fff5 	bl	8006904 <ClearDC>
	SPI1_SendByte(0x81);
 800091a:	2081      	movs	r0, #129	; 0x81
 800091c:	f005 ffc8 	bl	80068b0 <SPI1_SendByte>
	SPI1_SendByte(data);
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	4618      	mov	r0, r3
 8000924:	f005 ffc4 	bl	80068b0 <SPI1_SendByte>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <Display_Clean>:
	ClearDC();
	SPI1_SendByte(0xA7); //0xA6 normal
}

void Display_Clean()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	e01f      	b.n	800097c <Display_Clean+0x4c>
	{
		ClearDC();
 800093c:	f005 ffe2 	bl	8006904 <ClearDC>
		SPI1_SendByte(0xB0 + i);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	3b50      	subs	r3, #80	; 0x50
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4618      	mov	r0, r3
 800094a:	f005 ffb1 	bl	80068b0 <SPI1_SendByte>
		SPI1_SendByte(0x00);
 800094e:	2000      	movs	r0, #0
 8000950:	f005 ffae 	bl	80068b0 <SPI1_SendByte>
		SPI1_SendByte(0x10);
 8000954:	2010      	movs	r0, #16
 8000956:	f005 ffab 	bl	80068b0 <SPI1_SendByte>

		SetDC();
 800095a:	f005 ffc7 	bl	80068ec <SetDC>
		for(int c = 0; c < 128; c++)
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	e005      	b.n	8000970 <Display_Clean+0x40>
		{
			SPI1_SendByte(0x00);
 8000964:	2000      	movs	r0, #0
 8000966:	f005 ffa3 	bl	80068b0 <SPI1_SendByte>
		for(int c = 0; c < 128; c++)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	3301      	adds	r3, #1
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	2b7f      	cmp	r3, #127	; 0x7f
 8000974:	ddf6      	ble.n	8000964 <Display_Clean+0x34>
	for(int i = 0; i < 8; i++)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3301      	adds	r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b07      	cmp	r3, #7
 8000980:	dddc      	ble.n	800093c <Display_Clean+0xc>
		}
	}
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <Display_PrintSymbol>:
		}
	}
}

void Display_PrintSymbol(uint8_t sym, uint8_t page, uint8_t col)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
 8000996:	460b      	mov	r3, r1
 8000998:	71bb      	strb	r3, [r7, #6]
 800099a:	4613      	mov	r3, r2
 800099c:	717b      	strb	r3, [r7, #5]
	Display_SetPage(page);
 800099e:	79bb      	ldrb	r3, [r7, #6]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff7c 	bl	800089e <Display_SetPage>

	if(col == 0)
 80009a6:	797b      	ldrb	r3, [r7, #5]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d102      	bne.n	80009b2 <Display_PrintSymbol+0x26>
	{
		Display_SetColumn(0);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff ff96 	bl	80008de <Display_SetColumn>
	}
	for(int i = sym * 7; i < sym * 7 + 7; i++)
 80009b2:	79fa      	ldrb	r2, [r7, #7]
 80009b4:	4613      	mov	r3, r2
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	e009      	b.n	80009d2 <Display_PrintSymbol+0x46>
	{
		Display_Write(table[i]);
 80009be:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <Display_PrintSymbol+0x60>)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4413      	add	r3, r2
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ff7a 	bl	80008c0 <Display_Write>
	for(int i = sym * 7; i < sym * 7 + 7; i++)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	3301      	adds	r3, #1
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	4613      	mov	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	1a9a      	subs	r2, r3, r2
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	429a      	cmp	r2, r3
 80009e0:	dced      	bgt.n	80009be <Display_PrintSymbol+0x32>
	}
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000000 	.word	0x20000000

080009f0 <display>:

void display()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
	Display_Clean();
 80009f6:	f7ff ff9b 	bl	8000930 <Display_Clean>

	uint16_t r = Led_Get_Color(eRed) * 100 / 4096; // convert led value into %
 80009fa:	2000      	movs	r0, #0
 80009fc:	f000 fa6e 	bl	8000edc <Led_Get_Color>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	2364      	movs	r3, #100	; 0x64
 8000a06:	fb03 f302 	mul.w	r3, r3, r2
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da01      	bge.n	8000a12 <display+0x22>
 8000a0e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a12:	131b      	asrs	r3, r3, #12
 8000a14:	80fb      	strh	r3, [r7, #6]
	uint16_t g = Led_Get_Color(eGreen) * 100 / 4096;
 8000a16:	2001      	movs	r0, #1
 8000a18:	f000 fa60 	bl	8000edc <Led_Get_Color>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	2364      	movs	r3, #100	; 0x64
 8000a22:	fb03 f302 	mul.w	r3, r3, r2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	da01      	bge.n	8000a2e <display+0x3e>
 8000a2a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a2e:	131b      	asrs	r3, r3, #12
 8000a30:	80bb      	strh	r3, [r7, #4]
	uint16_t b = Led_Get_Color(eBlue) * 100 / 4096;
 8000a32:	2002      	movs	r0, #2
 8000a34:	f000 fa52 	bl	8000edc <Led_Get_Color>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	2364      	movs	r3, #100	; 0x64
 8000a3e:	fb03 f302 	mul.w	r3, r3, r2
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	da01      	bge.n	8000a4a <display+0x5a>
 8000a46:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a4a:	131b      	asrs	r3, r3, #12
 8000a4c:	807b      	strh	r3, [r7, #2]

	Display_PrintSymbol(14, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	200e      	movs	r0, #14
 8000a54:	f7ff ff9a 	bl	800098c <Display_PrintSymbol>
	Display_PrintSymbol(11, 0, 1);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	200b      	movs	r0, #11
 8000a5e:	f7ff ff95 	bl	800098c <Display_PrintSymbol>
	Display_PrintSymbol(r / 100 % 10, 0, 3);
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	4a75      	ldr	r2, [pc, #468]	; (8000c3c <display+0x24c>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	095b      	lsrs	r3, r3, #5
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	4b74      	ldr	r3, [pc, #464]	; (8000c40 <display+0x250>)
 8000a70:	fba3 1302 	umull	r1, r3, r3, r2
 8000a74:	08d9      	lsrs	r1, r3, #3
 8000a76:	460b      	mov	r3, r1
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2203      	movs	r2, #3
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff7f 	bl	800098c <Display_PrintSymbol>
	Display_PrintSymbol(r / 10 % 10, 0, 4);
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	4a6b      	ldr	r2, [pc, #428]	; (8000c40 <display+0x250>)
 8000a92:	fba2 2303 	umull	r2, r3, r2, r3
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	4b69      	ldr	r3, [pc, #420]	; (8000c40 <display+0x250>)
 8000a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8000aa0:	08d9      	lsrs	r1, r3, #3
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff69 	bl	800098c <Display_PrintSymbol>
	Display_PrintSymbol(r % 10, 0, 5);
 8000aba:	88fa      	ldrh	r2, [r7, #6]
 8000abc:	4b60      	ldr	r3, [pc, #384]	; (8000c40 <display+0x250>)
 8000abe:	fba3 1302 	umull	r1, r3, r3, r2
 8000ac2:	08d9      	lsrs	r1, r3, #3
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	440b      	add	r3, r1
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2205      	movs	r2, #5
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff58 	bl	800098c <Display_PrintSymbol>

	Display_PrintSymbol(15, 2, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2102      	movs	r1, #2
 8000ae0:	200f      	movs	r0, #15
 8000ae2:	f7ff ff53 	bl	800098c <Display_PrintSymbol>
	Display_PrintSymbol(11, 2, 1);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	2102      	movs	r1, #2
 8000aea:	200b      	movs	r0, #11
 8000aec:	f7ff ff4e 	bl	800098c <Display_PrintSymbol>
	Display_PrintSymbol(g / 100 % 10, 2, 3);
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	4a52      	ldr	r2, [pc, #328]	; (8000c3c <display+0x24c>)
 8000af4:	fba2 2303 	umull	r2, r3, r2, r3
 8000af8:	095b      	lsrs	r3, r3, #5
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	4b50      	ldr	r3, [pc, #320]	; (8000c40 <display+0x250>)
 8000afe:	fba3 1302 	umull	r1, r3, r3, r2
 8000b02:	08d9      	lsrs	r1, r3, #3
 8000b04:	460b      	mov	r3, r1
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	440b      	add	r3, r1
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2203      	movs	r2, #3
 8000b14:	2102      	movs	r1, #2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff38 	bl	800098c <Display_PrintSymbol>
	Display_PrintSymbol(g / 10 % 10, 2, 4);
 8000b1c:	88bb      	ldrh	r3, [r7, #4]
 8000b1e:	4a48      	ldr	r2, [pc, #288]	; (8000c40 <display+0x250>)
 8000b20:	fba2 2303 	umull	r2, r3, r2, r3
 8000b24:	08db      	lsrs	r3, r3, #3
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	4b45      	ldr	r3, [pc, #276]	; (8000c40 <display+0x250>)
 8000b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b2e:	08d9      	lsrs	r1, r3, #3
 8000b30:	460b      	mov	r3, r1
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	440b      	add	r3, r1
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2204      	movs	r2, #4
 8000b40:	2102      	movs	r1, #2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ff22 	bl	800098c <Display_PrintSymbol>
	Display_PrintSymbol(g % 10, 2, 5);
 8000b48:	88ba      	ldrh	r2, [r7, #4]
 8000b4a:	4b3d      	ldr	r3, [pc, #244]	; (8000c40 <display+0x250>)
 8000b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8000b50:	08d9      	lsrs	r1, r3, #3
 8000b52:	460b      	mov	r3, r1
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	440b      	add	r3, r1
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2205      	movs	r2, #5
 8000b62:	2102      	movs	r1, #2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff11 	bl	800098c <Display_PrintSymbol>

	Display_PrintSymbol(16, 4, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	2010      	movs	r0, #16
 8000b70:	f7ff ff0c 	bl	800098c <Display_PrintSymbol>
	Display_PrintSymbol(11, 4, 1);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2104      	movs	r1, #4
 8000b78:	200b      	movs	r0, #11
 8000b7a:	f7ff ff07 	bl	800098c <Display_PrintSymbol>
	Display_PrintSymbol(b / 100 % 10, 4, 3);
 8000b7e:	887b      	ldrh	r3, [r7, #2]
 8000b80:	4a2e      	ldr	r2, [pc, #184]	; (8000c3c <display+0x24c>)
 8000b82:	fba2 2303 	umull	r2, r3, r2, r3
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <display+0x250>)
 8000b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8000b90:	08d9      	lsrs	r1, r3, #3
 8000b92:	460b      	mov	r3, r1
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	440b      	add	r3, r1
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	2104      	movs	r1, #4
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fef1 	bl	800098c <Display_PrintSymbol>
	Display_PrintSymbol(b / 10 % 10, 4, 4);
 8000baa:	887b      	ldrh	r3, [r7, #2]
 8000bac:	4a24      	ldr	r2, [pc, #144]	; (8000c40 <display+0x250>)
 8000bae:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb2:	08db      	lsrs	r3, r3, #3
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <display+0x250>)
 8000bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8000bbc:	08d9      	lsrs	r1, r3, #3
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	2204      	movs	r2, #4
 8000bce:	2104      	movs	r1, #4
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fedb 	bl	800098c <Display_PrintSymbol>
	Display_PrintSymbol(b % 10, 4, 5);
 8000bd6:	887a      	ldrh	r2, [r7, #2]
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <display+0x250>)
 8000bda:	fba3 1302 	umull	r1, r3, r3, r2
 8000bde:	08d9      	lsrs	r1, r3, #3
 8000be0:	460b      	mov	r3, r1
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	440b      	add	r3, r1
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2205      	movs	r2, #5
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff feca 	bl	800098c <Display_PrintSymbol>

	//Display_Test();

	for(int i = 0; i < 15; i++) //display ip
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	e017      	b.n	8000c2e <display+0x23e>
	{
		int temp = GetIP()[i] - 48; //convert ascii to int
 8000bfe:	f7ff fdef 	bl	80007e0 <GetIP>
 8000c02:	4602      	mov	r2, r0
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4413      	add	r3, r2
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	3b30      	subs	r3, #48	; 0x30
 8000c0c:	60bb      	str	r3, [r7, #8]
		if(temp < 0) //symbol after convert < 0,  set '.'
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	da01      	bge.n	8000c18 <display+0x228>
		{
			temp = 10;
 8000c14:	230a      	movs	r3, #10
 8000c16:	60bb      	str	r3, [r7, #8]
		}
		Display_PrintSymbol(temp, 6, i);
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	2106      	movs	r1, #6
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff feb2 	bl	800098c <Display_PrintSymbol>
	for(int i = 0; i < 15; i++) //display ip
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2b0e      	cmp	r3, #14
 8000c32:	dde4      	ble.n	8000bfe <display+0x20e>
	}
}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	51eb851f 	.word	0x51eb851f
 8000c40:	cccccccd 	.word	0xcccccccd

08000c44 <EncoderInit>:
#include "stdbool.h"
#include "stdint.h"
#include "encoder_driver.h"

void EncoderInit(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	GPIO_Init();
 8000c48:	f004 f98e 	bl	8004f68 <GPIO_Init>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <Encoder_State>:

eState Encoder_State(void)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
	eState res = eNone;
 8000c56:	2300      	movs	r3, #0
 8000c58:	71fb      	strb	r3, [r7, #7]
    if(GetButton())
 8000c5a:	f004 fa23 	bl	80050a4 <GetButton>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d005      	beq.n	8000c70 <Encoder_State+0x20>
    {
      res = eButton;
 8000c64:	2303      	movs	r3, #3
 8000c66:	71fb      	strb	r3, [r7, #7]
      ClearButton();
 8000c68:	f004 fa26 	bl	80050b8 <ClearButton>
      return res;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	e015      	b.n	8000c9c <Encoder_State+0x4c>
    }
    if(GetRotateStatus())
 8000c70:	f004 fa2e 	bl	80050d0 <GetRotateStatus>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00d      	beq.n	8000c96 <Encoder_State+0x46>
    {
		if(GetRotatePinA() == GetRotatePinB())
 8000c7a:	f004 fa49 	bl	8005110 <GetRotatePinA>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	461c      	mov	r4, r3
 8000c82:	f004 fa3b 	bl	80050fc <GetRotatePinB>
 8000c86:	4603      	mov	r3, r0
 8000c88:	429c      	cmp	r4, r3
 8000c8a:	d102      	bne.n	8000c92 <Encoder_State+0x42>
		{
			res = eRight;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	71fb      	strb	r3, [r7, #7]
 8000c90:	e001      	b.n	8000c96 <Encoder_State+0x46>
		}
		else
		{
			res = eLeft;
 8000c92:	2301      	movs	r3, #1
 8000c94:	71fb      	strb	r3, [r7, #7]
		}
	}
	ClearRotateStatus();
 8000c96:	f004 fa25 	bl	80050e4 <ClearRotateStatus>
    return res;
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd90      	pop	{r4, r7, pc}

08000ca4 <I2C_Init>:
#include "i2c.h"
#include "led.h"
#include "delay.h"

void I2C_Init()
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	MX_I2C2_Init();
 8000ca8:	f004 fd28 	bl	80056fc <MX_I2C2_Init>
	MX_CRC_Init();
 8000cac:	f004 f84c 	bl	8004d48 <MX_CRC_Init>
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <ColorToEEPROM>:

uint32_t check_sum[1] = {0};
void ColorToEEPROM() //save led to EEPROM
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
	uint16_t led[4] = {0,0,0,0};
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
	led[0] = Led_Get_Arr_Color()[0];
 8000cc2:	f000 f929 	bl	8000f18 <Led_Get_Arr_Color>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	803b      	strh	r3, [r7, #0]
	led[1] = Led_Get_Arr_Color()[1];
 8000ccc:	f000 f924 	bl	8000f18 <Led_Get_Arr_Color>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	885b      	ldrh	r3, [r3, #2]
 8000cd4:	807b      	strh	r3, [r7, #2]
	led[2] = Led_Get_Arr_Color()[2];
 8000cd6:	f000 f91f 	bl	8000f18 <Led_Get_Arr_Color>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	889b      	ldrh	r3, [r3, #4]
 8000cde:	80bb      	strh	r3, [r7, #4]

	check_sum[0] = CRC_calc((uint32_t *)led, 2);
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f004 f837 	bl	8004d58 <CRC_calc>
 8000cea:	4602      	mov	r2, r0
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <ColorToEEPROM+0x64>)
 8000cee:	601a      	str	r2, [r3, #0]
	I2C2_SendData(0x00, (uint8_t *)Led_Get_Arr_Color(), 6);
 8000cf0:	f000 f912 	bl	8000f18 <Led_Get_Arr_Color>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2206      	movs	r2, #6
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f004 fd52 	bl	80057a4 <I2C2_SendData>
	delay(5);
 8000d00:	2005      	movs	r0, #5
 8000d02:	f004 f855 	bl	8004db0 <delay>
	I2C2_SendData(0x2A, (uint8_t *)check_sum, 4);
 8000d06:	2204      	movs	r2, #4
 8000d08:	4903      	ldr	r1, [pc, #12]	; (8000d18 <ColorToEEPROM+0x64>)
 8000d0a:	202a      	movs	r0, #42	; 0x2a
 8000d0c:	f004 fd4a 	bl	80057a4 <I2C2_SendData>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000288 	.word	0x20000288

08000d1c <setLedI2C>:

void setLedI2C() //load led from EEPROM
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
	uint16_t i2c_led[4] = {0, 0, 0, 0};
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
	uint32_t check_sum[2] = {0};
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]

	I2C2_ReadData(0x00, (uint8_t *)i2c_led, 6);
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2206      	movs	r2, #6
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f004 fd99 	bl	8005874 <I2C2_ReadData>
	delay(5);
 8000d42:	2005      	movs	r0, #5
 8000d44:	f004 f834 	bl	8004db0 <delay>
	I2C2_ReadData(0x2A, (uint8_t *)check_sum, 4);
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	202a      	movs	r0, #42	; 0x2a
 8000d50:	f004 fd90 	bl	8005874 <I2C2_ReadData>

	uint32_t check = CRC_calc((uint32_t *)i2c_led, 2);
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 fffc 	bl	8004d58 <CRC_calc>
 8000d60:	6178      	str	r0, [r7, #20]

	if(check_sum[0] == check)
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d106      	bne.n	8000d78 <setLedI2C+0x5c>
	{
		Led_Set(i2c_led[eRed], i2c_led[eGreen], i2c_led[eBlue]);
 8000d6a:	89bb      	ldrh	r3, [r7, #12]
 8000d6c:	89f9      	ldrh	r1, [r7, #14]
 8000d6e:	8a3a      	ldrh	r2, [r7, #16]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 f859 	bl	8000e28 <Led_Set>
	}
	else Led_Set(0, 0, 0);
}
 8000d76:	e004      	b.n	8000d82 <setLedI2C+0x66>
	else Led_Set(0, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f000 f853 	bl	8000e28 <Led_Set>
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <LDRInit>:
#include "ldr.h"
#include "ldr_driver.h"
#define N 10

void LDRInit(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8000d8e:	f004 ff9d 	bl	8005ccc <MX_ADC1_Init>
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <LDR_Get>:

uint16_t LDR_Get(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
	uint32_t adc = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
	uint16_t adc_value = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	817b      	strh	r3, [r7, #10]

	for(int i = 0; i < N; i++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	e015      	b.n	8000dd8 <LDR_Get+0x40>
	{
		ADC1_Activate();
 8000dac:	f005 f80c 	bl	8005dc8 <ADC1_Activate>
		adc_value = ADC1_Get();
 8000db0:	f005 f846 	bl	8005e40 <ADC1_Get>
 8000db4:	4603      	mov	r3, r0
 8000db6:	817b      	strh	r3, [r7, #10]

		if(adc_value > 4096) // additional overflow protection
 8000db8:	897b      	ldrh	r3, [r7, #10]
 8000dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dbe:	d902      	bls.n	8000dc6 <LDR_Get+0x2e>
		    adc_value = 4096;
 8000dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc4:	817b      	strh	r3, [r7, #10]

		adc += (4096 - adc_value);
 8000dc6:	897b      	ldrh	r3, [r7, #10]
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dd0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < N; i++)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b09      	cmp	r3, #9
 8000ddc:	dde6      	ble.n	8000dac <LDR_Get+0x14>
	}
	adc_value = adc / N;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <LDR_Get+0x5c>)
 8000de2:	fba2 2303 	umull	r2, r3, r2, r3
 8000de6:	08db      	lsrs	r3, r3, #3
 8000de8:	817b      	strh	r3, [r7, #10]

	return adc_value;
 8000dea:	897b      	ldrh	r3, [r7, #10]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	cccccccd 	.word	0xcccccccd

08000df8 <LedInit>:
#include "led_driver.h"

uint16_t led[3] = {0, 0, 0};

void LedInit(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	MX_TIM4_Init();
 8000dfc:	f005 f99c 	bl	8006138 <MX_TIM4_Init>
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <OverflowProtection>:

static uint16_t OverflowProtection(uint16_t value)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
    if(value > 4096)
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e14:	d902      	bls.n	8000e1c <OverflowProtection+0x18>
        return 4096;
 8000e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1a:	e000      	b.n	8000e1e <OverflowProtection+0x1a>
    return value;
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <Led_Set>:

void Led_Set(uint16_t red, uint16_t green, uint16_t blue)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80fb      	strh	r3, [r7, #6]
 8000e32:	460b      	mov	r3, r1
 8000e34:	80bb      	strh	r3, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	807b      	strh	r3, [r7, #2]
	led[0] = OverflowProtection(red);
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ffe1 	bl	8000e04 <OverflowProtection>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <Led_Set+0x4c>)
 8000e48:	801a      	strh	r2, [r3, #0]
	led[1] = OverflowProtection(green);
 8000e4a:	88bb      	ldrh	r3, [r7, #4]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ffd9 	bl	8000e04 <OverflowProtection>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <Led_Set+0x4c>)
 8000e58:	805a      	strh	r2, [r3, #2]
	led[2] = OverflowProtection(blue);
 8000e5a:	887b      	ldrh	r3, [r7, #2]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ffd1 	bl	8000e04 <OverflowProtection>
 8000e62:	4603      	mov	r3, r0
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <Led_Set+0x4c>)
 8000e68:	809a      	strh	r2, [r3, #4]
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000028c 	.word	0x2000028c

08000e78 <Led_Set_Color>:

void Led_Set_Color(color color, uint16_t value)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460a      	mov	r2, r1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	4613      	mov	r3, r2
 8000e86:	80bb      	strh	r3, [r7, #4]
	switch(color)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d00d      	beq.n	8000eaa <Led_Set_Color+0x32>
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d014      	beq.n	8000ebc <Led_Set_Color+0x44>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d000      	beq.n	8000e98 <Led_Set_Color+0x20>
	{
		case eRed: led[0] = OverflowProtection(value); break;
		case eGreen: led[1] = OverflowProtection(value); break;
		case eBlue: led[2] = OverflowProtection(value); break;
		default: break;
 8000e96:	e01a      	b.n	8000ece <Led_Set_Color+0x56>
		case eRed: led[0] = OverflowProtection(value); break;
 8000e98:	88bb      	ldrh	r3, [r7, #4]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ffb2 	bl	8000e04 <OverflowProtection>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <Led_Set_Color+0x60>)
 8000ea6:	801a      	strh	r2, [r3, #0]
 8000ea8:	e011      	b.n	8000ece <Led_Set_Color+0x56>
		case eGreen: led[1] = OverflowProtection(value); break;
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ffa9 	bl	8000e04 <OverflowProtection>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <Led_Set_Color+0x60>)
 8000eb8:	805a      	strh	r2, [r3, #2]
 8000eba:	e008      	b.n	8000ece <Led_Set_Color+0x56>
		case eBlue: led[2] = OverflowProtection(value); break;
 8000ebc:	88bb      	ldrh	r3, [r7, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ffa0 	bl	8000e04 <OverflowProtection>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <Led_Set_Color+0x60>)
 8000eca:	809a      	strh	r2, [r3, #4]
 8000ecc:	bf00      	nop
	}

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000028c 	.word	0x2000028c

08000edc <Led_Get_Color>:

uint16_t Led_Get_Color(color color)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	switch(color)
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d009      	beq.n	8000f00 <Led_Get_Color+0x24>
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d00a      	beq.n	8000f06 <Led_Get_Color+0x2a>
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d002      	beq.n	8000efa <Led_Get_Color+0x1e>
	{
		case eRed: return led[0]; break;
		case eGreen: return led[1]; break;
		case eBlue: return led[2]; break;
		default: break;
 8000ef4:	bf00      	nop
	}
	return 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e007      	b.n	8000f0a <Led_Get_Color+0x2e>
		case eRed: return led[0]; break;
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <Led_Get_Color+0x38>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	e004      	b.n	8000f0a <Led_Get_Color+0x2e>
		case eGreen: return led[1]; break;
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <Led_Get_Color+0x38>)
 8000f02:	885b      	ldrh	r3, [r3, #2]
 8000f04:	e001      	b.n	8000f0a <Led_Get_Color+0x2e>
		case eBlue: return led[2]; break;
 8000f06:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <Led_Get_Color+0x38>)
 8000f08:	889b      	ldrh	r3, [r3, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	2000028c 	.word	0x2000028c

08000f18 <Led_Get_Arr_Color>:

uint16_t * Led_Get_Arr_Color()
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
	return led;
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <Led_Get_Arr_Color+0x10>)
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	2000028c 	.word	0x2000028c

08000f2c <map>:

static uint16_t map(uint16_t value, uint16_t max_value)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	460a      	mov	r2, r1
 8000f36:	80fb      	strh	r3, [r7, #6]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	80bb      	strh	r3, [r7, #4]
	uint16_t map_res = value * max_value / 4096;
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	88ba      	ldrh	r2, [r7, #4]
 8000f40:	fb02 f303 	mul.w	r3, r2, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	da01      	bge.n	8000f4c <map+0x20>
 8000f48:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000f4c:	131b      	asrs	r3, r3, #12
 8000f4e:	81fb      	strh	r3, [r7, #14]

	return map_res;
 8000f50:	89fb      	ldrh	r3, [r7, #14]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <Led_Refresh>:

void Led_Refresh(uint16_t max_value)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
	TIM4_SET_CH1(map(led[0], max_value));
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <Led_Refresh+0x54>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	88fa      	ldrh	r2, [r7, #6]
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ffdc 	bl	8000f2c <map>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f005 f982 	bl	8006280 <TIM4_SET_CH1>
	TIM4_SET_CH2(map(led[1], max_value));
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <Led_Refresh+0x54>)
 8000f7e:	885b      	ldrh	r3, [r3, #2]
 8000f80:	88fa      	ldrh	r2, [r7, #6]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ffd1 	bl	8000f2c <map>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f005 f987 	bl	80062a0 <TIM4_SET_CH2>
	TIM4_SET_CH3(map(led[2], max_value));
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <Led_Refresh+0x54>)
 8000f94:	889b      	ldrh	r3, [r3, #4]
 8000f96:	88fa      	ldrh	r2, [r7, #6]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ffc6 	bl	8000f2c <map>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f005 f98c 	bl	80062c0 <TIM4_SET_CH3>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000028c 	.word	0x2000028c

08000fb4 <CONFIG>:
const char statusOK_CL0[] = {"HTTP/1.1 200 OK\r\nConnection: Keep-Alive\r\nContent-Type: text/html\r\nContent-Length: 0"};

const char statusNOTFOUND[] = {"HTTP/1.1 404 Not Found"};

void CONFIG()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
	char ContentLength[23];
	ESP_SendConstData(statusOK, strlen(statusOK), 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2140      	movs	r1, #64	; 0x40
 8000fbe:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <CONFIG+0x44>)
 8000fc0:	f7ff faf0 	bl	80005a4 <ESP_SendConstData>

	int length = strlen(htmlconfig);
 8000fc4:	f240 23de 	movw	r3, #734	; 0x2de
 8000fc8:	61fb      	str	r3, [r7, #28]
	sprintf(ContentLength, "Content-Length: %04d\r\n", length);
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	69fa      	ldr	r2, [r7, #28]
 8000fce:	490b      	ldr	r1, [pc, #44]	; (8000ffc <CONFIG+0x48>)
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f006 fa3f 	bl	8007454 <siprintf>
	ESP_SendConstData(ContentLength, 22, 1);
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2116      	movs	r1, #22
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fae1 	bl	80005a4 <ESP_SendConstData>
	ESP_SendConstData(htmlconfig, strlen(htmlconfig), 1);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f240 21de 	movw	r1, #734	; 0x2de
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <CONFIG+0x4c>)
 8000fea:	f7ff fadb 	bl	80005a4 <ESP_SendConstData>
}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	080084b8 	.word	0x080084b8
 8000ffc:	08007fa4 	.word	0x08007fa4
 8001000:	080081d8 	.word	0x080081d8

08001004 <CONFIG_parse>:

void CONFIG_parse()
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	; 0x50
 8001008:	af00      	add	r7, sp, #0
	char * search;
	char ssid_temp[32], paswd_temp[32];
	memset(ssid_temp, 0, 32);
 800100a:	f107 0320 	add.w	r3, r7, #32
 800100e:	2220      	movs	r2, #32
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f006 fa15 	bl	8007442 <memset>
	memset(paswd_temp, 0, 32);
 8001018:	463b      	mov	r3, r7
 800101a:	2220      	movs	r2, #32
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f006 fa0f 	bl	8007442 <memset>

	search = strstr(ESP_GetAnswer(), "ssid=");
 8001024:	f7ff fb26 	bl	8000674 <ESP_GetAnswer>
 8001028:	4603      	mov	r3, r0
 800102a:	493f      	ldr	r1, [pc, #252]	; (8001128 <CONFIG_parse+0x124>)
 800102c:	4618      	mov	r0, r3
 800102e:	f006 fa35 	bl	800749c <strstr>
 8001032:	6438      	str	r0, [r7, #64]	; 0x40
	if(search != NULL)
 8001034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001036:	2b00      	cmp	r3, #0
 8001038:	d03e      	beq.n	80010b8 <CONFIG_parse+0xb4>
	{
		search += 5;
 800103a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800103c:	3305      	adds	r3, #5
 800103e:	643b      	str	r3, [r7, #64]	; 0x40
		for(int i = 0, l = 0; i < 32; i++, l++)
 8001040:	2300      	movs	r3, #0
 8001042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001044:	2300      	movs	r3, #0
 8001046:	64bb      	str	r3, [r7, #72]	; 0x48
 8001048:	e031      	b.n	80010ae <CONFIG_parse+0xaa>
		{
			if(search[i] == '&')
 800104a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800104c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800104e:	4413      	add	r3, r2
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b26      	cmp	r3, #38	; 0x26
 8001054:	d02f      	beq.n	80010b6 <CONFIG_parse+0xb2>
			{
				break;
			}
			if(search[i] == '%' && search[i+1] == '3' && search[i+2] == 'F') // search space code and replace by space
 8001056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001058:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b25      	cmp	r3, #37	; 0x25
 8001060:	d115      	bne.n	800108e <CONFIG_parse+0x8a>
 8001062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001064:	3301      	adds	r3, #1
 8001066:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001068:	4413      	add	r3, r2
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b33      	cmp	r3, #51	; 0x33
 800106e:	d10e      	bne.n	800108e <CONFIG_parse+0x8a>
 8001070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001072:	3302      	adds	r3, #2
 8001074:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001076:	4413      	add	r3, r2
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b46      	cmp	r3, #70	; 0x46
 800107c:	d107      	bne.n	800108e <CONFIG_parse+0x8a>
			{
				i += 2;
 800107e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001080:	3302      	adds	r3, #2
 8001082:	64fb      	str	r3, [r7, #76]	; 0x4c
				search[i] = ' ';
 8001084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001088:	4413      	add	r3, r2
 800108a:	2220      	movs	r2, #32
 800108c:	701a      	strb	r2, [r3, #0]
			}

			ssid_temp[l] = search[i];
 800108e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001090:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001092:	4413      	add	r3, r2
 8001094:	7819      	ldrb	r1, [r3, #0]
 8001096:	f107 0220 	add.w	r2, r7, #32
 800109a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800109c:	4413      	add	r3, r2
 800109e:	460a      	mov	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
		for(int i = 0, l = 0; i < 32; i++, l++)
 80010a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010a4:	3301      	adds	r3, #1
 80010a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010aa:	3301      	adds	r3, #1
 80010ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80010ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010b0:	2b1f      	cmp	r3, #31
 80010b2:	ddca      	ble.n	800104a <CONFIG_parse+0x46>
 80010b4:	e000      	b.n	80010b8 <CONFIG_parse+0xb4>
				break;
 80010b6:	bf00      	nop
		}
	}
	SetSSID(ssid_temp);
 80010b8:	f107 0320 	add.w	r3, r7, #32
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fae3 	bl	8000688 <SetSSID>

	search = strstr(ESP_GetAnswer(), "paswd=");
 80010c2:	f7ff fad7 	bl	8000674 <ESP_GetAnswer>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4918      	ldr	r1, [pc, #96]	; (800112c <CONFIG_parse+0x128>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f006 f9e6 	bl	800749c <strstr>
 80010d0:	6438      	str	r0, [r7, #64]	; 0x40
	if(search != NULL)
 80010d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d020      	beq.n	800111a <CONFIG_parse+0x116>
	{
		search += 6;
 80010d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010da:	3306      	adds	r3, #6
 80010dc:	643b      	str	r3, [r7, #64]	; 0x40
		for(int i = 0; i < 32; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	647b      	str	r3, [r7, #68]	; 0x44
 80010e2:	e011      	b.n	8001108 <CONFIG_parse+0x104>
		{
			if(search[i] == '&')
 80010e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010e8:	4413      	add	r3, r2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b26      	cmp	r3, #38	; 0x26
 80010ee:	d00f      	beq.n	8001110 <CONFIG_parse+0x10c>
			{
				break;
			}
			paswd_temp[i] = search[i];
 80010f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010f4:	4413      	add	r3, r2
 80010f6:	7819      	ldrb	r1, [r3, #0]
 80010f8:	463a      	mov	r2, r7
 80010fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010fc:	4413      	add	r3, r2
 80010fe:	460a      	mov	r2, r1
 8001100:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++)
 8001102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001104:	3301      	adds	r3, #1
 8001106:	647b      	str	r3, [r7, #68]	; 0x44
 8001108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800110a:	2b1f      	cmp	r3, #31
 800110c:	ddea      	ble.n	80010e4 <CONFIG_parse+0xe0>
 800110e:	e000      	b.n	8001112 <CONFIG_parse+0x10e>
				break;
 8001110:	bf00      	nop
		}

		SetPASWD(paswd_temp);
 8001112:	463b      	mov	r3, r7
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fadf 	bl	80006d8 <SetPASWD>
	}
	CONFIG();
 800111a:	f7ff ff4b 	bl	8000fb4 <CONFIG>
	//ESP_SendConstData(statusOK_CL0, strlen(statusOK_CL0), 1);
}
 800111e:	bf00      	nop
 8001120:	3750      	adds	r7, #80	; 0x50
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	08007fbc 	.word	0x08007fbc
 800112c:	08007fc4 	.word	0x08007fc4

08001130 <PICKER>:

void PICKER()
{
 8001130:	b5b0      	push	{r4, r5, r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af02      	add	r7, sp, #8
	char hex[7], ContentLength[23];
	hex[6] = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	ESP_SendConstData(statusOK, strlen(statusOK), 1);
 800113c:	2201      	movs	r2, #1
 800113e:	2140      	movs	r1, #64	; 0x40
 8001140:	482c      	ldr	r0, [pc, #176]	; (80011f4 <PICKER+0xc4>)
 8001142:	f7ff fa2f 	bl	80005a4 <ESP_SendConstData>

	int length = strlen(htmlpicker1) + strlen(htmlpicker2) + 6;
 8001146:	f240 139b 	movw	r3, #411	; 0x19b
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(ContentLength, "Content-Length: %04d\r\n", length);
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001150:	4929      	ldr	r1, [pc, #164]	; (80011f8 <PICKER+0xc8>)
 8001152:	4618      	mov	r0, r3
 8001154:	f006 f97e 	bl	8007454 <siprintf>
	ESP_SendConstData(ContentLength, 22, 1);
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2201      	movs	r2, #1
 800115c:	2116      	movs	r1, #22
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fa20 	bl	80005a4 <ESP_SendConstData>

	sprintf(hex, "%02x%02x%02x", Led_Get_Color(eRed)*255/4096, Led_Get_Color(eGreen)*255/4096, Led_Get_Color(eBlue)*255/4096);
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff feb9 	bl	8000edc <Led_Get_Color>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	4613      	mov	r3, r2
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	1a9b      	subs	r3, r3, r2
 8001174:	2b00      	cmp	r3, #0
 8001176:	da01      	bge.n	800117c <PICKER+0x4c>
 8001178:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800117c:	131b      	asrs	r3, r3, #12
 800117e:	461c      	mov	r4, r3
 8001180:	2001      	movs	r0, #1
 8001182:	f7ff feab 	bl	8000edc <Led_Get_Color>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	4613      	mov	r3, r2
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	1a9b      	subs	r3, r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	da01      	bge.n	8001198 <PICKER+0x68>
 8001194:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001198:	131b      	asrs	r3, r3, #12
 800119a:	461d      	mov	r5, r3
 800119c:	2002      	movs	r0, #2
 800119e:	f7ff fe9d 	bl	8000edc <Led_Get_Color>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	4613      	mov	r3, r2
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	1a9b      	subs	r3, r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	da01      	bge.n	80011b4 <PICKER+0x84>
 80011b0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80011b4:	131b      	asrs	r3, r3, #12
 80011b6:	f107 001c 	add.w	r0, r7, #28
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	462b      	mov	r3, r5
 80011be:	4622      	mov	r2, r4
 80011c0:	490e      	ldr	r1, [pc, #56]	; (80011fc <PICKER+0xcc>)
 80011c2:	f006 f947 	bl	8007454 <siprintf>

	ESP_SendConstData(htmlpicker1, strlen(htmlpicker1), 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <PICKER+0xd0>)
 80011ce:	f7ff f9e9 	bl	80005a4 <ESP_SendConstData>
	ESP_SendConstData(hex, 6, 0);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	2200      	movs	r2, #0
 80011d8:	2106      	movs	r1, #6
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9e2 	bl	80005a4 <ESP_SendConstData>
	ESP_SendConstData(htmlpicker2, strlen(htmlpicker2), 1);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2167      	movs	r1, #103	; 0x67
 80011e4:	4807      	ldr	r0, [pc, #28]	; (8001204 <PICKER+0xd4>)
 80011e6:	f7ff f9dd 	bl	80005a4 <ESP_SendConstData>
}
 80011ea:	bf00      	nop
 80011ec:	3728      	adds	r7, #40	; 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bdb0      	pop	{r4, r5, r7, pc}
 80011f2:	bf00      	nop
 80011f4:	080084b8 	.word	0x080084b8
 80011f8:	08007fa4 	.word	0x08007fa4
 80011fc:	08007fcc 	.word	0x08007fcc
 8001200:	08008040 	.word	0x08008040
 8001204:	08008170 	.word	0x08008170

08001208 <PickerParseLed>:

void PickerParseLed()
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
	char * search;
	search = strstr(ESP_GetAnswer(), "picker=#");
 800120e:	f7ff fa31 	bl	8000674 <ESP_GetAnswer>
 8001212:	4603      	mov	r3, r0
 8001214:	4935      	ldr	r1, [pc, #212]	; (80012ec <PickerParseLed+0xe4>)
 8001216:	4618      	mov	r0, r3
 8001218:	f006 f940 	bl	800749c <strstr>
 800121c:	6178      	str	r0, [r7, #20]
	if(search != NULL)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d05f      	beq.n	80012e4 <PickerParseLed+0xdc>
	{
		char hex[3];
		hex[2] = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	73bb      	strb	r3, [r7, #14]
		uint16_t colors[3] = {0, 0, 0};
 8001228:	2300      	movs	r3, #0
 800122a:	80bb      	strh	r3, [r7, #4]
 800122c:	2300      	movs	r3, #0
 800122e:	80fb      	strh	r3, [r7, #6]
 8001230:	2300      	movs	r3, #0
 8001232:	813b      	strh	r3, [r7, #8]
		for(int i = 0, l = 0; i < 6; i += 2, l++)
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	e02e      	b.n	800129c <PickerParseLed+0x94>
		{
			int position = search - ESP_GetAnswer() + 8 + i;
 800123e:	697c      	ldr	r4, [r7, #20]
 8001240:	f7ff fa18 	bl	8000674 <ESP_GetAnswer>
 8001244:	4603      	mov	r3, r0
 8001246:	1ae3      	subs	r3, r4, r3
 8001248:	f103 0208 	add.w	r2, r3, #8
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	4413      	add	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
			hex[0] = ESP_GetAnswer()[position];
 8001252:	f7ff fa0f 	bl	8000674 <ESP_GetAnswer>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4413      	add	r3, r2
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	733b      	strb	r3, [r7, #12]
			hex[1] = ESP_GetAnswer()[position + 1];
 8001260:	f7ff fa08 	bl	8000674 <ESP_GetAnswer>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	3301      	adds	r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	737b      	strb	r3, [r7, #13]
			colors[l] = strtol(hex, NULL, 16);
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2210      	movs	r2, #16
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f006 f9ab 	bl	80075d4 <strtol>
 800127e:	4603      	mov	r3, r0
 8001280:	b29a      	uxth	r2, r3
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	f107 0120 	add.w	r1, r7, #32
 800128a:	440b      	add	r3, r1
 800128c:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for(int i = 0, l = 0; i < 6; i += 2, l++)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	3302      	adds	r3, #2
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	3301      	adds	r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	2b05      	cmp	r3, #5
 80012a0:	ddcd      	ble.n	800123e <PickerParseLed+0x36>
		}
		Led_Set(colors[0]*4096/255, colors[1]*4096/255, colors[2]*4096/255);
 80012a2:	88bb      	ldrh	r3, [r7, #4]
 80012a4:	031b      	lsls	r3, r3, #12
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <PickerParseLed+0xe8>)
 80012a8:	fb82 1203 	smull	r1, r2, r2, r3
 80012ac:	441a      	add	r2, r3
 80012ae:	11d2      	asrs	r2, r2, #7
 80012b0:	17db      	asrs	r3, r3, #31
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	b298      	uxth	r0, r3
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	031b      	lsls	r3, r3, #12
 80012ba:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <PickerParseLed+0xe8>)
 80012bc:	fb82 1203 	smull	r1, r2, r2, r3
 80012c0:	441a      	add	r2, r3
 80012c2:	11d2      	asrs	r2, r2, #7
 80012c4:	17db      	asrs	r3, r3, #31
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	b299      	uxth	r1, r3
 80012ca:	893b      	ldrh	r3, [r7, #8]
 80012cc:	031b      	lsls	r3, r3, #12
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <PickerParseLed+0xe8>)
 80012d0:	fb82 4203 	smull	r4, r2, r2, r3
 80012d4:	441a      	add	r2, r3
 80012d6:	11d2      	asrs	r2, r2, #7
 80012d8:	17db      	asrs	r3, r3, #31
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	f7ff fda2 	bl	8000e28 <Led_Set>
	}
}
 80012e4:	bf00      	nop
 80012e6:	3724      	adds	r7, #36	; 0x24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	08007fdc 	.word	0x08007fdc
 80012f0:	80808081 	.word	0x80808081

080012f4 <PICKER_parse>:

void PICKER_parse()
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	PickerParseLed();
 80012f8:	f7ff ff86 	bl	8001208 <PickerParseLed>
	//ColorToEEPROM();
	display();
 80012fc:	f7ff fb78 	bl	80009f0 <display>
	PICKER();
 8001300:	f7ff ff16 	bl	8001130 <PICKER>
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <requestConstFind>:

uint8_t requestConstFind(const char * key)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	if(strstr(ESP_GetAnswer(), key) != NULL)
 8001310:	f7ff f9b0 	bl	8000674 <ESP_GetAnswer>
 8001314:	4603      	mov	r3, r0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	f006 f8bf 	bl	800749c <strstr>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <requestConstFind+0x20>
	{
		return 1;
 8001324:	2301      	movs	r3, #1
 8001326:	e001      	b.n	800132c <requestConstFind+0x24>
	}
	else asm("NOP");
 8001328:	bf00      	nop
	return 0;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <ESP_Request>:


void ESP_Request(const char ** pages, const function_pointer * functions, uint8_t number)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	4613      	mov	r3, r2
 8001340:	71fb      	strb	r3, [r7, #7]
	uint8_t linkID = requestRefresh(); //parse request for id, URL, post data
 8001342:	f7ff f8af 	bl	80004a4 <requestRefresh>
 8001346:	4603      	mov	r3, r0
 8001348:	74fb      	strb	r3, [r7, #19]
	SetLinkID(linkID);
 800134a:	7cfb      	ldrb	r3, [r7, #19]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f981 	bl	8000654 <SetLinkID>

	if(linkID >= 0 && linkID < 5)
 8001352:	7cfb      	ldrb	r3, [r7, #19]
 8001354:	2b04      	cmp	r3, #4
 8001356:	d82d      	bhi.n	80013b4 <ESP_Request+0x80>
	{
		if(pages != NULL
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d020      	beq.n	80013a0 <ESP_Request+0x6c>
	       && functions != NULL)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d01d      	beq.n	80013a0 <ESP_Request+0x6c>
		{
			for(int i = 0; i < number; i++)
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	e016      	b.n	8001398 <ESP_Request+0x64>
			{
				if(requestConstFind(pages[i]))
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	4413      	add	r3, r2
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ffc7 	bl	8001308 <requestConstFind>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d008      	beq.n	8001392 <ESP_Request+0x5e>
				{
					functions[i]();
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	4413      	add	r3, r2
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4798      	blx	r3
					RingBuff_Clear();
 800138c:	f000 f87e 	bl	800148c <RingBuff_Clear>
					return;
 8001390:	e010      	b.n	80013b4 <ESP_Request+0x80>
			for(int i = 0; i < number; i++)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	79fa      	ldrb	r2, [r7, #7]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	dce4      	bgt.n	800136a <ESP_Request+0x36>
				}
			}
		}
		ESP_SendConstData(statusNOTFOUND, strlen(statusNOTFOUND), 1);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2116      	movs	r1, #22
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <ESP_Request+0x88>)
 80013a6:	f7ff f8fd 	bl	80005a4 <ESP_SendConstData>
		ESP_SendConstData(statusOK_CL0, strlen(statusOK_CL0), 1);
 80013aa:	2201      	movs	r2, #1
 80013ac:	2153      	movs	r1, #83	; 0x53
 80013ae:	4804      	ldr	r0, [pc, #16]	; (80013c0 <ESP_Request+0x8c>)
 80013b0:	f7ff f8f8 	bl	80005a4 <ESP_SendConstData>
	}
}
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	08008550 	.word	0x08008550
 80013c0:	080084fc 	.word	0x080084fc

080013c4 <RingBuff_Init>:

uint16_t index_in, index_out;
char buffer[BUF_SIZE];

void RingBuff_Init()
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
	index_in = index_out = 0;
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <RingBuff_Init+0x1c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	801a      	strh	r2, [r3, #0]
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <RingBuff_Init+0x1c>)
 80013d0:	881a      	ldrh	r2, [r3, #0]
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <RingBuff_Init+0x20>)
 80013d4:	801a      	strh	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20002c48 	.word	0x20002c48
 80013e4:	2000304c 	.word	0x2000304c

080013e8 <RingBuff_Push>:

void RingBuff_Push(char element)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
	buffer[index_in++] = element;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <RingBuff_Push+0x38>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	b291      	uxth	r1, r2
 80013fa:	4a09      	ldr	r2, [pc, #36]	; (8001420 <RingBuff_Push+0x38>)
 80013fc:	8011      	strh	r1, [r2, #0]
 80013fe:	4619      	mov	r1, r3
 8001400:	4a08      	ldr	r2, [pc, #32]	; (8001424 <RingBuff_Push+0x3c>)
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	5453      	strb	r3, [r2, r1]
	index_in &= BUF_MASK;
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <RingBuff_Push+0x38>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <RingBuff_Push+0x38>)
 8001412:	801a      	strh	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	2000304c 	.word	0x2000304c
 8001424:	20002c4c 	.word	0x20002c4c

08001428 <RingBuff_Pop>:

char RingBuff_Pop()
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
	char element = buffer[index_out++];
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <RingBuff_Pop+0x34>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	b291      	uxth	r1, r2
 8001436:	4a09      	ldr	r2, [pc, #36]	; (800145c <RingBuff_Pop+0x34>)
 8001438:	8011      	strh	r1, [r2, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <RingBuff_Pop+0x38>)
 800143e:	5c9b      	ldrb	r3, [r3, r2]
 8001440:	71fb      	strb	r3, [r7, #7]
	index_out &= BUF_MASK;
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <RingBuff_Pop+0x34>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800144a:	b29a      	uxth	r2, r3
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <RingBuff_Pop+0x34>)
 800144e:	801a      	strh	r2, [r3, #0]
	return element;
 8001450:	79fb      	ldrb	r3, [r7, #7]
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	20002c48 	.word	0x20002c48
 8001460:	20002c4c 	.word	0x20002c4c

08001464 <RingBuff_IsEmpty>:

uint8_t RingBuff_IsEmpty()
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	if (index_in == index_out)
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <RingBuff_IsEmpty+0x20>)
 800146a:	881a      	ldrh	r2, [r3, #0]
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <RingBuff_IsEmpty+0x24>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d101      	bne.n	8001478 <RingBuff_IsEmpty+0x14>
		return 1;
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <RingBuff_IsEmpty+0x16>
	return 0;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	2000304c 	.word	0x2000304c
 8001488:	20002c48 	.word	0x20002c48

0800148c <RingBuff_Clear>:

void RingBuff_Clear()
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
	index_out = index_in = 0;
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <RingBuff_Clear+0x1c>)
 8001492:	2200      	movs	r2, #0
 8001494:	801a      	strh	r2, [r3, #0]
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <RingBuff_Clear+0x1c>)
 8001498:	881a      	ldrh	r2, [r3, #0]
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <RingBuff_Clear+0x20>)
 800149c:	801a      	strh	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	2000304c 	.word	0x2000304c
 80014ac:	20002c48 	.word	0x20002c48

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b4:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_Init+0x28>)
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_Init+0x28>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f043 0310 	orr.w	r3, r3, #16
 80014be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f000 f8c1 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c6:	2000      	movs	r0, #0
 80014c8:	f005 fe88 	bl	80071dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014cc:	f005 fe4e 	bl	800716c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40022000 	.word	0x40022000

080014dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_IncTick+0x1c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_IncTick+0x20>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	4a03      	ldr	r2, [pc, #12]	; (80014fc <HAL_IncTick+0x20>)
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	20000088 	.word	0x20000088
 80014fc:	20003050 	.word	0x20003050

08001500 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <NVIC_SetPriorityGrouping+0x44>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800152c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001532:	4a04      	ldr	r2, [pc, #16]	; (8001544 <NVIC_SetPriorityGrouping+0x44>)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	60d3      	str	r3, [r2, #12]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800156e:	4908      	ldr	r1, [pc, #32]	; (8001590 <NVIC_EnableIRQ+0x2c>)
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	095b      	lsrs	r3, r3, #5
 8001576:	79fa      	ldrb	r2, [r7, #7]
 8001578:	f002 021f 	and.w	r2, r2, #31
 800157c:	2001      	movs	r0, #1
 800157e:	fa00 f202 	lsl.w	r2, r0, r2
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100

08001594 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da0b      	bge.n	80015c0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	490d      	ldr	r1, [pc, #52]	; (80015e0 <NVIC_SetPriority+0x4c>)
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 030f 	and.w	r3, r3, #15
 80015b0:	3b04      	subs	r3, #4
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015be:	e009      	b.n	80015d4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c0:	4908      	ldr	r1, [pc, #32]	; (80015e4 <NVIC_SetPriority+0x50>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	0112      	lsls	r2, r2, #4
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	440b      	add	r3, r1
 80015d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	2201      	movs	r2, #1
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	1e5a      	subs	r2, r3, #1
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	401a      	ands	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162e:	2101      	movs	r1, #1
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	1e59      	subs	r1, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff55 	bl	8001500 <NVIC_SetPriorityGrouping>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001670:	f7ff ff6a 	bl	8001548 <NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ffb4 	bl	80015e8 <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff83 	bl	8001594 <NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff5d 	bl	8001564 <NVIC_EnableIRQ>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016b8:	4b02      	ldr	r3, [pc, #8]	; (80016c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016ba:	681b      	ldr	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	20000094 	.word	0x20000094

080016c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016cc:	f7ff fff2 	bl	80016b4 <HAL_RCC_GetHCLKFreq>
 80016d0:	4601      	mov	r1, r0
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	0adb      	lsrs	r3, r3, #11
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	4a03      	ldr	r2, [pc, #12]	; (80016ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80016e4:	4618      	mov	r0, r3
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000
 80016ec:	08008588 	.word	0x08008588

080016f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	220f      	movs	r2, #15
 80016fe:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_RCC_GetClockConfig+0x58>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0203 	and.w	r2, r3, #3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800170c:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_RCC_GetClockConfig+0x58>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_GetClockConfig+0x58>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_RCC_GetClockConfig+0x58>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	611a      	str	r2, [r3, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_RCC_GetClockConfig+0x5c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0207 	and.w	r2, r3, #7
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	40021000 	.word	0x40021000
 800174c:	40022000 	.word	0x40022000

08001750 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e01d      	b.n	800179e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d106      	bne.n	800177c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f815 	bl	80017a6 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3304      	adds	r3, #4
 800178c:	4619      	mov	r1, r3
 800178e:	4610      	mov	r0, r2
 8001790:	f000 f958 	bl	8001a44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	68d2      	ldr	r2, [r2, #12]
 80017ca:	f042 0201 	orr.w	r2, r2, #1
 80017ce:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d122      	bne.n	8001848 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b02      	cmp	r3, #2
 800180e:	d11b      	bne.n	8001848 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f06f 0202 	mvn.w	r2, #2
 8001818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f8ed 	bl	8001a0e <HAL_TIM_IC_CaptureCallback>
 8001834:	e005      	b.n	8001842 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f8e0 	bl	80019fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f8ef 	bl	8001a20 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b04      	cmp	r3, #4
 8001854:	d122      	bne.n	800189c <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b04      	cmp	r3, #4
 8001862:	d11b      	bne.n	800189c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f06f 0204 	mvn.w	r2, #4
 800186c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2202      	movs	r2, #2
 8001872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f8c3 	bl	8001a0e <HAL_TIM_IC_CaptureCallback>
 8001888:	e005      	b.n	8001896 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f8b6 	bl	80019fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f8c5 	bl	8001a20 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d122      	bne.n	80018f0 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d11b      	bne.n	80018f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f06f 0208 	mvn.w	r2, #8
 80018c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2204      	movs	r2, #4
 80018c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f899 	bl	8001a0e <HAL_TIM_IC_CaptureCallback>
 80018dc:	e005      	b.n	80018ea <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f88c 	bl	80019fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f89b 	bl	8001a20 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	2b10      	cmp	r3, #16
 80018fc:	d122      	bne.n	8001944 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	2b10      	cmp	r3, #16
 800190a:	d11b      	bne.n	8001944 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f06f 0210 	mvn.w	r2, #16
 8001914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2208      	movs	r2, #8
 800191a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f86f 	bl	8001a0e <HAL_TIM_IC_CaptureCallback>
 8001930:	e005      	b.n	800193e <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f862 	bl	80019fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f871 	bl	8001a20 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b01      	cmp	r3, #1
 8001950:	d10e      	bne.n	8001970 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b01      	cmp	r3, #1
 800195e:	d107      	bne.n	8001970 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f06f 0201 	mvn.w	r2, #1
 8001968:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f005 fbe6 	bl	800713c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197a:	2b80      	cmp	r3, #128	; 0x80
 800197c:	d10e      	bne.n	800199c <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001988:	2b80      	cmp	r3, #128	; 0x80
 800198a:	d107      	bne.n	800199c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001994:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f8c3 	bl	8001b22 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a6:	2b40      	cmp	r3, #64	; 0x40
 80019a8:	d10e      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b4:	2b40      	cmp	r3, #64	; 0x40
 80019b6:	d107      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f835 	bl	8001a32 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	2b20      	cmp	r3, #32
 80019d4:	d10e      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	2b20      	cmp	r3, #32
 80019e2:	d107      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 0220 	mvn.w	r2, #32
 80019ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f88e 	bl	8001b10 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a2a      	ldr	r2, [pc, #168]	; (8001b04 <TIM_Base_SetConfig+0xc0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00b      	beq.n	8001a78 <TIM_Base_SetConfig+0x34>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a66:	d007      	beq.n	8001a78 <TIM_Base_SetConfig+0x34>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a27      	ldr	r2, [pc, #156]	; (8001b08 <TIM_Base_SetConfig+0xc4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d003      	beq.n	8001a78 <TIM_Base_SetConfig+0x34>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a26      	ldr	r2, [pc, #152]	; (8001b0c <TIM_Base_SetConfig+0xc8>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d108      	bne.n	8001a8a <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <TIM_Base_SetConfig+0xc0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00b      	beq.n	8001aaa <TIM_Base_SetConfig+0x66>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a98:	d007      	beq.n	8001aaa <TIM_Base_SetConfig+0x66>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a1a      	ldr	r2, [pc, #104]	; (8001b08 <TIM_Base_SetConfig+0xc4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d003      	beq.n	8001aaa <TIM_Base_SetConfig+0x66>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a19      	ldr	r2, [pc, #100]	; (8001b0c <TIM_Base_SetConfig+0xc8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d108      	bne.n	8001abc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ac2:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <TIM_Base_SetConfig+0xc0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d103      	bne.n	8001af4 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	615a      	str	r2, [r3, #20]
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	40012c00 	.word	0x40012c00
 8001b08:	40000400 	.word	0x40000400
 8001b0c:	40000800 	.word	0x40000800

08001b10 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	bf0c      	ite	eq
 8001b6c:	2301      	moveq	r3, #1
 8001b6e:	2300      	movne	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001b86:	2301      	movs	r3, #1
 8001b88:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8001b8a:	4813      	ldr	r0, [pc, #76]	; (8001bd8 <LL_ADC_CommonInit+0x5c>)
 8001b8c:	f7ff ffe4 	bl	8001b58 <LL_ADC_IsEnabled>
 8001b90:	4604      	mov	r4, r0
 8001b92:	4812      	ldr	r0, [pc, #72]	; (8001bdc <LL_ADC_CommonInit+0x60>)
 8001b94:	f7ff ffe0 	bl	8001b58 <LL_ADC_IsEnabled>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4323      	orrs	r3, r4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d114      	bne.n	8001bca <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d009      	beq.n	8001bbc <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	e008      	b.n	8001bce <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	e001      	b.n	8001bce <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd90      	pop	{r4, r7, pc}
 8001bd8:	40012400 	.word	0x40012400
 8001bdc:	40012800 	.word	0x40012800

08001be0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001bea:	2301      	movs	r3, #1
 8001bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffb2 	bl	8001b58 <LL_ADC_IsEnabled>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d112      	bne.n	8001c20 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	e001      	b.n	8001c24 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ff8b 	bl	8001b58 <LL_ADC_IsEnabled>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d131      	bne.n	8001cac <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00c      	beq.n	8001c6a <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	430b      	orrs	r3, r1
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	e008      	b.n	8001c7c <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8001c84:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	6811      	ldr	r1, [r2, #0]
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	68d2      	ldr	r2, [r2, #12]
 8001c90:	4311      	orrs	r1, r2
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	6912      	ldr	r2, [r2, #16]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ff45 	bl	8001b34 <LL_ADC_REG_SetSequencerLength>
 8001caa:	e001      	b.n	8001cb0 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001cac:	2300      	movs	r3, #0
 8001cae:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001cc4:	4905      	ldr	r1, [pc, #20]	; (8001cdc <LL_EXTI_EnableIT_0_31+0x20>)
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <LL_EXTI_EnableIT_0_31+0x20>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40010400 	.word	0x40010400

08001ce0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001ce8:	4905      	ldr	r1, [pc, #20]	; (8001d00 <LL_EXTI_DisableIT_0_31+0x20>)
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <LL_EXTI_DisableIT_0_31+0x20>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	40010400 	.word	0x40010400

08001d04 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001d0c:	4905      	ldr	r1, [pc, #20]	; (8001d24 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]

}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40010400 	.word	0x40010400

08001d28 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001d30:	4905      	ldr	r1, [pc, #20]	; (8001d48 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	40010400 	.word	0x40010400

08001d4c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001d54:	4905      	ldr	r1, [pc, #20]	; (8001d6c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]

}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40010400 	.word	0x40010400

08001d70 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001d78:	4905      	ldr	r1, [pc, #20]	; (8001d90 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	4013      	ands	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]

}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	40010400 	.word	0x40010400

08001d94 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001d9c:	4905      	ldr	r1, [pc, #20]	; (8001db4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60cb      	str	r3, [r1, #12]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40010400 	.word	0x40010400

08001db8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001dc0:	4905      	ldr	r1, [pc, #20]	; (8001dd8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4013      	ands	r3, r2
 8001dcc:	60cb      	str	r3, [r1, #12]
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	40010400 	.word	0x40010400

08001ddc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	791b      	ldrb	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d060      	beq.n	8001eb2 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d066      	beq.n	8001ec6 <LL_EXTI_Init+0xea>
    {
      switch (EXTI_InitStruct->Mode)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	795b      	ldrb	r3, [r3, #5]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d00e      	beq.n	8001e1e <LL_EXTI_Init+0x42>
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d017      	beq.n	8001e34 <LL_EXTI_Init+0x58>
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d120      	bne.n	8001e4a <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff8b 	bl	8001d28 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff50 	bl	8001cbc <LL_EXTI_EnableIT_0_31>
          break;
 8001e1c:	e018      	b.n	8001e50 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ff5c 	bl	8001ce0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff69 	bl	8001d04 <LL_EXTI_EnableEvent_0_31>
          break;
 8001e32:	e00d      	b.n	8001e50 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff3f 	bl	8001cbc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff5e 	bl	8001d04 <LL_EXTI_EnableEvent_0_31>
          break;
 8001e48:	e002      	b.n	8001e50 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]
          break;
 8001e4e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	799b      	ldrb	r3, [r3, #6]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d036      	beq.n	8001ec6 <LL_EXTI_Init+0xea>
      {
        switch (EXTI_InitStruct->Trigger)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	799b      	ldrb	r3, [r3, #6]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d00e      	beq.n	8001e7e <LL_EXTI_Init+0xa2>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d017      	beq.n	8001e94 <LL_EXTI_Init+0xb8>
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d120      	bne.n	8001eaa <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ffa3 	bl	8001db8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff68 	bl	8001d4c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001e7c:	e023      	b.n	8001ec6 <LL_EXTI_Init+0xea>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff74 	bl	8001d70 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff81 	bl	8001d94 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001e92:	e018      	b.n	8001ec6 <LL_EXTI_Init+0xea>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff57 	bl	8001d4c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff76 	bl	8001d94 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001ea8:	e00d      	b.n	8001ec6 <LL_EXTI_Init+0xea>
          default:
            status = ERROR;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	73fb      	strb	r3, [r7, #15]
            break;
 8001eae:	bf00      	nop
 8001eb0:	e009      	b.n	8001ec6 <LL_EXTI_Init+0xea>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff12 	bl	8001ce0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff31 	bl	8001d28 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001ed0:	b490      	push	{r4, r7}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	0e1b      	lsrs	r3, r3, #24
 8001ee4:	4413      	add	r3, r2
 8001ee6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001ee8:	6822      	ldr	r2, [r4, #0]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	fab3 f383 	clz	r3, r3
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	210f      	movs	r1, #15
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	401a      	ands	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	61bb      	str	r3, [r7, #24]
  return(result);
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	4313      	orrs	r3, r2
 8001f24:	6023      	str	r3, [r4, #0]
}
 8001f26:	bf00      	nop
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc90      	pop	{r4, r7}
 8001f2e:	4770      	bx	lr

08001f30 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001f30:	b490      	push	{r4, r7}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	0e1b      	lsrs	r3, r3, #24
 8001f44:	4413      	add	r3, r2
 8001f46:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001f48:	6822      	ldr	r2, [r4, #0]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	613b      	str	r3, [r7, #16]
  return(result);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	2103      	movs	r1, #3
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	401a      	ands	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	61bb      	str	r3, [r7, #24]
  return(result);
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	4313      	orrs	r3, r2
 8001f84:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8001f86:	bf00      	nop
 8001f88:	3720      	adds	r7, #32
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc90      	pop	{r4, r7}
 8001f8e:	4770      	bx	lr

08001f90 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8001f90:	b490      	push	{r4, r7}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	0e1b      	lsrs	r3, r3, #24
 8001fa4:	4413      	add	r3, r2
 8001fa6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001fa8:	6822      	ldr	r2, [r4, #0]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	613b      	str	r3, [r7, #16]
  return(result);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8001fe6:	bf00      	nop
 8001fe8:	3720      	adds	r7, #32
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc90      	pop	{r4, r7}
 8001fee:	4770      	bx	lr

08001ff0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	43db      	mvns	r3, r3
 8002006:	401a      	ands	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	0a1b      	lsrs	r3, r3, #8
 800200c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	613b      	str	r3, [r7, #16]
  return(result);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	431a      	orrs	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	60da      	str	r2, [r3, #12]
}
 8002028:	bf00      	nop
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b088      	sub	sp, #32
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	0c1b      	lsrs	r3, r3, #16
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	60fb      	str	r3, [r7, #12]
  return(result);
 8002052:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0U)
 800205a:	e040      	b.n	80020de <LL_GPIO_Init+0xac>
  {
    /* skip if bit is not set */
    if ((pinmask & (1U << pinpos)) != 0U)
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	409a      	lsls	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d036      	beq.n	80020d8 <LL_GPIO_Init+0xa6>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	2b07      	cmp	r3, #7
 800206e:	d806      	bhi.n	800207e <LL_GPIO_Init+0x4c>
      {
        currentpin = (0x00000101U << pinpos);
 8002070:	f240 1201 	movw	r2, #257	; 0x101
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	e008      	b.n	8002090 <LL_GPIO_Init+0x5e>
      }
      else
      {
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3b08      	subs	r3, #8
 8002082:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800208e:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	461a      	mov	r2, r3
 8002096:	69b9      	ldr	r1, [r7, #24]
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ff19 	bl	8001ed0 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	461a      	mov	r2, r3
 80020a4:	69b9      	ldr	r1, [r7, #24]
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffa2 	bl	8001ff0 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d003      	beq.n	80020bc <LL_GPIO_Init+0x8a>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b09      	cmp	r3, #9
 80020ba:	d10d      	bne.n	80020d8 <LL_GPIO_Init+0xa6>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	461a      	mov	r2, r3
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff33 	bl	8001f30 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	461a      	mov	r2, r3
 80020d0:	69b9      	ldr	r1, [r7, #24]
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ff5c 	bl	8001f90 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	3301      	adds	r3, #1
 80020dc:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0U)
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	fa22 f303 	lsr.w	r3, r2, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1b8      	bne.n	800205c <LL_GPIO_Init+0x2a>
  }
  return (SUCCESS);
 80020ea:	2301      	movs	r3, #1
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	601a      	str	r2, [r3, #0]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0201 	bic.w	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	601a      	str	r2, [r3, #0]
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002144:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	430a      	orrs	r2, r1
 800214e:	431a      	orrs	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	609a      	str	r2, [r3, #8]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
	...

08002160 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8002160:	b490      	push	{r4, r7}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 800216e:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8002170:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4a3f      	ldr	r2, [pc, #252]	; (8002274 <LL_I2C_ConfigSpeed+0x114>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002184:	ea43 0204 	orr.w	r2, r3, r4
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4938      	ldr	r1, [pc, #224]	; (8002278 <LL_I2C_ConfigSpeed+0x118>)
 8002198:	428b      	cmp	r3, r1
 800219a:	d801      	bhi.n	80021a0 <LL_I2C_ConfigSpeed+0x40>
 800219c:	1c63      	adds	r3, r4, #1
 800219e:	e008      	b.n	80021b2 <LL_I2C_ConfigSpeed+0x52>
 80021a0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80021a4:	fb03 f304 	mul.w	r3, r3, r4
 80021a8:	4934      	ldr	r1, [pc, #208]	; (800227c <LL_I2C_ConfigSpeed+0x11c>)
 80021aa:	fba1 1303 	umull	r1, r3, r1, r3
 80021ae:	099b      	lsrs	r3, r3, #6
 80021b0:	3301      	adds	r3, #1
 80021b2:	431a      	orrs	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a2f      	ldr	r2, [pc, #188]	; (8002278 <LL_I2C_ConfigSpeed+0x118>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d939      	bls.n	8002234 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d117      	bne.n	80021f6 <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d009      	beq.n	80021f0 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80021ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ee:	e01d      	b.n	800222c <LL_I2C_ConfigSpeed+0xcc>
 80021f0:	f248 0301 	movw	r3, #32769	; 0x8001
 80021f4:	e01a      	b.n	800222c <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	009a      	lsls	r2, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	fbb2 f3f3 	udiv	r3, r2, r3
 8002208:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00b      	beq.n	8002228 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	009a      	lsls	r2, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002226:	e001      	b.n	800222c <LL_I2C_ConfigSpeed+0xcc>
 8002228:	f248 0301 	movw	r3, #32769	; 0x8001
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	ea43 0402 	orr.w	r4, r3, r2
 8002232:	e010      	b.n	8002256 <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	fbb2 f3f3 	udiv	r3, r2, r3
 800223e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002242:	2b03      	cmp	r3, #3
 8002244:	d905      	bls.n	8002252 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	e000      	b.n	8002254 <LL_I2C_ConfigSpeed+0xf4>
 8002252:	2304      	movs	r3, #4
 8002254:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 800225e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002262:	ea43 0204 	orr.w	r2, r3, r4
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	61da      	str	r2, [r3, #28]
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bc90      	pop	{r4, r7}
 8002272:	4770      	bx	lr
 8002274:	431bde83 	.word	0x431bde83
 8002278:	000186a0 	.word	0x000186a0
 800227c:	10624dd3 	.word	0x10624dd3

08002280 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 021a 	bic.w	r2, r3, #26
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	601a      	str	r2, [r3, #0]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	601a      	str	r2, [r3, #0]
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ff1d 	bl	8002112 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 f87b 	bl	80023d8 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80022e2:	6939      	ldr	r1, [r7, #16]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff37 	bl	8002160 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68d9      	ldr	r1, [r3, #12]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	461a      	mov	r2, r3
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff17 	bl	8002130 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4619      	mov	r1, r3
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ffb9 	bl	8002280 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fef0 	bl	80020f4 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	4619      	mov	r1, r3
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ffc2 	bl	80022a4 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002320:	2301      	movs	r3, #1
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <LL_RCC_GetSysClkSource+0x14>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	40021000 	.word	0x40021000

08002344 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <LL_RCC_GetAHBPrescaler+0x14>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	40021000 	.word	0x40021000

0800235c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	40021000 	.word	0x40021000

08002374 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <LL_RCC_GetAPB2Prescaler+0x14>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	40021000 	.word	0x40021000

0800238c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <LL_RCC_PLL_GetMainSource+0x14>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	40021000 	.word	0x40021000

080023a4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	40021000 	.word	0x40021000

080023bc <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <LL_RCC_PLL_GetPrediv+0x18>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	0c5b      	lsrs	r3, r3, #17
 80023c6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000

080023d8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80023e0:	f000 f820 	bl	8002424 <RCC_GetSystemClockFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f83a 	bl	8002468 <RCC_GetHCLKClockFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f848 	bl	8002494 <RCC_GetPCLK1ClockFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f854 	bl	80024bc <RCC_GetPCLK2ClockFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60da      	str	r2, [r3, #12]
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800242e:	f7ff ff7d 	bl	800232c <LL_RCC_GetSysClkSource>
 8002432:	4603      	mov	r3, r0
 8002434:	2b04      	cmp	r3, #4
 8002436:	d006      	beq.n	8002446 <RCC_GetSystemClockFreq+0x22>
 8002438:	2b08      	cmp	r3, #8
 800243a:	d007      	beq.n	800244c <RCC_GetSystemClockFreq+0x28>
 800243c:	2b00      	cmp	r3, #0
 800243e:	d109      	bne.n	8002454 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <RCC_GetSystemClockFreq+0x40>)
 8002442:	607b      	str	r3, [r7, #4]
      break;
 8002444:	e009      	b.n	800245a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <RCC_GetSystemClockFreq+0x40>)
 8002448:	607b      	str	r3, [r7, #4]
      break;
 800244a:	e006      	b.n	800245a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800244c:	f000 f84a 	bl	80024e4 <RCC_PLL_GetFreqDomain_SYS>
 8002450:	6078      	str	r0, [r7, #4]
      break;
 8002452:	e002      	b.n	800245a <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <RCC_GetSystemClockFreq+0x40>)
 8002456:	607b      	str	r3, [r7, #4]
      break;
 8002458:	bf00      	nop
  }

  return frequency;
 800245a:	687b      	ldr	r3, [r7, #4]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	007a1200 	.word	0x007a1200

08002468 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002470:	f7ff ff68 	bl	8002344 <LL_RCC_GetAHBPrescaler>
 8002474:	4603      	mov	r3, r0
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <RCC_GetHCLKClockFreq+0x28>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	461a      	mov	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	40d3      	lsrs	r3, r2
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	08008578 	.word	0x08008578

08002494 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800249c:	f7ff ff5e 	bl	800235c <LL_RCC_GetAPB1Prescaler>
 80024a0:	4603      	mov	r3, r0
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <RCC_GetPCLK1ClockFreq+0x24>)
 80024a6:	5cd3      	ldrb	r3, [r2, r3]
 80024a8:	461a      	mov	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	40d3      	lsrs	r3, r2
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	08008588 	.word	0x08008588

080024bc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80024c4:	f7ff ff56 	bl	8002374 <LL_RCC_GetAPB2Prescaler>
 80024c8:	4603      	mov	r3, r0
 80024ca:	0adb      	lsrs	r3, r3, #11
 80024cc:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <RCC_GetPCLK2ClockFreq+0x24>)
 80024ce:	5cd3      	ldrb	r3, [r2, r3]
 80024d0:	461a      	mov	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	40d3      	lsrs	r3, r2
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	08008588 	.word	0x08008588

080024e4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	2300      	movs	r3, #0
 80024f0:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80024f2:	f7ff ff4b 	bl	800238c <LL_RCC_PLL_GetMainSource>
 80024f6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <RCC_PLL_GetFreqDomain_SYS+0x22>
 80024fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002502:	d003      	beq.n	800250c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8002504:	e00b      	b.n	800251e <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002506:	4b0d      	ldr	r3, [pc, #52]	; (800253c <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8002508:	607b      	str	r3, [r7, #4]
      break;
 800250a:	e00b      	b.n	8002524 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800250c:	f7ff ff56 	bl	80023bc <LL_RCC_PLL_GetPrediv>
 8002510:	4603      	mov	r3, r0
 8002512:	3301      	adds	r3, #1
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	607b      	str	r3, [r7, #4]
      break;
 800251c:	e002      	b.n	8002524 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 800251e:	4b07      	ldr	r3, [pc, #28]	; (800253c <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8002520:	607b      	str	r3, [r7, #4]
      break;
 8002522:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002524:	f7ff ff3e 	bl	80023a4 <LL_RCC_PLL_GetMultiplicator>
 8002528:	4603      	mov	r3, r0
 800252a:	0c9b      	lsrs	r3, r3, #18
 800252c:	3302      	adds	r3, #2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	fb02 f303 	mul.w	r3, r2, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	003d0900 	.word	0x003d0900
 8002540:	007a1200 	.word	0x007a1200

08002544 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002554:	2b40      	cmp	r3, #64	; 0x40
 8002556:	bf0c      	ite	eq
 8002558:	2301      	moveq	r3, #1
 800255a:	2300      	movne	r3, #0
 800255c:	b2db      	uxtb	r3, r3
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	611a      	str	r2, [r3, #16]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002590:	2300      	movs	r3, #0
 8002592:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff ffd5 	bl	8002544 <LL_SPI_IsEnabled>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d139      	bne.n	8002614 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025a8:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	6811      	ldr	r1, [r2, #0]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	6852      	ldr	r2, [r2, #4]
 80025b4:	4311      	orrs	r1, r2
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	6892      	ldr	r2, [r2, #8]
 80025ba:	4311      	orrs	r1, r2
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	68d2      	ldr	r2, [r2, #12]
 80025c0:	4311      	orrs	r1, r2
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	6912      	ldr	r2, [r2, #16]
 80025c6:	4311      	orrs	r1, r2
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	6952      	ldr	r2, [r2, #20]
 80025cc:	4311      	orrs	r1, r2
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	6992      	ldr	r2, [r2, #24]
 80025d2:	4311      	orrs	r1, r2
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	69d2      	ldr	r2, [r2, #28]
 80025d8:	4311      	orrs	r1, r2
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	6a12      	ldr	r2, [r2, #32]
 80025de:	430a      	orrs	r2, r1
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f023 0204 	bic.w	r2, r3, #4
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	0c1b      	lsrs	r3, r3, #16
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002602:	d105      	bne.n	8002610 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	4619      	mov	r1, r3
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ffac 	bl	8002568 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	615a      	str	r2, [r3, #20]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
	...

080026f4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a27      	ldr	r2, [pc, #156]	; (80027a8 <LL_TIM_Init+0xb4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d00b      	beq.n	8002728 <LL_TIM_Init+0x34>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002716:	d007      	beq.n	8002728 <LL_TIM_Init+0x34>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a24      	ldr	r2, [pc, #144]	; (80027ac <LL_TIM_Init+0xb8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d003      	beq.n	8002728 <LL_TIM_Init+0x34>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a23      	ldr	r2, [pc, #140]	; (80027b0 <LL_TIM_Init+0xbc>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d106      	bne.n	8002736 <LL_TIM_Init+0x42>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1b      	ldr	r2, [pc, #108]	; (80027a8 <LL_TIM_Init+0xb4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00b      	beq.n	8002756 <LL_TIM_Init+0x62>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002744:	d007      	beq.n	8002756 <LL_TIM_Init+0x62>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a18      	ldr	r2, [pc, #96]	; (80027ac <LL_TIM_Init+0xb8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d003      	beq.n	8002756 <LL_TIM_Init+0x62>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <LL_TIM_Init+0xbc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d106      	bne.n	8002764 <LL_TIM_Init+0x70>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	4619      	mov	r1, r3
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ff61 	bl	8002638 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	4619      	mov	r1, r3
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff4e 	bl	800261e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <LL_TIM_Init+0xb4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d105      	bne.n	8002796 <LL_TIM_Init+0xa2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	7c1b      	ldrb	r3, [r3, #16]
 800278e:	4619      	mov	r1, r3
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff5e 	bl	8002652 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ff9c 	bl	80026d4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800279c:	2301      	movs	r3, #1
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40012c00 	.word	0x40012c00
 80027ac:	40000400 	.word	0x40000400
 80027b0:	40000800 	.word	0x40000800

080027b4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80027c0:	2300      	movs	r3, #0
 80027c2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d012      	beq.n	80027f0 <LL_TIM_OC_Init+0x3c>
 80027ca:	2b10      	cmp	r3, #16
 80027cc:	d802      	bhi.n	80027d4 <LL_TIM_OC_Init+0x20>
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d007      	beq.n	80027e2 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80027d2:	e022      	b.n	800281a <LL_TIM_OC_Init+0x66>
  switch (Channel)
 80027d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d8:	d011      	beq.n	80027fe <LL_TIM_OC_Init+0x4a>
 80027da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027de:	d015      	beq.n	800280c <LL_TIM_OC_Init+0x58>
      break;
 80027e0:	e01b      	b.n	800281a <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f81d 	bl	8002824 <OC1Config>
 80027ea:	4603      	mov	r3, r0
 80027ec:	75fb      	strb	r3, [r7, #23]
      break;
 80027ee:	e014      	b.n	800281a <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f882 	bl	80028fc <OC2Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	75fb      	strb	r3, [r7, #23]
      break;
 80027fc:	e00d      	b.n	800281a <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f8eb 	bl	80029dc <OC3Config>
 8002806:	4603      	mov	r3, r0
 8002808:	75fb      	strb	r3, [r7, #23]
      break;
 800280a:	e006      	b.n	800281a <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f954 	bl	8002abc <OC4Config>
 8002814:	4603      	mov	r3, r0
 8002816:	75fb      	strb	r3, [r7, #23]
      break;
 8002818:	bf00      	nop
  }

  return result;
 800281a:	7dfb      	ldrb	r3, [r7, #23]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	f023 0201 	bic.w	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0303 	bic.w	r3, r3, #3
 800285e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f023 0202 	bic.w	r2, r3, #2
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f023 0201 	bic.w	r2, r3, #1
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4313      	orrs	r3, r2
 8002888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a1a      	ldr	r2, [pc, #104]	; (80028f8 <OC1Config+0xd4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d11e      	bne.n	80028d0 <OC1Config+0xac>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f023 0208 	bic.w	r2, r3, #8
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f023 0204 	bic.w	r2, r3, #4
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff fec2 	bl	800266c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40012c00 	.word	0x40012c00

080028fc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	f023 0210 	bic.w	r2, r3, #16
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	4313      	orrs	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f023 0220 	bic.w	r2, r3, #32
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f023 0210 	bic.w	r2, r3, #16
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <OC2Config+0xdc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d11f      	bne.n	80029b0 <OC2Config+0xb4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	019b      	lsls	r3, r3, #6
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	019b      	lsls	r3, r3, #6
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4619      	mov	r1, r3
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff fe5f 	bl	8002686 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80029ce:	2301      	movs	r3, #1
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40012c00 	.word	0x40012c00

080029dc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0303 	bic.w	r3, r3, #3
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	021b      	lsls	r3, r3, #8
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a1b      	ldr	r2, [pc, #108]	; (8002ab8 <OC3Config+0xdc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d11f      	bne.n	8002a8e <OC3Config+0xb2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	029b      	lsls	r3, r3, #10
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	029b      	lsls	r3, r3, #10
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	015b      	lsls	r3, r3, #5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff fdfd 	bl	80026a0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002aac:	2301      	movs	r3, #1
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40012c00 	.word	0x40012c00

08002abc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af6:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	031b      	lsls	r3, r3, #12
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	031b      	lsls	r3, r3, #12
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a0f      	ldr	r2, [pc, #60]	; (8002b68 <OC4Config+0xac>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d107      	bne.n	8002b40 <OC4Config+0x84>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	019b      	lsls	r3, r3, #6
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4619      	mov	r1, r3
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff fdb1 	bl	80026ba <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b5e:	2301      	movs	r3, #1
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40012c00 	.word	0x40012c00

08002b6c <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	611a      	str	r2, [r3, #16]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	615a      	str	r2, [r3, #20]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
	...

08002bdc <LL_USART_SetBaudRate>:
  * @param  PeriphClk Peripheral Clock
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	009a      	lsls	r2, r3, #2
 8002bf2:	441a      	add	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	4a25      	ldr	r2, [pc, #148]	; (8002c94 <LL_USART_SetBaudRate+0xb8>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	b299      	uxth	r1, r3
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	009a      	lsls	r2, r3, #2
 8002c14:	441a      	add	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <LL_USART_SetBaudRate+0xb8>)
 8002c20:	fba3 0302 	umull	r0, r3, r3, r2
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	2064      	movs	r0, #100	; 0x64
 8002c28:	fb00 f303 	mul.w	r3, r0, r3
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	3332      	adds	r3, #50	; 0x32
 8002c32:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <LL_USART_SetBaudRate+0xb8>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	440b      	add	r3, r1
 8002c44:	b299      	uxth	r1, r3
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009a      	lsls	r2, r3, #2
 8002c50:	441a      	add	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <LL_USART_SetBaudRate+0xb8>)
 8002c5c:	fba3 0302 	umull	r0, r3, r3, r2
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	2064      	movs	r0, #100	; 0x64
 8002c64:	fb00 f303 	mul.w	r3, r0, r3
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	3332      	adds	r3, #50	; 0x32
 8002c6e:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <LL_USART_SetBaudRate+0xb8>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	440b      	add	r3, r1
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	609a      	str	r2, [r3, #8]
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	51eb851f 	.word	0x51eb851f

08002c98 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff ff5e 	bl	8002b6c <LL_USART_IsEnabled>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d145      	bne.n	8002d42 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002cbe:	f023 030c 	bic.w	r3, r3, #12
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	6851      	ldr	r1, [r2, #4]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	68d2      	ldr	r2, [r2, #12]
 8002cca:	4311      	orrs	r1, r2
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	6912      	ldr	r2, [r2, #16]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff ff57 	bl	8002b92 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff ff63 	bl	8002bb6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002cf0:	f107 0308 	add.w	r3, r7, #8
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fb6f 	bl	80023d8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <LL_USART_Init+0xb4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d102      	bne.n	8002d08 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	e00c      	b.n	8002d22 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a11      	ldr	r2, [pc, #68]	; (8002d50 <LL_USART_Init+0xb8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d102      	bne.n	8002d16 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	e005      	b.n	8002d22 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <LL_USART_Init+0xbc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d101      	bne.n	8002d22 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00c      	beq.n	8002d42 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002d30:	2301      	movs	r3, #1
 8002d32:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	69b9      	ldr	r1, [r7, #24]
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ff4d 	bl	8002bdc <LL_USART_SetBaudRate>
#endif /* USART_OverSampling_Feature */
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002d42:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3720      	adds	r7, #32
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40013800 	.word	0x40013800
 8002d50:	40004400 	.word	0x40004400
 8002d54:	40004800 	.word	0x40004800

08002d58 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002d62:	4909      	ldr	r1, [pc, #36]	; (8002d88 <LL_InitTick+0x30>)
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <LL_InitTick+0x30>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d76:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <LL_InitTick+0x30>)
 8002d78:	2205      	movs	r2, #5
 8002d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	e000e010 	.word	0xe000e010

08002d8c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002d94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ffdd 	bl	8002d58 <LL_InitTick>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <LL_mDelay+0x44>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002db6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbe:	d00c      	beq.n	8002dda <LL_mDelay+0x32>
  {
    Delay++;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002dc6:	e008      	b.n	8002dda <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <LL_mDelay+0x44>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <LL_mDelay+0x32>
    {
      Delay--;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f3      	bne.n	8002dc8 <LL_mDelay+0x20>
    }
  }
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000e010 	.word	0xe000e010

08002df0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002df8:	4a03      	ldr	r2, [pc, #12]	; (8002e08 <LL_SetSystemCoreClock+0x18>)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6013      	str	r3, [r2, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	20000094 	.word	0x20000094

08002e0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e1e:	2b84      	cmp	r3, #132	; 0x84
 8002e20:	d005      	beq.n	8002e2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002e22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4413      	add	r3, r2
 8002e2a:	3303      	adds	r3, #3
 8002e2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002e3e:	f001 f9c5 	bl	80041cc <vTaskStartScheduler>
  
  return osOK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685c      	ldr	r4, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e5e:	b29e      	uxth	r6, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff ffd0 	bl	8002e0c <makeFreeRtosPriority>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	f107 030c 	add.w	r3, r7, #12
 8002e72:	9301      	str	r3, [sp, #4]
 8002e74:	9200      	str	r2, [sp, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	4632      	mov	r2, r6
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f001 f83f 	bl	8003f00 <xTaskCreate>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d001      	beq.n	8002e8c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e000      	b.n	8002e8e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e96 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <osDelay+0x16>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	e000      	b.n	8002eae <osDelay+0x18>
 8002eac:	2301      	movs	r3, #1
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f001 f958 	bl	8004164 <vTaskDelay>
  
  return osOK;
 8002eb4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f103 0208 	add.w	r2, r3, #8
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f103 0208 	add.w	r2, r3, #8
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f103 0208 	add.w	r2, r3, #8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	601a      	str	r2, [r3, #0]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr

08002f5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b085      	sub	sp, #20
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d103      	bne.n	8002f7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	e00c      	b.n	8002f94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3308      	adds	r3, #8
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e002      	b.n	8002f88 <vListInsert+0x2e>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d9f6      	bls.n	8002f82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	601a      	str	r2, [r3, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b085      	sub	sp, #20
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6892      	ldr	r2, [r2, #8]
 8002fe0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6852      	ldr	r2, [r2, #4]
 8002fea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d103      	bne.n	8002ffe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	1e5a      	subs	r2, r3, #1
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	3b04      	subs	r3, #4
 800302c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	3b04      	subs	r3, #4
 800303a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f023 0201 	bic.w	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3b04      	subs	r3, #4
 800304a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800304c:	4a08      	ldr	r2, [pc, #32]	; (8003070 <pxPortInitialiseStack+0x54>)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	3b14      	subs	r3, #20
 8003056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3b20      	subs	r3, #32
 8003062:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003064:	68fb      	ldr	r3, [r7, #12]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	08003075 	.word	0x08003075

08003074 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <prvTaskExitError+0x38>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d009      	beq.n	8003098 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	e7fe      	b.n	8003096 <prvTaskExitError+0x22>
 8003098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80030aa:	e7fe      	b.n	80030aa <prvTaskExitError+0x36>
 80030ac:	2000008c 	.word	0x2000008c

080030b0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80030b0:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <pxCurrentTCBConst2>)
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	6808      	ldr	r0, [r1, #0]
 80030b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80030ba:	f380 8809 	msr	PSP, r0
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f380 8811 	msr	BASEPRI, r0
 80030ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80030ce:	4770      	bx	lr

080030d0 <pxCurrentTCBConst2>:
 80030d0:	200022b0 	.word	0x200022b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop

080030d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80030d8:	4806      	ldr	r0, [pc, #24]	; (80030f4 <prvPortStartFirstTask+0x1c>)
 80030da:	6800      	ldr	r0, [r0, #0]
 80030dc:	6800      	ldr	r0, [r0, #0]
 80030de:	f380 8808 	msr	MSP, r0
 80030e2:	b662      	cpsie	i
 80030e4:	b661      	cpsie	f
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	df00      	svc	0
 80030f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80030f2:	bf00      	nop
 80030f4:	e000ed08 	.word	0xe000ed08

080030f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030fe:	4b28      	ldr	r3, [pc, #160]	; (80031a0 <xPortStartScheduler+0xa8>)
 8003100:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	22ff      	movs	r2, #255	; 0xff
 800310e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <xPortStartScheduler+0xac>)
 8003124:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003126:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <xPortStartScheduler+0xb0>)
 8003128:	2207      	movs	r2, #7
 800312a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800312c:	e009      	b.n	8003142 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800312e:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <xPortStartScheduler+0xb0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3b01      	subs	r3, #1
 8003134:	4a1c      	ldr	r2, [pc, #112]	; (80031a8 <xPortStartScheduler+0xb0>)
 8003136:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314a:	2b80      	cmp	r3, #128	; 0x80
 800314c:	d0ef      	beq.n	800312e <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800314e:	4b16      	ldr	r3, [pc, #88]	; (80031a8 <xPortStartScheduler+0xb0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <xPortStartScheduler+0xb0>)
 8003156:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003158:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <xPortStartScheduler+0xb0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003160:	4a11      	ldr	r2, [pc, #68]	; (80031a8 <xPortStartScheduler+0xb0>)
 8003162:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	b2da      	uxtb	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800316c:	4a0f      	ldr	r2, [pc, #60]	; (80031ac <xPortStartScheduler+0xb4>)
 800316e:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <xPortStartScheduler+0xb4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003176:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003178:	4a0c      	ldr	r2, [pc, #48]	; (80031ac <xPortStartScheduler+0xb4>)
 800317a:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <xPortStartScheduler+0xb4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003182:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003184:	f000 f8b0 	bl	80032e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <xPortStartScheduler+0xb8>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800318e:	f7ff ffa3 	bl	80030d8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8003192:	f7ff ff6f 	bl	8003074 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	e000e400 	.word	0xe000e400
 80031a4:	20000292 	.word	0x20000292
 80031a8:	20000294 	.word	0x20000294
 80031ac:	e000ed20 	.word	0xe000ed20
 80031b0:	2000008c 	.word	0x2000008c

080031b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80031cc:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <vPortEnterCritical+0x54>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	4a0d      	ldr	r2, [pc, #52]	; (8003208 <vPortEnterCritical+0x54>)
 80031d4:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80031d6:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <vPortEnterCritical+0x54>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d10e      	bne.n	80031fc <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80031de:	4b0b      	ldr	r3, [pc, #44]	; (800320c <vPortEnterCritical+0x58>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d009      	beq.n	80031fc <vPortEnterCritical+0x48>
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	e7fe      	b.n	80031fa <vPortEnterCritical+0x46>
	}
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	2000008c 	.word	0x2000008c
 800320c:	e000ed04 	.word	0xe000ed04

08003210 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <vPortExitCritical+0x48>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <vPortExitCritical+0x22>
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	e7fe      	b.n	8003230 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <vPortExitCritical+0x48>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3b01      	subs	r3, #1
 8003238:	4a07      	ldr	r2, [pc, #28]	; (8003258 <vPortExitCritical+0x48>)
 800323a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <vPortExitCritical+0x48>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d104      	bne.n	800324e <vPortExitCritical+0x3e>
 8003244:	2300      	movs	r3, #0
 8003246:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	2000008c 	.word	0x2000008c
 800325c:	00000000 	.word	0x00000000

08003260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003260:	f3ef 8009 	mrs	r0, PSP
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <pxCurrentTCBConst>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003270:	6010      	str	r0, [r2, #0]
 8003272:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003276:	f04f 0050 	mov.w	r0, #80	; 0x50
 800327a:	f380 8811 	msr	BASEPRI, r0
 800327e:	f001 f951 	bl	8004524 <vTaskSwitchContext>
 8003282:	f04f 0000 	mov.w	r0, #0
 8003286:	f380 8811 	msr	BASEPRI, r0
 800328a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800328e:	6819      	ldr	r1, [r3, #0]
 8003290:	6808      	ldr	r0, [r1, #0]
 8003292:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003296:	f380 8809 	msr	PSP, r0
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	4770      	bx	lr

080032a0 <pxCurrentTCBConst>:
 80032a0:	200022b0 	.word	0x200022b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop

080032a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
	__asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80032c0:	f001 f874 	bl	80043ac <xTaskIncrementTick>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <SysTick_Handler+0x3c>)
 80032cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	2300      	movs	r3, #0
 80032d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80032dc:	bf00      	nop
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	e000ed04 	.word	0xe000ed04

080032e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80032ec:	4a07      	ldr	r2, [pc, #28]	; (800330c <vPortSetupTimerInterrupt+0x24>)
 80032ee:	4b08      	ldr	r3, [pc, #32]	; (8003310 <vPortSetupTimerInterrupt+0x28>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4908      	ldr	r1, [pc, #32]	; (8003314 <vPortSetupTimerInterrupt+0x2c>)
 80032f4:	fba1 1303 	umull	r1, r3, r1, r3
 80032f8:	099b      	lsrs	r3, r3, #6
 80032fa:	3b01      	subs	r3, #1
 80032fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <vPortSetupTimerInterrupt+0x30>)
 8003300:	2207      	movs	r2, #7
 8003302:	601a      	str	r2, [r3, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	e000e014 	.word	0xe000e014
 8003310:	20000094 	.word	0x20000094
 8003314:	10624dd3 	.word	0x10624dd3
 8003318:	e000e010 	.word	0xe000e010

0800331c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	; 0x28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003328:	f000 ff96 	bl	8004258 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800332c:	4b57      	ldr	r3, [pc, #348]	; (800348c <pvPortMalloc+0x170>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003334:	f000 f90c 	bl	8003550 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003338:	4b55      	ldr	r3, [pc, #340]	; (8003490 <pvPortMalloc+0x174>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	f040 808c 	bne.w	800345e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01c      	beq.n	8003386 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800334c:	2208      	movs	r2, #8
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	2b00      	cmp	r3, #0
 800335c:	d013      	beq.n	8003386 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f023 0307 	bic.w	r3, r3, #7
 8003364:	3308      	adds	r3, #8
 8003366:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <pvPortMalloc+0x6a>
	__asm volatile
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	e7fe      	b.n	8003384 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d068      	beq.n	800345e <pvPortMalloc+0x142>
 800338c:	4b41      	ldr	r3, [pc, #260]	; (8003494 <pvPortMalloc+0x178>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	429a      	cmp	r2, r3
 8003394:	d863      	bhi.n	800345e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003396:	4b40      	ldr	r3, [pc, #256]	; (8003498 <pvPortMalloc+0x17c>)
 8003398:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800339a:	4b3f      	ldr	r3, [pc, #252]	; (8003498 <pvPortMalloc+0x17c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033a0:	e004      	b.n	80033ac <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d203      	bcs.n	80033be <pvPortMalloc+0xa2>
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f1      	bne.n	80033a2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80033be:	4b33      	ldr	r3, [pc, #204]	; (800348c <pvPortMalloc+0x170>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d04a      	beq.n	800345e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2208      	movs	r2, #8
 80033ce:	4413      	add	r3, r2
 80033d0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	1ad2      	subs	r2, r2, r3
 80033e2:	2308      	movs	r3, #8
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d91e      	bls.n	8003428 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80033ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4413      	add	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d009      	beq.n	8003410 <pvPortMalloc+0xf4>
 80033fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	e7fe      	b.n	800340e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	1ad2      	subs	r2, r2, r3
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003422:	69b8      	ldr	r0, [r7, #24]
 8003424:	f000 f8f6 	bl	8003614 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003428:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <pvPortMalloc+0x178>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	4a18      	ldr	r2, [pc, #96]	; (8003494 <pvPortMalloc+0x178>)
 8003434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003436:	4b17      	ldr	r3, [pc, #92]	; (8003494 <pvPortMalloc+0x178>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b18      	ldr	r3, [pc, #96]	; (800349c <pvPortMalloc+0x180>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d203      	bcs.n	800344a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003442:	4b14      	ldr	r3, [pc, #80]	; (8003494 <pvPortMalloc+0x178>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a15      	ldr	r2, [pc, #84]	; (800349c <pvPortMalloc+0x180>)
 8003448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <pvPortMalloc+0x174>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	431a      	orrs	r2, r3
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800345e:	f000 ff09 	bl	8004274 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	2b00      	cmp	r3, #0
 800346a:	d009      	beq.n	8003480 <pvPortMalloc+0x164>
 800346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	e7fe      	b.n	800347e <pvPortMalloc+0x162>
	return pvReturn;
 8003480:	69fb      	ldr	r3, [r7, #28]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3728      	adds	r7, #40	; 0x28
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	200022a0 	.word	0x200022a0
 8003490:	200022ac 	.word	0x200022ac
 8003494:	200022a4 	.word	0x200022a4
 8003498:	20002298 	.word	0x20002298
 800349c:	200022a8 	.word	0x200022a8

080034a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d046      	beq.n	8003540 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80034b2:	2308      	movs	r3, #8
 80034b4:	425b      	negs	r3, r3
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4413      	add	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	4b20      	ldr	r3, [pc, #128]	; (8003548 <vPortFree+0xa8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d109      	bne.n	80034e2 <vPortFree+0x42>
 80034ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	e7fe      	b.n	80034e0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <vPortFree+0x5e>
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	e7fe      	b.n	80034fc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <vPortFree+0xa8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d019      	beq.n	8003540 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d115      	bne.n	8003540 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <vPortFree+0xa8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	43db      	mvns	r3, r3
 800351e:	401a      	ands	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003524:	f000 fe98 	bl	8004258 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	4b07      	ldr	r3, [pc, #28]	; (800354c <vPortFree+0xac>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4413      	add	r3, r2
 8003532:	4a06      	ldr	r2, [pc, #24]	; (800354c <vPortFree+0xac>)
 8003534:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003536:	6938      	ldr	r0, [r7, #16]
 8003538:	f000 f86c 	bl	8003614 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800353c:	f000 fe9a 	bl	8004274 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003540:	bf00      	nop
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	200022ac 	.word	0x200022ac
 800354c:	200022a4 	.word	0x200022a4

08003550 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800355a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800355c:	4b27      	ldr	r3, [pc, #156]	; (80035fc <prvHeapInit+0xac>)
 800355e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00c      	beq.n	8003584 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3307      	adds	r3, #7
 800356e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0307 	bic.w	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	4a1f      	ldr	r2, [pc, #124]	; (80035fc <prvHeapInit+0xac>)
 8003580:	4413      	add	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003588:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <prvHeapInit+0xb0>)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800358e:	4b1c      	ldr	r3, [pc, #112]	; (8003600 <prvHeapInit+0xb0>)
 8003590:	2200      	movs	r2, #0
 8003592:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	4413      	add	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800359c:	2208      	movs	r2, #8
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0307 	bic.w	r3, r3, #7
 80035aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4a15      	ldr	r2, [pc, #84]	; (8003604 <prvHeapInit+0xb4>)
 80035b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80035b2:	4b14      	ldr	r3, [pc, #80]	; (8003604 <prvHeapInit+0xb4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2200      	movs	r2, #0
 80035b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <prvHeapInit+0xb4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	1ad2      	subs	r2, r2, r3
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <prvHeapInit+0xb4>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <prvHeapInit+0xb8>)
 80035de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4a09      	ldr	r2, [pc, #36]	; (800360c <prvHeapInit+0xbc>)
 80035e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80035e8:	4b09      	ldr	r3, [pc, #36]	; (8003610 <prvHeapInit+0xc0>)
 80035ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80035ee:	601a      	str	r2, [r3, #0]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	20000298 	.word	0x20000298
 8003600:	20002298 	.word	0x20002298
 8003604:	200022a0 	.word	0x200022a0
 8003608:	200022a8 	.word	0x200022a8
 800360c:	200022a4 	.word	0x200022a4
 8003610:	200022ac 	.word	0x200022ac

08003614 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800361c:	4b27      	ldr	r3, [pc, #156]	; (80036bc <prvInsertBlockIntoFreeList+0xa8>)
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	e002      	b.n	8003628 <prvInsertBlockIntoFreeList+0x14>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	429a      	cmp	r2, r3
 8003630:	d3f7      	bcc.n	8003622 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	441a      	add	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	429a      	cmp	r2, r3
 8003642:	d108      	bne.n	8003656 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	441a      	add	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	441a      	add	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d118      	bne.n	800369c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <prvInsertBlockIntoFreeList+0xac>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d00d      	beq.n	8003692 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	441a      	add	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	e008      	b.n	80036a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003692:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <prvInsertBlockIntoFreeList+0xac>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	e003      	b.n	80036a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d002      	beq.n	80036b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr
 80036bc:	20002298 	.word	0x20002298
 80036c0:	200022a0 	.word	0x200022a0

080036c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d109      	bne.n	80036ec <xQueueGenericReset+0x28>
 80036d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	e7fe      	b.n	80036ea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80036ec:	f7ff fd62 	bl	80031b4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	68f9      	ldr	r1, [r7, #12]
 80036fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	441a      	add	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371c:	3b01      	subs	r3, #1
 800371e:	68f9      	ldr	r1, [r7, #12]
 8003720:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003722:	fb01 f303 	mul.w	r3, r1, r3
 8003726:	441a      	add	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	22ff      	movs	r2, #255	; 0xff
 8003730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	22ff      	movs	r2, #255	; 0xff
 8003738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d114      	bne.n	800376c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01a      	beq.n	8003780 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	3310      	adds	r3, #16
 800374e:	4618      	mov	r0, r3
 8003750:	f000 ff76 	bl	8004640 <xTaskRemoveFromEventList>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d012      	beq.n	8003780 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800375a:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <xQueueGenericReset+0xcc>)
 800375c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	e009      	b.n	8003780 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3310      	adds	r3, #16
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fba4 	bl	8002ebe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	3324      	adds	r3, #36	; 0x24
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fb9f 	bl	8002ebe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003780:	f7ff fd46 	bl	8003210 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003784:	2301      	movs	r3, #1
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	; 0x28
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	4613      	mov	r3, r2
 80037a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d109      	bne.n	80037bc <xQueueGenericCreate+0x28>
 80037a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	e7fe      	b.n	80037ba <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	e004      	b.n	80037d2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
 80037d0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3348      	adds	r3, #72	; 0x48
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff fda0 	bl	800331c <pvPortMalloc>
 80037dc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00b      	beq.n	80037fc <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	3348      	adds	r3, #72	; 0x48
 80037e8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037ea:	79fa      	ldrb	r2, [r7, #7]
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	4613      	mov	r3, r2
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f805 	bl	8003806 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 80037fc:	69bb      	ldr	r3, [r7, #24]
	}
 80037fe:	4618      	mov	r0, r3
 8003800:	3720      	adds	r7, #32
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d103      	bne.n	8003822 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e002      	b.n	8003828 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003834:	2101      	movs	r1, #1
 8003836:	69b8      	ldr	r0, [r7, #24]
 8003838:	f7ff ff44 	bl	80036c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08e      	sub	sp, #56	; 0x38
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003852:	2300      	movs	r3, #0
 8003854:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	2b00      	cmp	r3, #0
 800385e:	d109      	bne.n	8003874 <xQueueGenericSend+0x30>
 8003860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003864:	f383 8811 	msr	BASEPRI, r3
 8003868:	f3bf 8f6f 	isb	sy
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	62bb      	str	r3, [r7, #40]	; 0x28
 8003872:	e7fe      	b.n	8003872 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d103      	bne.n	8003882 <xQueueGenericSend+0x3e>
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <xQueueGenericSend+0x42>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <xQueueGenericSend+0x44>
 8003886:	2300      	movs	r3, #0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d109      	bne.n	80038a0 <xQueueGenericSend+0x5c>
 800388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
 800389e:	e7fe      	b.n	800389e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d103      	bne.n	80038ae <xQueueGenericSend+0x6a>
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <xQueueGenericSend+0x6e>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <xQueueGenericSend+0x70>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <xQueueGenericSend+0x88>
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	623b      	str	r3, [r7, #32]
 80038ca:	e7fe      	b.n	80038ca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038cc:	f001 f86e 	bl	80049ac <xTaskGetSchedulerState>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <xQueueGenericSend+0x98>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <xQueueGenericSend+0x9c>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <xQueueGenericSend+0x9e>
 80038e0:	2300      	movs	r3, #0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <xQueueGenericSend+0xb6>
 80038e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	e7fe      	b.n	80038f8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038fa:	f7ff fc5b 	bl	80031b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <xQueueGenericSend+0xcc>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d129      	bne.n	8003964 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003916:	f000 f9be 	bl	8003c96 <prvCopyDataToQueue>
 800391a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	2b00      	cmp	r3, #0
 8003922:	d010      	beq.n	8003946 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	3324      	adds	r3, #36	; 0x24
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fe89 	bl	8004640 <xTaskRemoveFromEventList>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d013      	beq.n	800395c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003934:	4b3f      	ldr	r3, [pc, #252]	; (8003a34 <xQueueGenericSend+0x1f0>)
 8003936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	e00a      	b.n	800395c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800394c:	4b39      	ldr	r3, [pc, #228]	; (8003a34 <xQueueGenericSend+0x1f0>)
 800394e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800395c:	f7ff fc58 	bl	8003210 <vPortExitCritical>
				return pdPASS;
 8003960:	2301      	movs	r3, #1
 8003962:	e063      	b.n	8003a2c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d103      	bne.n	8003972 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800396a:	f7ff fc51 	bl	8003210 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800396e:	2300      	movs	r3, #0
 8003970:	e05c      	b.n	8003a2c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003974:	2b00      	cmp	r3, #0
 8003976:	d106      	bne.n	8003986 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003978:	f107 0314 	add.w	r3, r7, #20
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fec1 	bl	8004704 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003982:	2301      	movs	r3, #1
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003986:	f7ff fc43 	bl	8003210 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800398a:	f000 fc65 	bl	8004258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800398e:	f7ff fc11 	bl	80031b4 <vPortEnterCritical>
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003998:	b25b      	sxtb	r3, r3
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399e:	d103      	bne.n	80039a8 <xQueueGenericSend+0x164>
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ae:	b25b      	sxtb	r3, r3
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d103      	bne.n	80039be <xQueueGenericSend+0x17a>
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039be:	f7ff fc27 	bl	8003210 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039c2:	1d3a      	adds	r2, r7, #4
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 febc 	bl	8004748 <xTaskCheckForTimeOut>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d124      	bne.n	8003a20 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039d8:	f000 fa55 	bl	8003e86 <prvIsQueueFull>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d018      	beq.n	8003a14 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	3310      	adds	r3, #16
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fe04 	bl	80045f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039f2:	f000 f9e0 	bl	8003db6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039f6:	f000 fc3d 	bl	8004274 <xTaskResumeAll>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f47f af7c 	bne.w	80038fa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003a02:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <xQueueGenericSend+0x1f0>)
 8003a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	e772      	b.n	80038fa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a16:	f000 f9ce 	bl	8003db6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a1a:	f000 fc2b 	bl	8004274 <xTaskResumeAll>
 8003a1e:	e76c      	b.n	80038fa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a22:	f000 f9c8 	bl	8003db6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a26:	f000 fc25 	bl	8004274 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a2a:	2300      	movs	r3, #0
		}
	}
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3738      	adds	r7, #56	; 0x38
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	e000ed04 	.word	0xe000ed04

08003a38 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08e      	sub	sp, #56	; 0x38
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d109      	bne.n	8003a68 <xQueueGenericReceive+0x30>
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
 8003a66:	e7fe      	b.n	8003a66 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <xQueueGenericReceive+0x3e>
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <xQueueGenericReceive+0x42>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <xQueueGenericReceive+0x44>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <xQueueGenericReceive+0x5c>
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	623b      	str	r3, [r7, #32]
 8003a92:	e7fe      	b.n	8003a92 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a94:	f000 ff8a 	bl	80049ac <xTaskGetSchedulerState>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d102      	bne.n	8003aa4 <xQueueGenericReceive+0x6c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <xQueueGenericReceive+0x70>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <xQueueGenericReceive+0x72>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <xQueueGenericReceive+0x8a>
 8003aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	e7fe      	b.n	8003ac0 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ac2:	f7ff fb77 	bl	80031b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d046      	beq.n	8003b60 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003adc:	f000 f945 	bl	8003d6a <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d121      	bne.n	8003b2a <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae8:	1e5a      	subs	r2, r3, #1
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d104      	bne.n	8003b00 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003af6:	f001 f871 	bl	8004bdc <pvTaskIncrementMutexHeldCount>
 8003afa:	4602      	mov	r2, r0
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d027      	beq.n	8003b58 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	3310      	adds	r3, #16
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fd97 	bl	8004640 <xTaskRemoveFromEventList>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01f      	beq.n	8003b58 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8003b18:	4b4f      	ldr	r3, [pc, #316]	; (8003c58 <xQueueGenericReceive+0x220>)
 8003b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	e016      	b.n	8003b58 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b2e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00f      	beq.n	8003b58 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	3324      	adds	r3, #36	; 0x24
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fd7f 	bl	8004640 <xTaskRemoveFromEventList>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d007      	beq.n	8003b58 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b48:	4b43      	ldr	r3, [pc, #268]	; (8003c58 <xQueueGenericReceive+0x220>)
 8003b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8003b58:	f7ff fb5a 	bl	8003210 <vPortExitCritical>
				return pdPASS;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e077      	b.n	8003c50 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b66:	f7ff fb53 	bl	8003210 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e070      	b.n	8003c50 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d106      	bne.n	8003b82 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fdc3 	bl	8004704 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b82:	f7ff fb45 	bl	8003210 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b86:	f000 fb67 	bl	8004258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b8a:	f7ff fb13 	bl	80031b4 <vPortEnterCritical>
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b94:	b25b      	sxtb	r3, r3
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9a:	d103      	bne.n	8003ba4 <xQueueGenericReceive+0x16c>
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003baa:	b25b      	sxtb	r3, r3
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb0:	d103      	bne.n	8003bba <xQueueGenericReceive+0x182>
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bba:	f7ff fb29 	bl	8003210 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bbe:	1d3a      	adds	r2, r7, #4
 8003bc0:	f107 0314 	add.w	r3, r7, #20
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fdbe 	bl	8004748 <xTaskCheckForTimeOut>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d131      	bne.n	8003c36 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bd4:	f000 f941 	bl	8003e5a <prvIsQueueEmpty>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d025      	beq.n	8003c2a <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d108      	bne.n	8003bf8 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8003be6:	f7ff fae5 	bl	80031b4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fefa 	bl	80049e8 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8003bf4:	f7ff fb0c 	bl	8003210 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	3324      	adds	r3, #36	; 0x24
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	4611      	mov	r1, r2
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fcf9 	bl	80045f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c08:	f000 f8d5 	bl	8003db6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c0c:	f000 fb32 	bl	8004274 <xTaskResumeAll>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f47f af55 	bne.w	8003ac2 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8003c18:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <xQueueGenericReceive+0x220>)
 8003c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	e74b      	b.n	8003ac2 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c2c:	f000 f8c3 	bl	8003db6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c30:	f000 fb20 	bl	8004274 <xTaskResumeAll>
 8003c34:	e745      	b.n	8003ac2 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8003c36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c38:	f000 f8bd 	bl	8003db6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c3c:	f000 fb1a 	bl	8004274 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c42:	f000 f90a 	bl	8003e5a <prvIsQueueEmpty>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f43f af3a 	beq.w	8003ac2 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3738      	adds	r7, #56	; 0x38
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	e000ed04 	.word	0xe000ed04

08003c5c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <uxQueueMessagesWaiting+0x22>
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	e7fe      	b.n	8003c7c <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8003c7e:	f7ff fa99 	bl	80031b4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003c88:	f7ff fac2 	bl	8003210 <vPortExitCritical>

	return uxReturn;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003caa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10d      	bne.n	8003cd0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d14d      	bne.n	8003d58 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 ff07 	bl	8004ad4 <xTaskPriorityDisinherit>
 8003cc6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	e043      	b.n	8003d58 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d119      	bne.n	8003d0a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6898      	ldr	r0, [r3, #8]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	f003 fba3 	bl	800742c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	441a      	add	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d32b      	bcc.n	8003d58 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	e026      	b.n	8003d58 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	68d8      	ldr	r0, [r3, #12]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	461a      	mov	r2, r3
 8003d14:	68b9      	ldr	r1, [r7, #8]
 8003d16:	f003 fb89 	bl	800742c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	425b      	negs	r3, r3
 8003d24:	441a      	add	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d207      	bcs.n	8003d46 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	425b      	negs	r3, r3
 8003d40:	441a      	add	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d105      	bne.n	8003d58 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d60:	697b      	ldr	r3, [r7, #20]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d018      	beq.n	8003dae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	441a      	add	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d303      	bcc.n	8003d9e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68d9      	ldr	r1, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	461a      	mov	r2, r3
 8003da8:	6838      	ldr	r0, [r7, #0]
 8003daa:	f003 fb3f 	bl	800742c <memcpy>
	}
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003dbe:	f7ff f9f9 	bl	80031b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dc8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dca:	e011      	b.n	8003df0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d012      	beq.n	8003dfa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3324      	adds	r3, #36	; 0x24
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fc31 	bl	8004640 <xTaskRemoveFromEventList>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003de4:	f000 fd0e 	bl	8004804 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	dce9      	bgt.n	8003dcc <prvUnlockQueue+0x16>
 8003df8:	e000      	b.n	8003dfc <prvUnlockQueue+0x46>
					break;
 8003dfa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	22ff      	movs	r2, #255	; 0xff
 8003e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e04:	f7ff fa04 	bl	8003210 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e08:	f7ff f9d4 	bl	80031b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e12:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e14:	e011      	b.n	8003e3a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d012      	beq.n	8003e44 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3310      	adds	r3, #16
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fc0c 	bl	8004640 <xTaskRemoveFromEventList>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e2e:	f000 fce9 	bl	8004804 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e32:	7bbb      	ldrb	r3, [r7, #14]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	dce9      	bgt.n	8003e16 <prvUnlockQueue+0x60>
 8003e42:	e000      	b.n	8003e46 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e44:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	22ff      	movs	r2, #255	; 0xff
 8003e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e4e:	f7ff f9df 	bl	8003210 <vPortExitCritical>
}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e62:	f7ff f9a7 	bl	80031b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d102      	bne.n	8003e74 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	e001      	b.n	8003e78 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e78:	f7ff f9ca 	bl	8003210 <vPortExitCritical>

	return xReturn;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e8e:	f7ff f991 	bl	80031b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d102      	bne.n	8003ea4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	e001      	b.n	8003ea8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ea8:	f7ff f9b2 	bl	8003210 <vPortExitCritical>

	return xReturn;
 8003eac:	68fb      	ldr	r3, [r7, #12]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	405a      	eors	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	60da      	str	r2, [r3, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr
	...

08003edc <vApplicationStackOverflowHook>:

#pragma GCC push_options
#pragma GCC optimize ("O0") //__attribute__((optimize("O0")))

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
//
//	int free_heap = xPortGetFreeHeapSize();

	while(1)
	{
		LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_13);
 8003ee6:	4904      	ldr	r1, [pc, #16]	; (8003ef8 <vApplicationStackOverflowHook+0x1c>)
 8003ee8:	4804      	ldr	r0, [pc, #16]	; (8003efc <vApplicationStackOverflowHook+0x20>)
 8003eea:	f7ff ffe4 	bl	8003eb6 <LL_GPIO_TogglePin>
		delay(200);
 8003eee:	20c8      	movs	r0, #200	; 0xc8
 8003ef0:	f000 ff5e 	bl	8004db0 <delay>
		LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_13);
 8003ef4:	e7f7      	b.n	8003ee6 <vApplicationStackOverflowHook+0xa>
 8003ef6:	bf00      	nop
 8003ef8:	04200020 	.word	0x04200020
 8003efc:	40010c00 	.word	0x40010c00

08003f00 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08c      	sub	sp, #48	; 0x30
 8003f04:	af04      	add	r7, sp, #16
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f10:	88fb      	ldrh	r3, [r7, #6]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff fa01 	bl	800331c <pvPortMalloc>
 8003f1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00e      	beq.n	8003f40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003f22:	2054      	movs	r0, #84	; 0x54
 8003f24:	f7ff f9fa 	bl	800331c <pvPortMalloc>
 8003f28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30
 8003f36:	e005      	b.n	8003f44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f38:	6978      	ldr	r0, [r7, #20]
 8003f3a:	f7ff fab1 	bl	80034a0 <vPortFree>
 8003f3e:	e001      	b.n	8003f44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d013      	beq.n	8003f72 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f4a:	88fa      	ldrh	r2, [r7, #6]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	9303      	str	r3, [sp, #12]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	9302      	str	r3, [sp, #8]
 8003f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f80e 	bl	8003f82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f66:	69f8      	ldr	r0, [r7, #28]
 8003f68:	f000 f892 	bl	8004090 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	61bb      	str	r3, [r7, #24]
 8003f70:	e002      	b.n	8003f78 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f72:	f04f 33ff 	mov.w	r3, #4294967295
 8003f76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f78:	69bb      	ldr	r3, [r7, #24]
	}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3720      	adds	r7, #32
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b088      	sub	sp, #32
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
 8003f8e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	461a      	mov	r2, r3
 8003f9a:	21a5      	movs	r1, #165	; 0xa5
 8003f9c:	f003 fa51 	bl	8007442 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003faa:	3b01      	subs	r3, #1
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	f023 0307 	bic.w	r3, r3, #7
 8003fb8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d009      	beq.n	8003fd8 <prvInitialiseNewTask+0x56>
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	e7fe      	b.n	8003fd6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	e012      	b.n	8004004 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	7819      	ldrb	r1, [r3, #0]
 8003fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	4413      	add	r3, r2
 8003fec:	3334      	adds	r3, #52	; 0x34
 8003fee:	460a      	mov	r2, r1
 8003ff0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d006      	beq.n	800400c <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3301      	adds	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b0f      	cmp	r3, #15
 8004008:	d9e9      	bls.n	8003fde <prvInitialiseNewTask+0x5c>
 800400a:	e000      	b.n	800400e <prvInitialiseNewTask+0x8c>
		{
			break;
 800400c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004018:	2b06      	cmp	r3, #6
 800401a:	d901      	bls.n	8004020 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800401c:	2306      	movs	r3, #6
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004024:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800402a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	2200      	movs	r2, #0
 8004030:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004034:	3304      	adds	r3, #4
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe ff60 	bl	8002efc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403e:	3318      	adds	r3, #24
 8004040:	4618      	mov	r0, r3
 8004042:	f7fe ff5b 	bl	8002efc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800404a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404e:	f1c3 0207 	rsb	r2, r3, #7
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800405a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	2200      	movs	r2, #0
 8004060:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	68f9      	ldr	r1, [r7, #12]
 800406e:	69b8      	ldr	r0, [r7, #24]
 8004070:	f7fe ffd4 	bl	800301c <pxPortInitialiseStack>
 8004074:	4602      	mov	r2, r0
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800407a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004086:	bf00      	nop
 8004088:	3720      	adds	r7, #32
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004098:	f7ff f88c 	bl	80031b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800409c:	4b2a      	ldr	r3, [pc, #168]	; (8004148 <prvAddNewTaskToReadyList+0xb8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3301      	adds	r3, #1
 80040a2:	4a29      	ldr	r2, [pc, #164]	; (8004148 <prvAddNewTaskToReadyList+0xb8>)
 80040a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040a6:	4b29      	ldr	r3, [pc, #164]	; (800414c <prvAddNewTaskToReadyList+0xbc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040ae:	4a27      	ldr	r2, [pc, #156]	; (800414c <prvAddNewTaskToReadyList+0xbc>)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040b4:	4b24      	ldr	r3, [pc, #144]	; (8004148 <prvAddNewTaskToReadyList+0xb8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d110      	bne.n	80040de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040bc:	f000 fbc6 	bl	800484c <prvInitialiseTaskLists>
 80040c0:	e00d      	b.n	80040de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040c2:	4b23      	ldr	r3, [pc, #140]	; (8004150 <prvAddNewTaskToReadyList+0xc0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040ca:	4b20      	ldr	r3, [pc, #128]	; (800414c <prvAddNewTaskToReadyList+0xbc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d802      	bhi.n	80040de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040d8:	4a1c      	ldr	r2, [pc, #112]	; (800414c <prvAddNewTaskToReadyList+0xbc>)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040de:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <prvAddNewTaskToReadyList+0xc4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3301      	adds	r3, #1
 80040e4:	4a1b      	ldr	r2, [pc, #108]	; (8004154 <prvAddNewTaskToReadyList+0xc4>)
 80040e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	2201      	movs	r2, #1
 80040ee:	409a      	lsls	r2, r3
 80040f0:	4b19      	ldr	r3, [pc, #100]	; (8004158 <prvAddNewTaskToReadyList+0xc8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	4a18      	ldr	r2, [pc, #96]	; (8004158 <prvAddNewTaskToReadyList+0xc8>)
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4a15      	ldr	r2, [pc, #84]	; (800415c <prvAddNewTaskToReadyList+0xcc>)
 8004108:	441a      	add	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3304      	adds	r3, #4
 800410e:	4619      	mov	r1, r3
 8004110:	4610      	mov	r0, r2
 8004112:	f7fe feff 	bl	8002f14 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004116:	f7ff f87b 	bl	8003210 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800411a:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <prvAddNewTaskToReadyList+0xc0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00e      	beq.n	8004140 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <prvAddNewTaskToReadyList+0xbc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	429a      	cmp	r2, r3
 800412e:	d207      	bcs.n	8004140 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <prvAddNewTaskToReadyList+0xd0>)
 8004132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	200023b0 	.word	0x200023b0
 800414c:	200022b0 	.word	0x200022b0
 8004150:	200023bc 	.word	0x200023bc
 8004154:	200023cc 	.word	0x200023cc
 8004158:	200023b8 	.word	0x200023b8
 800415c:	200022b4 	.word	0x200022b4
 8004160:	e000ed04 	.word	0xe000ed04

08004164 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d016      	beq.n	80041a4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004176:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <vTaskDelay+0x60>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <vTaskDelay+0x2e>
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	e7fe      	b.n	8004190 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004192:	f000 f861 	bl	8004258 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004196:	2100      	movs	r1, #0
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fd33 	bl	8004c04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800419e:	f000 f869 	bl	8004274 <xTaskResumeAll>
 80041a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d107      	bne.n	80041ba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80041aa:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <vTaskDelay+0x64>)
 80041ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	200023d8 	.word	0x200023d8
 80041c8:	e000ed04 	.word	0xe000ed04

080041cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80041d2:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <vTaskStartScheduler+0x74>)
 80041d4:	9301      	str	r3, [sp, #4]
 80041d6:	2300      	movs	r3, #0
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	2300      	movs	r3, #0
 80041dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041e0:	4918      	ldr	r1, [pc, #96]	; (8004244 <vTaskStartScheduler+0x78>)
 80041e2:	4819      	ldr	r0, [pc, #100]	; (8004248 <vTaskStartScheduler+0x7c>)
 80041e4:	f7ff fe8c 	bl	8003f00 <xTaskCreate>
 80041e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d115      	bne.n	800421c <vTaskStartScheduler+0x50>
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004202:	4b12      	ldr	r3, [pc, #72]	; (800424c <vTaskStartScheduler+0x80>)
 8004204:	f04f 32ff 	mov.w	r2, #4294967295
 8004208:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800420a:	4b11      	ldr	r3, [pc, #68]	; (8004250 <vTaskStartScheduler+0x84>)
 800420c:	2201      	movs	r2, #1
 800420e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004210:	4b10      	ldr	r3, [pc, #64]	; (8004254 <vTaskStartScheduler+0x88>)
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004216:	f7fe ff6f 	bl	80030f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800421a:	e00d      	b.n	8004238 <vTaskStartScheduler+0x6c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004222:	d109      	bne.n	8004238 <vTaskStartScheduler+0x6c>
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	607b      	str	r3, [r7, #4]
 8004236:	e7fe      	b.n	8004236 <vTaskStartScheduler+0x6a>
}
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	200023d4 	.word	0x200023d4
 8004244:	08007fe8 	.word	0x08007fe8
 8004248:	0800481d 	.word	0x0800481d
 800424c:	200023d0 	.word	0x200023d0
 8004250:	200023bc 	.word	0x200023bc
 8004254:	200023b4 	.word	0x200023b4

08004258 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <vTaskSuspendAll+0x18>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3301      	adds	r3, #1
 8004262:	4a03      	ldr	r2, [pc, #12]	; (8004270 <vTaskSuspendAll+0x18>)
 8004264:	6013      	str	r3, [r2, #0]
}
 8004266:	bf00      	nop
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	200023d8 	.word	0x200023d8

08004274 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004282:	4b41      	ldr	r3, [pc, #260]	; (8004388 <xTaskResumeAll+0x114>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d109      	bne.n	800429e <xTaskResumeAll+0x2a>
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	e7fe      	b.n	800429c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800429e:	f7fe ff89 	bl	80031b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042a2:	4b39      	ldr	r3, [pc, #228]	; (8004388 <xTaskResumeAll+0x114>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	4a37      	ldr	r2, [pc, #220]	; (8004388 <xTaskResumeAll+0x114>)
 80042aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042ac:	4b36      	ldr	r3, [pc, #216]	; (8004388 <xTaskResumeAll+0x114>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d161      	bne.n	8004378 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042b4:	4b35      	ldr	r3, [pc, #212]	; (800438c <xTaskResumeAll+0x118>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d05d      	beq.n	8004378 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042bc:	e02e      	b.n	800431c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80042be:	4b34      	ldr	r3, [pc, #208]	; (8004390 <xTaskResumeAll+0x11c>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3318      	adds	r3, #24
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe fe7d 	bl	8002fca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fe fe78 	bl	8002fca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042de:	2201      	movs	r2, #1
 80042e0:	409a      	lsls	r2, r3
 80042e2:	4b2c      	ldr	r3, [pc, #176]	; (8004394 <xTaskResumeAll+0x120>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	4a2a      	ldr	r2, [pc, #168]	; (8004394 <xTaskResumeAll+0x120>)
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4a27      	ldr	r2, [pc, #156]	; (8004398 <xTaskResumeAll+0x124>)
 80042fa:	441a      	add	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3304      	adds	r3, #4
 8004300:	4619      	mov	r1, r3
 8004302:	4610      	mov	r0, r2
 8004304:	f7fe fe06 	bl	8002f14 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430c:	4b23      	ldr	r3, [pc, #140]	; (800439c <xTaskResumeAll+0x128>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	429a      	cmp	r2, r3
 8004314:	d302      	bcc.n	800431c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004316:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <xTaskResumeAll+0x12c>)
 8004318:	2201      	movs	r2, #1
 800431a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800431c:	4b1c      	ldr	r3, [pc, #112]	; (8004390 <xTaskResumeAll+0x11c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1cc      	bne.n	80042be <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800432a:	f000 fb1b 	bl	8004964 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800432e:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <xTaskResumeAll+0x130>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d010      	beq.n	800435c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800433a:	f000 f837 	bl	80043ac <xTaskIncrementTick>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004344:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <xTaskResumeAll+0x12c>)
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3b01      	subs	r3, #1
 800434e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f1      	bne.n	800433a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004356:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <xTaskResumeAll+0x130>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800435c:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <xTaskResumeAll+0x12c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d009      	beq.n	8004378 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004364:	2301      	movs	r3, #1
 8004366:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004368:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <xTaskResumeAll+0x134>)
 800436a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004378:	f7fe ff4a 	bl	8003210 <vPortExitCritical>

	return xAlreadyYielded;
 800437c:	68bb      	ldr	r3, [r7, #8]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	200023d8 	.word	0x200023d8
 800438c:	200023b0 	.word	0x200023b0
 8004390:	20002370 	.word	0x20002370
 8004394:	200023b8 	.word	0x200023b8
 8004398:	200022b4 	.word	0x200022b4
 800439c:	200022b0 	.word	0x200022b0
 80043a0:	200023c4 	.word	0x200023c4
 80043a4:	200023c0 	.word	0x200023c0
 80043a8:	e000ed04 	.word	0xe000ed04

080043ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043b6:	4b50      	ldr	r3, [pc, #320]	; (80044f8 <xTaskIncrementTick+0x14c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f040 808c 	bne.w	80044d8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80043c0:	4b4e      	ldr	r3, [pc, #312]	; (80044fc <xTaskIncrementTick+0x150>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043c8:	4a4c      	ldr	r2, [pc, #304]	; (80044fc <xTaskIncrementTick+0x150>)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d11f      	bne.n	8004414 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80043d4:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <xTaskIncrementTick+0x154>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <xTaskIncrementTick+0x46>
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	e7fe      	b.n	80043f0 <xTaskIncrementTick+0x44>
 80043f2:	4b43      	ldr	r3, [pc, #268]	; (8004500 <xTaskIncrementTick+0x154>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	4b42      	ldr	r3, [pc, #264]	; (8004504 <xTaskIncrementTick+0x158>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a40      	ldr	r2, [pc, #256]	; (8004500 <xTaskIncrementTick+0x154>)
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	4a40      	ldr	r2, [pc, #256]	; (8004504 <xTaskIncrementTick+0x158>)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4b40      	ldr	r3, [pc, #256]	; (8004508 <xTaskIncrementTick+0x15c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3301      	adds	r3, #1
 800440c:	4a3e      	ldr	r2, [pc, #248]	; (8004508 <xTaskIncrementTick+0x15c>)
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	f000 faa8 	bl	8004964 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004414:	4b3d      	ldr	r3, [pc, #244]	; (800450c <xTaskIncrementTick+0x160>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	429a      	cmp	r2, r3
 800441c:	d34d      	bcc.n	80044ba <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800441e:	4b38      	ldr	r3, [pc, #224]	; (8004500 <xTaskIncrementTick+0x154>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <xTaskIncrementTick+0x80>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <xTaskIncrementTick+0x82>
 800442c:	2300      	movs	r3, #0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d004      	beq.n	800443c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004432:	4b36      	ldr	r3, [pc, #216]	; (800450c <xTaskIncrementTick+0x160>)
 8004434:	f04f 32ff 	mov.w	r2, #4294967295
 8004438:	601a      	str	r2, [r3, #0]
					break;
 800443a:	e03e      	b.n	80044ba <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800443c:	4b30      	ldr	r3, [pc, #192]	; (8004500 <xTaskIncrementTick+0x154>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	429a      	cmp	r2, r3
 8004452:	d203      	bcs.n	800445c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004454:	4a2d      	ldr	r2, [pc, #180]	; (800450c <xTaskIncrementTick+0x160>)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6013      	str	r3, [r2, #0]
						break;
 800445a:	e02e      	b.n	80044ba <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	3304      	adds	r3, #4
 8004460:	4618      	mov	r0, r3
 8004462:	f7fe fdb2 	bl	8002fca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	2b00      	cmp	r3, #0
 800446c:	d004      	beq.n	8004478 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	3318      	adds	r3, #24
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe fda9 	bl	8002fca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	2201      	movs	r2, #1
 800447e:	409a      	lsls	r2, r3
 8004480:	4b23      	ldr	r3, [pc, #140]	; (8004510 <xTaskIncrementTick+0x164>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4313      	orrs	r3, r2
 8004486:	4a22      	ldr	r2, [pc, #136]	; (8004510 <xTaskIncrementTick+0x164>)
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4a1f      	ldr	r2, [pc, #124]	; (8004514 <xTaskIncrementTick+0x168>)
 8004498:	441a      	add	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	3304      	adds	r3, #4
 800449e:	4619      	mov	r1, r3
 80044a0:	4610      	mov	r0, r2
 80044a2:	f7fe fd37 	bl	8002f14 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044aa:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <xTaskIncrementTick+0x16c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d3b4      	bcc.n	800441e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80044b4:	2301      	movs	r3, #1
 80044b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044b8:	e7b1      	b.n	800441e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044ba:	4b17      	ldr	r3, [pc, #92]	; (8004518 <xTaskIncrementTick+0x16c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c0:	4914      	ldr	r1, [pc, #80]	; (8004514 <xTaskIncrementTick+0x168>)
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d907      	bls.n	80044e2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80044d2:	2301      	movs	r3, #1
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	e004      	b.n	80044e2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80044d8:	4b10      	ldr	r3, [pc, #64]	; (800451c <xTaskIncrementTick+0x170>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3301      	adds	r3, #1
 80044de:	4a0f      	ldr	r2, [pc, #60]	; (800451c <xTaskIncrementTick+0x170>)
 80044e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80044e2:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <xTaskIncrementTick+0x174>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80044ea:	2301      	movs	r3, #1
 80044ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80044ee:	697b      	ldr	r3, [r7, #20]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	200023d8 	.word	0x200023d8
 80044fc:	200023b4 	.word	0x200023b4
 8004500:	20002368 	.word	0x20002368
 8004504:	2000236c 	.word	0x2000236c
 8004508:	200023c8 	.word	0x200023c8
 800450c:	200023d0 	.word	0x200023d0
 8004510:	200023b8 	.word	0x200023b8
 8004514:	200022b4 	.word	0x200022b4
 8004518:	200022b0 	.word	0x200022b0
 800451c:	200023c0 	.word	0x200023c0
 8004520:	200023c4 	.word	0x200023c4

08004524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800452a:	4b2e      	ldr	r3, [pc, #184]	; (80045e4 <vTaskSwitchContext+0xc0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004532:	4b2d      	ldr	r3, [pc, #180]	; (80045e8 <vTaskSwitchContext+0xc4>)
 8004534:	2201      	movs	r2, #1
 8004536:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004538:	e04f      	b.n	80045da <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 800453a:	4b2b      	ldr	r3, [pc, #172]	; (80045e8 <vTaskSwitchContext+0xc4>)
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004540:	4b2a      	ldr	r3, [pc, #168]	; (80045ec <vTaskSwitchContext+0xc8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4b29      	ldr	r3, [pc, #164]	; (80045ec <vTaskSwitchContext+0xc8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	429a      	cmp	r2, r3
 800454e:	d808      	bhi.n	8004562 <vTaskSwitchContext+0x3e>
 8004550:	4b26      	ldr	r3, [pc, #152]	; (80045ec <vTaskSwitchContext+0xc8>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	4b25      	ldr	r3, [pc, #148]	; (80045ec <vTaskSwitchContext+0xc8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3334      	adds	r3, #52	; 0x34
 800455a:	4619      	mov	r1, r3
 800455c:	4610      	mov	r0, r2
 800455e:	f7ff fcbd 	bl	8003edc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004562:	4b23      	ldr	r3, [pc, #140]	; (80045f0 <vTaskSwitchContext+0xcc>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	fab3 f383 	clz	r3, r3
 800456e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004570:	7afb      	ldrb	r3, [r7, #11]
 8004572:	f1c3 031f 	rsb	r3, r3, #31
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	491e      	ldr	r1, [pc, #120]	; (80045f4 <vTaskSwitchContext+0xd0>)
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d109      	bne.n	80045a0 <vTaskSwitchContext+0x7c>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	607b      	str	r3, [r7, #4]
 800459e:	e7fe      	b.n	800459e <vTaskSwitchContext+0x7a>
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	4613      	mov	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4a12      	ldr	r2, [pc, #72]	; (80045f4 <vTaskSwitchContext+0xd0>)
 80045ac:	4413      	add	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3308      	adds	r3, #8
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d104      	bne.n	80045d0 <vTaskSwitchContext+0xac>
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	4a05      	ldr	r2, [pc, #20]	; (80045ec <vTaskSwitchContext+0xc8>)
 80045d8:	6013      	str	r3, [r2, #0]
}
 80045da:	bf00      	nop
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	200023d8 	.word	0x200023d8
 80045e8:	200023c4 	.word	0x200023c4
 80045ec:	200022b0 	.word	0x200022b0
 80045f0:	200023b8 	.word	0x200023b8
 80045f4:	200022b4 	.word	0x200022b4

080045f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d109      	bne.n	800461c <vTaskPlaceOnEventList+0x24>
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	e7fe      	b.n	800461a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <vTaskPlaceOnEventList+0x44>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3318      	adds	r3, #24
 8004622:	4619      	mov	r1, r3
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7fe fc98 	bl	8002f5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800462a:	2101      	movs	r1, #1
 800462c:	6838      	ldr	r0, [r7, #0]
 800462e:	f000 fae9 	bl	8004c04 <prvAddCurrentTaskToDelayedList>
}
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	200022b0 	.word	0x200022b0

08004640 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <xTaskRemoveFromEventList+0x2a>
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	e7fe      	b.n	8004668 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	3318      	adds	r3, #24
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe fcab 	bl	8002fca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004674:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <xTaskRemoveFromEventList+0xac>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d11c      	bne.n	80046b6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	3304      	adds	r3, #4
 8004680:	4618      	mov	r0, r3
 8004682:	f7fe fca2 	bl	8002fca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	2201      	movs	r2, #1
 800468c:	409a      	lsls	r2, r3
 800468e:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <xTaskRemoveFromEventList+0xb0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4313      	orrs	r3, r2
 8004694:	4a16      	ldr	r2, [pc, #88]	; (80046f0 <xTaskRemoveFromEventList+0xb0>)
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4a13      	ldr	r2, [pc, #76]	; (80046f4 <xTaskRemoveFromEventList+0xb4>)
 80046a6:	441a      	add	r2, r3
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f7fe fc30 	bl	8002f14 <vListInsertEnd>
 80046b4:	e005      	b.n	80046c2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	3318      	adds	r3, #24
 80046ba:	4619      	mov	r1, r3
 80046bc:	480e      	ldr	r0, [pc, #56]	; (80046f8 <xTaskRemoveFromEventList+0xb8>)
 80046be:	f7fe fc29 	bl	8002f14 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c6:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <xTaskRemoveFromEventList+0xbc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d905      	bls.n	80046dc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80046d0:	2301      	movs	r3, #1
 80046d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80046d4:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <xTaskRemoveFromEventList+0xc0>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	e001      	b.n	80046e0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80046e0:	697b      	ldr	r3, [r7, #20]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	200023d8 	.word	0x200023d8
 80046f0:	200023b8 	.word	0x200023b8
 80046f4:	200022b4 	.word	0x200022b4
 80046f8:	20002370 	.word	0x20002370
 80046fc:	200022b0 	.word	0x200022b0
 8004700:	200023c4 	.word	0x200023c4

08004704 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <vTaskSetTimeOutState+0x22>
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	e7fe      	b.n	8004724 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <vTaskSetTimeOutState+0x3c>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <vTaskSetTimeOutState+0x40>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	605a      	str	r2, [r3, #4]
}
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr
 8004740:	200023c8 	.word	0x200023c8
 8004744:	200023b4 	.word	0x200023b4

08004748 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d109      	bne.n	800476c <xTaskCheckForTimeOut+0x24>
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	e7fe      	b.n	800476a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d109      	bne.n	8004786 <xTaskCheckForTimeOut+0x3e>
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	60bb      	str	r3, [r7, #8]
 8004784:	e7fe      	b.n	8004784 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004786:	f7fe fd15 	bl	80031b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800478a:	4b1c      	ldr	r3, [pc, #112]	; (80047fc <xTaskCheckForTimeOut+0xb4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d102      	bne.n	80047a0 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	e026      	b.n	80047ee <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	4b16      	ldr	r3, [pc, #88]	; (8004800 <xTaskCheckForTimeOut+0xb8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d007      	beq.n	80047bc <xTaskCheckForTimeOut+0x74>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d802      	bhi.n	80047bc <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80047b6:	2301      	movs	r3, #1
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	e018      	b.n	80047ee <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	1ad2      	subs	r2, r2, r3
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d20e      	bcs.n	80047ea <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6859      	ldr	r1, [r3, #4]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1acb      	subs	r3, r1, r3
 80047d8:	441a      	add	r2, r3
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff ff90 	bl	8004704 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	e001      	b.n	80047ee <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 80047ea:	2301      	movs	r3, #1
 80047ec:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80047ee:	f7fe fd0f 	bl	8003210 <vPortExitCritical>

	return xReturn;
 80047f2:	697b      	ldr	r3, [r7, #20]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	200023b4 	.word	0x200023b4
 8004800:	200023c8 	.word	0x200023c8

08004804 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <vTaskMissedYield+0x14>)
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]
}
 800480e:	bf00      	nop
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	200023c4 	.word	0x200023c4

0800481c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004824:	f000 f852 	bl	80048cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004828:	4b06      	ldr	r3, [pc, #24]	; (8004844 <prvIdleTask+0x28>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d9f9      	bls.n	8004824 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <prvIdleTask+0x2c>)
 8004832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004840:	e7f0      	b.n	8004824 <prvIdleTask+0x8>
 8004842:	bf00      	nop
 8004844:	200022b4 	.word	0x200022b4
 8004848:	e000ed04 	.word	0xe000ed04

0800484c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004852:	2300      	movs	r3, #0
 8004854:	607b      	str	r3, [r7, #4]
 8004856:	e00c      	b.n	8004872 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4a12      	ldr	r2, [pc, #72]	; (80048ac <prvInitialiseTaskLists+0x60>)
 8004864:	4413      	add	r3, r2
 8004866:	4618      	mov	r0, r3
 8004868:	f7fe fb29 	bl	8002ebe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3301      	adds	r3, #1
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b06      	cmp	r3, #6
 8004876:	d9ef      	bls.n	8004858 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004878:	480d      	ldr	r0, [pc, #52]	; (80048b0 <prvInitialiseTaskLists+0x64>)
 800487a:	f7fe fb20 	bl	8002ebe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800487e:	480d      	ldr	r0, [pc, #52]	; (80048b4 <prvInitialiseTaskLists+0x68>)
 8004880:	f7fe fb1d 	bl	8002ebe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004884:	480c      	ldr	r0, [pc, #48]	; (80048b8 <prvInitialiseTaskLists+0x6c>)
 8004886:	f7fe fb1a 	bl	8002ebe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800488a:	480c      	ldr	r0, [pc, #48]	; (80048bc <prvInitialiseTaskLists+0x70>)
 800488c:	f7fe fb17 	bl	8002ebe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004890:	480b      	ldr	r0, [pc, #44]	; (80048c0 <prvInitialiseTaskLists+0x74>)
 8004892:	f7fe fb14 	bl	8002ebe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <prvInitialiseTaskLists+0x78>)
 8004898:	4a05      	ldr	r2, [pc, #20]	; (80048b0 <prvInitialiseTaskLists+0x64>)
 800489a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <prvInitialiseTaskLists+0x7c>)
 800489e:	4a05      	ldr	r2, [pc, #20]	; (80048b4 <prvInitialiseTaskLists+0x68>)
 80048a0:	601a      	str	r2, [r3, #0]
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	200022b4 	.word	0x200022b4
 80048b0:	20002340 	.word	0x20002340
 80048b4:	20002354 	.word	0x20002354
 80048b8:	20002370 	.word	0x20002370
 80048bc:	20002384 	.word	0x20002384
 80048c0:	2000239c 	.word	0x2000239c
 80048c4:	20002368 	.word	0x20002368
 80048c8:	2000236c 	.word	0x2000236c

080048cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048d2:	e028      	b.n	8004926 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80048d4:	f7ff fcc0 	bl	8004258 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80048d8:	4b17      	ldr	r3, [pc, #92]	; (8004938 <prvCheckTasksWaitingTermination+0x6c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf0c      	ite	eq
 80048e0:	2301      	moveq	r3, #1
 80048e2:	2300      	movne	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80048e8:	f7ff fcc4 	bl	8004274 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d119      	bne.n	8004926 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80048f2:	f7fe fc5f 	bl	80031b4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <prvCheckTasksWaitingTermination+0x6c>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	3304      	adds	r3, #4
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe fb61 	bl	8002fca <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004908:	4b0c      	ldr	r3, [pc, #48]	; (800493c <prvCheckTasksWaitingTermination+0x70>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3b01      	subs	r3, #1
 800490e:	4a0b      	ldr	r2, [pc, #44]	; (800493c <prvCheckTasksWaitingTermination+0x70>)
 8004910:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <prvCheckTasksWaitingTermination+0x74>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3b01      	subs	r3, #1
 8004918:	4a09      	ldr	r2, [pc, #36]	; (8004940 <prvCheckTasksWaitingTermination+0x74>)
 800491a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800491c:	f7fe fc78 	bl	8003210 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8004920:	6838      	ldr	r0, [r7, #0]
 8004922:	f000 f80f 	bl	8004944 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004926:	4b06      	ldr	r3, [pc, #24]	; (8004940 <prvCheckTasksWaitingTermination+0x74>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1d2      	bne.n	80048d4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20002384 	.word	0x20002384
 800493c:	200023b0 	.word	0x200023b0
 8004940:	20002398 	.word	0x20002398

08004944 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	4618      	mov	r0, r3
 8004952:	f7fe fda5 	bl	80034a0 <vPortFree>
			vPortFree( pxTCB );
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fe fda2 	bl	80034a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800495c:	bf00      	nop
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496a:	4b0e      	ldr	r3, [pc, #56]	; (80049a4 <prvResetNextTaskUnblockTime+0x40>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <prvResetNextTaskUnblockTime+0x14>
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <prvResetNextTaskUnblockTime+0x16>
 8004978:	2300      	movs	r3, #0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d004      	beq.n	8004988 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800497e:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <prvResetNextTaskUnblockTime+0x44>)
 8004980:	f04f 32ff 	mov.w	r2, #4294967295
 8004984:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004986:	e008      	b.n	800499a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004988:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <prvResetNextTaskUnblockTime+0x40>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4a04      	ldr	r2, [pc, #16]	; (80049a8 <prvResetNextTaskUnblockTime+0x44>)
 8004998:	6013      	str	r3, [r2, #0]
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	20002368 	.word	0x20002368
 80049a8:	200023d0 	.word	0x200023d0

080049ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <xTaskGetSchedulerState+0x34>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d102      	bne.n	80049c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049ba:	2301      	movs	r3, #1
 80049bc:	607b      	str	r3, [r7, #4]
 80049be:	e008      	b.n	80049d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049c0:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <xTaskGetSchedulerState+0x38>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049c8:	2302      	movs	r3, #2
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	e001      	b.n	80049d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049ce:	2300      	movs	r3, #0
 80049d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049d2:	687b      	ldr	r3, [r7, #4]
	}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	200023bc 	.word	0x200023bc
 80049e4:	200023d8 	.word	0x200023d8

080049e8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d062      	beq.n	8004ac0 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	4b32      	ldr	r3, [pc, #200]	; (8004ac8 <vTaskPriorityInherit+0xe0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d25b      	bcs.n	8004ac0 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	db06      	blt.n	8004a1e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a10:	4b2d      	ldr	r3, [pc, #180]	; (8004ac8 <vTaskPriorityInherit+0xe0>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	f1c3 0207 	rsb	r2, r3, #7
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6959      	ldr	r1, [r3, #20]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4a27      	ldr	r2, [pc, #156]	; (8004acc <vTaskPriorityInherit+0xe4>)
 8004a30:	4413      	add	r3, r2
 8004a32:	4299      	cmp	r1, r3
 8004a34:	d101      	bne.n	8004a3a <vTaskPriorityInherit+0x52>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <vTaskPriorityInherit+0x54>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d03a      	beq.n	8004ab6 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3304      	adds	r3, #4
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fe fac0 	bl	8002fca <uxListRemove>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d115      	bne.n	8004a7c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a54:	491d      	ldr	r1, [pc, #116]	; (8004acc <vTaskPriorityInherit+0xe4>)
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10a      	bne.n	8004a7c <vTaskPriorityInherit+0x94>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	43da      	mvns	r2, r3
 8004a72:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <vTaskPriorityInherit+0xe8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4013      	ands	r3, r2
 8004a78:	4a15      	ldr	r2, [pc, #84]	; (8004ad0 <vTaskPriorityInherit+0xe8>)
 8004a7a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a7c:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <vTaskPriorityInherit+0xe0>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	409a      	lsls	r2, r3
 8004a8e:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <vTaskPriorityInherit+0xe8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	4a0e      	ldr	r2, [pc, #56]	; (8004ad0 <vTaskPriorityInherit+0xe8>)
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4a09      	ldr	r2, [pc, #36]	; (8004acc <vTaskPriorityInherit+0xe4>)
 8004aa6:	441a      	add	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	4619      	mov	r1, r3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	f7fe fa30 	bl	8002f14 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ab4:	e004      	b.n	8004ac0 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ab6:	4b04      	ldr	r3, [pc, #16]	; (8004ac8 <vTaskPriorityInherit+0xe0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8004ac0:	bf00      	nop
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	200022b0 	.word	0x200022b0
 8004acc:	200022b4 	.word	0x200022b4
 8004ad0:	200023b8 	.word	0x200023b8

08004ad4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d06c      	beq.n	8004bc4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004aea:	4b39      	ldr	r3, [pc, #228]	; (8004bd0 <xTaskPriorityDisinherit+0xfc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d009      	beq.n	8004b08 <xTaskPriorityDisinherit+0x34>
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	e7fe      	b.n	8004b06 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d109      	bne.n	8004b24 <xTaskPriorityDisinherit+0x50>
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	e7fe      	b.n	8004b22 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b28:	1e5a      	subs	r2, r3, #1
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d044      	beq.n	8004bc4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d140      	bne.n	8004bc4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	3304      	adds	r3, #4
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fa3f 	bl	8002fca <uxListRemove>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d115      	bne.n	8004b7e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b56:	491f      	ldr	r1, [pc, #124]	; (8004bd4 <xTaskPriorityDisinherit+0x100>)
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <xTaskPriorityDisinherit+0xaa>
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	43da      	mvns	r2, r3
 8004b74:	4b18      	ldr	r3, [pc, #96]	; (8004bd8 <xTaskPriorityDisinherit+0x104>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <xTaskPriorityDisinherit+0x104>)
 8004b7c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	f1c3 0207 	rsb	r2, r3, #7
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	2201      	movs	r2, #1
 8004b98:	409a      	lsls	r2, r3
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <xTaskPriorityDisinherit+0x104>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	4a0d      	ldr	r2, [pc, #52]	; (8004bd8 <xTaskPriorityDisinherit+0x104>)
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4a08      	ldr	r2, [pc, #32]	; (8004bd4 <xTaskPriorityDisinherit+0x100>)
 8004bb2:	441a      	add	r2, r3
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f7fe f9aa 	bl	8002f14 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bc4:	697b      	ldr	r3, [r7, #20]
	}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	200022b0 	.word	0x200022b0
 8004bd4:	200022b4 	.word	0x200022b4
 8004bd8:	200023b8 	.word	0x200023b8

08004bdc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <pvTaskIncrementMutexHeldCount+0x24>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d004      	beq.n	8004bf2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bee:	3201      	adds	r2, #1
 8004bf0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004bf2:	4b03      	ldr	r3, [pc, #12]	; (8004c00 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
	}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	200022b0 	.word	0x200022b0

08004c04 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c0e:	4b29      	ldr	r3, [pc, #164]	; (8004cb4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c14:	4b28      	ldr	r3, [pc, #160]	; (8004cb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fe f9d5 	bl	8002fca <uxListRemove>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10b      	bne.n	8004c3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004c26:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	43da      	mvns	r2, r3
 8004c34:	4b21      	ldr	r3, [pc, #132]	; (8004cbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	4a20      	ldr	r2, [pc, #128]	; (8004cbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d10a      	bne.n	8004c5c <prvAddCurrentTaskToDelayedList+0x58>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c4c:	4b1a      	ldr	r3, [pc, #104]	; (8004cb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3304      	adds	r3, #4
 8004c52:	4619      	mov	r1, r3
 8004c54:	481a      	ldr	r0, [pc, #104]	; (8004cc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c56:	f7fe f95d 	bl	8002f14 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c5a:	e026      	b.n	8004caa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4413      	add	r3, r2
 8004c62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c64:	4b14      	ldr	r3, [pc, #80]	; (8004cb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d209      	bcs.n	8004c88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c74:	4b13      	ldr	r3, [pc, #76]	; (8004cc4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	4b0f      	ldr	r3, [pc, #60]	; (8004cb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4610      	mov	r0, r2
 8004c82:	f7fe f96a 	bl	8002f5a <vListInsert>
}
 8004c86:	e010      	b.n	8004caa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c88:	4b0f      	ldr	r3, [pc, #60]	; (8004cc8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3304      	adds	r3, #4
 8004c92:	4619      	mov	r1, r3
 8004c94:	4610      	mov	r0, r2
 8004c96:	f7fe f960 	bl	8002f5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c9a:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d202      	bcs.n	8004caa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ca4:	4a09      	ldr	r2, [pc, #36]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	6013      	str	r3, [r2, #0]
}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	200023b4 	.word	0x200023b4
 8004cb8:	200022b0 	.word	0x200022b0
 8004cbc:	200023b8 	.word	0x200023b8
 8004cc0:	2000239c 	.word	0x2000239c
 8004cc4:	2000236c 	.word	0x2000236c
 8004cc8:	20002368 	.word	0x20002368
 8004ccc:	200023d0 	.word	0x200023d0

08004cd0 <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(CRCx->CR, CRC_CR_RESET);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	609a      	str	r2, [r3, #8]
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	601a      	str	r2, [r3, #0]
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr

08004d02 <LL_CRC_ReadData32>:
  * @rmtoll DR           DR            LL_CRC_ReadData32
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (32 bits).
  */
__STATIC_INLINE uint32_t LL_CRC_ReadData32(CRC_TypeDef *CRCx)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(CRCx->DR));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr

08004d18 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8004d20:	4908      	ldr	r1, [pc, #32]	; (8004d44 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004d22:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004d2e:	695a      	ldr	r2, [r3, #20]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4013      	ands	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004d36:	68fb      	ldr	r3, [r7, #12]
}
 8004d38:	bf00      	nop
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40021000 	.word	0x40021000

08004d48 <MX_CRC_Init>:
#include "crc.h"
#include "main.h"

void MX_CRC_Init(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8004d4c:	2040      	movs	r0, #64	; 0x40
 8004d4e:	f7ff ffe3 	bl	8004d18 <LL_AHB1_GRP1_EnableClock>
}
 8004d52:	bf00      	nop
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <CRC_calc>:

uint32_t CRC_calc(uint32_t * data, uint32_t data_length)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
	LL_CRC_ResetCRCCalculationUnit(CRC);
 8004d62:	4812      	ldr	r0, [pc, #72]	; (8004dac <CRC_calc+0x54>)
 8004d64:	f7ff ffb4 	bl	8004cd0 <LL_CRC_ResetCRCCalculationUnit>

	for(uint32_t i = 0; i < data_length; i++)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e00e      	b.n	8004d8c <CRC_calc+0x34>
	{
		LL_CRC_FeedData32(CRC, __REV(data[i]));
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	4413      	add	r3, r2
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	613b      	str	r3, [r7, #16]
  return __builtin_bswap32(value);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	ba1b      	rev	r3, r3
 8004d7e:	4619      	mov	r1, r3
 8004d80:	480a      	ldr	r0, [pc, #40]	; (8004dac <CRC_calc+0x54>)
 8004d82:	f7ff ffb1 	bl	8004ce8 <LL_CRC_FeedData32>
	for(uint32_t i = 0; i < data_length; i++)
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d3ec      	bcc.n	8004d6e <CRC_calc+0x16>
	}

	return __REV(LL_CRC_ReadData32(CRC))^0xFFFFFFFF;
 8004d94:	4805      	ldr	r0, [pc, #20]	; (8004dac <CRC_calc+0x54>)
 8004d96:	f7ff ffb4 	bl	8004d02 <LL_CRC_ReadData32>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	ba1b      	rev	r3, r3
 8004da2:	43db      	mvns	r3, r3
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40023000 	.word	0x40023000

08004db0 <delay>:
#include "delay.h"

void delay(uint16_t value)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4603      	mov	r3, r0
 8004db8:	80fb      	strh	r3, [r7, #6]
	LL_mDelay(value);
 8004dba:	88fb      	ldrh	r3, [r7, #6]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fd fff3 	bl	8002da8 <LL_mDelay>
}
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <getSysTick>:

uint32_t getSysTick(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
	return SysTick->VAL;
 8004dd0:	4b02      	ldr	r3, [pc, #8]	; (8004ddc <getSysTick+0x10>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr
 8004ddc:	e000e010 	.word	0xe000e010

08004de0 <NVIC_GetPriorityGrouping>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004de4:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <NVIC_GetPriorityGrouping+0x18>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	0a1b      	lsrs	r3, r3, #8
 8004dea:	f003 0307 	and.w	r3, r3, #7
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	e000ed00 	.word	0xe000ed00

08004dfc <NVIC_EnableIRQ>:
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004e06:	4908      	ldr	r1, [pc, #32]	; (8004e28 <NVIC_EnableIRQ+0x2c>)
 8004e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	79fa      	ldrb	r2, [r7, #7]
 8004e10:	f002 021f 	and.w	r2, r2, #31
 8004e14:	2001      	movs	r0, #1
 8004e16:	fa00 f202 	lsl.w	r2, r0, r2
 8004e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr
 8004e28:	e000e100 	.word	0xe000e100

08004e2c <NVIC_SetPriority>:
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	6039      	str	r1, [r7, #0]
 8004e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8004e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	da0b      	bge.n	8004e58 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e40:	490d      	ldr	r1, [pc, #52]	; (8004e78 <NVIC_SetPriority+0x4c>)
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	3b04      	subs	r3, #4
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	0112      	lsls	r2, r2, #4
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	440b      	add	r3, r1
 8004e54:	761a      	strb	r2, [r3, #24]
}
 8004e56:	e009      	b.n	8004e6c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e58:	4908      	ldr	r1, [pc, #32]	; (8004e7c <NVIC_SetPriority+0x50>)
 8004e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	0112      	lsls	r2, r2, #4
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	440b      	add	r3, r1
 8004e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	e000ed00 	.word	0xe000ed00
 8004e7c:	e000e100 	.word	0xe000e100

08004e80 <NVIC_EncodePriority>:
{
 8004e80:	b480      	push	{r7}
 8004e82:	b089      	sub	sp, #36	; 0x24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f1c3 0307 	rsb	r3, r3, #7
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	bf28      	it	cs
 8004e9e:	2304      	movcs	r3, #4
 8004ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	2b06      	cmp	r3, #6
 8004ea8:	d902      	bls.n	8004eb0 <NVIC_EncodePriority+0x30>
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	3b03      	subs	r3, #3
 8004eae:	e000      	b.n	8004eb2 <NVIC_EncodePriority+0x32>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	1e5a      	subs	r2, r3, #1
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	401a      	ands	r2, r3
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ece:	1e59      	subs	r1, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ed4:	4313      	orrs	r3, r2
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3724      	adds	r7, #36	; 0x24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bc80      	pop	{r7}
 8004ede:	4770      	bx	lr

08004ee0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8004ee8:	4a03      	ldr	r2, [pc, #12]	; (8004ef8 <LL_EXTI_ClearFlag_0_31+0x18>)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6153      	str	r3, [r2, #20]
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bc80      	pop	{r7}
 8004ef6:	4770      	bx	lr
 8004ef8:	40010400 	.word	0x40010400

08004efc <LL_GPIO_ReadInputPort>:
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  return (READ_REG(GPIOx->IDR));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr
	...

08004f14 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8004f14:	b490      	push	{r4, r7}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8004f1e:	4c11      	ldr	r4, [pc, #68]	; (8004f64 <LL_GPIO_AF_SetEXTISource+0x50>)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	490f      	ldr	r1, [pc, #60]	; (8004f64 <LL_GPIO_AF_SetEXTISource+0x50>)
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	3202      	adds	r2, #2
 8004f2c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	0c12      	lsrs	r2, r2, #16
 8004f34:	43d2      	mvns	r2, r2
 8004f36:	4011      	ands	r1, r2
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	0c12      	lsrs	r2, r2, #16
 8004f3c:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	fa92 f2a2 	rbit	r2, r2
 8004f44:	60ba      	str	r2, [r7, #8]
  return(result);
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	fab2 f282 	clz	r2, r2
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f52:	430a      	orrs	r2, r1
 8004f54:	3302      	adds	r3, #2
 8004f56:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc90      	pop	{r4, r7}
 8004f62:	4770      	bx	lr
 8004f64:	40010000 	.word	0x40010000

08004f68 <GPIO_Init>:
#include "encoder_driver.h"

static bool button_status = false, rotate_status = false, rotate_pin_A, rotate_pin_B;

void GPIO_Init()
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af00      	add	r7, sp, #0
    LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8004f6e:	f107 0318 	add.w	r3, r7, #24
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	605a      	str	r2, [r3, #4]

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	61bb      	str	r3, [r7, #24]
    EXTI_InitStruct.LineCommand = ENABLE;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	773b      	strb	r3, [r7, #28]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8004f80:	2300      	movs	r3, #0
 8004f82:	777b      	strb	r3, [r7, #29]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8004f84:	2301      	movs	r3, #1
 8004f86:	77bb      	strb	r3, [r7, #30]
    LL_EXTI_Init(&EXTI_InitStruct);
 8004f88:	f107 0318 	add.w	r3, r7, #24
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fc ff25 	bl	8001ddc <LL_EXTI_Init>

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8004f92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f96:	61bb      	str	r3, [r7, #24]
    EXTI_InitStruct.LineCommand = ENABLE;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	773b      	strb	r3, [r7, #28]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	777b      	strb	r3, [r7, #29]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	77bb      	strb	r3, [r7, #30]
    LL_EXTI_Init(&EXTI_InitStruct);
 8004fa4:	f107 0318 	add.w	r3, r7, #24
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fc ff17 	bl	8001ddc <LL_EXTI_Init>

    LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE1);
 8004fae:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8004fb2:	2001      	movs	r0, #1
 8004fb4:	f7ff ffae 	bl	8004f14 <LL_GPIO_AF_SetEXTISource>
    LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE14);
 8004fb8:	491d      	ldr	r1, [pc, #116]	; (8005030 <GPIO_Init+0xc8>)
 8004fba:	2001      	movs	r0, #1
 8004fbc:	f7ff ffaa 	bl	8004f14 <LL_GPIO_AF_SetEXTISource>


	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fc0:	1d3b      	adds	r3, r7, #4
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	605a      	str	r2, [r3, #4]
 8004fc8:	609a      	str	r2, [r3, #8]
 8004fca:	60da      	str	r2, [r3, #12]
 8004fcc:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = LL_GPIO_PIN_1 | LL_GPIO_PIN_14 | LL_GPIO_PIN_15;
 8004fce:	4b19      	ldr	r3, [pc, #100]	; (8005034 <GPIO_Init+0xcc>)
 8004fd0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fde:	1d3b      	adds	r3, r7, #4
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4815      	ldr	r0, [pc, #84]	; (8005038 <GPIO_Init+0xd0>)
 8004fe4:	f7fd f825 	bl	8002032 <LL_GPIO_Init>

    NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),8, 0));
 8004fe8:	f7ff fefa 	bl	8004de0 <NVIC_GetPriorityGrouping>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2108      	movs	r1, #8
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff ff44 	bl	8004e80 <NVIC_EncodePriority>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	2007      	movs	r0, #7
 8004ffe:	f7ff ff15 	bl	8004e2c <NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI1_IRQn);
 8005002:	2007      	movs	r0, #7
 8005004:	f7ff fefa 	bl	8004dfc <NVIC_EnableIRQ>


    NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),8, 0));
 8005008:	f7ff feea 	bl	8004de0 <NVIC_GetPriorityGrouping>
 800500c:	4603      	mov	r3, r0
 800500e:	2200      	movs	r2, #0
 8005010:	2108      	movs	r1, #8
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff ff34 	bl	8004e80 <NVIC_EncodePriority>
 8005018:	4603      	mov	r3, r0
 800501a:	4619      	mov	r1, r3
 800501c:	2028      	movs	r0, #40	; 0x28
 800501e:	f7ff ff05 	bl	8004e2c <NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005022:	2028      	movs	r0, #40	; 0x28
 8005024:	f7ff feea 	bl	8004dfc <NVIC_EnableIRQ>
}
 8005028:	bf00      	nop
 800502a:	3720      	adds	r7, #32
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	0f000003 	.word	0x0f000003
 8005034:	04c002c2 	.word	0x04c002c2
 8005038:	40010c00 	.word	0x40010c00

0800503c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8005040:	2002      	movs	r0, #2
 8005042:	f7ff ff4d 	bl	8004ee0 <LL_EXTI_ClearFlag_0_31>

	button_status = true;
 8005046:	4b02      	ldr	r3, [pc, #8]	; (8005050 <EXTI1_IRQHandler+0x14>)
 8005048:	2201      	movs	r2, #1
 800504a:	701a      	strb	r2, [r3, #0]
}
 800504c:	bf00      	nop
 800504e:	bd80      	pop	{r7, pc}
 8005050:	200023dc 	.word	0x200023dc

08005054 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8005058:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800505c:	f7ff ff40 	bl	8004ee0 <LL_EXTI_ClearFlag_0_31>

	rotate_status = true;
 8005060:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <EXTI15_10_IRQHandler+0x44>)
 8005062:	2201      	movs	r2, #1
 8005064:	701a      	strb	r2, [r3, #0]
	rotate_pin_A = GPIO_Read_Pin(14);
 8005066:	200e      	movs	r0, #14
 8005068:	f000 f85c 	bl	8005124 <GPIO_Read_Pin>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	bf14      	ite	ne
 8005072:	2301      	movne	r3, #1
 8005074:	2300      	moveq	r3, #0
 8005076:	b2da      	uxtb	r2, r3
 8005078:	4b08      	ldr	r3, [pc, #32]	; (800509c <EXTI15_10_IRQHandler+0x48>)
 800507a:	701a      	strb	r2, [r3, #0]
	rotate_pin_B = GPIO_Read_Pin(15);
 800507c:	200f      	movs	r0, #15
 800507e:	f000 f851 	bl	8005124 <GPIO_Read_Pin>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	bf14      	ite	ne
 8005088:	2301      	movne	r3, #1
 800508a:	2300      	moveq	r3, #0
 800508c:	b2da      	uxtb	r2, r3
 800508e:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <EXTI15_10_IRQHandler+0x4c>)
 8005090:	701a      	strb	r2, [r3, #0]
}
 8005092:	bf00      	nop
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	200023dd 	.word	0x200023dd
 800509c:	200023de 	.word	0x200023de
 80050a0:	200023df 	.word	0x200023df

080050a4 <GetButton>:

bool GetButton(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
	return button_status;
 80050a8:	4b02      	ldr	r3, [pc, #8]	; (80050b4 <GetButton+0x10>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr
 80050b4:	200023dc 	.word	0x200023dc

080050b8 <ClearButton>:

void ClearButton()
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
    button_status = false;
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <ClearButton+0x14>)
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]
}
 80050c2:	bf00      	nop
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	200023dc 	.word	0x200023dc

080050d0 <GetRotateStatus>:

bool GetRotateStatus(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
	return rotate_status;
 80050d4:	4b02      	ldr	r3, [pc, #8]	; (80050e0 <GetRotateStatus+0x10>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr
 80050e0:	200023dd 	.word	0x200023dd

080050e4 <ClearRotateStatus>:

void ClearRotateStatus()
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
    rotate_status = false;
 80050e8:	4b03      	ldr	r3, [pc, #12]	; (80050f8 <ClearRotateStatus+0x14>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	701a      	strb	r2, [r3, #0]
}
 80050ee:	bf00      	nop
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc80      	pop	{r7}
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	200023dd 	.word	0x200023dd

080050fc <GetRotatePinB>:

bool GetRotatePinB()
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
	return rotate_pin_A;
 8005100:	4b02      	ldr	r3, [pc, #8]	; (800510c <GetRotatePinB+0x10>)
 8005102:	781b      	ldrb	r3, [r3, #0]
}
 8005104:	4618      	mov	r0, r3
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr
 800510c:	200023de 	.word	0x200023de

08005110 <GetRotatePinA>:

bool GetRotatePinA()
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
	return rotate_pin_B;
 8005114:	4b02      	ldr	r3, [pc, #8]	; (8005120 <GetRotatePinA+0x10>)
 8005116:	781b      	ldrb	r3, [r3, #0]
}
 8005118:	4618      	mov	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr
 8005120:	200023df 	.word	0x200023df

08005124 <GPIO_Read_Pin>:

uint8_t GPIO_Read_Pin(uint8_t mask)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	4603      	mov	r3, r0
 800512c:	71fb      	strb	r3, [r7, #7]
	uint16_t port_bits = LL_GPIO_ReadInputPort(GPIOB);
 800512e:	480a      	ldr	r0, [pc, #40]	; (8005158 <GPIO_Read_Pin+0x34>)
 8005130:	f7ff fee4 	bl	8004efc <LL_GPIO_ReadInputPort>
 8005134:	4603      	mov	r3, r0
 8005136:	81fb      	strh	r3, [r7, #14]
	return ((port_bits & (1 << mask)) != 0);
 8005138:	89fa      	ldrh	r2, [r7, #14]
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	fa42 f303 	asr.w	r3, r2, r3
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	bf14      	ite	ne
 8005148:	2301      	movne	r3, #1
 800514a:	2300      	moveq	r3, #0
 800514c:	b2db      	uxtb	r3, r3
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40010c00 	.word	0x40010c00

0800515c <EncoderQueueInit>:

xQueueHandle encoder_queue;
EncoderRotateInfo xEncoder_info;

void EncoderQueueInit(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
	encoder_queue = xQueueCreate( 2, sizeof(EncoderRotateInfo));
 8005160:	2200      	movs	r2, #0
 8005162:	2104      	movs	r1, #4
 8005164:	2002      	movs	r0, #2
 8005166:	f7fe fb15 	bl	8003794 <xQueueGenericCreate>
 800516a:	4602      	mov	r2, r0
 800516c:	4b01      	ldr	r3, [pc, #4]	; (8005174 <EncoderQueueInit+0x18>)
 800516e:	601a      	str	r2, [r3, #0]
}
 8005170:	bf00      	nop
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20003054 	.word	0x20003054

08005178 <EncoderQueue_Send>:

void EncoderQueue_Send(uint16_t value, uint8_t button)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	460a      	mov	r2, r1
 8005182:	80fb      	strh	r3, [r7, #6]
 8005184:	4613      	mov	r3, r2
 8005186:	717b      	strb	r3, [r7, #5]
	const portTickType xTicksToWait = 100 / portTICK_RATE_MS;
 8005188:	2364      	movs	r3, #100	; 0x64
 800518a:	60fb      	str	r3, [r7, #12]
	xEncoder_info.button = button;
 800518c:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8005190:	4b08      	ldr	r3, [pc, #32]	; (80051b4 <EncoderQueue_Send+0x3c>)
 8005192:	709a      	strb	r2, [r3, #2]
	xEncoder_info.state = value;
 8005194:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <EncoderQueue_Send+0x3c>)
 800519a:	801a      	strh	r2, [r3, #0]
	xQueueSendToBack(encoder_queue, &xEncoder_info, xTicksToWait);
 800519c:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <EncoderQueue_Send+0x40>)
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	2300      	movs	r3, #0
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4903      	ldr	r1, [pc, #12]	; (80051b4 <EncoderQueue_Send+0x3c>)
 80051a6:	f7fe fb4d 	bl	8003844 <xQueueGenericSend>
}
 80051aa:	bf00      	nop
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20003058 	.word	0x20003058
 80051b8:	20003054 	.word	0x20003054

080051bc <EncoderQueue_Receive>:

EncoderRotateInfo EncoderQueue_Receive(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
	EncoderRotateInfo value;
	xQueueReceive(encoder_queue, &value, 0);
 80051c2:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <EncoderQueue_Receive+0x30>)
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	4639      	mov	r1, r7
 80051c8:	2300      	movs	r3, #0
 80051ca:	2200      	movs	r2, #0
 80051cc:	f7fe fc34 	bl	8003a38 <xQueueGenericReceive>
	return value;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	607b      	str	r3, [r7, #4]
 80051d4:	2300      	movs	r3, #0
 80051d6:	88ba      	ldrh	r2, [r7, #4]
 80051d8:	f362 030f 	bfi	r3, r2, #0, #16
 80051dc:	88fa      	ldrh	r2, [r7, #6]
 80051de:	f362 431f 	bfi	r3, r2, #16, #16
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	20003054 	.word	0x20003054

080051f0 <EncoderQueue_IsElements>:
bool EncoderQueue_IsElements(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
	if(uxQueueMessagesWaiting(encoder_queue) > 0)
 80051f4:	4b06      	ldr	r3, [pc, #24]	; (8005210 <EncoderQueue_IsElements+0x20>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fe fd2f 	bl	8003c5c <uxQueueMessagesWaiting>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <EncoderQueue_IsElements+0x18>
	{
		return true;
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <EncoderQueue_IsElements+0x1a>
	}
	return false;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20003054 	.word	0x20003054

08005214 <pxEncoder>:
#include "encoder_queue.h"
#include "encoder.h"
#include "cmsis_os.h"

static void pxEncoder(void * arg)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	EncoderInit();
 800521c:	f7fb fd12 	bl	8000c44 <EncoderInit>
	static uint8_t encoder_button_step = 0;

	while(1)
	{
		switch(Encoder_State())
 8005220:	f7fb fd16 	bl	8000c50 <Encoder_State>
 8005224:	4603      	mov	r3, r0
 8005226:	2b03      	cmp	r3, #3
 8005228:	d827      	bhi.n	800527a <pxEncoder+0x66>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <pxEncoder+0x1c>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	0800527b 	.word	0x0800527b
 8005234:	0800525d 	.word	0x0800525d
 8005238:	0800526d 	.word	0x0800526d
 800523c:	08005241 	.word	0x08005241
		{
			case eNone: break;
			case eButton:
			{
				encoder_button_step++;
 8005240:	4b11      	ldr	r3, [pc, #68]	; (8005288 <pxEncoder+0x74>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	3301      	adds	r3, #1
 8005246:	b2da      	uxtb	r2, r3
 8005248:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <pxEncoder+0x74>)
 800524a:	701a      	strb	r2, [r3, #0]
				if(encoder_button_step > 4)
 800524c:	4b0e      	ldr	r3, [pc, #56]	; (8005288 <pxEncoder+0x74>)
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	2b04      	cmp	r3, #4
 8005252:	d914      	bls.n	800527e <pxEncoder+0x6a>
				{
					encoder_button_step = 0;
 8005254:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <pxEncoder+0x74>)
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
				}
				break;
 800525a:	e010      	b.n	800527e <pxEncoder+0x6a>
			}
			case eLeft:
			{
				EncoderQueue_Send(-100, encoder_button_step);
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <pxEncoder+0x74>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	4619      	mov	r1, r3
 8005262:	f64f 709c 	movw	r0, #65436	; 0xff9c
 8005266:	f7ff ff87 	bl	8005178 <EncoderQueue_Send>
				break;
 800526a:	e009      	b.n	8005280 <pxEncoder+0x6c>
			}
			case eRight:
			{
				EncoderQueue_Send(100, encoder_button_step);
 800526c:	4b06      	ldr	r3, [pc, #24]	; (8005288 <pxEncoder+0x74>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	4619      	mov	r1, r3
 8005272:	2064      	movs	r0, #100	; 0x64
 8005274:	f7ff ff80 	bl	8005178 <EncoderQueue_Send>
				break;
 8005278:	e002      	b.n	8005280 <pxEncoder+0x6c>
			}
			default: break;
 800527a:	bf00      	nop
 800527c:	e000      	b.n	8005280 <pxEncoder+0x6c>
				break;
 800527e:	bf00      	nop
		}
		osDelay(5);
 8005280:	2005      	movs	r0, #5
 8005282:	f7fd fe08 	bl	8002e96 <osDelay>
		switch(Encoder_State())
 8005286:	e7cb      	b.n	8005220 <pxEncoder+0xc>
 8005288:	200023e0 	.word	0x200023e0

0800528c <EncoderTaskInit>:
	}
}

void EncoderTaskInit(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af02      	add	r7, sp, #8
	xTaskCreate(pxEncoder, "Encoder", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 8005292:	2300      	movs	r3, #0
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	2300      	movs	r3, #0
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	2300      	movs	r3, #0
 800529c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052a0:	4903      	ldr	r1, [pc, #12]	; (80052b0 <EncoderTaskInit+0x24>)
 80052a2:	4804      	ldr	r0, [pc, #16]	; (80052b4 <EncoderTaskInit+0x28>)
 80052a4:	f7fe fe2c 	bl	8003f00 <xTaskCreate>
}
 80052a8:	bf00      	nop
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	08007ff0 	.word	0x08007ff0
 80052b4:	08005215 	.word	0x08005215

080052b8 <espStart>:
#include <stdbool.h>

static uint8_t gMissConnection = 0;

static uint8_t espStart(int fails)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b0a2      	sub	sp, #136	; 0x88
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	if(GPIO_Read_Pin(1) == 0) //if encoder button pushed turn softAP
 80052c0:	2001      	movs	r0, #1
 80052c2:	f7ff ff2f 	bl	8005124 <GPIO_Read_Pin>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d123      	bne.n	8005314 <espStart+0x5c>
	{
		while(ESP_SetModeSoftAP()==0 || ESP_SetParamsSoftAP("ESP", "12345678")==0 || ESP_StartTCPServer(80)==0)
 80052cc:	e00f      	b.n	80052ee <espStart+0x36>
		{
			gMissConnection++;
 80052ce:	4b3b      	ldr	r3, [pc, #236]	; (80053bc <espStart+0x104>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	4b39      	ldr	r3, [pc, #228]	; (80053bc <espStart+0x104>)
 80052d8:	701a      	strb	r2, [r3, #0]
			ESP_Resset();
 80052da:	f7fa ff71 	bl	80001c0 <ESP_Resset>
			if(gMissConnection >= fails)
 80052de:	4b37      	ldr	r3, [pc, #220]	; (80053bc <espStart+0x104>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	db01      	blt.n	80052ee <espStart+0x36>
			{
				return 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	e061      	b.n	80053b2 <espStart+0xfa>
		while(ESP_SetModeSoftAP()==0 || ESP_SetParamsSoftAP("ESP", "12345678")==0 || ESP_StartTCPServer(80)==0)
 80052ee:	f7fa ffdb 	bl	80002a8 <ESP_SetModeSoftAP>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0ea      	beq.n	80052ce <espStart+0x16>
 80052f8:	4931      	ldr	r1, [pc, #196]	; (80053c0 <espStart+0x108>)
 80052fa:	4832      	ldr	r0, [pc, #200]	; (80053c4 <espStart+0x10c>)
 80052fc:	f7fa ffe4 	bl	80002c8 <ESP_SetParamsSoftAP>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0e3      	beq.n	80052ce <espStart+0x16>
 8005306:	2050      	movs	r0, #80	; 0x50
 8005308:	f7fb f852 	bl	80003b0 <ESP_StartTCPServer>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0dd      	beq.n	80052ce <espStart+0x16>
 8005312:	e04d      	b.n	80053b0 <espStart+0xf8>
	}
	else //else read ssid and passwd from EEPROM and connect to wifi
	{
		char ssid[64], paswd[64];

		I2C2_ReadData(0xA0, (uint8_t *)ssid, 32);
 8005314:	f107 0308 	add.w	r3, r7, #8
 8005318:	2220      	movs	r2, #32
 800531a:	4619      	mov	r1, r3
 800531c:	20a0      	movs	r0, #160	; 0xa0
 800531e:	f000 faa9 	bl	8005874 <I2C2_ReadData>
		delay(5);
 8005322:	2005      	movs	r0, #5
 8005324:	f7ff fd44 	bl	8004db0 <delay>
		I2C2_ReadData(0xD0, (uint8_t *)paswd, 32);
 8005328:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800532c:	2220      	movs	r2, #32
 800532e:	4619      	mov	r1, r3
 8005330:	20d0      	movs	r0, #208	; 0xd0
 8005332:	f000 fa9f 	bl	8005874 <I2C2_ReadData>

		while(strlen(ssid)==0 || ESP_SetModeStation()==0 || ESP_SetParamsStation(ssid, paswd)==0 || ESP_StartTCPServer(80)==0)
 8005336:	e020      	b.n	800537a <espStart+0xc2>
		{
			I2C2_ReadData(0xA0, (uint8_t *)ssid, 32);
 8005338:	f107 0308 	add.w	r3, r7, #8
 800533c:	2220      	movs	r2, #32
 800533e:	4619      	mov	r1, r3
 8005340:	20a0      	movs	r0, #160	; 0xa0
 8005342:	f000 fa97 	bl	8005874 <I2C2_ReadData>
			delay(5);
 8005346:	2005      	movs	r0, #5
 8005348:	f7ff fd32 	bl	8004db0 <delay>
			I2C2_ReadData(0xD0, (uint8_t *)paswd, 32);
 800534c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005350:	2220      	movs	r2, #32
 8005352:	4619      	mov	r1, r3
 8005354:	20d0      	movs	r0, #208	; 0xd0
 8005356:	f000 fa8d 	bl	8005874 <I2C2_ReadData>

			gMissConnection++;
 800535a:	4b18      	ldr	r3, [pc, #96]	; (80053bc <espStart+0x104>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	3301      	adds	r3, #1
 8005360:	b2da      	uxtb	r2, r3
 8005362:	4b16      	ldr	r3, [pc, #88]	; (80053bc <espStart+0x104>)
 8005364:	701a      	strb	r2, [r3, #0]
			ESP_Resset();
 8005366:	f7fa ff2b 	bl	80001c0 <ESP_Resset>
			if(gMissConnection >= fails)
 800536a:	4b14      	ldr	r3, [pc, #80]	; (80053bc <espStart+0x104>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	429a      	cmp	r2, r3
 8005374:	db01      	blt.n	800537a <espStart+0xc2>
			{
				return 0;
 8005376:	2300      	movs	r3, #0
 8005378:	e01b      	b.n	80053b2 <espStart+0xfa>
		while(strlen(ssid)==0 || ESP_SetModeStation()==0 || ESP_SetParamsStation(ssid, paswd)==0 || ESP_StartTCPServer(80)==0)
 800537a:	f107 0308 	add.w	r3, r7, #8
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0d9      	beq.n	8005338 <espStart+0x80>
 8005384:	f7fa ff88 	bl	8000298 <ESP_SetModeStation>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0d4      	beq.n	8005338 <espStart+0x80>
 800538e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005392:	f107 0308 	add.w	r3, r7, #8
 8005396:	4611      	mov	r1, r2
 8005398:	4618      	mov	r0, r3
 800539a:	f7fa ffd7 	bl	800034c <ESP_SetParamsStation>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0c9      	beq.n	8005338 <espStart+0x80>
 80053a4:	2050      	movs	r0, #80	; 0x50
 80053a6:	f7fb f803 	bl	80003b0 <ESP_StartTCPServer>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0c3      	beq.n	8005338 <espStart+0x80>
			}
		}
	}

	return 1;
 80053b0:	2301      	movs	r3, #1
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3788      	adds	r7, #136	; 0x88
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	200023e1 	.word	0x200023e1
 80053c0:	08007ff8 	.word	0x08007ff8
 80053c4:	08008004 	.word	0x08008004

080053c8 <pxESP>:

static void pxESP(void * arg)
{
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	uint8_t config_flag = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	73fb      	strb	r3, [r7, #15]
	StatusLedInit();
 80053d4:	f001 fade 	bl	8006994 <StatusLedInit>
	ESPInit();
 80053d8:	f7fa feea 	bl	80001b0 <ESPInit>

	if(espStart(5)) // start blinking if cannot start
 80053dc:	2005      	movs	r0, #5
 80053de:	f7ff ff6b 	bl	80052b8 <espStart>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <pxESP+0x24>
	{
		StatusLedON();
 80053e8:	f001 fafc 	bl	80069e4 <StatusLedON>
	}

	while(1)
	{
		if(strlen(GetSSID()) > 1 && config_flag == 0) // check if change wifi settings
 80053ec:	f7fb f96a 	bl	80006c4 <GetSSID>
 80053f0:	4603      	mov	r3, r0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fa feac 	bl	8000150 <strlen>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d934      	bls.n	8005468 <pxESP+0xa0>
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d131      	bne.n	8005468 <pxESP+0xa0>
		{
			ESP_StopTCPServer(80); //dummy for reset tcp server flag
 8005404:	2050      	movs	r0, #80	; 0x50
 8005406:	f7fb f819 	bl	800043c <ESP_StopTCPServer>
			config_flag = 1;
 800540a:	2301      	movs	r3, #1
 800540c:	73fb      	strb	r3, [r7, #15]

			if(ESP_SetModeBoth()==0 || ESP_SetParamsStation(GetSSID(), GetPasw())==0 || ESP_StartTCPServer(80)==0)
 800540e:	f7fa ff53 	bl	80002b8 <ESP_SetModeBoth>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d012      	beq.n	800543e <pxESP+0x76>
 8005418:	f7fb f954 	bl	80006c4 <GetSSID>
 800541c:	4604      	mov	r4, r0
 800541e:	f7fb f979 	bl	8000714 <GetPasw>
 8005422:	4603      	mov	r3, r0
 8005424:	4619      	mov	r1, r3
 8005426:	4620      	mov	r0, r4
 8005428:	f7fa ff90 	bl	800034c <ESP_SetParamsStation>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <pxESP+0x76>
 8005432:	2050      	movs	r0, #80	; 0x50
 8005434:	f7fa ffbc 	bl	80003b0 <ESP_StartTCPServer>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <pxESP+0x7a>
			{
				config_flag = 0;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
			}
			//APModeBlink();
			I2C2_SendData(0xA0, (uint8_t *)GetSSID(), 32); //save new wifi settings
 8005442:	f7fb f93f 	bl	80006c4 <GetSSID>
 8005446:	4603      	mov	r3, r0
 8005448:	2220      	movs	r2, #32
 800544a:	4619      	mov	r1, r3
 800544c:	20a0      	movs	r0, #160	; 0xa0
 800544e:	f000 f9a9 	bl	80057a4 <I2C2_SendData>
			delay(5);
 8005452:	2005      	movs	r0, #5
 8005454:	f7ff fcac 	bl	8004db0 <delay>
			I2C2_SendData(0xD0, (uint8_t *)GetPasw(), 32);
 8005458:	f7fb f95c 	bl	8000714 <GetPasw>
 800545c:	4603      	mov	r3, r0
 800545e:	2220      	movs	r2, #32
 8005460:	4619      	mov	r1, r3
 8005462:	20d0      	movs	r0, #208	; 0xd0
 8005464:	f000 f99e 	bl	80057a4 <I2C2_SendData>
		}

		ESP_Request(PAGES, FUNCTIONS, 4); // process requests
 8005468:	2204      	movs	r2, #4
 800546a:	4904      	ldr	r1, [pc, #16]	; (800547c <pxESP+0xb4>)
 800546c:	4804      	ldr	r0, [pc, #16]	; (8005480 <pxESP+0xb8>)
 800546e:	f7fb ff61 	bl	8001334 <ESP_Request>
		osDelay(10);
 8005472:	200a      	movs	r0, #10
 8005474:	f7fd fd0f 	bl	8002e96 <osDelay>
		if(strlen(GetSSID()) > 1 && config_flag == 0) // check if change wifi settings
 8005478:	e7b8      	b.n	80053ec <pxESP+0x24>
 800547a:	bf00      	nop
 800547c:	08008030 	.word	0x08008030
 8005480:	20000078 	.word	0x20000078

08005484 <ESPTaskInit>:
	}
}


void ESPTaskInit(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af02      	add	r7, sp, #8
	xTaskCreate(pxESP, "ESP", configMINIMAL_STACK_SIZE, NULL, osPriorityAboveNormal, NULL);
 800548a:	2300      	movs	r3, #0
 800548c:	9301      	str	r3, [sp, #4]
 800548e:	2301      	movs	r3, #1
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	2300      	movs	r3, #0
 8005494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005498:	4903      	ldr	r1, [pc, #12]	; (80054a8 <ESPTaskInit+0x24>)
 800549a:	4804      	ldr	r0, [pc, #16]	; (80054ac <ESPTaskInit+0x28>)
 800549c:	f7fe fd30 	bl	8003f00 <xTaskCreate>
}
 80054a0:	bf00      	nop
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	08008004 	.word	0x08008004
 80054ac:	080053c9 	.word	0x080053c9

080054b0 <LL_I2C_EnableClockStretching>:
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	601a      	str	r2, [r3, #0]
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr

080054ce <LL_I2C_DisableGeneralCall>:
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	601a      	str	r2, [r3, #0]
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bc80      	pop	{r7}
 80054ea:	4770      	bx	lr

080054ec <LL_I2C_SetOwnAddress2>:
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60da      	str	r2, [r3, #12]
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr

08005510 <LL_I2C_DisableOwnAddress2>:
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f023 0201 	bic.w	r2, r3, #1
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	60da      	str	r2, [r3, #12]
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr

0800552e <LL_I2C_IsActiveFlag_TXE>:
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553e:	2b80      	cmp	r3, #128	; 0x80
 8005540:	bf0c      	ite	eq
 8005542:	2301      	moveq	r3, #1
 8005544:	2300      	movne	r3, #0
 8005546:	b2db      	uxtb	r3, r3
}
 8005548:	4618      	mov	r0, r3
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr

08005552 <LL_I2C_IsActiveFlag_RXNE>:
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005562:	2b40      	cmp	r3, #64	; 0x40
 8005564:	bf0c      	ite	eq
 8005566:	2301      	moveq	r3, #1
 8005568:	2300      	movne	r3, #0
 800556a:	b2db      	uxtb	r3, r3
}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr

08005576 <LL_I2C_IsActiveFlag_SB>:
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b01      	cmp	r3, #1
 8005588:	bf0c      	ite	eq
 800558a:	2301      	moveq	r3, #1
 800558c:	2300      	movne	r3, #0
 800558e:	b2db      	uxtb	r3, r3
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr

0800559a <LL_I2C_IsActiveFlag_ADDR>:
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	bf0c      	ite	eq
 80055ae:	2301      	moveq	r3, #1
 80055b0:	2300      	movne	r3, #0
 80055b2:	b2db      	uxtb	r3, r3
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bc80      	pop	{r7}
 80055bc:	4770      	bx	lr

080055be <LL_I2C_ClearFlag_ADDR>:
{
 80055be:	b480      	push	{r7}
 80055c0:	b085      	sub	sp, #20
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  tmpreg = I2Cx->SR1;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80055cc:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80055d4:	68fb      	ldr	r3, [r7, #12]
}
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr

080055e0 <LL_I2C_AcknowledgeNextData>:
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	431a      	orrs	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	601a      	str	r2, [r3, #0]
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	601a      	str	r2, [r3, #0]
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr

08005622 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	601a      	str	r2, [r3, #0]
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr

08005640 <LL_I2C_DisableBitPOS>:
  * @rmtoll CR1          POS           LL_I2C_DisableBitPOS
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableBitPOS(I2C_TypeDef *I2Cx)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	601a      	str	r2, [r3, #0]
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr

0800565e <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	b2db      	uxtb	r3, r3
}
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr

08005676 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	460b      	mov	r3, r1
 8005680:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	611a      	str	r2, [r3, #16]
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr

0800569c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80056a4:	4908      	ldr	r1, [pc, #32]	; (80056c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80056a6:	4b08      	ldr	r3, [pc, #32]	; (80056c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80056a8:	69da      	ldr	r2, [r3, #28]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80056b0:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4013      	ands	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80056ba:	68fb      	ldr	r3, [r7, #12]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bc80      	pop	{r7}
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40021000 	.word	0x40021000

080056cc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80056d4:	4908      	ldr	r1, [pc, #32]	; (80056f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80056d6:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4313      	orrs	r3, r2
 80056de:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4013      	ands	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80056ea:	68fb      	ldr	r3, [r7, #12]
}
 80056ec:	bf00      	nop
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40021000 	.word	0x40021000

080056fc <MX_I2C2_Init>:
#define I2C_REQUEST_READ                        0x01
#define SLAVE_OWN_ADDRESS                       0xA0
#define TIMEOUT									100

void MX_I2C2_Init(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08c      	sub	sp, #48	; 0x30
 8005700:	af00      	add	r7, sp, #0
	LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8005702:	f107 0318 	add.w	r3, r7, #24
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	605a      	str	r2, [r3, #4]
 800570c:	609a      	str	r2, [r3, #8]
 800570e:	60da      	str	r2, [r3, #12]
 8005710:	611a      	str	r2, [r3, #16]
 8005712:	615a      	str	r2, [r3, #20]
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005714:	1d3b      	adds	r3, r7, #4
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	605a      	str	r2, [r3, #4]
 800571c:	609a      	str	r2, [r3, #8]
 800571e:	60da      	str	r2, [r3, #12]
 8005720:	611a      	str	r2, [r3, #16]

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8005722:	2008      	movs	r0, #8
 8005724:	f7ff ffd2 	bl	80056cc <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8005728:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800572c:	f7ff ffb6 	bl	800569c <LL_APB1_GRP1_EnableClock>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8005730:	4b18      	ldr	r3, [pc, #96]	; (8005794 <MX_I2C2_Init+0x98>)
 8005732:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005734:	2309      	movs	r3, #9
 8005736:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005738:	2303      	movs	r3, #3
 800573a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800573c:	2304      	movs	r3, #4
 800573e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005740:	1d3b      	adds	r3, r7, #4
 8005742:	4619      	mov	r1, r3
 8005744:	4814      	ldr	r0, [pc, #80]	; (8005798 <MX_I2C2_Init+0x9c>)
 8005746:	f7fc fc74 	bl	8002032 <LL_GPIO_Init>

	LL_I2C_DisableOwnAddress2(I2C2);
 800574a:	4814      	ldr	r0, [pc, #80]	; (800579c <MX_I2C2_Init+0xa0>)
 800574c:	f7ff fee0 	bl	8005510 <LL_I2C_DisableOwnAddress2>
	LL_I2C_DisableGeneralCall(I2C2);
 8005750:	4812      	ldr	r0, [pc, #72]	; (800579c <MX_I2C2_Init+0xa0>)
 8005752:	f7ff febc 	bl	80054ce <LL_I2C_DisableGeneralCall>
	LL_I2C_EnableClockStretching(I2C2);
 8005756:	4811      	ldr	r0, [pc, #68]	; (800579c <MX_I2C2_Init+0xa0>)
 8005758:	f7ff feaa 	bl	80054b0 <LL_I2C_EnableClockStretching>
	I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800575c:	2300      	movs	r3, #0
 800575e:	61bb      	str	r3, [r7, #24]
	I2C_InitStruct.ClockSpeed = 100000;
 8005760:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <MX_I2C2_Init+0xa4>)
 8005762:	61fb      	str	r3, [r7, #28]
	I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8005764:	2300      	movs	r3, #0
 8005766:	623b      	str	r3, [r7, #32]
	I2C_InitStruct.OwnAddress1 = 0;
 8005768:	2300      	movs	r3, #0
 800576a:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800576c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005770:	62bb      	str	r3, [r7, #40]	; 0x28
	I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8005772:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005776:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_I2C_Init(I2C2, &I2C_InitStruct);
 8005778:	f107 0318 	add.w	r3, r7, #24
 800577c:	4619      	mov	r1, r3
 800577e:	4807      	ldr	r0, [pc, #28]	; (800579c <MX_I2C2_Init+0xa0>)
 8005780:	f7fc fda2 	bl	80022c8 <LL_I2C_Init>
	LL_I2C_SetOwnAddress2(I2C2, 0);
 8005784:	2100      	movs	r1, #0
 8005786:	4805      	ldr	r0, [pc, #20]	; (800579c <MX_I2C2_Init+0xa0>)
 8005788:	f7ff feb0 	bl	80054ec <LL_I2C_SetOwnAddress2>
}
 800578c:	bf00      	nop
 800578e:	3730      	adds	r7, #48	; 0x30
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	040c000c 	.word	0x040c000c
 8005798:	40010c00 	.word	0x40010c00
 800579c:	40005800 	.word	0x40005800
 80057a0:	000186a0 	.word	0x000186a0

080057a4 <I2C2_SendData>:

bool I2C2_SendData(uint16_t addr, uint8_t * data, uint32_t data_length)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
 80057b0:	81fb      	strh	r3, [r7, #14]
	//LL_I2C_Enable(I2C2);
	LL_I2C_DisableBitPOS(I2C2);
 80057b2:	482f      	ldr	r0, [pc, #188]	; (8005870 <I2C2_SendData+0xcc>)
 80057b4:	f7ff ff44 	bl	8005640 <LL_I2C_DisableBitPOS>
	LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_ACK);
 80057b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057bc:	482c      	ldr	r0, [pc, #176]	; (8005870 <I2C2_SendData+0xcc>)
 80057be:	f7ff ff0f 	bl	80055e0 <LL_I2C_AcknowledgeNextData>
	LL_I2C_GenerateStartCondition(I2C2);
 80057c2:	482b      	ldr	r0, [pc, #172]	; (8005870 <I2C2_SendData+0xcc>)
 80057c4:	f7ff ff1e 	bl	8005604 <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C2));
 80057c8:	bf00      	nop
 80057ca:	4829      	ldr	r0, [pc, #164]	; (8005870 <I2C2_SendData+0xcc>)
 80057cc:	f7ff fed3 	bl	8005576 <LL_I2C_IsActiveFlag_SB>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0f9      	beq.n	80057ca <I2C2_SendData+0x26>

	(void) I2C2->SR1;
 80057d6:	4b26      	ldr	r3, [pc, #152]	; (8005870 <I2C2_SendData+0xcc>)
 80057d8:	695b      	ldr	r3, [r3, #20]
	LL_I2C_TransmitData8(I2C2, SLAVE_OWN_ADDRESS | I2C_REQUEST_WRITE);
 80057da:	21a0      	movs	r1, #160	; 0xa0
 80057dc:	4824      	ldr	r0, [pc, #144]	; (8005870 <I2C2_SendData+0xcc>)
 80057de:	f7ff ff4a 	bl	8005676 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C2));
 80057e2:	bf00      	nop
 80057e4:	4822      	ldr	r0, [pc, #136]	; (8005870 <I2C2_SendData+0xcc>)
 80057e6:	f7ff fed8 	bl	800559a <LL_I2C_IsActiveFlag_ADDR>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0f9      	beq.n	80057e4 <I2C2_SendData+0x40>

	LL_I2C_ClearFlag_ADDR(I2C2);
 80057f0:	481f      	ldr	r0, [pc, #124]	; (8005870 <I2C2_SendData+0xcc>)
 80057f2:	f7ff fee4 	bl	80055be <LL_I2C_ClearFlag_ADDR>

	LL_I2C_TransmitData8(I2C2, (uint8_t) (addr>>8));
 80057f6:	89fb      	ldrh	r3, [r7, #14]
 80057f8:	0a1b      	lsrs	r3, r3, #8
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	4619      	mov	r1, r3
 8005800:	481b      	ldr	r0, [pc, #108]	; (8005870 <I2C2_SendData+0xcc>)
 8005802:	f7ff ff38 	bl	8005676 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C2));
 8005806:	bf00      	nop
 8005808:	4819      	ldr	r0, [pc, #100]	; (8005870 <I2C2_SendData+0xcc>)
 800580a:	f7ff fe90 	bl	800552e <LL_I2C_IsActiveFlag_TXE>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f9      	beq.n	8005808 <I2C2_SendData+0x64>

	LL_I2C_TransmitData8(I2C2, (uint8_t) addr);
 8005814:	89fb      	ldrh	r3, [r7, #14]
 8005816:	b2db      	uxtb	r3, r3
 8005818:	4619      	mov	r1, r3
 800581a:	4815      	ldr	r0, [pc, #84]	; (8005870 <I2C2_SendData+0xcc>)
 800581c:	f7ff ff2b 	bl	8005676 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C2));
 8005820:	bf00      	nop
 8005822:	4813      	ldr	r0, [pc, #76]	; (8005870 <I2C2_SendData+0xcc>)
 8005824:	f7ff fe83 	bl	800552e <LL_I2C_IsActiveFlag_TXE>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0f9      	beq.n	8005822 <I2C2_SendData+0x7e>

	for(int i = 0; i < data_length; i++)
 800582e:	2300      	movs	r3, #0
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	e011      	b.n	8005858 <I2C2_SendData+0xb4>
	{
		LL_I2C_TransmitData8(I2C2, data[i]);
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	4413      	add	r3, r2
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	4619      	mov	r1, r3
 800583e:	480c      	ldr	r0, [pc, #48]	; (8005870 <I2C2_SendData+0xcc>)
 8005840:	f7ff ff19 	bl	8005676 <LL_I2C_TransmitData8>
		while(!LL_I2C_IsActiveFlag_TXE(I2C2));
 8005844:	bf00      	nop
 8005846:	480a      	ldr	r0, [pc, #40]	; (8005870 <I2C2_SendData+0xcc>)
 8005848:	f7ff fe71 	bl	800552e <LL_I2C_IsActiveFlag_TXE>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0f9      	beq.n	8005846 <I2C2_SendData+0xa2>
	for(int i = 0; i < data_length; i++)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	3301      	adds	r3, #1
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	429a      	cmp	r2, r3
 800585e:	d3e9      	bcc.n	8005834 <I2C2_SendData+0x90>
	}
	LL_I2C_GenerateStopCondition(I2C2);
 8005860:	4803      	ldr	r0, [pc, #12]	; (8005870 <I2C2_SendData+0xcc>)
 8005862:	f7ff fede 	bl	8005622 <LL_I2C_GenerateStopCondition>
	//LL_I2C_Disable(I2C2);
	return 1;
 8005866:	2301      	movs	r3, #1
}
 8005868:	4618      	mov	r0, r3
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40005800 	.word	0x40005800

08005874 <I2C2_ReadData>:

bool I2C2_ReadData(uint16_t addr, uint8_t * data, uint32_t data_length)
{
 8005874:	b590      	push	{r4, r7, lr}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	81fb      	strh	r3, [r7, #14]
	//LL_I2C_Enable(I2C2);
	LL_I2C_DisableBitPOS(I2C2);
 8005882:	4849      	ldr	r0, [pc, #292]	; (80059a8 <I2C2_ReadData+0x134>)
 8005884:	f7ff fedc 	bl	8005640 <LL_I2C_DisableBitPOS>
	LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_ACK);
 8005888:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800588c:	4846      	ldr	r0, [pc, #280]	; (80059a8 <I2C2_ReadData+0x134>)
 800588e:	f7ff fea7 	bl	80055e0 <LL_I2C_AcknowledgeNextData>
	LL_I2C_GenerateStartCondition(I2C2);
 8005892:	4845      	ldr	r0, [pc, #276]	; (80059a8 <I2C2_ReadData+0x134>)
 8005894:	f7ff feb6 	bl	8005604 <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C2));
 8005898:	bf00      	nop
 800589a:	4843      	ldr	r0, [pc, #268]	; (80059a8 <I2C2_ReadData+0x134>)
 800589c:	f7ff fe6b 	bl	8005576 <LL_I2C_IsActiveFlag_SB>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f9      	beq.n	800589a <I2C2_ReadData+0x26>

	(void) I2C2->SR1;
 80058a6:	4b40      	ldr	r3, [pc, #256]	; (80059a8 <I2C2_ReadData+0x134>)
 80058a8:	695b      	ldr	r3, [r3, #20]
	LL_I2C_TransmitData8(I2C2, SLAVE_OWN_ADDRESS | I2C_REQUEST_WRITE);
 80058aa:	21a0      	movs	r1, #160	; 0xa0
 80058ac:	483e      	ldr	r0, [pc, #248]	; (80059a8 <I2C2_ReadData+0x134>)
 80058ae:	f7ff fee2 	bl	8005676 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C2));
 80058b2:	bf00      	nop
 80058b4:	483c      	ldr	r0, [pc, #240]	; (80059a8 <I2C2_ReadData+0x134>)
 80058b6:	f7ff fe70 	bl	800559a <LL_I2C_IsActiveFlag_ADDR>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f9      	beq.n	80058b4 <I2C2_ReadData+0x40>

	LL_I2C_ClearFlag_ADDR(I2C2);
 80058c0:	4839      	ldr	r0, [pc, #228]	; (80059a8 <I2C2_ReadData+0x134>)
 80058c2:	f7ff fe7c 	bl	80055be <LL_I2C_ClearFlag_ADDR>
	LL_I2C_TransmitData8(I2C2, (uint8_t) (addr>>8));
 80058c6:	89fb      	ldrh	r3, [r7, #14]
 80058c8:	0a1b      	lsrs	r3, r3, #8
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	4619      	mov	r1, r3
 80058d0:	4835      	ldr	r0, [pc, #212]	; (80059a8 <I2C2_ReadData+0x134>)
 80058d2:	f7ff fed0 	bl	8005676 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C2));
 80058d6:	bf00      	nop
 80058d8:	4833      	ldr	r0, [pc, #204]	; (80059a8 <I2C2_ReadData+0x134>)
 80058da:	f7ff fe28 	bl	800552e <LL_I2C_IsActiveFlag_TXE>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0f9      	beq.n	80058d8 <I2C2_ReadData+0x64>

	LL_I2C_TransmitData8(I2C2, (uint8_t) addr);
 80058e4:	89fb      	ldrh	r3, [r7, #14]
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	4619      	mov	r1, r3
 80058ea:	482f      	ldr	r0, [pc, #188]	; (80059a8 <I2C2_ReadData+0x134>)
 80058ec:	f7ff fec3 	bl	8005676 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C2));
 80058f0:	bf00      	nop
 80058f2:	482d      	ldr	r0, [pc, #180]	; (80059a8 <I2C2_ReadData+0x134>)
 80058f4:	f7ff fe1b 	bl	800552e <LL_I2C_IsActiveFlag_TXE>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0f9      	beq.n	80058f2 <I2C2_ReadData+0x7e>

	LL_I2C_GenerateStartCondition(I2C2);
 80058fe:	482a      	ldr	r0, [pc, #168]	; (80059a8 <I2C2_ReadData+0x134>)
 8005900:	f7ff fe80 	bl	8005604 <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C2));
 8005904:	bf00      	nop
 8005906:	4828      	ldr	r0, [pc, #160]	; (80059a8 <I2C2_ReadData+0x134>)
 8005908:	f7ff fe35 	bl	8005576 <LL_I2C_IsActiveFlag_SB>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f9      	beq.n	8005906 <I2C2_ReadData+0x92>
	(void) I2C2->SR1;
 8005912:	4b25      	ldr	r3, [pc, #148]	; (80059a8 <I2C2_ReadData+0x134>)
 8005914:	695b      	ldr	r3, [r3, #20]
	LL_I2C_TransmitData8(I2C2, SLAVE_OWN_ADDRESS | I2C_REQUEST_READ);
 8005916:	21a1      	movs	r1, #161	; 0xa1
 8005918:	4823      	ldr	r0, [pc, #140]	; (80059a8 <I2C2_ReadData+0x134>)
 800591a:	f7ff feac 	bl	8005676 <LL_I2C_TransmitData8>
	while (!LL_I2C_IsActiveFlag_ADDR(I2C2));
 800591e:	bf00      	nop
 8005920:	4821      	ldr	r0, [pc, #132]	; (80059a8 <I2C2_ReadData+0x134>)
 8005922:	f7ff fe3a 	bl	800559a <LL_I2C_IsActiveFlag_ADDR>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0f9      	beq.n	8005920 <I2C2_ReadData+0xac>
	LL_I2C_ClearFlag_ADDR(I2C2);
 800592c:	481e      	ldr	r0, [pc, #120]	; (80059a8 <I2C2_ReadData+0x134>)
 800592e:	f7ff fe46 	bl	80055be <LL_I2C_ClearFlag_ADDR>
	for(int i = 0; i < data_length; i++)
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e02d      	b.n	8005994 <I2C2_ReadData+0x120>
	{
		if(i < (data_length-1))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	1e5a      	subs	r2, r3, #1
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	429a      	cmp	r2, r3
 8005940:	d90f      	bls.n	8005962 <I2C2_ReadData+0xee>
		{
			while(!LL_I2C_IsActiveFlag_RXNE(I2C2));
 8005942:	bf00      	nop
 8005944:	4818      	ldr	r0, [pc, #96]	; (80059a8 <I2C2_ReadData+0x134>)
 8005946:	f7ff fe04 	bl	8005552 <LL_I2C_IsActiveFlag_RXNE>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0f9      	beq.n	8005944 <I2C2_ReadData+0xd0>
			data[i] = LL_I2C_ReceiveData8(I2C2);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	18d4      	adds	r4, r2, r3
 8005956:	4814      	ldr	r0, [pc, #80]	; (80059a8 <I2C2_ReadData+0x134>)
 8005958:	f7ff fe81 	bl	800565e <LL_I2C_ReceiveData8>
 800595c:	4603      	mov	r3, r0
 800595e:	7023      	strb	r3, [r4, #0]
 8005960:	e015      	b.n	800598e <I2C2_ReadData+0x11a>
		}
		else
		{
			LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_NACK);
 8005962:	2100      	movs	r1, #0
 8005964:	4810      	ldr	r0, [pc, #64]	; (80059a8 <I2C2_ReadData+0x134>)
 8005966:	f7ff fe3b 	bl	80055e0 <LL_I2C_AcknowledgeNextData>
			LL_I2C_GenerateStopCondition(I2C2);
 800596a:	480f      	ldr	r0, [pc, #60]	; (80059a8 <I2C2_ReadData+0x134>)
 800596c:	f7ff fe59 	bl	8005622 <LL_I2C_GenerateStopCondition>
			while(!LL_I2C_IsActiveFlag_RXNE(I2C2));
 8005970:	bf00      	nop
 8005972:	480d      	ldr	r0, [pc, #52]	; (80059a8 <I2C2_ReadData+0x134>)
 8005974:	f7ff fded 	bl	8005552 <LL_I2C_IsActiveFlag_RXNE>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0f9      	beq.n	8005972 <I2C2_ReadData+0xfe>
			data[i] = LL_I2C_ReceiveData8(I2C2);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	18d4      	adds	r4, r2, r3
 8005984:	4808      	ldr	r0, [pc, #32]	; (80059a8 <I2C2_ReadData+0x134>)
 8005986:	f7ff fe6a 	bl	800565e <LL_I2C_ReceiveData8>
 800598a:	4603      	mov	r3, r0
 800598c:	7023      	strb	r3, [r4, #0]
	for(int i = 0; i < data_length; i++)
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	3301      	adds	r3, #1
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	429a      	cmp	r2, r3
 800599a:	d3cd      	bcc.n	8005938 <I2C2_ReadData+0xc4>
		}
	}
	//LL_I2C_Disable(I2C2);
	return 1;
 800599c:	2301      	movs	r3, #1
}
 800599e:	4618      	mov	r0, r3
 80059a0:	371c      	adds	r7, #28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd90      	pop	{r4, r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40005800 	.word	0x40005800

080059ac <NVIC_GetPriorityGrouping>:
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059b0:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <NVIC_GetPriorityGrouping+0x18>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	0a1b      	lsrs	r3, r3, #8
 80059b6:	f003 0307 	and.w	r3, r3, #7
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	e000ed00 	.word	0xe000ed00

080059c8 <NVIC_EnableIRQ>:
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	4603      	mov	r3, r0
 80059d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80059d2:	4908      	ldr	r1, [pc, #32]	; (80059f4 <NVIC_EnableIRQ+0x2c>)
 80059d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d8:	095b      	lsrs	r3, r3, #5
 80059da:	79fa      	ldrb	r2, [r7, #7]
 80059dc:	f002 021f 	and.w	r2, r2, #31
 80059e0:	2001      	movs	r0, #1
 80059e2:	fa00 f202 	lsl.w	r2, r0, r2
 80059e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr
 80059f4:	e000e100 	.word	0xe000e100

080059f8 <NVIC_SetPriority>:
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	6039      	str	r1, [r7, #0]
 8005a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8005a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	da0b      	bge.n	8005a24 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a0c:	490d      	ldr	r1, [pc, #52]	; (8005a44 <NVIC_SetPriority+0x4c>)
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	3b04      	subs	r3, #4
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	0112      	lsls	r2, r2, #4
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	440b      	add	r3, r1
 8005a20:	761a      	strb	r2, [r3, #24]
}
 8005a22:	e009      	b.n	8005a38 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a24:	4908      	ldr	r1, [pc, #32]	; (8005a48 <NVIC_SetPriority+0x50>)
 8005a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	0112      	lsls	r2, r2, #4
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	440b      	add	r3, r1
 8005a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bc80      	pop	{r7}
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	e000ed00 	.word	0xe000ed00
 8005a48:	e000e100 	.word	0xe000e100

08005a4c <NVIC_EncodePriority>:
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b089      	sub	sp, #36	; 0x24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	f1c3 0307 	rsb	r3, r3, #7
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	bf28      	it	cs
 8005a6a:	2304      	movcs	r3, #4
 8005a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	3304      	adds	r3, #4
 8005a72:	2b06      	cmp	r3, #6
 8005a74:	d902      	bls.n	8005a7c <NVIC_EncodePriority+0x30>
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	3b03      	subs	r3, #3
 8005a7a:	e000      	b.n	8005a7e <NVIC_EncodePriority+0x32>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a80:	2201      	movs	r2, #1
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	1e5a      	subs	r2, r3, #1
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	401a      	ands	r2, r3
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a92:	2101      	movs	r1, #1
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9a:	1e59      	subs	r1, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aa0:	4313      	orrs	r3, r2
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3724      	adds	r7, #36	; 0x24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr

08005aac <LL_ADC_REG_SetSequencerRanks>:
{
 8005aac:	b490      	push	{r4, r7}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	332c      	adds	r3, #44	; 0x2c
 8005abc:	4619      	mov	r1, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005ac4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	fa93 f3a3 	rbit	r3, r3
 8005ad0:	613b      	str	r3, [r7, #16]
  return(result);
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	fab3 f383 	clz	r3, r3
 8005ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 031f 	and.w	r3, r3, #31
 8005aea:	211f      	movs	r1, #31
 8005aec:	fa01 f303 	lsl.w	r3, r1, r3
 8005af0:	43db      	mvns	r3, r3
 8005af2:	401a      	ands	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f003 011f 	and.w	r1, r3, #31
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f003 031f 	and.w	r3, r3, #31
 8005b00:	fa01 f303 	lsl.w	r3, r1, r3
 8005b04:	4313      	orrs	r3, r2
 8005b06:	6023      	str	r3, [r4, #0]
}
 8005b08:	bf00      	nop
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc90      	pop	{r4, r7}
 8005b10:	4770      	bx	lr

08005b12 <LL_ADC_SetChannelSamplingTime>:
{
 8005b12:	b490      	push	{r4, r7}
 8005b14:	b08a      	sub	sp, #40	; 0x28
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	607a      	str	r2, [r7, #4]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	330c      	adds	r3, #12
 8005b22:	4619      	mov	r1, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8005b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	fa93 f3a3 	rbit	r3, r3
 8005b36:	613b      	str	r3, [r7, #16]
  return(result);
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	fab3 f383 	clz	r3, r3
 8005b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	440b      	add	r3, r1
 8005b46:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8005b48:	6822      	ldr	r2, [r4, #0]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8005b50:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8005b54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	fa93 f3a3 	rbit	r3, r3
 8005b5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	fab3 f383 	clz	r3, r3
 8005b64:	fa21 f303 	lsr.w	r3, r1, r3
 8005b68:	2107      	movs	r1, #7
 8005b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6e:	43db      	mvns	r3, r3
 8005b70:	401a      	ands	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8005b78:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	fa93 f3a3 	rbit	r3, r3
 8005b84:	623b      	str	r3, [r7, #32]
  return(result);
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	fab3 f383 	clz	r3, r3
 8005b8c:	fa21 f303 	lsr.w	r3, r1, r3
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	fa01 f303 	lsl.w	r3, r1, r3
 8005b96:	4313      	orrs	r3, r2
 8005b98:	6023      	str	r3, [r4, #0]
}
 8005b9a:	bf00      	nop
 8005b9c:	3728      	adds	r7, #40	; 0x28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bc90      	pop	{r4, r7}
 8005ba2:	4770      	bx	lr

08005ba4 <LL_ADC_Enable>:
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f043 0201 	orr.w	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	609a      	str	r2, [r3, #8]
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bc80      	pop	{r7}
 8005bc0:	4770      	bx	lr

08005bc2 <LL_ADC_IsEnabled>:
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	bf0c      	ite	eq
 8005bd6:	2301      	moveq	r3, #1
 8005bd8:	2300      	movne	r3, #0
 8005bda:	b2db      	uxtb	r3, r3
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr

08005be6 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f043 0204 	orr.w	r2, r3, #4
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	609a      	str	r2, [r3, #8]
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr

08005c04 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	bf0c      	ite	eq
 8005c18:	2301      	moveq	r3, #1
 8005c1a:	2300      	movne	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr

08005c28 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c34:	b29b      	uxth	r3, r3
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bc80      	pop	{r7}
 8005c3e:	4770      	bx	lr

08005c40 <LL_ADC_IsActiveFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	bf0c      	ite	eq
 8005c54:	2301      	moveq	r3, #1
 8005c56:	2300      	movne	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr

08005c64 <LL_ADC_ClearFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f06f 0202 	mvn.w	r2, #2
 8005c72:	601a      	str	r2, [r3, #0]
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bc80      	pop	{r7}
 8005c7c:	4770      	bx	lr

08005c7e <LL_ADC_EnableIT_EOS>:
  * @rmtoll CR1      EOCIE          LL_ADC_EnableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOS(ADC_TypeDef *ADCx)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  SET_BIT(ADCx->CR1, ADC_CR1_EOCIE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f043 0220 	orr.w	r2, r3, #32
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	605a      	str	r2, [r3, #4]
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr

08005c9c <LL_APB2_GRP1_EnableClock>:
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005ca4:	4908      	ldr	r1, [pc, #32]	; (8005cc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005ca6:	4b08      	ldr	r3, [pc, #32]	; (8005cc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005cb0:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005cba:	68fb      	ldr	r3, [r7, #12]
}
 8005cbc:	bf00      	nop
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bc80      	pop	{r7}
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40021000 	.word	0x40021000

08005ccc <MX_ADC1_Init>:
#include "ldr_driver.h"

uint16_t ADC1_value = 0;

void MX_ADC1_Init(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08e      	sub	sp, #56	; 0x38
 8005cd0:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8005cd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8005cdc:	2300      	movs	r3, #0
 8005cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8005ce0:	f107 0318 	add.w	r3, r7, #24
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	605a      	str	r2, [r3, #4]
 8005cea:	609a      	str	r2, [r3, #8]
 8005cec:	60da      	str	r2, [r3, #12]
 8005cee:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cf0:	1d3b      	adds	r3, r7, #4
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	605a      	str	r2, [r3, #4]
 8005cf8:	609a      	str	r2, [r3, #8]
 8005cfa:	60da      	str	r2, [r3, #12]
 8005cfc:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8005cfe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005d02:	f7ff ffcb 	bl	8005c9c <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8005d06:	2004      	movs	r0, #4
 8005d08:	f7ff ffc8 	bl	8005c9c <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA4   ------> ADC1_IN4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8005d0c:	f241 0310 	movw	r3, #4112	; 0x1010
 8005d10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d16:	1d3b      	adds	r3, r7, #4
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4828      	ldr	r0, [pc, #160]	; (8005dbc <MX_ADC1_Init+0xf0>)
 8005d1c:	f7fc f989 	bl	8002032 <LL_GPIO_Init>

  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8005d20:	2300      	movs	r3, #0
 8005d22:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8005d24:	2300      	movs	r3, #0
 8005d26:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8005d28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4824      	ldr	r0, [pc, #144]	; (8005dc0 <MX_ADC1_Init+0xf4>)
 8005d30:	f7fb ff56 	bl	8001be0 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8005d34:	2300      	movs	r3, #0
 8005d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8005d38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4820      	ldr	r0, [pc, #128]	; (8005dc0 <MX_ADC1_Init+0xf4>)
 8005d40:	f7fb ff1c 	bl	8001b7c <LL_ADC_CommonInit>

  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8005d44:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8005d48:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8005d56:	2300      	movs	r3, #0
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8005d5a:	f107 0318 	add.w	r3, r7, #24
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4817      	ldr	r0, [pc, #92]	; (8005dc0 <MX_ADC1_Init+0xf4>)
 8005d62:	f7fb ff64 	bl	8001c2e <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8005d66:	4a17      	ldr	r2, [pc, #92]	; (8005dc4 <MX_ADC1_Init+0xf8>)
 8005d68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d6c:	4814      	ldr	r0, [pc, #80]	; (8005dc0 <MX_ADC1_Init+0xf4>)
 8005d6e:	f7ff fe9d 	bl	8005aac <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8005d72:	2200      	movs	r2, #0
 8005d74:	4913      	ldr	r1, [pc, #76]	; (8005dc4 <MX_ADC1_Init+0xf8>)
 8005d76:	4812      	ldr	r0, [pc, #72]	; (8005dc0 <MX_ADC1_Init+0xf4>)
 8005d78:	f7ff fecb 	bl	8005b12 <LL_ADC_SetChannelSamplingTime>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005d7c:	f7ff fe16 	bl	80059ac <NVIC_GetPriorityGrouping>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2200      	movs	r2, #0
 8005d84:	2100      	movs	r1, #0
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff fe60 	bl	8005a4c <NVIC_EncodePriority>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	4619      	mov	r1, r3
 8005d90:	2012      	movs	r0, #18
 8005d92:	f7ff fe31 	bl	80059f8 <NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_2_IRQn);
 8005d96:	2012      	movs	r0, #18
 8005d98:	f7ff fe16 	bl	80059c8 <NVIC_EnableIRQ>
  LL_ADC_EnableIT_EOS(ADC1);
 8005d9c:	4808      	ldr	r0, [pc, #32]	; (8005dc0 <MX_ADC1_Init+0xf4>)
 8005d9e:	f7ff ff6e 	bl	8005c7e <LL_ADC_EnableIT_EOS>

  if (LL_ADC_IsEnabled(ADC1) == 0)
 8005da2:	4807      	ldr	r0, [pc, #28]	; (8005dc0 <MX_ADC1_Init+0xf4>)
 8005da4:	f7ff ff0d 	bl	8005bc2 <LL_ADC_IsEnabled>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d102      	bne.n	8005db4 <MX_ADC1_Init+0xe8>
  {
	  LL_ADC_Enable(ADC1);
 8005dae:	4804      	ldr	r0, [pc, #16]	; (8005dc0 <MX_ADC1_Init+0xf4>)
 8005db0:	f7ff fef8 	bl	8005ba4 <LL_ADC_Enable>
  }
}
 8005db4:	bf00      	nop
 8005db6:	3738      	adds	r7, #56	; 0x38
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40010800 	.word	0x40010800
 8005dc0:	40012400 	.word	0x40012400
 8005dc4:	02c00004 	.word	0x02c00004

08005dc8 <ADC1_Activate>:

void ADC1_Activate(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
	if (LL_ADC_IsEnabled(ADC1) == 1)
 8005dcc:	480e      	ldr	r0, [pc, #56]	; (8005e08 <ADC1_Activate+0x40>)
 8005dce:	f7ff fef8 	bl	8005bc2 <LL_ADC_IsEnabled>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d114      	bne.n	8005e02 <ADC1_Activate+0x3a>
	{
		LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8005dd8:	2200      	movs	r2, #0
 8005dda:	490c      	ldr	r1, [pc, #48]	; (8005e0c <ADC1_Activate+0x44>)
 8005ddc:	480a      	ldr	r0, [pc, #40]	; (8005e08 <ADC1_Activate+0x40>)
 8005dde:	f7ff fe98 	bl	8005b12 <LL_ADC_SetChannelSamplingTime>
		LL_ADC_Enable(ADC1);
 8005de2:	4809      	ldr	r0, [pc, #36]	; (8005e08 <ADC1_Activate+0x40>)
 8005de4:	f7ff fede 	bl	8005ba4 <LL_ADC_Enable>
		LL_mDelay(1);
 8005de8:	2001      	movs	r0, #1
 8005dea:	f7fc ffdd 	bl	8002da8 <LL_mDelay>

	    LL_ADC_StartCalibration(ADC1);
 8005dee:	4806      	ldr	r0, [pc, #24]	; (8005e08 <ADC1_Activate+0x40>)
 8005df0:	f7ff fef9 	bl	8005be6 <LL_ADC_StartCalibration>
	    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0);
 8005df4:	bf00      	nop
 8005df6:	4804      	ldr	r0, [pc, #16]	; (8005e08 <ADC1_Activate+0x40>)
 8005df8:	f7ff ff04 	bl	8005c04 <LL_ADC_IsCalibrationOnGoing>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1f9      	bne.n	8005df6 <ADC1_Activate+0x2e>
	}
}
 8005e02:	bf00      	nop
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	40012400 	.word	0x40012400
 8005e0c:	02c00004 	.word	0x02c00004

08005e10 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
  if(LL_ADC_IsActiveFlag_EOS(ADC1) != 0)
 8005e14:	4808      	ldr	r0, [pc, #32]	; (8005e38 <ADC1_2_IRQHandler+0x28>)
 8005e16:	f7ff ff13 	bl	8005c40 <LL_ADC_IsActiveFlag_EOS>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d009      	beq.n	8005e34 <ADC1_2_IRQHandler+0x24>
  {
    LL_ADC_ClearFlag_EOS(ADC1);
 8005e20:	4805      	ldr	r0, [pc, #20]	; (8005e38 <ADC1_2_IRQHandler+0x28>)
 8005e22:	f7ff ff1f 	bl	8005c64 <LL_ADC_ClearFlag_EOS>

    ADC1_value = LL_ADC_REG_ReadConversionData12(ADC1);
 8005e26:	4804      	ldr	r0, [pc, #16]	; (8005e38 <ADC1_2_IRQHandler+0x28>)
 8005e28:	f7ff fefe 	bl	8005c28 <LL_ADC_REG_ReadConversionData12>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4b02      	ldr	r3, [pc, #8]	; (8005e3c <ADC1_2_IRQHandler+0x2c>)
 8005e32:	801a      	strh	r2, [r3, #0]
  }
}
 8005e34:	bf00      	nop
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40012400 	.word	0x40012400
 8005e3c:	200023e2 	.word	0x200023e2

08005e40 <ADC1_Get>:

uint16_t ADC1_Get()
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
	return ADC1_value;
 8005e44:	4b02      	ldr	r3, [pc, #8]	; (8005e50 <ADC1_Get+0x10>)
 8005e46:	881b      	ldrh	r3, [r3, #0]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr
 8005e50:	200023e2 	.word	0x200023e2

08005e54 <LDRQueueInit>:
#include "cmsis_os.h"

xQueueHandle ldr_queue;

void LDRQueueInit(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
	  ldr_queue = xQueueCreate(2, sizeof(uint16_t));
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2102      	movs	r1, #2
 8005e5c:	2002      	movs	r0, #2
 8005e5e:	f7fd fc99 	bl	8003794 <xQueueGenericCreate>
 8005e62:	4602      	mov	r2, r0
 8005e64:	4b01      	ldr	r3, [pc, #4]	; (8005e6c <LDRQueueInit+0x18>)
 8005e66:	601a      	str	r2, [r3, #0]
}
 8005e68:	bf00      	nop
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	2000305c 	.word	0x2000305c

08005e70 <LDRQueue_Send>:

void LDRQueue_Send(uint16_t value)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	4603      	mov	r3, r0
 8005e78:	80fb      	strh	r3, [r7, #6]
	const portTickType xTicksToWait = 100 / portTICK_RATE_MS;
 8005e7a:	2364      	movs	r3, #100	; 0x64
 8005e7c:	60fb      	str	r3, [r7, #12]
	xQueueSendToBack(ldr_queue, &value, xTicksToWait);
 8005e7e:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <LDRQueue_Send+0x24>)
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	1db9      	adds	r1, r7, #6
 8005e84:	2300      	movs	r3, #0
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	f7fd fcdc 	bl	8003844 <xQueueGenericSend>
}
 8005e8c:	bf00      	nop
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	2000305c 	.word	0x2000305c

08005e98 <LDRQueue_Receive>:

uint16_t LDRQueue_Receive(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
	uint16_t value;
	xQueueReceive(ldr_queue, &value, 0);
 8005e9e:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <LDRQueue_Receive+0x20>)
 8005ea0:	6818      	ldr	r0, [r3, #0]
 8005ea2:	1db9      	adds	r1, r7, #6
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f7fd fdc6 	bl	8003a38 <xQueueGenericReceive>
	return value;
 8005eac:	88fb      	ldrh	r3, [r7, #6]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	2000305c 	.word	0x2000305c

08005ebc <LDRQueue_IsElements>:

bool LDRQueue_IsElements(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
	if(uxQueueMessagesWaiting(ldr_queue) > 0)
 8005ec0:	4b06      	ldr	r3, [pc, #24]	; (8005edc <LDRQueue_IsElements+0x20>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fd fec9 	bl	8003c5c <uxQueueMessagesWaiting>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <LDRQueue_IsElements+0x18>
	{
		return true;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e000      	b.n	8005ed6 <LDRQueue_IsElements+0x1a>
	}
	return false;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	2000305c 	.word	0x2000305c

08005ee0 <pxLDR>:
#include "ldr.h"
#include "ldr_queue.h"
#include "cmsis_os.h"

static void pxLDR(void * arg)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
	LDRInit();
 8005ee8:	f7fa ff4f 	bl	8000d8a <LDRInit>
	while(1)
	{
		uint16_t adc_value = LDR_Get();
 8005eec:	f7fa ff54 	bl	8000d98 <LDR_Get>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	81fb      	strh	r3, [r7, #14]
		LDRQueue_Send(adc_value);
 8005ef4:	89fb      	ldrh	r3, [r7, #14]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff ffba 	bl	8005e70 <LDRQueue_Send>
		osDelay(100);
 8005efc:	2064      	movs	r0, #100	; 0x64
 8005efe:	f7fc ffca 	bl	8002e96 <osDelay>
	{
 8005f02:	e7f3      	b.n	8005eec <pxLDR+0xc>

08005f04 <LDRTaskInit>:
	}
}

void LDRTaskInit(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af02      	add	r7, sp, #8
	xTaskCreate(pxLDR, "LDR", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9301      	str	r3, [sp, #4]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	2300      	movs	r3, #0
 8005f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f18:	4903      	ldr	r1, [pc, #12]	; (8005f28 <LDRTaskInit+0x24>)
 8005f1a:	4804      	ldr	r0, [pc, #16]	; (8005f2c <LDRTaskInit+0x28>)
 8005f1c:	f7fd fff0 	bl	8003f00 <xTaskCreate>
}
 8005f20:	bf00      	nop
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	08008008 	.word	0x08008008
 8005f2c:	08005ee1 	.word	0x08005ee1

08005f30 <LL_APB1_GRP1_EnableClock>:
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8005f38:	4908      	ldr	r1, [pc, #32]	; (8005f5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8005f3a:	4b08      	ldr	r3, [pc, #32]	; (8005f5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8005f3c:	69da      	ldr	r2, [r3, #28]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005f44:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8005f46:	69da      	ldr	r2, [r3, #28]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
}
 8005f50:	bf00      	nop
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40021000 	.word	0x40021000

08005f60 <LL_APB2_GRP1_EnableClock>:
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005f68:	4908      	ldr	r1, [pc, #32]	; (8005f8c <LL_APB2_GRP1_EnableClock+0x2c>)
 8005f6a:	4b08      	ldr	r3, [pc, #32]	; (8005f8c <LL_APB2_GRP1_EnableClock+0x2c>)
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005f74:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <LL_APB2_GRP1_EnableClock+0x2c>)
 8005f76:	699a      	ldr	r2, [r3, #24]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
}
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bc80      	pop	{r7}
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40021000 	.word	0x40021000

08005f90 <LL_TIM_EnableCounter>:
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f043 0201 	orr.w	r2, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	601a      	str	r2, [r3, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bc80      	pop	{r7}
 8005fac:	4770      	bx	lr

08005fae <LL_TIM_EnableARRPreload>:
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	601a      	str	r2, [r3, #0]
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr

08005fcc <LL_TIM_GetAutoReload>:
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bc80      	pop	{r7}
 8005fe0:	4770      	bx	lr

08005fe2 <LL_TIM_CC_EnableChannel>:
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b083      	sub	sp, #12
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1a      	ldr	r2, [r3, #32]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	621a      	str	r2, [r3, #32]
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr
	...

08006004 <LL_TIM_OC_DisableFast>:
{
 8006004:	b4b0      	push	{r4, r5, r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d01c      	beq.n	800604e <LL_TIM_OC_DisableFast+0x4a>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b04      	cmp	r3, #4
 8006018:	d017      	beq.n	800604a <LL_TIM_OC_DisableFast+0x46>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b10      	cmp	r3, #16
 800601e:	d012      	beq.n	8006046 <LL_TIM_OC_DisableFast+0x42>
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d00d      	beq.n	8006042 <LL_TIM_OC_DisableFast+0x3e>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602c:	d007      	beq.n	800603e <LL_TIM_OC_DisableFast+0x3a>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006034:	d101      	bne.n	800603a <LL_TIM_OC_DisableFast+0x36>
 8006036:	2305      	movs	r3, #5
 8006038:	e00a      	b.n	8006050 <LL_TIM_OC_DisableFast+0x4c>
 800603a:	2306      	movs	r3, #6
 800603c:	e008      	b.n	8006050 <LL_TIM_OC_DisableFast+0x4c>
 800603e:	2304      	movs	r3, #4
 8006040:	e006      	b.n	8006050 <LL_TIM_OC_DisableFast+0x4c>
 8006042:	2303      	movs	r3, #3
 8006044:	e004      	b.n	8006050 <LL_TIM_OC_DisableFast+0x4c>
 8006046:	2302      	movs	r3, #2
 8006048:	e002      	b.n	8006050 <LL_TIM_OC_DisableFast+0x4c>
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <LL_TIM_OC_DisableFast+0x4c>
 800604e:	2300      	movs	r3, #0
 8006050:	461d      	mov	r5, r3
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3318      	adds	r3, #24
 8006056:	461a      	mov	r2, r3
 8006058:	4629      	mov	r1, r5
 800605a:	4b09      	ldr	r3, [pc, #36]	; (8006080 <LL_TIM_OC_DisableFast+0x7c>)
 800605c:	5c5b      	ldrb	r3, [r3, r1]
 800605e:	4413      	add	r3, r2
 8006060:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8006062:	6822      	ldr	r2, [r4, #0]
 8006064:	4629      	mov	r1, r5
 8006066:	4b07      	ldr	r3, [pc, #28]	; (8006084 <LL_TIM_OC_DisableFast+0x80>)
 8006068:	5c5b      	ldrb	r3, [r3, r1]
 800606a:	4619      	mov	r1, r3
 800606c:	2304      	movs	r3, #4
 800606e:	408b      	lsls	r3, r1
 8006070:	43db      	mvns	r3, r3
 8006072:	4013      	ands	r3, r2
 8006074:	6023      	str	r3, [r4, #0]
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	bcb0      	pop	{r4, r5, r7}
 800607e:	4770      	bx	lr
 8006080:	08008568 	.word	0x08008568
 8006084:	08008570 	.word	0x08008570

08006088 <LL_TIM_OC_SetCompareCH1>:
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	bc80      	pop	{r7}
 80060a0:	4770      	bx	lr

080060a2 <LL_TIM_OC_SetCompareCH2>:
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bc80      	pop	{r7}
 80060ba:	4770      	bx	lr

080060bc <LL_TIM_OC_SetCompareCH3>:
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr

080060d6 <LL_TIM_SetTriggerOutput>:
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	605a      	str	r2, [r3, #4]
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr

080060fa <LL_TIM_DisableMasterSlaveMode>:
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	609a      	str	r2, [r3, #8]
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr

08006118 <LL_TIM_GenerateEvent_UPDATE>:
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	f043 0201 	orr.w	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	615a      	str	r2, [r3, #20]
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	bc80      	pop	{r7}
 8006134:	4770      	bx	lr
	...

08006138 <MX_TIM4_Init>:
#include "led_driver.h"

void MX_TIM4_Init(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b092      	sub	sp, #72	; 0x48
 800613c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800613e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	605a      	str	r2, [r3, #4]
 8006148:	609a      	str	r2, [r3, #8]
 800614a:	60da      	str	r2, [r3, #12]
 800614c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800614e:	f107 0314 	add.w	r3, r7, #20
 8006152:	2220      	movs	r2, #32
 8006154:	2100      	movs	r1, #0
 8006156:	4618      	mov	r0, r3
 8006158:	f001 f973 	bl	8007442 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800615c:	463b      	mov	r3, r7
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	605a      	str	r2, [r3, #4]
 8006164:	609a      	str	r2, [r3, #8]
 8006166:	60da      	str	r2, [r3, #12]
 8006168:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800616a:	2004      	movs	r0, #4
 800616c:	f7ff fee0 	bl	8005f30 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 8006170:	2300      	movs	r3, #0
 8006172:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8006174:	2300      	movs	r3, #0
 8006176:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 4096;
 8006178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800617c:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800617e:	2300      	movs	r3, #0
 8006180:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8006182:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006186:	4619      	mov	r1, r3
 8006188:	483a      	ldr	r0, [pc, #232]	; (8006274 <MX_TIM4_Init+0x13c>)
 800618a:	f7fc fab3 	bl	80026f4 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM4);
 800618e:	4839      	ldr	r0, [pc, #228]	; (8006274 <MX_TIM4_Init+0x13c>)
 8006190:	f7ff ff0d 	bl	8005fae <LL_TIM_EnableARRPreload>

  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8006194:	2360      	movs	r3, #96	; 0x60
 8006196:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8006198:	2300      	movs	r3, #0
 800619a:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800619c:	2300      	movs	r3, #0
 800619e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = LL_TIM_GetAutoReload(TIM4);
 80061a0:	4834      	ldr	r0, [pc, #208]	; (8006274 <MX_TIM4_Init+0x13c>)
 80061a2:	f7ff ff13 	bl	8005fcc <LL_TIM_GetAutoReload>
 80061a6:	4603      	mov	r3, r0
 80061a8:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80061aa:	2300      	movs	r3, #0
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 80061ae:	2300      	movs	r3, #0
 80061b0:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
 80061b2:	2300      	movs	r3, #0
 80061b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80061b6:	2300      	movs	r3, #0
 80061b8:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80061ba:	f107 0314 	add.w	r3, r7, #20
 80061be:	461a      	mov	r2, r3
 80061c0:	2101      	movs	r1, #1
 80061c2:	482c      	ldr	r0, [pc, #176]	; (8006274 <MX_TIM4_Init+0x13c>)
 80061c4:	f7fc faf6 	bl	80027b4 <LL_TIM_OC_Init>

  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 80061c8:	2101      	movs	r1, #1
 80061ca:	482a      	ldr	r0, [pc, #168]	; (8006274 <MX_TIM4_Init+0x13c>)
 80061cc:	f7ff ff1a 	bl	8006004 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80061d4:	2300      	movs	r3, #0
 80061d6:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80061d8:	f107 0314 	add.w	r3, r7, #20
 80061dc:	461a      	mov	r2, r3
 80061de:	2110      	movs	r1, #16
 80061e0:	4824      	ldr	r0, [pc, #144]	; (8006274 <MX_TIM4_Init+0x13c>)
 80061e2:	f7fc fae7 	bl	80027b4 <LL_TIM_OC_Init>

  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 80061e6:	2110      	movs	r1, #16
 80061e8:	4822      	ldr	r0, [pc, #136]	; (8006274 <MX_TIM4_Init+0x13c>)
 80061ea:	f7ff ff0b 	bl	8006004 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80061f2:	2300      	movs	r3, #0
 80061f4:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80061f6:	f107 0314 	add.w	r3, r7, #20
 80061fa:	461a      	mov	r2, r3
 80061fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006200:	481c      	ldr	r0, [pc, #112]	; (8006274 <MX_TIM4_Init+0x13c>)
 8006202:	f7fc fad7 	bl	80027b4 <LL_TIM_OC_Init>

  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 8006206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800620a:	481a      	ldr	r0, [pc, #104]	; (8006274 <MX_TIM4_Init+0x13c>)
 800620c:	f7ff fefa 	bl	8006004 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8006210:	2100      	movs	r1, #0
 8006212:	4818      	ldr	r0, [pc, #96]	; (8006274 <MX_TIM4_Init+0x13c>)
 8006214:	f7ff ff5f 	bl	80060d6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8006218:	4816      	ldr	r0, [pc, #88]	; (8006274 <MX_TIM4_Init+0x13c>)
 800621a:	f7ff ff6e 	bl	80060fa <LL_TIM_DisableMasterSlaveMode>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800621e:	2008      	movs	r0, #8
 8006220:	f7ff fe9e 	bl	8005f60 <LL_APB2_GRP1_EnableClock>
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 8006224:	4b14      	ldr	r3, [pc, #80]	; (8006278 <MX_TIM4_Init+0x140>)
 8006226:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006228:	2309      	movs	r3, #9
 800622a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800622c:	2303      	movs	r3, #3
 800622e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006234:	463b      	mov	r3, r7
 8006236:	4619      	mov	r1, r3
 8006238:	4810      	ldr	r0, [pc, #64]	; (800627c <MX_TIM4_Init+0x144>)
 800623a:	f7fb fefa 	bl	8002032 <LL_GPIO_Init>

  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH3);
 800623e:	f240 1111 	movw	r1, #273	; 0x111
 8006242:	480c      	ldr	r0, [pc, #48]	; (8006274 <MX_TIM4_Init+0x13c>)
 8006244:	f7ff fecd 	bl	8005fe2 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM4);
 8006248:	480a      	ldr	r0, [pc, #40]	; (8006274 <MX_TIM4_Init+0x13c>)
 800624a:	f7ff fea1 	bl	8005f90 <LL_TIM_EnableCounter>

  LL_TIM_GenerateEvent_UPDATE(TIM4);
 800624e:	4809      	ldr	r0, [pc, #36]	; (8006274 <MX_TIM4_Init+0x13c>)
 8006250:	f7ff ff62 	bl	8006118 <LL_TIM_GenerateEvent_UPDATE>

  LL_TIM_OC_SetCompareCH1(TIM4, 0);
 8006254:	2100      	movs	r1, #0
 8006256:	4807      	ldr	r0, [pc, #28]	; (8006274 <MX_TIM4_Init+0x13c>)
 8006258:	f7ff ff16 	bl	8006088 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIM4, 0);
 800625c:	2100      	movs	r1, #0
 800625e:	4805      	ldr	r0, [pc, #20]	; (8006274 <MX_TIM4_Init+0x13c>)
 8006260:	f7ff ff1f 	bl	80060a2 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIM4, 0);
 8006264:	2100      	movs	r1, #0
 8006266:	4803      	ldr	r0, [pc, #12]	; (8006274 <MX_TIM4_Init+0x13c>)
 8006268:	f7ff ff28 	bl	80060bc <LL_TIM_OC_SetCompareCH3>
}
 800626c:	bf00      	nop
 800626e:	3748      	adds	r7, #72	; 0x48
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40000800 	.word	0x40000800
 8006278:	0401c0c1 	.word	0x0401c0c1
 800627c:	40010c00 	.word	0x40010c00

08006280 <TIM4_SET_CH1>:

inline void TIM4_SET_CH1(uint16_t duty_cycle)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	4603      	mov	r3, r0
 8006288:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH1(TIM4, duty_cycle);
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	4619      	mov	r1, r3
 800628e:	4803      	ldr	r0, [pc, #12]	; (800629c <TIM4_SET_CH1+0x1c>)
 8006290:	f7ff fefa 	bl	8006088 <LL_TIM_OC_SetCompareCH1>
}
 8006294:	bf00      	nop
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40000800 	.word	0x40000800

080062a0 <TIM4_SET_CH2>:

inline void TIM4_SET_CH2(uint16_t duty_cycle)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH2(TIM4, duty_cycle);
 80062aa:	88fb      	ldrh	r3, [r7, #6]
 80062ac:	4619      	mov	r1, r3
 80062ae:	4803      	ldr	r0, [pc, #12]	; (80062bc <TIM4_SET_CH2+0x1c>)
 80062b0:	f7ff fef7 	bl	80060a2 <LL_TIM_OC_SetCompareCH2>
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	40000800 	.word	0x40000800

080062c0 <TIM4_SET_CH3>:

inline void TIM4_SET_CH3(uint16_t duty_cycle)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH3(TIM4, duty_cycle);
 80062ca:	88fb      	ldrh	r3, [r7, #6]
 80062cc:	4619      	mov	r1, r3
 80062ce:	4803      	ldr	r0, [pc, #12]	; (80062dc <TIM4_SET_CH3+0x1c>)
 80062d0:	f7ff fef4 	bl	80060bc <LL_TIM_OC_SetCompareCH3>
}
 80062d4:	bf00      	nop
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40000800 	.word	0x40000800

080062e0 <constrain>:
#include "ESP8266.h"
#include "cmsis_os.h"
#include <string.h>

static uint16_t constrain(int32_t value)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
	if(value > 4096) value = 4096;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ee:	dd02      	ble.n	80062f6 <constrain+0x16>
 80062f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062f4:	607b      	str	r3, [r7, #4]
	if(value < 0) value = 0;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	da01      	bge.n	8006300 <constrain+0x20>
 80062fc:	2300      	movs	r3, #0
 80062fe:	607b      	str	r3, [r7, #4]
	return value;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	b29b      	uxth	r3, r3
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	bc80      	pop	{r7}
 800630c:	4770      	bx	lr
	...

08006310 <pxLed>:

static void pxLed(void * arg)
{
 8006310:	b5b0      	push	{r4, r5, r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
	LedInit();
 8006318:	f7fa fd6e 	bl	8000df8 <LedInit>

	Display_ON();
 800631c:	f7fa fa6a 	bl	80007f4 <Display_ON>
	Display_Contrast(0xFF);
 8006320:	20ff      	movs	r0, #255	; 0xff
 8006322:	f7fa faf3 	bl	800090c <Display_Contrast>
	display(); // refrash display
 8006326:	f7fa fb63 	bl	80009f0 <display>

	uint16_t ldr_value = 4096, ldr_value_old = 4096;
 800632a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800632e:	82fb      	strh	r3, [r7, #22]
 8006330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006334:	82bb      	strh	r3, [r7, #20]
	EncoderRotateInfo xEncoder_info;

	setLedI2C(); // load led from EEPROM
 8006336:	f7fa fcf1 	bl	8000d1c <setLedI2C>

	while(1)
	{
		if(EncoderQueue_IsElements()) // get data from encoder
 800633a:	f7fe ff59 	bl	80051f0 <EncoderQueue_IsElements>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d079      	beq.n	8006438 <pxLed+0x128>
		{
			xEncoder_info = EncoderQueue_Receive();
 8006344:	f7fe ff3a 	bl	80051bc <EncoderQueue_Receive>
 8006348:	4603      	mov	r3, r0
 800634a:	60bb      	str	r3, [r7, #8]
			int16_t red = Led_Get_Color(eRed), green = Led_Get_Color(eGreen), blue = Led_Get_Color(eBlue);
 800634c:	2000      	movs	r0, #0
 800634e:	f7fa fdc5 	bl	8000edc <Led_Get_Color>
 8006352:	4603      	mov	r3, r0
 8006354:	827b      	strh	r3, [r7, #18]
 8006356:	2001      	movs	r0, #1
 8006358:	f7fa fdc0 	bl	8000edc <Led_Get_Color>
 800635c:	4603      	mov	r3, r0
 800635e:	823b      	strh	r3, [r7, #16]
 8006360:	2002      	movs	r0, #2
 8006362:	f7fa fdbb 	bl	8000edc <Led_Get_Color>
 8006366:	4603      	mov	r3, r0
 8006368:	81fb      	strh	r3, [r7, #14]

			switch(xEncoder_info.button) // refresh led and display
 800636a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800636e:	2b04      	cmp	r3, #4
 8006370:	d861      	bhi.n	8006436 <pxLed+0x126>
 8006372:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <pxLed+0x68>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	08006437 	.word	0x08006437
 800637c:	0800638d 	.word	0x0800638d
 8006380:	080063ad 	.word	0x080063ad
 8006384:	080063cd 	.word	0x080063cd
 8006388:	080063ed 	.word	0x080063ed
			{
				case 0: break;
				case 1:
					{
						Led_Set_Color(eRed, constrain(red + xEncoder_info.state));
 800638c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006390:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006394:	4413      	add	r3, r2
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff ffa2 	bl	80062e0 <constrain>
 800639c:	4603      	mov	r3, r0
 800639e:	4619      	mov	r1, r3
 80063a0:	2000      	movs	r0, #0
 80063a2:	f7fa fd69 	bl	8000e78 <Led_Set_Color>
						display();
 80063a6:	f7fa fb23 	bl	80009f0 <display>
						break;
 80063aa:	e045      	b.n	8006438 <pxLed+0x128>
					}
				case 2:
					{
						Led_Set_Color(eGreen, constrain(green + xEncoder_info.state));
 80063ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80063b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80063b4:	4413      	add	r3, r2
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff ff92 	bl	80062e0 <constrain>
 80063bc:	4603      	mov	r3, r0
 80063be:	4619      	mov	r1, r3
 80063c0:	2001      	movs	r0, #1
 80063c2:	f7fa fd59 	bl	8000e78 <Led_Set_Color>
						display();
 80063c6:	f7fa fb13 	bl	80009f0 <display>
						break;
 80063ca:	e035      	b.n	8006438 <pxLed+0x128>
					}
				case 3:
					{
						Led_Set_Color(eBlue, constrain(blue + xEncoder_info.state));
 80063cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80063d0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80063d4:	4413      	add	r3, r2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff ff82 	bl	80062e0 <constrain>
 80063dc:	4603      	mov	r3, r0
 80063de:	4619      	mov	r1, r3
 80063e0:	2002      	movs	r0, #2
 80063e2:	f7fa fd49 	bl	8000e78 <Led_Set_Color>
						display();
 80063e6:	f7fa fb03 	bl	80009f0 <display>
						break;
 80063ea:	e025      	b.n	8006438 <pxLed+0x128>
					}
				case 4:
					{
						Led_Set(constrain(red + xEncoder_info.state), constrain(green + xEncoder_info.state), constrain(blue + xEncoder_info.state));
 80063ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063f0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80063f4:	4413      	add	r3, r2
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff ff72 	bl	80062e0 <constrain>
 80063fc:	4603      	mov	r3, r0
 80063fe:	461c      	mov	r4, r3
 8006400:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006404:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006408:	4413      	add	r3, r2
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff ff68 	bl	80062e0 <constrain>
 8006410:	4603      	mov	r3, r0
 8006412:	461d      	mov	r5, r3
 8006414:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006418:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800641c:	4413      	add	r3, r2
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff ff5e 	bl	80062e0 <constrain>
 8006424:	4603      	mov	r3, r0
 8006426:	461a      	mov	r2, r3
 8006428:	4629      	mov	r1, r5
 800642a:	4620      	mov	r0, r4
 800642c:	f7fa fcfc 	bl	8000e28 <Led_Set>
						display();
 8006430:	f7fa fade 	bl	80009f0 <display>
						break;
 8006434:	e000      	b.n	8006438 <pxLed+0x128>
					}
				default: break;
 8006436:	bf00      	nop
			}
		}
		if(LDRQueue_IsElements())
 8006438:	f7ff fd40 	bl	8005ebc <LDRQueue_IsElements>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d018      	beq.n	8006474 <pxLed+0x164>
		{
			 ldr_value = LDRQueue_Receive(); // get ldr value
 8006442:	f7ff fd29 	bl	8005e98 <LDRQueue_Receive>
 8006446:	4603      	mov	r3, r0
 8006448:	82fb      	strh	r3, [r7, #22]
		}

		while(!(ldr_value_old == ldr_value))
 800644a:	e013      	b.n	8006474 <pxLed+0x164>
		{
			if(ldr_value_old > ldr_value)
 800644c:	8aba      	ldrh	r2, [r7, #20]
 800644e:	8afb      	ldrh	r3, [r7, #22]
 8006450:	429a      	cmp	r2, r3
 8006452:	d906      	bls.n	8006462 <pxLed+0x152>
			{
				Led_Refresh(ldr_value_old--);
 8006454:	8abb      	ldrh	r3, [r7, #20]
 8006456:	1e5a      	subs	r2, r3, #1
 8006458:	82ba      	strh	r2, [r7, #20]
 800645a:	4618      	mov	r0, r3
 800645c:	f7fa fd7e 	bl	8000f5c <Led_Refresh>
 8006460:	e005      	b.n	800646e <pxLed+0x15e>
			}
			else Led_Refresh(ldr_value_old++);
 8006462:	8abb      	ldrh	r3, [r7, #20]
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	82ba      	strh	r2, [r7, #20]
 8006468:	4618      	mov	r0, r3
 800646a:	f7fa fd77 	bl	8000f5c <Led_Refresh>

			osDelay(1);
 800646e:	2001      	movs	r0, #1
 8006470:	f7fc fd11 	bl	8002e96 <osDelay>
		while(!(ldr_value_old == ldr_value))
 8006474:	8aba      	ldrh	r2, [r7, #20]
 8006476:	8afb      	ldrh	r3, [r7, #22]
 8006478:	429a      	cmp	r2, r3
 800647a:	d1e7      	bne.n	800644c <pxLed+0x13c>
		}
		ldr_value_old = ldr_value;
 800647c:	8afb      	ldrh	r3, [r7, #22]
 800647e:	82bb      	strh	r3, [r7, #20]

		static uint16_t update_display = 1000;
		if(update_display == 0)
 8006480:	4b0b      	ldr	r3, [pc, #44]	; (80064b0 <pxLed+0x1a0>)
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d108      	bne.n	800649a <pxLed+0x18a>
		{
			GetStationIP();
 8006488:	f7fa f94e 	bl	8000728 <GetStationIP>
			update_display = 1000;
 800648c:	4b08      	ldr	r3, [pc, #32]	; (80064b0 <pxLed+0x1a0>)
 800648e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006492:	801a      	strh	r2, [r3, #0]
			display();
 8006494:	f7fa faac 	bl	80009f0 <display>
 8006498:	e005      	b.n	80064a6 <pxLed+0x196>
		}
		else update_display--;
 800649a:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <pxLed+0x1a0>)
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	4b03      	ldr	r3, [pc, #12]	; (80064b0 <pxLed+0x1a0>)
 80064a4:	801a      	strh	r2, [r3, #0]

		osDelay(10);
 80064a6:	200a      	movs	r0, #10
 80064a8:	f7fc fcf5 	bl	8002e96 <osDelay>
	{
 80064ac:	e745      	b.n	800633a <pxLed+0x2a>
 80064ae:	bf00      	nop
 80064b0:	20000090 	.word	0x20000090

080064b4 <LedTaskInit>:
	}
}

void LedTaskInit(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af02      	add	r7, sp, #8
	xTaskCreate(pxLed, "Led", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 80064ba:	2300      	movs	r3, #0
 80064bc:	9301      	str	r3, [sp, #4]
 80064be:	2300      	movs	r3, #0
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	2300      	movs	r3, #0
 80064c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064c8:	4904      	ldr	r1, [pc, #16]	; (80064dc <LedTaskInit+0x28>)
 80064ca:	4805      	ldr	r0, [pc, #20]	; (80064e0 <LedTaskInit+0x2c>)
 80064cc:	f7fd fd18 	bl	8003f00 <xTaskCreate>
	I2C_Init();
 80064d0:	f7fa fbe8 	bl	8000ca4 <I2C_Init>
}
 80064d4:	bf00      	nop
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	0800800c 	.word	0x0800800c
 80064e0:	08006311 	.word	0x08006311

080064e4 <NVIC_GetPriorityGrouping>:
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064e8:	4b04      	ldr	r3, [pc, #16]	; (80064fc <NVIC_GetPriorityGrouping+0x18>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	0a1b      	lsrs	r3, r3, #8
 80064ee:	f003 0307 	and.w	r3, r3, #7
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	e000ed00 	.word	0xe000ed00

08006500 <NVIC_EnableIRQ>:
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	4603      	mov	r3, r0
 8006508:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800650a:	4908      	ldr	r1, [pc, #32]	; (800652c <NVIC_EnableIRQ+0x2c>)
 800650c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006510:	095b      	lsrs	r3, r3, #5
 8006512:	79fa      	ldrb	r2, [r7, #7]
 8006514:	f002 021f 	and.w	r2, r2, #31
 8006518:	2001      	movs	r0, #1
 800651a:	fa00 f202 	lsl.w	r2, r0, r2
 800651e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr
 800652c:	e000e100 	.word	0xe000e100

08006530 <NVIC_SetPriority>:
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	4603      	mov	r3, r0
 8006538:	6039      	str	r1, [r7, #0]
 800653a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800653c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006540:	2b00      	cmp	r3, #0
 8006542:	da0b      	bge.n	800655c <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006544:	490d      	ldr	r1, [pc, #52]	; (800657c <NVIC_SetPriority+0x4c>)
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	f003 030f 	and.w	r3, r3, #15
 800654c:	3b04      	subs	r3, #4
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	0112      	lsls	r2, r2, #4
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	440b      	add	r3, r1
 8006558:	761a      	strb	r2, [r3, #24]
}
 800655a:	e009      	b.n	8006570 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800655c:	4908      	ldr	r1, [pc, #32]	; (8006580 <NVIC_SetPriority+0x50>)
 800655e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	0112      	lsls	r2, r2, #4
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	440b      	add	r3, r1
 800656c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	bc80      	pop	{r7}
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	e000ed00 	.word	0xe000ed00
 8006580:	e000e100 	.word	0xe000e100

08006584 <NVIC_EncodePriority>:
{
 8006584:	b480      	push	{r7}
 8006586:	b089      	sub	sp, #36	; 0x24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	f1c3 0307 	rsb	r3, r3, #7
 800659e:	2b04      	cmp	r3, #4
 80065a0:	bf28      	it	cs
 80065a2:	2304      	movcs	r3, #4
 80065a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	3304      	adds	r3, #4
 80065aa:	2b06      	cmp	r3, #6
 80065ac:	d902      	bls.n	80065b4 <NVIC_EncodePriority+0x30>
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	3b03      	subs	r3, #3
 80065b2:	e000      	b.n	80065b6 <NVIC_EncodePriority+0x32>
 80065b4:	2300      	movs	r3, #0
 80065b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065b8:	2201      	movs	r2, #1
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	1e5a      	subs	r2, r3, #1
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	401a      	ands	r2, r3
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065ca:	2101      	movs	r1, #1
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	fa01 f303 	lsl.w	r3, r1, r3
 80065d2:	1e59      	subs	r1, r3, #1
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065d8:	4313      	orrs	r3, r2
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3724      	adds	r7, #36	; 0x24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc80      	pop	{r7}
 80065e2:	4770      	bx	lr

080065e4 <LL_EXTI_ClearFlag_0_31>:
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80065ec:	4a03      	ldr	r2, [pc, #12]	; (80065fc <LL_EXTI_ClearFlag_0_31+0x18>)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6153      	str	r3, [r2, #20]
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr
 80065fc:	40010400 	.word	0x40010400

08006600 <LL_GPIO_AF_SetEXTISource>:
{
 8006600:	b490      	push	{r4, r7}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800660a:	4c11      	ldr	r4, [pc, #68]	; (8006650 <LL_GPIO_AF_SetEXTISource+0x50>)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	b2db      	uxtb	r3, r3
 8006610:	490f      	ldr	r1, [pc, #60]	; (8006650 <LL_GPIO_AF_SetEXTISource+0x50>)
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	3202      	adds	r2, #2
 8006618:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	0c12      	lsrs	r2, r2, #16
 8006620:	43d2      	mvns	r2, r2
 8006622:	4011      	ands	r1, r2
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	0c12      	lsrs	r2, r2, #16
 8006628:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	fa92 f2a2 	rbit	r2, r2
 8006630:	60ba      	str	r2, [r7, #8]
  return(result);
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	fab2 f282 	clz	r2, r2
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	fa00 f202 	lsl.w	r2, r0, r2
 800663e:	430a      	orrs	r2, r1
 8006640:	3302      	adds	r3, #2
 8006642:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bc90      	pop	{r4, r7}
 800664e:	4770      	bx	lr
 8006650:	40010000 	.word	0x40010000

08006654 <PowerStatusInit>:
#include "i2c_data.h"
#include "crc.h"
#include "cmsis_os.h"

void PowerStatusInit(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
	LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800665a:	f107 0318 	add.w	r3, r7, #24
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	605a      	str	r2, [r3, #4]

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8006664:	2301      	movs	r3, #1
 8006666:	61bb      	str	r3, [r7, #24]
    EXTI_InitStruct.LineCommand = ENABLE;
 8006668:	2301      	movs	r3, #1
 800666a:	773b      	strb	r3, [r7, #28]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800666c:	2300      	movs	r3, #0
 800666e:	777b      	strb	r3, [r7, #29]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006670:	2302      	movs	r3, #2
 8006672:	77bb      	strb	r3, [r7, #30]
    LL_EXTI_Init(&EXTI_InitStruct);
 8006674:	f107 0318 	add.w	r3, r7, #24
 8006678:	4618      	mov	r0, r3
 800667a:	f7fb fbaf 	bl	8001ddc <LL_EXTI_Init>

    LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE0);
 800667e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006682:	2000      	movs	r0, #0
 8006684:	f7ff ffbc 	bl	8006600 <LL_GPIO_AF_SetEXTISource>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006688:	1d3b      	adds	r3, r7, #4
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	605a      	str	r2, [r3, #4]
 8006690:	609a      	str	r2, [r3, #8]
 8006692:	60da      	str	r2, [r3, #12]
 8006694:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8006696:	f240 1301 	movw	r3, #257	; 0x101
 800669a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800669c:	2308      	movs	r3, #8
 800669e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80066a0:	2303      	movs	r3, #3
 80066a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80066a4:	2301      	movs	r3, #1
 80066a6:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066a8:	1d3b      	adds	r3, r7, #4
 80066aa:	4619      	mov	r1, r3
 80066ac:	480b      	ldr	r0, [pc, #44]	; (80066dc <PowerStatusInit+0x88>)
 80066ae:	f7fb fcc0 	bl	8002032 <LL_GPIO_Init>

    NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 8, 0));
 80066b2:	f7ff ff17 	bl	80064e4 <NVIC_GetPriorityGrouping>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2200      	movs	r2, #0
 80066ba:	2108      	movs	r1, #8
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff ff61 	bl	8006584 <NVIC_EncodePriority>
 80066c2:	4603      	mov	r3, r0
 80066c4:	4619      	mov	r1, r3
 80066c6:	2006      	movs	r0, #6
 80066c8:	f7ff ff32 	bl	8006530 <NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 80066cc:	2006      	movs	r0, #6
 80066ce:	f7ff ff17 	bl	8006500 <NVIC_EnableIRQ>
}
 80066d2:	bf00      	nop
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40010800 	.word	0x40010800

080066e0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80066e4:	2001      	movs	r0, #1
 80066e6:	f7ff ff7d 	bl	80065e4 <LL_EXTI_ClearFlag_0_31>

	ColorToEEPROM();
 80066ea:	f7fa fae3 	bl	8000cb4 <ColorToEEPROM>
}
 80066ee:	bf00      	nop
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <LL_SPI_Enable>:
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	601a      	str	r2, [r3, #0]
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr

08006710 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b02      	cmp	r3, #2
 8006722:	bf0c      	ite	eq
 8006724:	2301      	moveq	r3, #1
 8006726:	2300      	movne	r3, #0
 8006728:	b2db      	uxtb	r3, r3
}
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	bc80      	pop	{r7}
 8006732:	4770      	bx	lr

08006734 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006744:	2b80      	cmp	r3, #128	; 0x80
 8006746:	bf0c      	ite	eq
 8006748:	2301      	moveq	r3, #1
 800674a:	2300      	movne	r3, #0
 800674c:	b2db      	uxtb	r3, r3
}
 800674e:	4618      	mov	r0, r3
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	70fb      	strb	r3, [r7, #3]
  SPIx->DR = TxData;
 8006764:	78fa      	ldrb	r2, [r7, #3]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	60da      	str	r2, [r3, #12]
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	bc80      	pop	{r7}
 8006772:	4770      	bx	lr

08006774 <LL_APB2_GRP1_EnableClock>:
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800677c:	4908      	ldr	r1, [pc, #32]	; (80067a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800677e:	4b08      	ldr	r3, [pc, #32]	; (80067a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4313      	orrs	r3, r2
 8006786:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006788:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800678a:	699a      	ldr	r2, [r3, #24]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4013      	ands	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006792:	68fb      	ldr	r3, [r7, #12]
}
 8006794:	bf00      	nop
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40021000 	.word	0x40021000

080067a4 <LL_GPIO_SetOutputPin>:
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	0a1b      	lsrs	r3, r3, #8
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	611a      	str	r2, [r3, #16]
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr

080067c2 <LL_GPIO_ResetOutputPin>:
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	0a1b      	lsrs	r3, r3, #8
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	615a      	str	r2, [r3, #20]
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	bc80      	pop	{r7}
 80067de:	4770      	bx	lr

080067e0 <MX_SPI1_Init>:
#include "spi.h"
#include "delay.h"
#include "main.h"

void MX_SPI1_Init(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b090      	sub	sp, #64	; 0x40
 80067e4:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80067e6:	f107 0318 	add.w	r3, r7, #24
 80067ea:	2228      	movs	r2, #40	; 0x28
 80067ec:	2100      	movs	r1, #0
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fe27 	bl	8007442 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f4:	1d3b      	adds	r3, r7, #4
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	605a      	str	r2, [r3, #4]
 80067fc:	609a      	str	r2, [r3, #8]
 80067fe:	60da      	str	r2, [r3, #12]
 8006800:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8006802:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006806:	f7ff ffb5 	bl	8006774 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800680a:	2004      	movs	r0, #4
 800680c:	f7ff ffb2 	bl	8006774 <LL_APB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 8006810:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 8006814:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006816:	2309      	movs	r3, #9
 8006818:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800681a:	2303      	movs	r3, #3
 800681c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800681e:	2300      	movs	r3, #0
 8006820:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006822:	1d3b      	adds	r3, r7, #4
 8006824:	4619      	mov	r1, r3
 8006826:	4820      	ldr	r0, [pc, #128]	; (80068a8 <MX_SPI1_Init+0xc8>)
 8006828:	f7fb fc03 	bl	8002032 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800682c:	f640 430c 	movw	r3, #3084	; 0xc0c
 8006830:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006832:	2301      	movs	r3, #1
 8006834:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8006836:	2303      	movs	r3, #3
 8006838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800683a:	2300      	movs	r3, #0
 800683c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_PULL_UP;
 800683e:	2301      	movs	r3, #1
 8006840:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006842:	1d3b      	adds	r3, r7, #4
 8006844:	4619      	mov	r1, r3
 8006846:	4818      	ldr	r0, [pc, #96]	; (80068a8 <MX_SPI1_Init+0xc8>)
 8006848:	f7fb fbf3 	bl	8002032 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800684c:	f244 0340 	movw	r3, #16448	; 0x4040
 8006850:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8006852:	2304      	movs	r3, #4
 8006854:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006856:	1d3b      	adds	r3, r7, #4
 8006858:	4619      	mov	r1, r3
 800685a:	4813      	ldr	r0, [pc, #76]	; (80068a8 <MX_SPI1_Init+0xc8>)
 800685c:	f7fb fbe9 	bl	8002032 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8006860:	2300      	movs	r3, #0
 8006862:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8006864:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006868:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800686a:	2300      	movs	r3, #0
 800686c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800686e:	2300      	movs	r3, #0
 8006870:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8006872:	2300      	movs	r3, #0
 8006874:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8006876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800687a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 800687c:	2300      	movs	r3, #0
 800687e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8006880:	2300      	movs	r3, #0
 8006882:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8006884:	2300      	movs	r3, #0
 8006886:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8006888:	230a      	movs	r3, #10
 800688a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800688c:	f107 0318 	add.w	r3, r7, #24
 8006890:	4619      	mov	r1, r3
 8006892:	4806      	ldr	r0, [pc, #24]	; (80068ac <MX_SPI1_Init+0xcc>)
 8006894:	f7fb fe77 	bl	8002586 <LL_SPI_Init>
  LL_SPI_Enable(SPI1);
 8006898:	4804      	ldr	r0, [pc, #16]	; (80068ac <MX_SPI1_Init+0xcc>)
 800689a:	f7ff ff2a 	bl	80066f2 <LL_SPI_Enable>
}
 800689e:	bf00      	nop
 80068a0:	3740      	adds	r7, #64	; 0x40
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40010800 	.word	0x40010800
 80068ac:	40013000 	.word	0x40013000

080068b0 <SPI1_SendByte>:
	}
	while(LL_SPI_IsActiveFlag_BSY(SPI1));
}

void SPI1_SendByte(uint8_t data)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	71fb      	strb	r3, [r7, #7]
	while(!LL_SPI_IsActiveFlag_TXE(SPI1));
 80068ba:	bf00      	nop
 80068bc:	480a      	ldr	r0, [pc, #40]	; (80068e8 <SPI1_SendByte+0x38>)
 80068be:	f7ff ff27 	bl	8006710 <LL_SPI_IsActiveFlag_TXE>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0f9      	beq.n	80068bc <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(SPI1, data);
 80068c8:	79fb      	ldrb	r3, [r7, #7]
 80068ca:	4619      	mov	r1, r3
 80068cc:	4806      	ldr	r0, [pc, #24]	; (80068e8 <SPI1_SendByte+0x38>)
 80068ce:	f7ff ff43 	bl	8006758 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_BSY(SPI1));
 80068d2:	bf00      	nop
 80068d4:	4804      	ldr	r0, [pc, #16]	; (80068e8 <SPI1_SendByte+0x38>)
 80068d6:	f7ff ff2d 	bl	8006734 <LL_SPI_IsActiveFlag_BSY>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1f9      	bne.n	80068d4 <SPI1_SendByte+0x24>
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40013000 	.word	0x40013000

080068ec <SetDC>:

void SetDC(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_2);
 80068f0:	f240 4104 	movw	r1, #1028	; 0x404
 80068f4:	4802      	ldr	r0, [pc, #8]	; (8006900 <SetDC+0x14>)
 80068f6:	f7ff ff55 	bl	80067a4 <LL_GPIO_SetOutputPin>
}
 80068fa:	bf00      	nop
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	40010800 	.word	0x40010800

08006904 <ClearDC>:

void ClearDC(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8006908:	f240 4104 	movw	r1, #1028	; 0x404
 800690c:	4802      	ldr	r0, [pc, #8]	; (8006918 <ClearDC+0x14>)
 800690e:	f7ff ff58 	bl	80067c2 <LL_GPIO_ResetOutputPin>
}
 8006912:	bf00      	nop
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	40010800 	.word	0x40010800

0800691c <Reset>:

void Reset(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8006920:	f640 0108 	movw	r1, #2056	; 0x808
 8006924:	4806      	ldr	r0, [pc, #24]	; (8006940 <Reset+0x24>)
 8006926:	f7ff ff4c 	bl	80067c2 <LL_GPIO_ResetOutputPin>
	delay(10);
 800692a:	200a      	movs	r0, #10
 800692c:	f7fe fa40 	bl	8004db0 <delay>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8006930:	f640 0108 	movw	r1, #2056	; 0x808
 8006934:	4802      	ldr	r0, [pc, #8]	; (8006940 <Reset+0x24>)
 8006936:	f7ff ff35 	bl	80067a4 <LL_GPIO_SetOutputPin>
}
 800693a:	bf00      	nop
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40010800 	.word	0x40010800

08006944 <LL_APB2_GRP1_EnableClock>:
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800694c:	4908      	ldr	r1, [pc, #32]	; (8006970 <LL_APB2_GRP1_EnableClock+0x2c>)
 800694e:	4b08      	ldr	r3, [pc, #32]	; (8006970 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4313      	orrs	r3, r2
 8006956:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006958:	4b05      	ldr	r3, [pc, #20]	; (8006970 <LL_APB2_GRP1_EnableClock+0x2c>)
 800695a:	699a      	ldr	r2, [r3, #24]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4013      	ands	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006962:	68fb      	ldr	r3, [r7, #12]
}
 8006964:	bf00      	nop
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	bc80      	pop	{r7}
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	40021000 	.word	0x40021000

08006974 <LL_GPIO_SetOutputPin>:
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	0a1b      	lsrs	r3, r3, #8
 8006982:	b29a      	uxth	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	611a      	str	r2, [r3, #16]
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr
	...

08006994 <StatusLedInit>:
#include "delay.h"
#include "cmsis_os.h"


void StatusLedInit(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800699a:	2004      	movs	r0, #4
 800699c:	f7ff ffd2 	bl	8006944 <LL_APB2_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80069a0:	2008      	movs	r0, #8
 80069a2:	f7ff ffcf 	bl	8006944 <LL_APB2_GRP1_EnableClock>

  	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069a6:	1d3b      	adds	r3, r7, #4
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	605a      	str	r2, [r3, #4]
 80069ae:	609a      	str	r2, [r3, #8]
 80069b0:	60da      	str	r2, [r3, #12]
 80069b2:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80069b4:	4b09      	ldr	r3, [pc, #36]	; (80069dc <StatusLedInit+0x48>)
 80069b6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80069b8:	2301      	movs	r3, #1
 80069ba:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80069bc:	2303      	movs	r3, #3
 80069be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069c8:	1d3b      	adds	r3, r7, #4
 80069ca:	4619      	mov	r1, r3
 80069cc:	4804      	ldr	r0, [pc, #16]	; (80069e0 <StatusLedInit+0x4c>)
 80069ce:	f7fb fb30 	bl	8002032 <LL_GPIO_Init>
}
 80069d2:	bf00      	nop
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	04200020 	.word	0x04200020
 80069e0:	40010c00 	.word	0x40010c00

080069e4 <StatusLedON>:

void StatusLedON()
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_13);
 80069e8:	4902      	ldr	r1, [pc, #8]	; (80069f4 <StatusLedON+0x10>)
 80069ea:	4803      	ldr	r0, [pc, #12]	; (80069f8 <StatusLedON+0x14>)
 80069ec:	f7ff ffc2 	bl	8006974 <LL_GPIO_SetOutputPin>
}
 80069f0:	bf00      	nop
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	04200020 	.word	0x04200020
 80069f8:	40010c00 	.word	0x40010c00

080069fc <NVIC_GetPriorityGrouping>:
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a00:	4b04      	ldr	r3, [pc, #16]	; (8006a14 <NVIC_GetPriorityGrouping+0x18>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	0a1b      	lsrs	r3, r3, #8
 8006a06:	f003 0307 	and.w	r3, r3, #7
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	e000ed00 	.word	0xe000ed00

08006a18 <NVIC_EnableIRQ>:
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	4603      	mov	r3, r0
 8006a20:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006a22:	4908      	ldr	r1, [pc, #32]	; (8006a44 <NVIC_EnableIRQ+0x2c>)
 8006a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a28:	095b      	lsrs	r3, r3, #5
 8006a2a:	79fa      	ldrb	r2, [r7, #7]
 8006a2c:	f002 021f 	and.w	r2, r2, #31
 8006a30:	2001      	movs	r0, #1
 8006a32:	fa00 f202 	lsl.w	r2, r0, r2
 8006a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006a3a:	bf00      	nop
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr
 8006a44:	e000e100 	.word	0xe000e100

08006a48 <NVIC_DisableIRQ>:
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006a52:	4909      	ldr	r1, [pc, #36]	; (8006a78 <NVIC_DisableIRQ+0x30>)
 8006a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	79fa      	ldrb	r2, [r7, #7]
 8006a5c:	f002 021f 	and.w	r2, r2, #31
 8006a60:	2001      	movs	r0, #1
 8006a62:	fa00 f202 	lsl.w	r2, r0, r2
 8006a66:	3320      	adds	r3, #32
 8006a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	e000e100 	.word	0xe000e100

08006a7c <NVIC_SetPriority>:
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	6039      	str	r1, [r7, #0]
 8006a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8006a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	da0b      	bge.n	8006aa8 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a90:	490d      	ldr	r1, [pc, #52]	; (8006ac8 <NVIC_SetPriority+0x4c>)
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	f003 030f 	and.w	r3, r3, #15
 8006a98:	3b04      	subs	r3, #4
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	0112      	lsls	r2, r2, #4
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	761a      	strb	r2, [r3, #24]
}
 8006aa6:	e009      	b.n	8006abc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006aa8:	4908      	ldr	r1, [pc, #32]	; (8006acc <NVIC_SetPriority+0x50>)
 8006aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	b2d2      	uxtb	r2, r2
 8006ab2:	0112      	lsls	r2, r2, #4
 8006ab4:	b2d2      	uxtb	r2, r2
 8006ab6:	440b      	add	r3, r1
 8006ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	e000ed00 	.word	0xe000ed00
 8006acc:	e000e100 	.word	0xe000e100

08006ad0 <NVIC_EncodePriority>:
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b089      	sub	sp, #36	; 0x24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	f1c3 0307 	rsb	r3, r3, #7
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	bf28      	it	cs
 8006aee:	2304      	movcs	r3, #4
 8006af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	3304      	adds	r3, #4
 8006af6:	2b06      	cmp	r3, #6
 8006af8:	d902      	bls.n	8006b00 <NVIC_EncodePriority+0x30>
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	3b03      	subs	r3, #3
 8006afe:	e000      	b.n	8006b02 <NVIC_EncodePriority+0x32>
 8006b00:	2300      	movs	r3, #0
 8006b02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b04:	2201      	movs	r2, #1
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0c:	1e5a      	subs	r2, r3, #1
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	401a      	ands	r2, r3
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b16:	2101      	movs	r1, #1
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1e:	1e59      	subs	r1, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b24:	4313      	orrs	r3, r2
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3724      	adds	r7, #36	; 0x24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bc80      	pop	{r7}
 8006b2e:	4770      	bx	lr

08006b30 <LL_APB2_GRP1_EnableClock>:
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006b38:	4908      	ldr	r1, [pc, #32]	; (8006b5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8006b3a:	4b08      	ldr	r3, [pc, #32]	; (8006b5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006b44:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
}
 8006b50:	bf00      	nop
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40021000 	.word	0x40021000

08006b60 <LL_USART_Enable>:
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	60da      	str	r2, [r3, #12]
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr

08006b7e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	615a      	str	r2, [r3, #20]
}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr

08006ba8 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0320 	and.w	r3, r3, #32
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	bf0c      	ite	eq
 8006bbc:	2301      	moveq	r3, #1
 8006bbe:	2300      	movne	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr

08006bcc <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bdc:	2b40      	cmp	r3, #64	; 0x40
 8006bde:	bf0c      	ite	eq
 8006be0:	2301      	moveq	r3, #1
 8006be2:	2300      	movne	r3, #0
 8006be4:	b2db      	uxtb	r3, r3
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bc80      	pop	{r7}
 8006bee:	4770      	bx	lr

08006bf0 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f043 0220 	orr.w	r2, r3, #32
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	60da      	str	r2, [r3, #12]
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bc80      	pop	{r7}
 8006c0c:	4770      	bx	lr

08006c0e <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	f043 0201 	orr.w	r2, r3, #1
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	615a      	str	r2, [r3, #20]
}
 8006c22:	bf00      	nop
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr

08006c2c <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f003 0320 	and.w	r3, r3, #32
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	bf0c      	ite	eq
 8006c40:	2301      	moveq	r3, #1
 8006c42:	2300      	movne	r3, #0
 8006c44:	b2db      	uxtb	r3, r3
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr

08006c50 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	b2db      	uxtb	r3, r3
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr

08006c68 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8006c74:	78fa      	ldrb	r2, [r7, #3]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	605a      	str	r2, [r3, #4]
}
 8006c7a:	bf00      	nop
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bc80      	pop	{r7}
 8006c82:	4770      	bx	lr

08006c84 <LL_GPIO_SetOutputPin>:
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	0a1b      	lsrs	r3, r3, #8
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	611a      	str	r2, [r3, #16]
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr

08006ca2 <LL_GPIO_ResetOutputPin>:
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	0a1b      	lsrs	r3, r3, #8
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	615a      	str	r2, [r3, #20]
}
 8006cb6:	bf00      	nop
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr

08006cc0 <USART_SendData_byte>:
#include "ring_buffer.h"

//char uart_rx_buffer[512];

void USART_SendData_byte(char data)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART1, data);
 8006cca:	79fb      	ldrb	r3, [r7, #7]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4807      	ldr	r0, [pc, #28]	; (8006cec <USART_SendData_byte+0x2c>)
 8006cd0:	f7ff ffca 	bl	8006c68 <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TC(USART1));
 8006cd4:	bf00      	nop
 8006cd6:	4805      	ldr	r0, [pc, #20]	; (8006cec <USART_SendData_byte+0x2c>)
 8006cd8:	f7ff ff78 	bl	8006bcc <LL_USART_IsActiveFlag_TC>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0f9      	beq.n	8006cd6 <USART_SendData_byte+0x16>
}
 8006ce2:	bf00      	nop
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	40013800 	.word	0x40013800

08006cf0 <USART_SendData>:

void USART_SendData(char * data, uint32_t data_length)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < data_length; i++)
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	e014      	b.n	8006d2a <USART_SendData+0x3a>
	{
		LL_USART_TransmitData8(USART1, data[i]);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	4413      	add	r3, r2
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	480c      	ldr	r0, [pc, #48]	; (8006d3c <USART_SendData+0x4c>)
 8006d0c:	f7ff ffac 	bl	8006c68 <LL_USART_TransmitData8>
		LL_mDelay(2);
 8006d10:	2002      	movs	r0, #2
 8006d12:	f7fc f849 	bl	8002da8 <LL_mDelay>
		while (!LL_USART_IsActiveFlag_TC(USART1));
 8006d16:	bf00      	nop
 8006d18:	4808      	ldr	r0, [pc, #32]	; (8006d3c <USART_SendData+0x4c>)
 8006d1a:	f7ff ff57 	bl	8006bcc <LL_USART_IsActiveFlag_TC>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d0f9      	beq.n	8006d18 <USART_SendData+0x28>
	for(int i = 0; i < data_length; i++)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3301      	adds	r3, #1
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d3e6      	bcc.n	8006d00 <USART_SendData+0x10>
	}
}
 8006d32:	bf00      	nop
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	40013800 	.word	0x40013800

08006d40 <USART_CharReception_Callback>:

void USART_CharReception_Callback(void)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
	__IO uint32_t received_char;
	received_char = LL_USART_ReceiveData8(USART1);
 8006d46:	4807      	ldr	r0, [pc, #28]	; (8006d64 <USART_CharReception_Callback+0x24>)
 8006d48:	f7ff ff82 	bl	8006c50 <LL_USART_ReceiveData8>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	607b      	str	r3, [r7, #4]

	RingBuff_Push(received_char);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fa fb47 	bl	80013e8 <RingBuff_Push>
  //LL_USART_TransmitData8(USART1, received_char);
}
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	40013800 	.word	0x40013800

08006d68 <Error_Callback>:

void Error_Callback(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
  __IO uint32_t sr_reg;

  NVIC_DisableIRQ(USART1_IRQn);
 8006d6e:	2025      	movs	r0, #37	; 0x25
 8006d70:	f7ff fe6a 	bl	8006a48 <NVIC_DisableIRQ>

  sr_reg = LL_USART_ReadReg(USART1, SR);
 8006d74:	4b03      	ldr	r3, [pc, #12]	; (8006d84 <Error_Callback+0x1c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	607b      	str	r3, [r7, #4]
  if (sr_reg & LL_USART_SR_NE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
  {

  }
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	40013800 	.word	0x40013800

08006d88 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
  if(LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
 8006d8c:	4809      	ldr	r0, [pc, #36]	; (8006db4 <USART1_IRQHandler+0x2c>)
 8006d8e:	f7ff ff0b 	bl	8006ba8 <LL_USART_IsActiveFlag_RXNE>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d008      	beq.n	8006daa <USART1_IRQHandler+0x22>
 8006d98:	4806      	ldr	r0, [pc, #24]	; (8006db4 <USART1_IRQHandler+0x2c>)
 8006d9a:	f7ff ff47 	bl	8006c2c <LL_USART_IsEnabledIT_RXNE>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <USART1_IRQHandler+0x22>
  {
    USART_CharReception_Callback();
 8006da4:	f7ff ffcc 	bl	8006d40 <USART_CharReception_Callback>
 8006da8:	e001      	b.n	8006dae <USART1_IRQHandler+0x26>
  }
  else
  {
    Error_Callback();
 8006daa:	f7ff ffdd 	bl	8006d68 <Error_Callback>
  }
}
 8006dae:	bf00      	nop
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	40013800 	.word	0x40013800

08006db8 <USART1_Device_Reset>:

void USART1_Device_Reset(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8006dbc:	4906      	ldr	r1, [pc, #24]	; (8006dd8 <USART1_Device_Reset+0x20>)
 8006dbe:	4807      	ldr	r0, [pc, #28]	; (8006ddc <USART1_Device_Reset+0x24>)
 8006dc0:	f7ff ff6f 	bl	8006ca2 <LL_GPIO_ResetOutputPin>
	LL_mDelay(100);
 8006dc4:	2064      	movs	r0, #100	; 0x64
 8006dc6:	f7fb ffef 	bl	8002da8 <LL_mDelay>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8006dca:	4903      	ldr	r1, [pc, #12]	; (8006dd8 <USART1_Device_Reset+0x20>)
 8006dcc:	4803      	ldr	r0, [pc, #12]	; (8006ddc <USART1_Device_Reset+0x24>)
 8006dce:	f7ff ff59 	bl	8006c84 <LL_GPIO_SetOutputPin>
}
 8006dd2:	bf00      	nop
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	04010001 	.word	0x04010001
 8006ddc:	40010800 	.word	0x40010800

08006de0 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08c      	sub	sp, #48	; 0x30
 8006de4:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8006de6:	f107 0318 	add.w	r3, r7, #24
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	605a      	str	r2, [r3, #4]
 8006df0:	609a      	str	r2, [r3, #8]
 8006df2:	60da      	str	r2, [r3, #12]
 8006df4:	611a      	str	r2, [r3, #16]
 8006df6:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006df8:	1d3b      	adds	r3, r7, #4
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	605a      	str	r2, [r3, #4]
 8006e00:	609a      	str	r2, [r3, #8]
 8006e02:	60da      	str	r2, [r3, #12]
 8006e04:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8006e06:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006e0a:	f7ff fe91 	bl	8006b30 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8006e0e:	2004      	movs	r0, #4
 8006e10:	f7ff fe8e 	bl	8006b30 <LL_APB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8006e14:	4b30      	ldr	r3, [pc, #192]	; (8006ed8 <MX_USART1_UART_Init+0xf8>)
 8006e16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006e18:	2309      	movs	r3, #9
 8006e1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006e24:	2301      	movs	r3, #1
 8006e26:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e28:	1d3b      	adds	r3, r7, #4
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	482b      	ldr	r0, [pc, #172]	; (8006edc <MX_USART1_UART_Init+0xfc>)
 8006e2e:	f7fb f900 	bl	8002032 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8006e32:	4b2b      	ldr	r3, [pc, #172]	; (8006ee0 <MX_USART1_UART_Init+0x100>)
 8006e34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8006e36:	2304      	movs	r3, #4
 8006e38:	60bb      	str	r3, [r7, #8]

  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	617b      	str	r3, [r7, #20]

  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e42:	1d3b      	adds	r3, r7, #4
 8006e44:	4619      	mov	r1, r3
 8006e46:	4825      	ldr	r0, [pc, #148]	; (8006edc <MX_USART1_UART_Init+0xfc>)
 8006e48:	f7fb f8f3 	bl	8002032 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006e4c:	f7ff fdd6 	bl	80069fc <NVIC_GetPriorityGrouping>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2200      	movs	r2, #0
 8006e54:	2100      	movs	r1, #0
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7ff fe3a 	bl	8006ad0 <NVIC_EncodePriority>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	4619      	mov	r1, r3
 8006e60:	2025      	movs	r0, #37	; 0x25
 8006e62:	f7ff fe0b 	bl	8006a7c <NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8006e66:	2025      	movs	r0, #37	; 0x25
 8006e68:	f7ff fdd6 	bl	8006a18 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8006e6c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8006e70:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8006e72:	2300      	movs	r3, #0
 8006e74:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8006e76:	2300      	movs	r3, #0
 8006e78:	623b      	str	r3, [r7, #32]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8006e7e:	230c      	movs	r3, #12
 8006e80:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8006e82:	2300      	movs	r3, #0
 8006e84:	62fb      	str	r3, [r7, #44]	; 0x2c

  LL_USART_Init(USART1, &USART_InitStruct);
 8006e86:	f107 0318 	add.w	r3, r7, #24
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4815      	ldr	r0, [pc, #84]	; (8006ee4 <MX_USART1_UART_Init+0x104>)
 8006e8e:	f7fb ff03 	bl	8002c98 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8006e92:	4814      	ldr	r0, [pc, #80]	; (8006ee4 <MX_USART1_UART_Init+0x104>)
 8006e94:	f7ff fe73 	bl	8006b7e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8006e98:	4812      	ldr	r0, [pc, #72]	; (8006ee4 <MX_USART1_UART_Init+0x104>)
 8006e9a:	f7ff fe61 	bl	8006b60 <LL_USART_Enable>

  LL_USART_EnableIT_RXNE(USART1);
 8006e9e:	4811      	ldr	r0, [pc, #68]	; (8006ee4 <MX_USART1_UART_Init+0x104>)
 8006ea0:	f7ff fea6 	bl	8006bf0 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_ERROR(USART1);
 8006ea4:	480f      	ldr	r0, [pc, #60]	; (8006ee4 <MX_USART1_UART_Init+0x104>)
 8006ea6:	f7ff feb2 	bl	8006c0e <LL_USART_EnableIT_ERROR>

  //Reset gpio
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8006eaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ee8 <MX_USART1_UART_Init+0x108>)
 8006eac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ebe:	1d3b      	adds	r3, r7, #4
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4806      	ldr	r0, [pc, #24]	; (8006edc <MX_USART1_UART_Init+0xfc>)
 8006ec4:	f7fb f8b5 	bl	8002032 <LL_GPIO_Init>

  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8006ec8:	4907      	ldr	r1, [pc, #28]	; (8006ee8 <MX_USART1_UART_Init+0x108>)
 8006eca:	4804      	ldr	r0, [pc, #16]	; (8006edc <MX_USART1_UART_Init+0xfc>)
 8006ecc:	f7ff feda 	bl	8006c84 <LL_GPIO_SetOutputPin>
}
 8006ed0:	bf00      	nop
 8006ed2:	3730      	adds	r7, #48	; 0x30
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	04020002 	.word	0x04020002
 8006edc:	40010800 	.word	0x40010800
 8006ee0:	04040004 	.word	0x04040004
 8006ee4:	40013800 	.word	0x40013800
 8006ee8:	04010001 	.word	0x04010001

08006eec <MX_FREERTOS_Init>:
//
//	int free_heap = xPortGetFreeHeapSize();
//}
//#pragma GCC pop_options

void __attribute__((optimize("O0"))) MX_FREERTOS_Init(void) {
 8006eec:	b5b0      	push	{r4, r5, r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0

  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8006ef2:	4b0f      	ldr	r3, [pc, #60]	; (8006f30 <MX_FREERTOS_Init+0x44>)
 8006ef4:	1d3c      	adds	r4, r7, #4
 8006ef6:	461d      	mov	r5, r3
 8006ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006f00:	1d3b      	adds	r3, r7, #4
 8006f02:	2100      	movs	r1, #0
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fb ff9f 	bl	8002e48 <osThreadCreate>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <MX_FREERTOS_Init+0x48>)
 8006f0e:	601a      	str	r2, [r3, #0]

  EncoderQueueInit();
 8006f10:	f7fe f924 	bl	800515c <EncoderQueueInit>
  LDRQueueInit();
 8006f14:	f7fe ff9e 	bl	8005e54 <LDRQueueInit>

  LedTaskInit();
 8006f18:	f7ff facc 	bl	80064b4 <LedTaskInit>
  LDRTaskInit();
 8006f1c:	f7fe fff2 	bl	8005f04 <LDRTaskInit>
  EncoderTaskInit();
 8006f20:	f7fe f9b4 	bl	800528c <EncoderTaskInit>
  ESPTaskInit();
 8006f24:	f7fe faae 	bl	8005484 <ESPTaskInit>
}
 8006f28:	bf00      	nop
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8006f30:	0800801c 	.word	0x0800801c
 8006f34:	20003060 	.word	0x20003060

08006f38 <StartDefaultTask>:

void StartDefaultTask(void const * argument)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006f40:	2001      	movs	r0, #1
 8006f42:	f7fb ffa8 	bl	8002e96 <osDelay>
 8006f46:	e7fb      	b.n	8006f40 <StartDefaultTask+0x8>

08006f48 <LL_RCC_HSE_Enable>:
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006f4c:	4a04      	ldr	r2, [pc, #16]	; (8006f60 <LL_RCC_HSE_Enable+0x18>)
 8006f4e:	4b04      	ldr	r3, [pc, #16]	; (8006f60 <LL_RCC_HSE_Enable+0x18>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f56:	6013      	str	r3, [r2, #0]
}
 8006f58:	bf00      	nop
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc80      	pop	{r7}
 8006f5e:	4770      	bx	lr
 8006f60:	40021000 	.word	0x40021000

08006f64 <LL_RCC_HSE_IsReady>:
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8006f68:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <LL_RCC_HSE_IsReady+0x20>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f74:	bf0c      	ite	eq
 8006f76:	2301      	moveq	r3, #1
 8006f78:	2300      	movne	r3, #0
 8006f7a:	b2db      	uxtb	r3, r3
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bc80      	pop	{r7}
 8006f82:	4770      	bx	lr
 8006f84:	40021000 	.word	0x40021000

08006f88 <LL_RCC_SetSysClkSource>:
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006f90:	4906      	ldr	r1, [pc, #24]	; (8006fac <LL_RCC_SetSysClkSource+0x24>)
 8006f92:	4b06      	ldr	r3, [pc, #24]	; (8006fac <LL_RCC_SetSysClkSource+0x24>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f023 0203 	bic.w	r2, r3, #3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	604b      	str	r3, [r1, #4]
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40021000 	.word	0x40021000

08006fb0 <LL_RCC_GetSysClkSource>:
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006fb4:	4b03      	ldr	r3, [pc, #12]	; (8006fc4 <LL_RCC_GetSysClkSource+0x14>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f003 030c 	and.w	r3, r3, #12
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bc80      	pop	{r7}
 8006fc2:	4770      	bx	lr
 8006fc4:	40021000 	.word	0x40021000

08006fc8 <LL_RCC_SetAHBPrescaler>:
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006fd0:	4906      	ldr	r1, [pc, #24]	; (8006fec <LL_RCC_SetAHBPrescaler+0x24>)
 8006fd2:	4b06      	ldr	r3, [pc, #24]	; (8006fec <LL_RCC_SetAHBPrescaler+0x24>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	604b      	str	r3, [r1, #4]
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bc80      	pop	{r7}
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	40021000 	.word	0x40021000

08006ff0 <LL_RCC_SetAPB1Prescaler>:
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006ff8:	4906      	ldr	r1, [pc, #24]	; (8007014 <LL_RCC_SetAPB1Prescaler+0x24>)
 8006ffa:	4b06      	ldr	r3, [pc, #24]	; (8007014 <LL_RCC_SetAPB1Prescaler+0x24>)
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4313      	orrs	r3, r2
 8007006:	604b      	str	r3, [r1, #4]
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	bc80      	pop	{r7}
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	40021000 	.word	0x40021000

08007018 <LL_RCC_SetAPB2Prescaler>:
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007020:	4906      	ldr	r1, [pc, #24]	; (800703c <LL_RCC_SetAPB2Prescaler+0x24>)
 8007022:	4b06      	ldr	r3, [pc, #24]	; (800703c <LL_RCC_SetAPB2Prescaler+0x24>)
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4313      	orrs	r3, r2
 800702e:	604b      	str	r3, [r1, #4]
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	bc80      	pop	{r7}
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40021000 	.word	0x40021000

08007040 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8007048:	4906      	ldr	r1, [pc, #24]	; (8007064 <LL_FLASH_SetLatency+0x24>)
 800704a:	4b06      	ldr	r3, [pc, #24]	; (8007064 <LL_FLASH_SetLatency+0x24>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f023 0207 	bic.w	r2, r3, #7
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4313      	orrs	r3, r2
 8007056:	600b      	str	r3, [r1, #0]
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	bc80      	pop	{r7}
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	40022000 	.word	0x40022000

08007068 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800706c:	4b03      	ldr	r3, [pc, #12]	; (800707c <LL_FLASH_GetLatency+0x14>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0307 	and.w	r3, r3, #7
}
 8007074:	4618      	mov	r0, r3
 8007076:	46bd      	mov	sp, r7
 8007078:	bc80      	pop	{r7}
 800707a:	4770      	bx	lr
 800707c:	40022000 	.word	0x40022000

08007080 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b04      	cmp	r3, #4
 800708c:	d106      	bne.n	800709c <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800708e:	4a09      	ldr	r2, [pc, #36]	; (80070b4 <LL_SYSTICK_SetClkSource+0x34>)
 8007090:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <LL_SYSTICK_SetClkSource+0x34>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f043 0304 	orr.w	r3, r3, #4
 8007098:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800709a:	e005      	b.n	80070a8 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800709c:	4a05      	ldr	r2, [pc, #20]	; (80070b4 <LL_SYSTICK_SetClkSource+0x34>)
 800709e:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <LL_SYSTICK_SetClkSource+0x34>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f023 0304 	bic.w	r3, r3, #4
 80070a6:	6013      	str	r3, [r2, #0]
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bc80      	pop	{r7}
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	e000e010 	.word	0xe000e010

080070b8 <main>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);

int main(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  HAL_Init();
 80070bc:	f7fa f9f8 	bl	80014b0 <HAL_Init>
  SystemClock_Config();
 80070c0:	f000 f808 	bl	80070d4 <SystemClock_Config>
  MX_FREERTOS_Init();
 80070c4:	f7ff ff12 	bl	8006eec <MX_FREERTOS_Init>

  PowerStatusInit(); // config pin for check power and set irq handler
 80070c8:	f7ff fac4 	bl	8006654 <PowerStatusInit>

  osKernelStart();
 80070cc:	f7fb feb5 	bl	8002e3a <osKernelStart>

  while (1)
 80070d0:	e7fe      	b.n	80070d0 <main+0x18>
	...

080070d4 <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80070d8:	2000      	movs	r0, #0
 80070da:	f7ff ffb1 	bl	8007040 <LL_FLASH_SetLatency>

    if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 80070de:	f7ff ffc3 	bl	8007068 <LL_FLASH_GetLatency>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <SystemClock_Config+0x18>
    {
      Error_Handler();
 80070e8:	f000 f83a 	bl	8007160 <Error_Handler>
    }
    LL_RCC_HSE_Enable();
 80070ec:	f7ff ff2c 	bl	8006f48 <LL_RCC_HSE_Enable>

    while(LL_RCC_HSE_IsReady() != 1)
 80070f0:	bf00      	nop
 80070f2:	f7ff ff37 	bl	8006f64 <LL_RCC_HSE_IsReady>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d1fa      	bne.n	80070f2 <SystemClock_Config+0x1e>
    {

    }
    LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80070fc:	2000      	movs	r0, #0
 80070fe:	f7ff ff63 	bl	8006fc8 <LL_RCC_SetAHBPrescaler>
    LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8007102:	2000      	movs	r0, #0
 8007104:	f7ff ff74 	bl	8006ff0 <LL_RCC_SetAPB1Prescaler>
    LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8007108:	2000      	movs	r0, #0
 800710a:	f7ff ff85 	bl	8007018 <LL_RCC_SetAPB2Prescaler>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 800710e:	2001      	movs	r0, #1
 8007110:	f7ff ff3a 	bl	8006f88 <LL_RCC_SetSysClkSource>

    while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)
 8007114:	bf00      	nop
 8007116:	f7ff ff4b 	bl	8006fb0 <LL_RCC_GetSysClkSource>
 800711a:	4603      	mov	r3, r0
 800711c:	2b04      	cmp	r3, #4
 800711e:	d1fa      	bne.n	8007116 <SystemClock_Config+0x42>
    {
    
    }
    LL_Init1msTick(8000000);
 8007120:	4805      	ldr	r0, [pc, #20]	; (8007138 <SystemClock_Config+0x64>)
 8007122:	f7fb fe33 	bl	8002d8c <LL_Init1msTick>
    LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8007126:	2004      	movs	r0, #4
 8007128:	f7ff ffaa 	bl	8007080 <LL_SYSTICK_SetClkSource>
    LL_SetSystemCoreClock(8000000);
 800712c:	4802      	ldr	r0, [pc, #8]	; (8007138 <SystemClock_Config+0x64>)
 800712e:	f7fb fe5f 	bl	8002df0 <LL_SetSystemCoreClock>
}
 8007132:	bf00      	nop
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	007a1200 	.word	0x007a1200

0800713c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a04      	ldr	r2, [pc, #16]	; (800715c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d101      	bne.n	8007152 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800714e:	f7fa f9c5 	bl	80014dc <HAL_IncTick>
  }
}
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	40012c00 	.word	0x40012c00

08007160 <Error_Handler>:

void Error_Handler(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0

}
 8007164:	bf00      	nop
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr

0800716c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007172:	4a18      	ldr	r2, [pc, #96]	; (80071d4 <HAL_MspInit+0x68>)
 8007174:	4b17      	ldr	r3, [pc, #92]	; (80071d4 <HAL_MspInit+0x68>)
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	f043 0301 	orr.w	r3, r3, #1
 800717c:	6193      	str	r3, [r2, #24]
 800717e:	4b15      	ldr	r3, [pc, #84]	; (80071d4 <HAL_MspInit+0x68>)
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	60bb      	str	r3, [r7, #8]
 8007188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800718a:	4a12      	ldr	r2, [pc, #72]	; (80071d4 <HAL_MspInit+0x68>)
 800718c:	4b11      	ldr	r3, [pc, #68]	; (80071d4 <HAL_MspInit+0x68>)
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007194:	61d3      	str	r3, [r2, #28]
 8007196:	4b0f      	ldr	r3, [pc, #60]	; (80071d4 <HAL_MspInit+0x68>)
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800719e:	607b      	str	r3, [r7, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80071a2:	2200      	movs	r2, #0
 80071a4:	210f      	movs	r1, #15
 80071a6:	f06f 0001 	mvn.w	r0, #1
 80071aa:	f7fa fa58 	bl	800165e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80071ae:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <HAL_MspInit+0x6c>)
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	4a04      	ldr	r2, [pc, #16]	; (80071d8 <HAL_MspInit+0x6c>)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80071ca:	bf00      	nop
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	40021000 	.word	0x40021000
 80071d8:	40010000 	.word	0x40010000

080071dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08c      	sub	sp, #48	; 0x30
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80071ec:	2200      	movs	r2, #0
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	2019      	movs	r0, #25
 80071f2:	f7fa fa34 	bl	800165e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80071f6:	2019      	movs	r0, #25
 80071f8:	f7fa fa4d 	bl	8001696 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80071fc:	4a1e      	ldr	r2, [pc, #120]	; (8007278 <HAL_InitTick+0x9c>)
 80071fe:	4b1e      	ldr	r3, [pc, #120]	; (8007278 <HAL_InitTick+0x9c>)
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007206:	6193      	str	r3, [r2, #24]
 8007208:	4b1b      	ldr	r3, [pc, #108]	; (8007278 <HAL_InitTick+0x9c>)
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007214:	f107 0210 	add.w	r2, r7, #16
 8007218:	f107 0314 	add.w	r3, r7, #20
 800721c:	4611      	mov	r1, r2
 800721e:	4618      	mov	r0, r3
 8007220:	f7fa fa66 	bl	80016f0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007224:	f7fa fa50 	bl	80016c8 <HAL_RCC_GetPCLK2Freq>
 8007228:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	4a13      	ldr	r2, [pc, #76]	; (800727c <HAL_InitTick+0xa0>)
 800722e:	fba2 2303 	umull	r2, r3, r2, r3
 8007232:	0c9b      	lsrs	r3, r3, #18
 8007234:	3b01      	subs	r3, #1
 8007236:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007238:	4b11      	ldr	r3, [pc, #68]	; (8007280 <HAL_InitTick+0xa4>)
 800723a:	4a12      	ldr	r2, [pc, #72]	; (8007284 <HAL_InitTick+0xa8>)
 800723c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800723e:	4b10      	ldr	r3, [pc, #64]	; (8007280 <HAL_InitTick+0xa4>)
 8007240:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007244:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007246:	4a0e      	ldr	r2, [pc, #56]	; (8007280 <HAL_InitTick+0xa4>)
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800724c:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <HAL_InitTick+0xa4>)
 800724e:	2200      	movs	r2, #0
 8007250:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007252:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <HAL_InitTick+0xa4>)
 8007254:	2200      	movs	r2, #0
 8007256:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8007258:	4809      	ldr	r0, [pc, #36]	; (8007280 <HAL_InitTick+0xa4>)
 800725a:	f7fa fa79 	bl	8001750 <HAL_TIM_Base_Init>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8007264:	4806      	ldr	r0, [pc, #24]	; (8007280 <HAL_InitTick+0xa4>)
 8007266:	f7fa faa7 	bl	80017b8 <HAL_TIM_Base_Start_IT>
 800726a:	4603      	mov	r3, r0
 800726c:	e000      	b.n	8007270 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
}
 8007270:	4618      	mov	r0, r3
 8007272:	3730      	adds	r7, #48	; 0x30
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	40021000 	.word	0x40021000
 800727c:	431bde83 	.word	0x431bde83
 8007280:	20003064 	.word	0x20003064
 8007284:	40012c00 	.word	0x40012c00

08007288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007288:	b480      	push	{r7}
 800728a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800728c:	bf00      	nop
 800728e:	46bd      	mov	sp, r7
 8007290:	bc80      	pop	{r7}
 8007292:	4770      	bx	lr

08007294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007294:	b480      	push	{r7}
 8007296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007298:	e7fe      	b.n	8007298 <HardFault_Handler+0x4>

0800729a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800729a:	b480      	push	{r7}
 800729c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800729e:	e7fe      	b.n	800729e <MemManage_Handler+0x4>

080072a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072a4:	e7fe      	b.n	80072a4 <BusFault_Handler+0x4>

080072a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072a6:	b480      	push	{r7}
 80072a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072aa:	e7fe      	b.n	80072aa <UsageFault_Handler+0x4>

080072ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072ac:	b480      	push	{r7}
 80072ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072b0:	bf00      	nop
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr

080072b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80072bc:	4802      	ldr	r0, [pc, #8]	; (80072c8 <TIM1_UP_IRQHandler+0x10>)
 80072be:	f7fa fa95 	bl	80017ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80072c2:	bf00      	nop
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20003064 	.word	0x20003064

080072cc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80072d4:	4b11      	ldr	r3, [pc, #68]	; (800731c <_sbrk+0x50>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d102      	bne.n	80072e2 <_sbrk+0x16>
		heap_end = &end;
 80072dc:	4b0f      	ldr	r3, [pc, #60]	; (800731c <_sbrk+0x50>)
 80072de:	4a10      	ldr	r2, [pc, #64]	; (8007320 <_sbrk+0x54>)
 80072e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80072e2:	4b0e      	ldr	r3, [pc, #56]	; (800731c <_sbrk+0x50>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80072e8:	4b0c      	ldr	r3, [pc, #48]	; (800731c <_sbrk+0x50>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4413      	add	r3, r2
 80072f0:	466a      	mov	r2, sp
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d907      	bls.n	8007306 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80072f6:	f000 f86f 	bl	80073d8 <__errno>
 80072fa:	4602      	mov	r2, r0
 80072fc:	230c      	movs	r3, #12
 80072fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007300:	f04f 33ff 	mov.w	r3, #4294967295
 8007304:	e006      	b.n	8007314 <_sbrk+0x48>
	}

	heap_end += incr;
 8007306:	4b05      	ldr	r3, [pc, #20]	; (800731c <_sbrk+0x50>)
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4413      	add	r3, r2
 800730e:	4a03      	ldr	r2, [pc, #12]	; (800731c <_sbrk+0x50>)
 8007310:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007312:	68fb      	ldr	r3, [r7, #12]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	200023e4 	.word	0x200023e4
 8007320:	200030a8 	.word	0x200030a8

08007324 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8007328:	4a15      	ldr	r2, [pc, #84]	; (8007380 <SystemInit+0x5c>)
 800732a:	4b15      	ldr	r3, [pc, #84]	; (8007380 <SystemInit+0x5c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f043 0301 	orr.w	r3, r3, #1
 8007332:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8007334:	4912      	ldr	r1, [pc, #72]	; (8007380 <SystemInit+0x5c>)
 8007336:	4b12      	ldr	r3, [pc, #72]	; (8007380 <SystemInit+0x5c>)
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	4b12      	ldr	r3, [pc, #72]	; (8007384 <SystemInit+0x60>)
 800733c:	4013      	ands	r3, r2
 800733e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8007340:	4a0f      	ldr	r2, [pc, #60]	; (8007380 <SystemInit+0x5c>)
 8007342:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <SystemInit+0x5c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800734a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800734e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007350:	4a0b      	ldr	r2, [pc, #44]	; (8007380 <SystemInit+0x5c>)
 8007352:	4b0b      	ldr	r3, [pc, #44]	; (8007380 <SystemInit+0x5c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800735a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800735c:	4a08      	ldr	r2, [pc, #32]	; (8007380 <SystemInit+0x5c>)
 800735e:	4b08      	ldr	r3, [pc, #32]	; (8007380 <SystemInit+0x5c>)
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8007366:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8007368:	4b05      	ldr	r3, [pc, #20]	; (8007380 <SystemInit+0x5c>)
 800736a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800736e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007370:	4b05      	ldr	r3, [pc, #20]	; (8007388 <SystemInit+0x64>)
 8007372:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007376:	609a      	str	r2, [r3, #8]
#endif 
}
 8007378:	bf00      	nop
 800737a:	46bd      	mov	sp, r7
 800737c:	bc80      	pop	{r7}
 800737e:	4770      	bx	lr
 8007380:	40021000 	.word	0x40021000
 8007384:	f8ff0000 	.word	0xf8ff0000
 8007388:	e000ed00 	.word	0xe000ed00

0800738c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800738c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800738e:	e003      	b.n	8007398 <LoopCopyDataInit>

08007390 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007390:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007392:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007394:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007396:	3104      	adds	r1, #4

08007398 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007398:	480a      	ldr	r0, [pc, #40]	; (80073c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800739a:	4b0b      	ldr	r3, [pc, #44]	; (80073c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800739c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800739e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80073a0:	d3f6      	bcc.n	8007390 <CopyDataInit>
  ldr r2, =_sbss
 80073a2:	4a0a      	ldr	r2, [pc, #40]	; (80073cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80073a4:	e002      	b.n	80073ac <LoopFillZerobss>

080073a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80073a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80073a8:	f842 3b04 	str.w	r3, [r2], #4

080073ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80073ac:	4b08      	ldr	r3, [pc, #32]	; (80073d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80073ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80073b0:	d3f9      	bcc.n	80073a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80073b2:	f7ff ffb7 	bl	8007324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80073b6:	f000 f815 	bl	80073e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80073ba:	f7ff fe7d 	bl	80070b8 <main>
  bx lr
 80073be:	4770      	bx	lr
  ldr r3, =_sidata
 80073c0:	080086d8 	.word	0x080086d8
  ldr r0, =_sdata
 80073c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80073c8:	20000268 	.word	0x20000268
  ldr r2, =_sbss
 80073cc:	20000268 	.word	0x20000268
  ldr r3, = _ebss
 80073d0:	200030a8 	.word	0x200030a8

080073d4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80073d4:	e7fe      	b.n	80073d4 <CAN1_RX1_IRQHandler>
	...

080073d8 <__errno>:
 80073d8:	4b01      	ldr	r3, [pc, #4]	; (80073e0 <__errno+0x8>)
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	20000098 	.word	0x20000098

080073e4 <__libc_init_array>:
 80073e4:	b570      	push	{r4, r5, r6, lr}
 80073e6:	2500      	movs	r5, #0
 80073e8:	4e0c      	ldr	r6, [pc, #48]	; (800741c <__libc_init_array+0x38>)
 80073ea:	4c0d      	ldr	r4, [pc, #52]	; (8007420 <__libc_init_array+0x3c>)
 80073ec:	1ba4      	subs	r4, r4, r6
 80073ee:	10a4      	asrs	r4, r4, #2
 80073f0:	42a5      	cmp	r5, r4
 80073f2:	d109      	bne.n	8007408 <__libc_init_array+0x24>
 80073f4:	f000 fd22 	bl	8007e3c <_init>
 80073f8:	2500      	movs	r5, #0
 80073fa:	4e0a      	ldr	r6, [pc, #40]	; (8007424 <__libc_init_array+0x40>)
 80073fc:	4c0a      	ldr	r4, [pc, #40]	; (8007428 <__libc_init_array+0x44>)
 80073fe:	1ba4      	subs	r4, r4, r6
 8007400:	10a4      	asrs	r4, r4, #2
 8007402:	42a5      	cmp	r5, r4
 8007404:	d105      	bne.n	8007412 <__libc_init_array+0x2e>
 8007406:	bd70      	pop	{r4, r5, r6, pc}
 8007408:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800740c:	4798      	blx	r3
 800740e:	3501      	adds	r5, #1
 8007410:	e7ee      	b.n	80073f0 <__libc_init_array+0xc>
 8007412:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007416:	4798      	blx	r3
 8007418:	3501      	adds	r5, #1
 800741a:	e7f2      	b.n	8007402 <__libc_init_array+0x1e>
 800741c:	080086d0 	.word	0x080086d0
 8007420:	080086d0 	.word	0x080086d0
 8007424:	080086d0 	.word	0x080086d0
 8007428:	080086d4 	.word	0x080086d4

0800742c <memcpy>:
 800742c:	b510      	push	{r4, lr}
 800742e:	1e43      	subs	r3, r0, #1
 8007430:	440a      	add	r2, r1
 8007432:	4291      	cmp	r1, r2
 8007434:	d100      	bne.n	8007438 <memcpy+0xc>
 8007436:	bd10      	pop	{r4, pc}
 8007438:	f811 4b01 	ldrb.w	r4, [r1], #1
 800743c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007440:	e7f7      	b.n	8007432 <memcpy+0x6>

08007442 <memset>:
 8007442:	4603      	mov	r3, r0
 8007444:	4402      	add	r2, r0
 8007446:	4293      	cmp	r3, r2
 8007448:	d100      	bne.n	800744c <memset+0xa>
 800744a:	4770      	bx	lr
 800744c:	f803 1b01 	strb.w	r1, [r3], #1
 8007450:	e7f9      	b.n	8007446 <memset+0x4>
	...

08007454 <siprintf>:
 8007454:	b40e      	push	{r1, r2, r3}
 8007456:	f44f 7102 	mov.w	r1, #520	; 0x208
 800745a:	b500      	push	{lr}
 800745c:	b09c      	sub	sp, #112	; 0x70
 800745e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007462:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007466:	9104      	str	r1, [sp, #16]
 8007468:	9107      	str	r1, [sp, #28]
 800746a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800746e:	ab1d      	add	r3, sp, #116	; 0x74
 8007470:	9002      	str	r0, [sp, #8]
 8007472:	9006      	str	r0, [sp, #24]
 8007474:	4808      	ldr	r0, [pc, #32]	; (8007498 <siprintf+0x44>)
 8007476:	f853 2b04 	ldr.w	r2, [r3], #4
 800747a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800747e:	6800      	ldr	r0, [r0, #0]
 8007480:	a902      	add	r1, sp, #8
 8007482:	9301      	str	r3, [sp, #4]
 8007484:	f000 f92c 	bl	80076e0 <_svfiprintf_r>
 8007488:	2200      	movs	r2, #0
 800748a:	9b02      	ldr	r3, [sp, #8]
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	b01c      	add	sp, #112	; 0x70
 8007490:	f85d eb04 	ldr.w	lr, [sp], #4
 8007494:	b003      	add	sp, #12
 8007496:	4770      	bx	lr
 8007498:	20000098 	.word	0x20000098

0800749c <strstr>:
 800749c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800749e:	7803      	ldrb	r3, [r0, #0]
 80074a0:	b133      	cbz	r3, 80074b0 <strstr+0x14>
 80074a2:	4603      	mov	r3, r0
 80074a4:	4618      	mov	r0, r3
 80074a6:	1c5e      	adds	r6, r3, #1
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	b933      	cbnz	r3, 80074ba <strstr+0x1e>
 80074ac:	4618      	mov	r0, r3
 80074ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074b0:	780b      	ldrb	r3, [r1, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	bf18      	it	ne
 80074b6:	2000      	movne	r0, #0
 80074b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ba:	1e4d      	subs	r5, r1, #1
 80074bc:	1e44      	subs	r4, r0, #1
 80074be:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80074c2:	2a00      	cmp	r2, #0
 80074c4:	d0f3      	beq.n	80074ae <strstr+0x12>
 80074c6:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80074ca:	4633      	mov	r3, r6
 80074cc:	4297      	cmp	r7, r2
 80074ce:	d0f6      	beq.n	80074be <strstr+0x22>
 80074d0:	e7e8      	b.n	80074a4 <strstr+0x8>

080074d2 <_strtol_l.isra.0>:
 80074d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d6:	4680      	mov	r8, r0
 80074d8:	4689      	mov	r9, r1
 80074da:	4692      	mov	sl, r2
 80074dc:	461f      	mov	r7, r3
 80074de:	468b      	mov	fp, r1
 80074e0:	465d      	mov	r5, fp
 80074e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074e8:	f000 f88a 	bl	8007600 <__locale_ctype_ptr_l>
 80074ec:	4420      	add	r0, r4
 80074ee:	7846      	ldrb	r6, [r0, #1]
 80074f0:	f016 0608 	ands.w	r6, r6, #8
 80074f4:	d10b      	bne.n	800750e <_strtol_l.isra.0+0x3c>
 80074f6:	2c2d      	cmp	r4, #45	; 0x2d
 80074f8:	d10b      	bne.n	8007512 <_strtol_l.isra.0+0x40>
 80074fa:	2601      	movs	r6, #1
 80074fc:	782c      	ldrb	r4, [r5, #0]
 80074fe:	f10b 0502 	add.w	r5, fp, #2
 8007502:	b167      	cbz	r7, 800751e <_strtol_l.isra.0+0x4c>
 8007504:	2f10      	cmp	r7, #16
 8007506:	d114      	bne.n	8007532 <_strtol_l.isra.0+0x60>
 8007508:	2c30      	cmp	r4, #48	; 0x30
 800750a:	d00a      	beq.n	8007522 <_strtol_l.isra.0+0x50>
 800750c:	e011      	b.n	8007532 <_strtol_l.isra.0+0x60>
 800750e:	46ab      	mov	fp, r5
 8007510:	e7e6      	b.n	80074e0 <_strtol_l.isra.0+0xe>
 8007512:	2c2b      	cmp	r4, #43	; 0x2b
 8007514:	bf04      	itt	eq
 8007516:	782c      	ldrbeq	r4, [r5, #0]
 8007518:	f10b 0502 	addeq.w	r5, fp, #2
 800751c:	e7f1      	b.n	8007502 <_strtol_l.isra.0+0x30>
 800751e:	2c30      	cmp	r4, #48	; 0x30
 8007520:	d127      	bne.n	8007572 <_strtol_l.isra.0+0xa0>
 8007522:	782b      	ldrb	r3, [r5, #0]
 8007524:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007528:	2b58      	cmp	r3, #88	; 0x58
 800752a:	d14b      	bne.n	80075c4 <_strtol_l.isra.0+0xf2>
 800752c:	2710      	movs	r7, #16
 800752e:	786c      	ldrb	r4, [r5, #1]
 8007530:	3502      	adds	r5, #2
 8007532:	2e00      	cmp	r6, #0
 8007534:	bf0c      	ite	eq
 8007536:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800753a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800753e:	2200      	movs	r2, #0
 8007540:	fbb1 fef7 	udiv	lr, r1, r7
 8007544:	4610      	mov	r0, r2
 8007546:	fb07 1c1e 	mls	ip, r7, lr, r1
 800754a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800754e:	2b09      	cmp	r3, #9
 8007550:	d811      	bhi.n	8007576 <_strtol_l.isra.0+0xa4>
 8007552:	461c      	mov	r4, r3
 8007554:	42a7      	cmp	r7, r4
 8007556:	dd1d      	ble.n	8007594 <_strtol_l.isra.0+0xc2>
 8007558:	1c53      	adds	r3, r2, #1
 800755a:	d007      	beq.n	800756c <_strtol_l.isra.0+0x9a>
 800755c:	4586      	cmp	lr, r0
 800755e:	d316      	bcc.n	800758e <_strtol_l.isra.0+0xbc>
 8007560:	d101      	bne.n	8007566 <_strtol_l.isra.0+0x94>
 8007562:	45a4      	cmp	ip, r4
 8007564:	db13      	blt.n	800758e <_strtol_l.isra.0+0xbc>
 8007566:	2201      	movs	r2, #1
 8007568:	fb00 4007 	mla	r0, r0, r7, r4
 800756c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007570:	e7eb      	b.n	800754a <_strtol_l.isra.0+0x78>
 8007572:	270a      	movs	r7, #10
 8007574:	e7dd      	b.n	8007532 <_strtol_l.isra.0+0x60>
 8007576:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800757a:	2b19      	cmp	r3, #25
 800757c:	d801      	bhi.n	8007582 <_strtol_l.isra.0+0xb0>
 800757e:	3c37      	subs	r4, #55	; 0x37
 8007580:	e7e8      	b.n	8007554 <_strtol_l.isra.0+0x82>
 8007582:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007586:	2b19      	cmp	r3, #25
 8007588:	d804      	bhi.n	8007594 <_strtol_l.isra.0+0xc2>
 800758a:	3c57      	subs	r4, #87	; 0x57
 800758c:	e7e2      	b.n	8007554 <_strtol_l.isra.0+0x82>
 800758e:	f04f 32ff 	mov.w	r2, #4294967295
 8007592:	e7eb      	b.n	800756c <_strtol_l.isra.0+0x9a>
 8007594:	1c53      	adds	r3, r2, #1
 8007596:	d108      	bne.n	80075aa <_strtol_l.isra.0+0xd8>
 8007598:	2322      	movs	r3, #34	; 0x22
 800759a:	4608      	mov	r0, r1
 800759c:	f8c8 3000 	str.w	r3, [r8]
 80075a0:	f1ba 0f00 	cmp.w	sl, #0
 80075a4:	d107      	bne.n	80075b6 <_strtol_l.isra.0+0xe4>
 80075a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075aa:	b106      	cbz	r6, 80075ae <_strtol_l.isra.0+0xdc>
 80075ac:	4240      	negs	r0, r0
 80075ae:	f1ba 0f00 	cmp.w	sl, #0
 80075b2:	d00c      	beq.n	80075ce <_strtol_l.isra.0+0xfc>
 80075b4:	b122      	cbz	r2, 80075c0 <_strtol_l.isra.0+0xee>
 80075b6:	3d01      	subs	r5, #1
 80075b8:	f8ca 5000 	str.w	r5, [sl]
 80075bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c0:	464d      	mov	r5, r9
 80075c2:	e7f9      	b.n	80075b8 <_strtol_l.isra.0+0xe6>
 80075c4:	2430      	movs	r4, #48	; 0x30
 80075c6:	2f00      	cmp	r7, #0
 80075c8:	d1b3      	bne.n	8007532 <_strtol_l.isra.0+0x60>
 80075ca:	2708      	movs	r7, #8
 80075cc:	e7b1      	b.n	8007532 <_strtol_l.isra.0+0x60>
 80075ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080075d4 <strtol>:
 80075d4:	4b08      	ldr	r3, [pc, #32]	; (80075f8 <strtol+0x24>)
 80075d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075d8:	681c      	ldr	r4, [r3, #0]
 80075da:	4d08      	ldr	r5, [pc, #32]	; (80075fc <strtol+0x28>)
 80075dc:	6a23      	ldr	r3, [r4, #32]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	bf08      	it	eq
 80075e2:	462b      	moveq	r3, r5
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	4613      	mov	r3, r2
 80075e8:	460a      	mov	r2, r1
 80075ea:	4601      	mov	r1, r0
 80075ec:	4620      	mov	r0, r4
 80075ee:	f7ff ff70 	bl	80074d2 <_strtol_l.isra.0>
 80075f2:	b003      	add	sp, #12
 80075f4:	bd30      	pop	{r4, r5, pc}
 80075f6:	bf00      	nop
 80075f8:	20000098 	.word	0x20000098
 80075fc:	200000fc 	.word	0x200000fc

08007600 <__locale_ctype_ptr_l>:
 8007600:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007604:	4770      	bx	lr

08007606 <__ascii_mbtowc>:
 8007606:	b082      	sub	sp, #8
 8007608:	b901      	cbnz	r1, 800760c <__ascii_mbtowc+0x6>
 800760a:	a901      	add	r1, sp, #4
 800760c:	b142      	cbz	r2, 8007620 <__ascii_mbtowc+0x1a>
 800760e:	b14b      	cbz	r3, 8007624 <__ascii_mbtowc+0x1e>
 8007610:	7813      	ldrb	r3, [r2, #0]
 8007612:	600b      	str	r3, [r1, #0]
 8007614:	7812      	ldrb	r2, [r2, #0]
 8007616:	1c10      	adds	r0, r2, #0
 8007618:	bf18      	it	ne
 800761a:	2001      	movne	r0, #1
 800761c:	b002      	add	sp, #8
 800761e:	4770      	bx	lr
 8007620:	4610      	mov	r0, r2
 8007622:	e7fb      	b.n	800761c <__ascii_mbtowc+0x16>
 8007624:	f06f 0001 	mvn.w	r0, #1
 8007628:	e7f8      	b.n	800761c <__ascii_mbtowc+0x16>

0800762a <__ssputs_r>:
 800762a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800762e:	688e      	ldr	r6, [r1, #8]
 8007630:	4682      	mov	sl, r0
 8007632:	429e      	cmp	r6, r3
 8007634:	460c      	mov	r4, r1
 8007636:	4691      	mov	r9, r2
 8007638:	4698      	mov	r8, r3
 800763a:	d835      	bhi.n	80076a8 <__ssputs_r+0x7e>
 800763c:	898a      	ldrh	r2, [r1, #12]
 800763e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007642:	d031      	beq.n	80076a8 <__ssputs_r+0x7e>
 8007644:	2302      	movs	r3, #2
 8007646:	6825      	ldr	r5, [r4, #0]
 8007648:	6909      	ldr	r1, [r1, #16]
 800764a:	1a6f      	subs	r7, r5, r1
 800764c:	6965      	ldr	r5, [r4, #20]
 800764e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007652:	fb95 f5f3 	sdiv	r5, r5, r3
 8007656:	f108 0301 	add.w	r3, r8, #1
 800765a:	443b      	add	r3, r7
 800765c:	429d      	cmp	r5, r3
 800765e:	bf38      	it	cc
 8007660:	461d      	movcc	r5, r3
 8007662:	0553      	lsls	r3, r2, #21
 8007664:	d531      	bpl.n	80076ca <__ssputs_r+0xa0>
 8007666:	4629      	mov	r1, r5
 8007668:	f000 fb48 	bl	8007cfc <_malloc_r>
 800766c:	4606      	mov	r6, r0
 800766e:	b950      	cbnz	r0, 8007686 <__ssputs_r+0x5c>
 8007670:	230c      	movs	r3, #12
 8007672:	f8ca 3000 	str.w	r3, [sl]
 8007676:	89a3      	ldrh	r3, [r4, #12]
 8007678:	f04f 30ff 	mov.w	r0, #4294967295
 800767c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007680:	81a3      	strh	r3, [r4, #12]
 8007682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007686:	463a      	mov	r2, r7
 8007688:	6921      	ldr	r1, [r4, #16]
 800768a:	f7ff fecf 	bl	800742c <memcpy>
 800768e:	89a3      	ldrh	r3, [r4, #12]
 8007690:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007698:	81a3      	strh	r3, [r4, #12]
 800769a:	6126      	str	r6, [r4, #16]
 800769c:	443e      	add	r6, r7
 800769e:	6026      	str	r6, [r4, #0]
 80076a0:	4646      	mov	r6, r8
 80076a2:	6165      	str	r5, [r4, #20]
 80076a4:	1bed      	subs	r5, r5, r7
 80076a6:	60a5      	str	r5, [r4, #8]
 80076a8:	4546      	cmp	r6, r8
 80076aa:	bf28      	it	cs
 80076ac:	4646      	movcs	r6, r8
 80076ae:	4649      	mov	r1, r9
 80076b0:	4632      	mov	r2, r6
 80076b2:	6820      	ldr	r0, [r4, #0]
 80076b4:	f000 fabb 	bl	8007c2e <memmove>
 80076b8:	68a3      	ldr	r3, [r4, #8]
 80076ba:	2000      	movs	r0, #0
 80076bc:	1b9b      	subs	r3, r3, r6
 80076be:	60a3      	str	r3, [r4, #8]
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	441e      	add	r6, r3
 80076c4:	6026      	str	r6, [r4, #0]
 80076c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ca:	462a      	mov	r2, r5
 80076cc:	f000 fb74 	bl	8007db8 <_realloc_r>
 80076d0:	4606      	mov	r6, r0
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d1e1      	bne.n	800769a <__ssputs_r+0x70>
 80076d6:	6921      	ldr	r1, [r4, #16]
 80076d8:	4650      	mov	r0, sl
 80076da:	f000 fac3 	bl	8007c64 <_free_r>
 80076de:	e7c7      	b.n	8007670 <__ssputs_r+0x46>

080076e0 <_svfiprintf_r>:
 80076e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e4:	b09d      	sub	sp, #116	; 0x74
 80076e6:	9303      	str	r3, [sp, #12]
 80076e8:	898b      	ldrh	r3, [r1, #12]
 80076ea:	4680      	mov	r8, r0
 80076ec:	061c      	lsls	r4, r3, #24
 80076ee:	460d      	mov	r5, r1
 80076f0:	4616      	mov	r6, r2
 80076f2:	d50f      	bpl.n	8007714 <_svfiprintf_r+0x34>
 80076f4:	690b      	ldr	r3, [r1, #16]
 80076f6:	b96b      	cbnz	r3, 8007714 <_svfiprintf_r+0x34>
 80076f8:	2140      	movs	r1, #64	; 0x40
 80076fa:	f000 faff 	bl	8007cfc <_malloc_r>
 80076fe:	6028      	str	r0, [r5, #0]
 8007700:	6128      	str	r0, [r5, #16]
 8007702:	b928      	cbnz	r0, 8007710 <_svfiprintf_r+0x30>
 8007704:	230c      	movs	r3, #12
 8007706:	f8c8 3000 	str.w	r3, [r8]
 800770a:	f04f 30ff 	mov.w	r0, #4294967295
 800770e:	e0c4      	b.n	800789a <_svfiprintf_r+0x1ba>
 8007710:	2340      	movs	r3, #64	; 0x40
 8007712:	616b      	str	r3, [r5, #20]
 8007714:	2300      	movs	r3, #0
 8007716:	9309      	str	r3, [sp, #36]	; 0x24
 8007718:	2320      	movs	r3, #32
 800771a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800771e:	2330      	movs	r3, #48	; 0x30
 8007720:	f04f 0b01 	mov.w	fp, #1
 8007724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007728:	4637      	mov	r7, r6
 800772a:	463c      	mov	r4, r7
 800772c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	d13c      	bne.n	80077ae <_svfiprintf_r+0xce>
 8007734:	ebb7 0a06 	subs.w	sl, r7, r6
 8007738:	d00b      	beq.n	8007752 <_svfiprintf_r+0x72>
 800773a:	4653      	mov	r3, sl
 800773c:	4632      	mov	r2, r6
 800773e:	4629      	mov	r1, r5
 8007740:	4640      	mov	r0, r8
 8007742:	f7ff ff72 	bl	800762a <__ssputs_r>
 8007746:	3001      	adds	r0, #1
 8007748:	f000 80a2 	beq.w	8007890 <_svfiprintf_r+0x1b0>
 800774c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774e:	4453      	add	r3, sl
 8007750:	9309      	str	r3, [sp, #36]	; 0x24
 8007752:	783b      	ldrb	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 809b 	beq.w	8007890 <_svfiprintf_r+0x1b0>
 800775a:	2300      	movs	r3, #0
 800775c:	f04f 32ff 	mov.w	r2, #4294967295
 8007760:	9304      	str	r3, [sp, #16]
 8007762:	9307      	str	r3, [sp, #28]
 8007764:	9205      	str	r2, [sp, #20]
 8007766:	9306      	str	r3, [sp, #24]
 8007768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800776c:	931a      	str	r3, [sp, #104]	; 0x68
 800776e:	2205      	movs	r2, #5
 8007770:	7821      	ldrb	r1, [r4, #0]
 8007772:	4850      	ldr	r0, [pc, #320]	; (80078b4 <_svfiprintf_r+0x1d4>)
 8007774:	f000 fa4d 	bl	8007c12 <memchr>
 8007778:	1c67      	adds	r7, r4, #1
 800777a:	9b04      	ldr	r3, [sp, #16]
 800777c:	b9d8      	cbnz	r0, 80077b6 <_svfiprintf_r+0xd6>
 800777e:	06d9      	lsls	r1, r3, #27
 8007780:	bf44      	itt	mi
 8007782:	2220      	movmi	r2, #32
 8007784:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007788:	071a      	lsls	r2, r3, #28
 800778a:	bf44      	itt	mi
 800778c:	222b      	movmi	r2, #43	; 0x2b
 800778e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007792:	7822      	ldrb	r2, [r4, #0]
 8007794:	2a2a      	cmp	r2, #42	; 0x2a
 8007796:	d016      	beq.n	80077c6 <_svfiprintf_r+0xe6>
 8007798:	2100      	movs	r1, #0
 800779a:	200a      	movs	r0, #10
 800779c:	9a07      	ldr	r2, [sp, #28]
 800779e:	4627      	mov	r7, r4
 80077a0:	783b      	ldrb	r3, [r7, #0]
 80077a2:	3401      	adds	r4, #1
 80077a4:	3b30      	subs	r3, #48	; 0x30
 80077a6:	2b09      	cmp	r3, #9
 80077a8:	d950      	bls.n	800784c <_svfiprintf_r+0x16c>
 80077aa:	b1c9      	cbz	r1, 80077e0 <_svfiprintf_r+0x100>
 80077ac:	e011      	b.n	80077d2 <_svfiprintf_r+0xf2>
 80077ae:	2b25      	cmp	r3, #37	; 0x25
 80077b0:	d0c0      	beq.n	8007734 <_svfiprintf_r+0x54>
 80077b2:	4627      	mov	r7, r4
 80077b4:	e7b9      	b.n	800772a <_svfiprintf_r+0x4a>
 80077b6:	4a3f      	ldr	r2, [pc, #252]	; (80078b4 <_svfiprintf_r+0x1d4>)
 80077b8:	463c      	mov	r4, r7
 80077ba:	1a80      	subs	r0, r0, r2
 80077bc:	fa0b f000 	lsl.w	r0, fp, r0
 80077c0:	4318      	orrs	r0, r3
 80077c2:	9004      	str	r0, [sp, #16]
 80077c4:	e7d3      	b.n	800776e <_svfiprintf_r+0x8e>
 80077c6:	9a03      	ldr	r2, [sp, #12]
 80077c8:	1d11      	adds	r1, r2, #4
 80077ca:	6812      	ldr	r2, [r2, #0]
 80077cc:	9103      	str	r1, [sp, #12]
 80077ce:	2a00      	cmp	r2, #0
 80077d0:	db01      	blt.n	80077d6 <_svfiprintf_r+0xf6>
 80077d2:	9207      	str	r2, [sp, #28]
 80077d4:	e004      	b.n	80077e0 <_svfiprintf_r+0x100>
 80077d6:	4252      	negs	r2, r2
 80077d8:	f043 0302 	orr.w	r3, r3, #2
 80077dc:	9207      	str	r2, [sp, #28]
 80077de:	9304      	str	r3, [sp, #16]
 80077e0:	783b      	ldrb	r3, [r7, #0]
 80077e2:	2b2e      	cmp	r3, #46	; 0x2e
 80077e4:	d10d      	bne.n	8007802 <_svfiprintf_r+0x122>
 80077e6:	787b      	ldrb	r3, [r7, #1]
 80077e8:	1c79      	adds	r1, r7, #1
 80077ea:	2b2a      	cmp	r3, #42	; 0x2a
 80077ec:	d132      	bne.n	8007854 <_svfiprintf_r+0x174>
 80077ee:	9b03      	ldr	r3, [sp, #12]
 80077f0:	3702      	adds	r7, #2
 80077f2:	1d1a      	adds	r2, r3, #4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	9203      	str	r2, [sp, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	bfb8      	it	lt
 80077fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007800:	9305      	str	r3, [sp, #20]
 8007802:	4c2d      	ldr	r4, [pc, #180]	; (80078b8 <_svfiprintf_r+0x1d8>)
 8007804:	2203      	movs	r2, #3
 8007806:	7839      	ldrb	r1, [r7, #0]
 8007808:	4620      	mov	r0, r4
 800780a:	f000 fa02 	bl	8007c12 <memchr>
 800780e:	b138      	cbz	r0, 8007820 <_svfiprintf_r+0x140>
 8007810:	2340      	movs	r3, #64	; 0x40
 8007812:	1b00      	subs	r0, r0, r4
 8007814:	fa03 f000 	lsl.w	r0, r3, r0
 8007818:	9b04      	ldr	r3, [sp, #16]
 800781a:	3701      	adds	r7, #1
 800781c:	4303      	orrs	r3, r0
 800781e:	9304      	str	r3, [sp, #16]
 8007820:	7839      	ldrb	r1, [r7, #0]
 8007822:	2206      	movs	r2, #6
 8007824:	4825      	ldr	r0, [pc, #148]	; (80078bc <_svfiprintf_r+0x1dc>)
 8007826:	1c7e      	adds	r6, r7, #1
 8007828:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800782c:	f000 f9f1 	bl	8007c12 <memchr>
 8007830:	2800      	cmp	r0, #0
 8007832:	d035      	beq.n	80078a0 <_svfiprintf_r+0x1c0>
 8007834:	4b22      	ldr	r3, [pc, #136]	; (80078c0 <_svfiprintf_r+0x1e0>)
 8007836:	b9fb      	cbnz	r3, 8007878 <_svfiprintf_r+0x198>
 8007838:	9b03      	ldr	r3, [sp, #12]
 800783a:	3307      	adds	r3, #7
 800783c:	f023 0307 	bic.w	r3, r3, #7
 8007840:	3308      	adds	r3, #8
 8007842:	9303      	str	r3, [sp, #12]
 8007844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007846:	444b      	add	r3, r9
 8007848:	9309      	str	r3, [sp, #36]	; 0x24
 800784a:	e76d      	b.n	8007728 <_svfiprintf_r+0x48>
 800784c:	fb00 3202 	mla	r2, r0, r2, r3
 8007850:	2101      	movs	r1, #1
 8007852:	e7a4      	b.n	800779e <_svfiprintf_r+0xbe>
 8007854:	2300      	movs	r3, #0
 8007856:	240a      	movs	r4, #10
 8007858:	4618      	mov	r0, r3
 800785a:	9305      	str	r3, [sp, #20]
 800785c:	460f      	mov	r7, r1
 800785e:	783a      	ldrb	r2, [r7, #0]
 8007860:	3101      	adds	r1, #1
 8007862:	3a30      	subs	r2, #48	; 0x30
 8007864:	2a09      	cmp	r2, #9
 8007866:	d903      	bls.n	8007870 <_svfiprintf_r+0x190>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d0ca      	beq.n	8007802 <_svfiprintf_r+0x122>
 800786c:	9005      	str	r0, [sp, #20]
 800786e:	e7c8      	b.n	8007802 <_svfiprintf_r+0x122>
 8007870:	fb04 2000 	mla	r0, r4, r0, r2
 8007874:	2301      	movs	r3, #1
 8007876:	e7f1      	b.n	800785c <_svfiprintf_r+0x17c>
 8007878:	ab03      	add	r3, sp, #12
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	462a      	mov	r2, r5
 800787e:	4b11      	ldr	r3, [pc, #68]	; (80078c4 <_svfiprintf_r+0x1e4>)
 8007880:	a904      	add	r1, sp, #16
 8007882:	4640      	mov	r0, r8
 8007884:	f3af 8000 	nop.w
 8007888:	f1b0 3fff 	cmp.w	r0, #4294967295
 800788c:	4681      	mov	r9, r0
 800788e:	d1d9      	bne.n	8007844 <_svfiprintf_r+0x164>
 8007890:	89ab      	ldrh	r3, [r5, #12]
 8007892:	065b      	lsls	r3, r3, #25
 8007894:	f53f af39 	bmi.w	800770a <_svfiprintf_r+0x2a>
 8007898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800789a:	b01d      	add	sp, #116	; 0x74
 800789c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a0:	ab03      	add	r3, sp, #12
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	462a      	mov	r2, r5
 80078a6:	4b07      	ldr	r3, [pc, #28]	; (80078c4 <_svfiprintf_r+0x1e4>)
 80078a8:	a904      	add	r1, sp, #16
 80078aa:	4640      	mov	r0, r8
 80078ac:	f000 f884 	bl	80079b8 <_printf_i>
 80078b0:	e7ea      	b.n	8007888 <_svfiprintf_r+0x1a8>
 80078b2:	bf00      	nop
 80078b4:	0800859a 	.word	0x0800859a
 80078b8:	080085a0 	.word	0x080085a0
 80078bc:	080085a4 	.word	0x080085a4
 80078c0:	00000000 	.word	0x00000000
 80078c4:	0800762b 	.word	0x0800762b

080078c8 <_printf_common>:
 80078c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078cc:	4691      	mov	r9, r2
 80078ce:	461f      	mov	r7, r3
 80078d0:	688a      	ldr	r2, [r1, #8]
 80078d2:	690b      	ldr	r3, [r1, #16]
 80078d4:	4606      	mov	r6, r0
 80078d6:	4293      	cmp	r3, r2
 80078d8:	bfb8      	it	lt
 80078da:	4613      	movlt	r3, r2
 80078dc:	f8c9 3000 	str.w	r3, [r9]
 80078e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078e4:	460c      	mov	r4, r1
 80078e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078ea:	b112      	cbz	r2, 80078f2 <_printf_common+0x2a>
 80078ec:	3301      	adds	r3, #1
 80078ee:	f8c9 3000 	str.w	r3, [r9]
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	0699      	lsls	r1, r3, #26
 80078f6:	bf42      	ittt	mi
 80078f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80078fc:	3302      	addmi	r3, #2
 80078fe:	f8c9 3000 	strmi.w	r3, [r9]
 8007902:	6825      	ldr	r5, [r4, #0]
 8007904:	f015 0506 	ands.w	r5, r5, #6
 8007908:	d107      	bne.n	800791a <_printf_common+0x52>
 800790a:	f104 0a19 	add.w	sl, r4, #25
 800790e:	68e3      	ldr	r3, [r4, #12]
 8007910:	f8d9 2000 	ldr.w	r2, [r9]
 8007914:	1a9b      	subs	r3, r3, r2
 8007916:	429d      	cmp	r5, r3
 8007918:	db2a      	blt.n	8007970 <_printf_common+0xa8>
 800791a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800791e:	6822      	ldr	r2, [r4, #0]
 8007920:	3300      	adds	r3, #0
 8007922:	bf18      	it	ne
 8007924:	2301      	movne	r3, #1
 8007926:	0692      	lsls	r2, r2, #26
 8007928:	d42f      	bmi.n	800798a <_printf_common+0xc2>
 800792a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800792e:	4639      	mov	r1, r7
 8007930:	4630      	mov	r0, r6
 8007932:	47c0      	blx	r8
 8007934:	3001      	adds	r0, #1
 8007936:	d022      	beq.n	800797e <_printf_common+0xb6>
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	68e5      	ldr	r5, [r4, #12]
 800793c:	f003 0306 	and.w	r3, r3, #6
 8007940:	2b04      	cmp	r3, #4
 8007942:	bf18      	it	ne
 8007944:	2500      	movne	r5, #0
 8007946:	f8d9 2000 	ldr.w	r2, [r9]
 800794a:	f04f 0900 	mov.w	r9, #0
 800794e:	bf08      	it	eq
 8007950:	1aad      	subeq	r5, r5, r2
 8007952:	68a3      	ldr	r3, [r4, #8]
 8007954:	6922      	ldr	r2, [r4, #16]
 8007956:	bf08      	it	eq
 8007958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800795c:	4293      	cmp	r3, r2
 800795e:	bfc4      	itt	gt
 8007960:	1a9b      	subgt	r3, r3, r2
 8007962:	18ed      	addgt	r5, r5, r3
 8007964:	341a      	adds	r4, #26
 8007966:	454d      	cmp	r5, r9
 8007968:	d11b      	bne.n	80079a2 <_printf_common+0xda>
 800796a:	2000      	movs	r0, #0
 800796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007970:	2301      	movs	r3, #1
 8007972:	4652      	mov	r2, sl
 8007974:	4639      	mov	r1, r7
 8007976:	4630      	mov	r0, r6
 8007978:	47c0      	blx	r8
 800797a:	3001      	adds	r0, #1
 800797c:	d103      	bne.n	8007986 <_printf_common+0xbe>
 800797e:	f04f 30ff 	mov.w	r0, #4294967295
 8007982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007986:	3501      	adds	r5, #1
 8007988:	e7c1      	b.n	800790e <_printf_common+0x46>
 800798a:	2030      	movs	r0, #48	; 0x30
 800798c:	18e1      	adds	r1, r4, r3
 800798e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007998:	4422      	add	r2, r4
 800799a:	3302      	adds	r3, #2
 800799c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079a0:	e7c3      	b.n	800792a <_printf_common+0x62>
 80079a2:	2301      	movs	r3, #1
 80079a4:	4622      	mov	r2, r4
 80079a6:	4639      	mov	r1, r7
 80079a8:	4630      	mov	r0, r6
 80079aa:	47c0      	blx	r8
 80079ac:	3001      	adds	r0, #1
 80079ae:	d0e6      	beq.n	800797e <_printf_common+0xb6>
 80079b0:	f109 0901 	add.w	r9, r9, #1
 80079b4:	e7d7      	b.n	8007966 <_printf_common+0x9e>
	...

080079b8 <_printf_i>:
 80079b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079bc:	4617      	mov	r7, r2
 80079be:	7e0a      	ldrb	r2, [r1, #24]
 80079c0:	b085      	sub	sp, #20
 80079c2:	2a6e      	cmp	r2, #110	; 0x6e
 80079c4:	4698      	mov	r8, r3
 80079c6:	4606      	mov	r6, r0
 80079c8:	460c      	mov	r4, r1
 80079ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079cc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80079d0:	f000 80bc 	beq.w	8007b4c <_printf_i+0x194>
 80079d4:	d81a      	bhi.n	8007a0c <_printf_i+0x54>
 80079d6:	2a63      	cmp	r2, #99	; 0x63
 80079d8:	d02e      	beq.n	8007a38 <_printf_i+0x80>
 80079da:	d80a      	bhi.n	80079f2 <_printf_i+0x3a>
 80079dc:	2a00      	cmp	r2, #0
 80079de:	f000 80c8 	beq.w	8007b72 <_printf_i+0x1ba>
 80079e2:	2a58      	cmp	r2, #88	; 0x58
 80079e4:	f000 808a 	beq.w	8007afc <_printf_i+0x144>
 80079e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079ec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80079f0:	e02a      	b.n	8007a48 <_printf_i+0x90>
 80079f2:	2a64      	cmp	r2, #100	; 0x64
 80079f4:	d001      	beq.n	80079fa <_printf_i+0x42>
 80079f6:	2a69      	cmp	r2, #105	; 0x69
 80079f8:	d1f6      	bne.n	80079e8 <_printf_i+0x30>
 80079fa:	6821      	ldr	r1, [r4, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007a02:	d023      	beq.n	8007a4c <_printf_i+0x94>
 8007a04:	1d11      	adds	r1, r2, #4
 8007a06:	6019      	str	r1, [r3, #0]
 8007a08:	6813      	ldr	r3, [r2, #0]
 8007a0a:	e027      	b.n	8007a5c <_printf_i+0xa4>
 8007a0c:	2a73      	cmp	r2, #115	; 0x73
 8007a0e:	f000 80b4 	beq.w	8007b7a <_printf_i+0x1c2>
 8007a12:	d808      	bhi.n	8007a26 <_printf_i+0x6e>
 8007a14:	2a6f      	cmp	r2, #111	; 0x6f
 8007a16:	d02a      	beq.n	8007a6e <_printf_i+0xb6>
 8007a18:	2a70      	cmp	r2, #112	; 0x70
 8007a1a:	d1e5      	bne.n	80079e8 <_printf_i+0x30>
 8007a1c:	680a      	ldr	r2, [r1, #0]
 8007a1e:	f042 0220 	orr.w	r2, r2, #32
 8007a22:	600a      	str	r2, [r1, #0]
 8007a24:	e003      	b.n	8007a2e <_printf_i+0x76>
 8007a26:	2a75      	cmp	r2, #117	; 0x75
 8007a28:	d021      	beq.n	8007a6e <_printf_i+0xb6>
 8007a2a:	2a78      	cmp	r2, #120	; 0x78
 8007a2c:	d1dc      	bne.n	80079e8 <_printf_i+0x30>
 8007a2e:	2278      	movs	r2, #120	; 0x78
 8007a30:	496f      	ldr	r1, [pc, #444]	; (8007bf0 <_printf_i+0x238>)
 8007a32:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007a36:	e064      	b.n	8007b02 <_printf_i+0x14a>
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8007a3e:	1d11      	adds	r1, r2, #4
 8007a40:	6019      	str	r1, [r3, #0]
 8007a42:	6813      	ldr	r3, [r2, #0]
 8007a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e0a3      	b.n	8007b94 <_printf_i+0x1dc>
 8007a4c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007a50:	f102 0104 	add.w	r1, r2, #4
 8007a54:	6019      	str	r1, [r3, #0]
 8007a56:	d0d7      	beq.n	8007a08 <_printf_i+0x50>
 8007a58:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	da03      	bge.n	8007a68 <_printf_i+0xb0>
 8007a60:	222d      	movs	r2, #45	; 0x2d
 8007a62:	425b      	negs	r3, r3
 8007a64:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007a68:	4962      	ldr	r1, [pc, #392]	; (8007bf4 <_printf_i+0x23c>)
 8007a6a:	220a      	movs	r2, #10
 8007a6c:	e017      	b.n	8007a9e <_printf_i+0xe6>
 8007a6e:	6820      	ldr	r0, [r4, #0]
 8007a70:	6819      	ldr	r1, [r3, #0]
 8007a72:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007a76:	d003      	beq.n	8007a80 <_printf_i+0xc8>
 8007a78:	1d08      	adds	r0, r1, #4
 8007a7a:	6018      	str	r0, [r3, #0]
 8007a7c:	680b      	ldr	r3, [r1, #0]
 8007a7e:	e006      	b.n	8007a8e <_printf_i+0xd6>
 8007a80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a84:	f101 0004 	add.w	r0, r1, #4
 8007a88:	6018      	str	r0, [r3, #0]
 8007a8a:	d0f7      	beq.n	8007a7c <_printf_i+0xc4>
 8007a8c:	880b      	ldrh	r3, [r1, #0]
 8007a8e:	2a6f      	cmp	r2, #111	; 0x6f
 8007a90:	bf14      	ite	ne
 8007a92:	220a      	movne	r2, #10
 8007a94:	2208      	moveq	r2, #8
 8007a96:	4957      	ldr	r1, [pc, #348]	; (8007bf4 <_printf_i+0x23c>)
 8007a98:	2000      	movs	r0, #0
 8007a9a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8007a9e:	6865      	ldr	r5, [r4, #4]
 8007aa0:	2d00      	cmp	r5, #0
 8007aa2:	60a5      	str	r5, [r4, #8]
 8007aa4:	f2c0 809c 	blt.w	8007be0 <_printf_i+0x228>
 8007aa8:	6820      	ldr	r0, [r4, #0]
 8007aaa:	f020 0004 	bic.w	r0, r0, #4
 8007aae:	6020      	str	r0, [r4, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d13f      	bne.n	8007b34 <_printf_i+0x17c>
 8007ab4:	2d00      	cmp	r5, #0
 8007ab6:	f040 8095 	bne.w	8007be4 <_printf_i+0x22c>
 8007aba:	4675      	mov	r5, lr
 8007abc:	2a08      	cmp	r2, #8
 8007abe:	d10b      	bne.n	8007ad8 <_printf_i+0x120>
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	07da      	lsls	r2, r3, #31
 8007ac4:	d508      	bpl.n	8007ad8 <_printf_i+0x120>
 8007ac6:	6923      	ldr	r3, [r4, #16]
 8007ac8:	6862      	ldr	r2, [r4, #4]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	bfde      	ittt	le
 8007ace:	2330      	movle	r3, #48	; 0x30
 8007ad0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ad4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ad8:	ebae 0305 	sub.w	r3, lr, r5
 8007adc:	6123      	str	r3, [r4, #16]
 8007ade:	f8cd 8000 	str.w	r8, [sp]
 8007ae2:	463b      	mov	r3, r7
 8007ae4:	aa03      	add	r2, sp, #12
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	4630      	mov	r0, r6
 8007aea:	f7ff feed 	bl	80078c8 <_printf_common>
 8007aee:	3001      	adds	r0, #1
 8007af0:	d155      	bne.n	8007b9e <_printf_i+0x1e6>
 8007af2:	f04f 30ff 	mov.w	r0, #4294967295
 8007af6:	b005      	add	sp, #20
 8007af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007afc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8007b00:	493c      	ldr	r1, [pc, #240]	; (8007bf4 <_printf_i+0x23c>)
 8007b02:	6822      	ldr	r2, [r4, #0]
 8007b04:	6818      	ldr	r0, [r3, #0]
 8007b06:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007b0a:	f100 0504 	add.w	r5, r0, #4
 8007b0e:	601d      	str	r5, [r3, #0]
 8007b10:	d001      	beq.n	8007b16 <_printf_i+0x15e>
 8007b12:	6803      	ldr	r3, [r0, #0]
 8007b14:	e002      	b.n	8007b1c <_printf_i+0x164>
 8007b16:	0655      	lsls	r5, r2, #25
 8007b18:	d5fb      	bpl.n	8007b12 <_printf_i+0x15a>
 8007b1a:	8803      	ldrh	r3, [r0, #0]
 8007b1c:	07d0      	lsls	r0, r2, #31
 8007b1e:	bf44      	itt	mi
 8007b20:	f042 0220 	orrmi.w	r2, r2, #32
 8007b24:	6022      	strmi	r2, [r4, #0]
 8007b26:	b91b      	cbnz	r3, 8007b30 <_printf_i+0x178>
 8007b28:	6822      	ldr	r2, [r4, #0]
 8007b2a:	f022 0220 	bic.w	r2, r2, #32
 8007b2e:	6022      	str	r2, [r4, #0]
 8007b30:	2210      	movs	r2, #16
 8007b32:	e7b1      	b.n	8007a98 <_printf_i+0xe0>
 8007b34:	4675      	mov	r5, lr
 8007b36:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b3a:	fb02 3310 	mls	r3, r2, r0, r3
 8007b3e:	5ccb      	ldrb	r3, [r1, r3]
 8007b40:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007b44:	4603      	mov	r3, r0
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d1f5      	bne.n	8007b36 <_printf_i+0x17e>
 8007b4a:	e7b7      	b.n	8007abc <_printf_i+0x104>
 8007b4c:	6808      	ldr	r0, [r1, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007b54:	6949      	ldr	r1, [r1, #20]
 8007b56:	d004      	beq.n	8007b62 <_printf_i+0x1aa>
 8007b58:	1d10      	adds	r0, r2, #4
 8007b5a:	6018      	str	r0, [r3, #0]
 8007b5c:	6813      	ldr	r3, [r2, #0]
 8007b5e:	6019      	str	r1, [r3, #0]
 8007b60:	e007      	b.n	8007b72 <_printf_i+0x1ba>
 8007b62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b66:	f102 0004 	add.w	r0, r2, #4
 8007b6a:	6018      	str	r0, [r3, #0]
 8007b6c:	6813      	ldr	r3, [r2, #0]
 8007b6e:	d0f6      	beq.n	8007b5e <_printf_i+0x1a6>
 8007b70:	8019      	strh	r1, [r3, #0]
 8007b72:	2300      	movs	r3, #0
 8007b74:	4675      	mov	r5, lr
 8007b76:	6123      	str	r3, [r4, #16]
 8007b78:	e7b1      	b.n	8007ade <_printf_i+0x126>
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	1d11      	adds	r1, r2, #4
 8007b7e:	6019      	str	r1, [r3, #0]
 8007b80:	6815      	ldr	r5, [r2, #0]
 8007b82:	2100      	movs	r1, #0
 8007b84:	6862      	ldr	r2, [r4, #4]
 8007b86:	4628      	mov	r0, r5
 8007b88:	f000 f843 	bl	8007c12 <memchr>
 8007b8c:	b108      	cbz	r0, 8007b92 <_printf_i+0x1da>
 8007b8e:	1b40      	subs	r0, r0, r5
 8007b90:	6060      	str	r0, [r4, #4]
 8007b92:	6863      	ldr	r3, [r4, #4]
 8007b94:	6123      	str	r3, [r4, #16]
 8007b96:	2300      	movs	r3, #0
 8007b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b9c:	e79f      	b.n	8007ade <_printf_i+0x126>
 8007b9e:	6923      	ldr	r3, [r4, #16]
 8007ba0:	462a      	mov	r2, r5
 8007ba2:	4639      	mov	r1, r7
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	47c0      	blx	r8
 8007ba8:	3001      	adds	r0, #1
 8007baa:	d0a2      	beq.n	8007af2 <_printf_i+0x13a>
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	079b      	lsls	r3, r3, #30
 8007bb0:	d507      	bpl.n	8007bc2 <_printf_i+0x20a>
 8007bb2:	2500      	movs	r5, #0
 8007bb4:	f104 0919 	add.w	r9, r4, #25
 8007bb8:	68e3      	ldr	r3, [r4, #12]
 8007bba:	9a03      	ldr	r2, [sp, #12]
 8007bbc:	1a9b      	subs	r3, r3, r2
 8007bbe:	429d      	cmp	r5, r3
 8007bc0:	db05      	blt.n	8007bce <_printf_i+0x216>
 8007bc2:	68e0      	ldr	r0, [r4, #12]
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	4298      	cmp	r0, r3
 8007bc8:	bfb8      	it	lt
 8007bca:	4618      	movlt	r0, r3
 8007bcc:	e793      	b.n	8007af6 <_printf_i+0x13e>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	464a      	mov	r2, r9
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	47c0      	blx	r8
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d08a      	beq.n	8007af2 <_printf_i+0x13a>
 8007bdc:	3501      	adds	r5, #1
 8007bde:	e7eb      	b.n	8007bb8 <_printf_i+0x200>
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1a7      	bne.n	8007b34 <_printf_i+0x17c>
 8007be4:	780b      	ldrb	r3, [r1, #0]
 8007be6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bee:	e765      	b.n	8007abc <_printf_i+0x104>
 8007bf0:	080085bc 	.word	0x080085bc
 8007bf4:	080085ab 	.word	0x080085ab

08007bf8 <__ascii_wctomb>:
 8007bf8:	b149      	cbz	r1, 8007c0e <__ascii_wctomb+0x16>
 8007bfa:	2aff      	cmp	r2, #255	; 0xff
 8007bfc:	bf8b      	itete	hi
 8007bfe:	238a      	movhi	r3, #138	; 0x8a
 8007c00:	700a      	strbls	r2, [r1, #0]
 8007c02:	6003      	strhi	r3, [r0, #0]
 8007c04:	2001      	movls	r0, #1
 8007c06:	bf88      	it	hi
 8007c08:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c0c:	4770      	bx	lr
 8007c0e:	4608      	mov	r0, r1
 8007c10:	4770      	bx	lr

08007c12 <memchr>:
 8007c12:	b510      	push	{r4, lr}
 8007c14:	b2c9      	uxtb	r1, r1
 8007c16:	4402      	add	r2, r0
 8007c18:	4290      	cmp	r0, r2
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	d101      	bne.n	8007c22 <memchr+0x10>
 8007c1e:	2000      	movs	r0, #0
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	781c      	ldrb	r4, [r3, #0]
 8007c24:	3001      	adds	r0, #1
 8007c26:	428c      	cmp	r4, r1
 8007c28:	d1f6      	bne.n	8007c18 <memchr+0x6>
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	bd10      	pop	{r4, pc}

08007c2e <memmove>:
 8007c2e:	4288      	cmp	r0, r1
 8007c30:	b510      	push	{r4, lr}
 8007c32:	eb01 0302 	add.w	r3, r1, r2
 8007c36:	d803      	bhi.n	8007c40 <memmove+0x12>
 8007c38:	1e42      	subs	r2, r0, #1
 8007c3a:	4299      	cmp	r1, r3
 8007c3c:	d10c      	bne.n	8007c58 <memmove+0x2a>
 8007c3e:	bd10      	pop	{r4, pc}
 8007c40:	4298      	cmp	r0, r3
 8007c42:	d2f9      	bcs.n	8007c38 <memmove+0xa>
 8007c44:	1881      	adds	r1, r0, r2
 8007c46:	1ad2      	subs	r2, r2, r3
 8007c48:	42d3      	cmn	r3, r2
 8007c4a:	d100      	bne.n	8007c4e <memmove+0x20>
 8007c4c:	bd10      	pop	{r4, pc}
 8007c4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c52:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007c56:	e7f7      	b.n	8007c48 <memmove+0x1a>
 8007c58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c5c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007c60:	e7eb      	b.n	8007c3a <memmove+0xc>
	...

08007c64 <_free_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4605      	mov	r5, r0
 8007c68:	2900      	cmp	r1, #0
 8007c6a:	d043      	beq.n	8007cf4 <_free_r+0x90>
 8007c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c70:	1f0c      	subs	r4, r1, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	bfb8      	it	lt
 8007c76:	18e4      	addlt	r4, r4, r3
 8007c78:	f000 f8d4 	bl	8007e24 <__malloc_lock>
 8007c7c:	4a1e      	ldr	r2, [pc, #120]	; (8007cf8 <_free_r+0x94>)
 8007c7e:	6813      	ldr	r3, [r2, #0]
 8007c80:	4610      	mov	r0, r2
 8007c82:	b933      	cbnz	r3, 8007c92 <_free_r+0x2e>
 8007c84:	6063      	str	r3, [r4, #4]
 8007c86:	6014      	str	r4, [r2, #0]
 8007c88:	4628      	mov	r0, r5
 8007c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c8e:	f000 b8ca 	b.w	8007e26 <__malloc_unlock>
 8007c92:	42a3      	cmp	r3, r4
 8007c94:	d90b      	bls.n	8007cae <_free_r+0x4a>
 8007c96:	6821      	ldr	r1, [r4, #0]
 8007c98:	1862      	adds	r2, r4, r1
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	bf01      	itttt	eq
 8007c9e:	681a      	ldreq	r2, [r3, #0]
 8007ca0:	685b      	ldreq	r3, [r3, #4]
 8007ca2:	1852      	addeq	r2, r2, r1
 8007ca4:	6022      	streq	r2, [r4, #0]
 8007ca6:	6063      	str	r3, [r4, #4]
 8007ca8:	6004      	str	r4, [r0, #0]
 8007caa:	e7ed      	b.n	8007c88 <_free_r+0x24>
 8007cac:	4613      	mov	r3, r2
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	b10a      	cbz	r2, 8007cb6 <_free_r+0x52>
 8007cb2:	42a2      	cmp	r2, r4
 8007cb4:	d9fa      	bls.n	8007cac <_free_r+0x48>
 8007cb6:	6819      	ldr	r1, [r3, #0]
 8007cb8:	1858      	adds	r0, r3, r1
 8007cba:	42a0      	cmp	r0, r4
 8007cbc:	d10b      	bne.n	8007cd6 <_free_r+0x72>
 8007cbe:	6820      	ldr	r0, [r4, #0]
 8007cc0:	4401      	add	r1, r0
 8007cc2:	1858      	adds	r0, r3, r1
 8007cc4:	4282      	cmp	r2, r0
 8007cc6:	6019      	str	r1, [r3, #0]
 8007cc8:	d1de      	bne.n	8007c88 <_free_r+0x24>
 8007cca:	6810      	ldr	r0, [r2, #0]
 8007ccc:	6852      	ldr	r2, [r2, #4]
 8007cce:	4401      	add	r1, r0
 8007cd0:	6019      	str	r1, [r3, #0]
 8007cd2:	605a      	str	r2, [r3, #4]
 8007cd4:	e7d8      	b.n	8007c88 <_free_r+0x24>
 8007cd6:	d902      	bls.n	8007cde <_free_r+0x7a>
 8007cd8:	230c      	movs	r3, #12
 8007cda:	602b      	str	r3, [r5, #0]
 8007cdc:	e7d4      	b.n	8007c88 <_free_r+0x24>
 8007cde:	6820      	ldr	r0, [r4, #0]
 8007ce0:	1821      	adds	r1, r4, r0
 8007ce2:	428a      	cmp	r2, r1
 8007ce4:	bf01      	itttt	eq
 8007ce6:	6811      	ldreq	r1, [r2, #0]
 8007ce8:	6852      	ldreq	r2, [r2, #4]
 8007cea:	1809      	addeq	r1, r1, r0
 8007cec:	6021      	streq	r1, [r4, #0]
 8007cee:	6062      	str	r2, [r4, #4]
 8007cf0:	605c      	str	r4, [r3, #4]
 8007cf2:	e7c9      	b.n	8007c88 <_free_r+0x24>
 8007cf4:	bd38      	pop	{r3, r4, r5, pc}
 8007cf6:	bf00      	nop
 8007cf8:	200023e8 	.word	0x200023e8

08007cfc <_malloc_r>:
 8007cfc:	b570      	push	{r4, r5, r6, lr}
 8007cfe:	1ccd      	adds	r5, r1, #3
 8007d00:	f025 0503 	bic.w	r5, r5, #3
 8007d04:	3508      	adds	r5, #8
 8007d06:	2d0c      	cmp	r5, #12
 8007d08:	bf38      	it	cc
 8007d0a:	250c      	movcc	r5, #12
 8007d0c:	2d00      	cmp	r5, #0
 8007d0e:	4606      	mov	r6, r0
 8007d10:	db01      	blt.n	8007d16 <_malloc_r+0x1a>
 8007d12:	42a9      	cmp	r1, r5
 8007d14:	d903      	bls.n	8007d1e <_malloc_r+0x22>
 8007d16:	230c      	movs	r3, #12
 8007d18:	6033      	str	r3, [r6, #0]
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	bd70      	pop	{r4, r5, r6, pc}
 8007d1e:	f000 f881 	bl	8007e24 <__malloc_lock>
 8007d22:	4a23      	ldr	r2, [pc, #140]	; (8007db0 <_malloc_r+0xb4>)
 8007d24:	6814      	ldr	r4, [r2, #0]
 8007d26:	4621      	mov	r1, r4
 8007d28:	b991      	cbnz	r1, 8007d50 <_malloc_r+0x54>
 8007d2a:	4c22      	ldr	r4, [pc, #136]	; (8007db4 <_malloc_r+0xb8>)
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	b91b      	cbnz	r3, 8007d38 <_malloc_r+0x3c>
 8007d30:	4630      	mov	r0, r6
 8007d32:	f000 f867 	bl	8007e04 <_sbrk_r>
 8007d36:	6020      	str	r0, [r4, #0]
 8007d38:	4629      	mov	r1, r5
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f000 f862 	bl	8007e04 <_sbrk_r>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d126      	bne.n	8007d92 <_malloc_r+0x96>
 8007d44:	230c      	movs	r3, #12
 8007d46:	4630      	mov	r0, r6
 8007d48:	6033      	str	r3, [r6, #0]
 8007d4a:	f000 f86c 	bl	8007e26 <__malloc_unlock>
 8007d4e:	e7e4      	b.n	8007d1a <_malloc_r+0x1e>
 8007d50:	680b      	ldr	r3, [r1, #0]
 8007d52:	1b5b      	subs	r3, r3, r5
 8007d54:	d41a      	bmi.n	8007d8c <_malloc_r+0x90>
 8007d56:	2b0b      	cmp	r3, #11
 8007d58:	d90f      	bls.n	8007d7a <_malloc_r+0x7e>
 8007d5a:	600b      	str	r3, [r1, #0]
 8007d5c:	18cc      	adds	r4, r1, r3
 8007d5e:	50cd      	str	r5, [r1, r3]
 8007d60:	4630      	mov	r0, r6
 8007d62:	f000 f860 	bl	8007e26 <__malloc_unlock>
 8007d66:	f104 000b 	add.w	r0, r4, #11
 8007d6a:	1d23      	adds	r3, r4, #4
 8007d6c:	f020 0007 	bic.w	r0, r0, #7
 8007d70:	1ac3      	subs	r3, r0, r3
 8007d72:	d01b      	beq.n	8007dac <_malloc_r+0xb0>
 8007d74:	425a      	negs	r2, r3
 8007d76:	50e2      	str	r2, [r4, r3]
 8007d78:	bd70      	pop	{r4, r5, r6, pc}
 8007d7a:	428c      	cmp	r4, r1
 8007d7c:	bf0b      	itete	eq
 8007d7e:	6863      	ldreq	r3, [r4, #4]
 8007d80:	684b      	ldrne	r3, [r1, #4]
 8007d82:	6013      	streq	r3, [r2, #0]
 8007d84:	6063      	strne	r3, [r4, #4]
 8007d86:	bf18      	it	ne
 8007d88:	460c      	movne	r4, r1
 8007d8a:	e7e9      	b.n	8007d60 <_malloc_r+0x64>
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	6849      	ldr	r1, [r1, #4]
 8007d90:	e7ca      	b.n	8007d28 <_malloc_r+0x2c>
 8007d92:	1cc4      	adds	r4, r0, #3
 8007d94:	f024 0403 	bic.w	r4, r4, #3
 8007d98:	42a0      	cmp	r0, r4
 8007d9a:	d005      	beq.n	8007da8 <_malloc_r+0xac>
 8007d9c:	1a21      	subs	r1, r4, r0
 8007d9e:	4630      	mov	r0, r6
 8007da0:	f000 f830 	bl	8007e04 <_sbrk_r>
 8007da4:	3001      	adds	r0, #1
 8007da6:	d0cd      	beq.n	8007d44 <_malloc_r+0x48>
 8007da8:	6025      	str	r5, [r4, #0]
 8007daa:	e7d9      	b.n	8007d60 <_malloc_r+0x64>
 8007dac:	bd70      	pop	{r4, r5, r6, pc}
 8007dae:	bf00      	nop
 8007db0:	200023e8 	.word	0x200023e8
 8007db4:	200023ec 	.word	0x200023ec

08007db8 <_realloc_r>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	4607      	mov	r7, r0
 8007dbc:	4614      	mov	r4, r2
 8007dbe:	460e      	mov	r6, r1
 8007dc0:	b921      	cbnz	r1, 8007dcc <_realloc_r+0x14>
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007dc8:	f7ff bf98 	b.w	8007cfc <_malloc_r>
 8007dcc:	b922      	cbnz	r2, 8007dd8 <_realloc_r+0x20>
 8007dce:	f7ff ff49 	bl	8007c64 <_free_r>
 8007dd2:	4625      	mov	r5, r4
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dd8:	f000 f826 	bl	8007e28 <_malloc_usable_size_r>
 8007ddc:	4284      	cmp	r4, r0
 8007dde:	d90f      	bls.n	8007e00 <_realloc_r+0x48>
 8007de0:	4621      	mov	r1, r4
 8007de2:	4638      	mov	r0, r7
 8007de4:	f7ff ff8a 	bl	8007cfc <_malloc_r>
 8007de8:	4605      	mov	r5, r0
 8007dea:	2800      	cmp	r0, #0
 8007dec:	d0f2      	beq.n	8007dd4 <_realloc_r+0x1c>
 8007dee:	4631      	mov	r1, r6
 8007df0:	4622      	mov	r2, r4
 8007df2:	f7ff fb1b 	bl	800742c <memcpy>
 8007df6:	4631      	mov	r1, r6
 8007df8:	4638      	mov	r0, r7
 8007dfa:	f7ff ff33 	bl	8007c64 <_free_r>
 8007dfe:	e7e9      	b.n	8007dd4 <_realloc_r+0x1c>
 8007e00:	4635      	mov	r5, r6
 8007e02:	e7e7      	b.n	8007dd4 <_realloc_r+0x1c>

08007e04 <_sbrk_r>:
 8007e04:	b538      	push	{r3, r4, r5, lr}
 8007e06:	2300      	movs	r3, #0
 8007e08:	4c05      	ldr	r4, [pc, #20]	; (8007e20 <_sbrk_r+0x1c>)
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	4608      	mov	r0, r1
 8007e0e:	6023      	str	r3, [r4, #0]
 8007e10:	f7ff fa5c 	bl	80072cc <_sbrk>
 8007e14:	1c43      	adds	r3, r0, #1
 8007e16:	d102      	bne.n	8007e1e <_sbrk_r+0x1a>
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	b103      	cbz	r3, 8007e1e <_sbrk_r+0x1a>
 8007e1c:	602b      	str	r3, [r5, #0]
 8007e1e:	bd38      	pop	{r3, r4, r5, pc}
 8007e20:	200030a4 	.word	0x200030a4

08007e24 <__malloc_lock>:
 8007e24:	4770      	bx	lr

08007e26 <__malloc_unlock>:
 8007e26:	4770      	bx	lr

08007e28 <_malloc_usable_size_r>:
 8007e28:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f1a0 0004 	sub.w	r0, r0, #4
 8007e32:	bfbc      	itt	lt
 8007e34:	580b      	ldrlt	r3, [r1, r0]
 8007e36:	18c0      	addlt	r0, r0, r3
 8007e38:	4770      	bx	lr
	...

08007e3c <_init>:
 8007e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3e:	bf00      	nop
 8007e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e42:	bc08      	pop	{r3}
 8007e44:	469e      	mov	lr, r3
 8007e46:	4770      	bx	lr

08007e48 <_fini>:
 8007e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4a:	bf00      	nop
 8007e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e4e:	bc08      	pop	{r3}
 8007e50:	469e      	mov	lr, r3
 8007e52:	4770      	bx	lr
