
rtos_usart_ll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bf0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08003d00  08003d00  00013d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004148  08004148  00014148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004150  08004150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  08004158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000017e8  200001e4  0800433c  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200019cc  0800433c  000219cc  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c438  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000070f7  00000000  00000000  0004c645  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000af6e  00000000  00000000  0005373c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001238  00000000  00000000  0005e6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001a90  00000000  00000000  0005f8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000bed7  00000000  00000000  00061378  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000066c2  00000000  00000000  0006d24f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00073911  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003390  00000000  00000000  00073990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08003ce8 	.word	0x08003ce8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08003ce8 	.word	0x08003ce8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_uldivmod>:
 8000160:	b953      	cbnz	r3, 8000178 <__aeabi_uldivmod+0x18>
 8000162:	b94a      	cbnz	r2, 8000178 <__aeabi_uldivmod+0x18>
 8000164:	2900      	cmp	r1, #0
 8000166:	bf08      	it	eq
 8000168:	2800      	cmpeq	r0, #0
 800016a:	bf1c      	itt	ne
 800016c:	f04f 31ff 	movne.w	r1, #4294967295
 8000170:	f04f 30ff 	movne.w	r0, #4294967295
 8000174:	f000 b97a 	b.w	800046c <__aeabi_idiv0>
 8000178:	f1ad 0c08 	sub.w	ip, sp, #8
 800017c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000180:	f000 f806 	bl	8000190 <__udivmoddi4>
 8000184:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018c:	b004      	add	sp, #16
 800018e:	4770      	bx	lr

08000190 <__udivmoddi4>:
 8000190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000194:	468c      	mov	ip, r1
 8000196:	460e      	mov	r6, r1
 8000198:	4604      	mov	r4, r0
 800019a:	9d08      	ldr	r5, [sp, #32]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d150      	bne.n	8000242 <__udivmoddi4+0xb2>
 80001a0:	428a      	cmp	r2, r1
 80001a2:	4617      	mov	r7, r2
 80001a4:	d96c      	bls.n	8000280 <__udivmoddi4+0xf0>
 80001a6:	fab2 fe82 	clz	lr, r2
 80001aa:	f1be 0f00 	cmp.w	lr, #0
 80001ae:	d00b      	beq.n	80001c8 <__udivmoddi4+0x38>
 80001b0:	f1ce 0c20 	rsb	ip, lr, #32
 80001b4:	fa01 f60e 	lsl.w	r6, r1, lr
 80001b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80001bc:	fa02 f70e 	lsl.w	r7, r2, lr
 80001c0:	ea4c 0c06 	orr.w	ip, ip, r6
 80001c4:	fa00 f40e 	lsl.w	r4, r0, lr
 80001c8:	0c3a      	lsrs	r2, r7, #16
 80001ca:	fbbc f9f2 	udiv	r9, ip, r2
 80001ce:	b2bb      	uxth	r3, r7
 80001d0:	fb02 cc19 	mls	ip, r2, r9, ip
 80001d4:	fb09 fa03 	mul.w	sl, r9, r3
 80001d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80001dc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80001e0:	45b2      	cmp	sl, r6
 80001e2:	d90a      	bls.n	80001fa <__udivmoddi4+0x6a>
 80001e4:	19f6      	adds	r6, r6, r7
 80001e6:	f109 31ff 	add.w	r1, r9, #4294967295
 80001ea:	f080 8125 	bcs.w	8000438 <__udivmoddi4+0x2a8>
 80001ee:	45b2      	cmp	sl, r6
 80001f0:	f240 8122 	bls.w	8000438 <__udivmoddi4+0x2a8>
 80001f4:	f1a9 0902 	sub.w	r9, r9, #2
 80001f8:	443e      	add	r6, r7
 80001fa:	eba6 060a 	sub.w	r6, r6, sl
 80001fe:	fbb6 f0f2 	udiv	r0, r6, r2
 8000202:	fb02 6610 	mls	r6, r2, r0, r6
 8000206:	fb00 f303 	mul.w	r3, r0, r3
 800020a:	b2a4      	uxth	r4, r4
 800020c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000210:	42a3      	cmp	r3, r4
 8000212:	d909      	bls.n	8000228 <__udivmoddi4+0x98>
 8000214:	19e4      	adds	r4, r4, r7
 8000216:	f100 32ff 	add.w	r2, r0, #4294967295
 800021a:	f080 810b 	bcs.w	8000434 <__udivmoddi4+0x2a4>
 800021e:	42a3      	cmp	r3, r4
 8000220:	f240 8108 	bls.w	8000434 <__udivmoddi4+0x2a4>
 8000224:	3802      	subs	r0, #2
 8000226:	443c      	add	r4, r7
 8000228:	2100      	movs	r1, #0
 800022a:	1ae4      	subs	r4, r4, r3
 800022c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000230:	2d00      	cmp	r5, #0
 8000232:	d062      	beq.n	80002fa <__udivmoddi4+0x16a>
 8000234:	2300      	movs	r3, #0
 8000236:	fa24 f40e 	lsr.w	r4, r4, lr
 800023a:	602c      	str	r4, [r5, #0]
 800023c:	606b      	str	r3, [r5, #4]
 800023e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000242:	428b      	cmp	r3, r1
 8000244:	d907      	bls.n	8000256 <__udivmoddi4+0xc6>
 8000246:	2d00      	cmp	r5, #0
 8000248:	d055      	beq.n	80002f6 <__udivmoddi4+0x166>
 800024a:	2100      	movs	r1, #0
 800024c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000250:	4608      	mov	r0, r1
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	fab3 f183 	clz	r1, r3
 800025a:	2900      	cmp	r1, #0
 800025c:	f040 808f 	bne.w	800037e <__udivmoddi4+0x1ee>
 8000260:	42b3      	cmp	r3, r6
 8000262:	d302      	bcc.n	800026a <__udivmoddi4+0xda>
 8000264:	4282      	cmp	r2, r0
 8000266:	f200 80fc 	bhi.w	8000462 <__udivmoddi4+0x2d2>
 800026a:	1a84      	subs	r4, r0, r2
 800026c:	eb66 0603 	sbc.w	r6, r6, r3
 8000270:	2001      	movs	r0, #1
 8000272:	46b4      	mov	ip, r6
 8000274:	2d00      	cmp	r5, #0
 8000276:	d040      	beq.n	80002fa <__udivmoddi4+0x16a>
 8000278:	e885 1010 	stmia.w	r5, {r4, ip}
 800027c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000280:	b912      	cbnz	r2, 8000288 <__udivmoddi4+0xf8>
 8000282:	2701      	movs	r7, #1
 8000284:	fbb7 f7f2 	udiv	r7, r7, r2
 8000288:	fab7 fe87 	clz	lr, r7
 800028c:	f1be 0f00 	cmp.w	lr, #0
 8000290:	d135      	bne.n	80002fe <__udivmoddi4+0x16e>
 8000292:	2101      	movs	r1, #1
 8000294:	1bf6      	subs	r6, r6, r7
 8000296:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800029a:	fa1f f887 	uxth.w	r8, r7
 800029e:	fbb6 f2fc 	udiv	r2, r6, ip
 80002a2:	fb0c 6612 	mls	r6, ip, r2, r6
 80002a6:	fb08 f002 	mul.w	r0, r8, r2
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80002b0:	42b0      	cmp	r0, r6
 80002b2:	d907      	bls.n	80002c4 <__udivmoddi4+0x134>
 80002b4:	19f6      	adds	r6, r6, r7
 80002b6:	f102 33ff 	add.w	r3, r2, #4294967295
 80002ba:	d202      	bcs.n	80002c2 <__udivmoddi4+0x132>
 80002bc:	42b0      	cmp	r0, r6
 80002be:	f200 80d2 	bhi.w	8000466 <__udivmoddi4+0x2d6>
 80002c2:	461a      	mov	r2, r3
 80002c4:	1a36      	subs	r6, r6, r0
 80002c6:	fbb6 f0fc 	udiv	r0, r6, ip
 80002ca:	fb0c 6610 	mls	r6, ip, r0, r6
 80002ce:	fb08 f800 	mul.w	r8, r8, r0
 80002d2:	b2a3      	uxth	r3, r4
 80002d4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80002d8:	45a0      	cmp	r8, r4
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0x15c>
 80002dc:	19e4      	adds	r4, r4, r7
 80002de:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x15a>
 80002e4:	45a0      	cmp	r8, r4
 80002e6:	f200 80b9 	bhi.w	800045c <__udivmoddi4+0x2cc>
 80002ea:	4618      	mov	r0, r3
 80002ec:	eba4 0408 	sub.w	r4, r4, r8
 80002f0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80002f4:	e79c      	b.n	8000230 <__udivmoddi4+0xa0>
 80002f6:	4629      	mov	r1, r5
 80002f8:	4628      	mov	r0, r5
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fa07 f70e 	lsl.w	r7, r7, lr
 8000302:	f1ce 0320 	rsb	r3, lr, #32
 8000306:	fa26 f203 	lsr.w	r2, r6, r3
 800030a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800030e:	fbb2 f1fc 	udiv	r1, r2, ip
 8000312:	fa1f f887 	uxth.w	r8, r7
 8000316:	fb0c 2211 	mls	r2, ip, r1, r2
 800031a:	fa06 f60e 	lsl.w	r6, r6, lr
 800031e:	fa20 f303 	lsr.w	r3, r0, r3
 8000322:	fb01 f908 	mul.w	r9, r1, r8
 8000326:	4333      	orrs	r3, r6
 8000328:	0c1e      	lsrs	r6, r3, #16
 800032a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800032e:	45b1      	cmp	r9, r6
 8000330:	fa00 f40e 	lsl.w	r4, r0, lr
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x1ba>
 8000336:	19f6      	adds	r6, r6, r7
 8000338:	f101 32ff 	add.w	r2, r1, #4294967295
 800033c:	f080 808c 	bcs.w	8000458 <__udivmoddi4+0x2c8>
 8000340:	45b1      	cmp	r9, r6
 8000342:	f240 8089 	bls.w	8000458 <__udivmoddi4+0x2c8>
 8000346:	3902      	subs	r1, #2
 8000348:	443e      	add	r6, r7
 800034a:	eba6 0609 	sub.w	r6, r6, r9
 800034e:	fbb6 f0fc 	udiv	r0, r6, ip
 8000352:	fb0c 6210 	mls	r2, ip, r0, r6
 8000356:	fb00 f908 	mul.w	r9, r0, r8
 800035a:	b29e      	uxth	r6, r3
 800035c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000360:	45b1      	cmp	r9, r6
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x1e4>
 8000364:	19f6      	adds	r6, r6, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d271      	bcs.n	8000450 <__udivmoddi4+0x2c0>
 800036c:	45b1      	cmp	r9, r6
 800036e:	d96f      	bls.n	8000450 <__udivmoddi4+0x2c0>
 8000370:	3802      	subs	r0, #2
 8000372:	443e      	add	r6, r7
 8000374:	eba6 0609 	sub.w	r6, r6, r9
 8000378:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037c:	e78f      	b.n	800029e <__udivmoddi4+0x10e>
 800037e:	f1c1 0720 	rsb	r7, r1, #32
 8000382:	fa22 f807 	lsr.w	r8, r2, r7
 8000386:	408b      	lsls	r3, r1
 8000388:	ea48 0303 	orr.w	r3, r8, r3
 800038c:	fa26 f407 	lsr.w	r4, r6, r7
 8000390:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000394:	fbb4 f9fe 	udiv	r9, r4, lr
 8000398:	fa1f fc83 	uxth.w	ip, r3
 800039c:	fb0e 4419 	mls	r4, lr, r9, r4
 80003a0:	408e      	lsls	r6, r1
 80003a2:	fa20 f807 	lsr.w	r8, r0, r7
 80003a6:	fb09 fa0c 	mul.w	sl, r9, ip
 80003aa:	ea48 0806 	orr.w	r8, r8, r6
 80003ae:	ea4f 4618 	mov.w	r6, r8, lsr #16
 80003b2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 80003b6:	45a2      	cmp	sl, r4
 80003b8:	fa02 f201 	lsl.w	r2, r2, r1
 80003bc:	fa00 f601 	lsl.w	r6, r0, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x244>
 80003c2:	18e4      	adds	r4, r4, r3
 80003c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c8:	d244      	bcs.n	8000454 <__udivmoddi4+0x2c4>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d942      	bls.n	8000454 <__udivmoddi4+0x2c4>
 80003ce:	f1a9 0902 	sub.w	r9, r9, #2
 80003d2:	441c      	add	r4, r3
 80003d4:	eba4 040a 	sub.w	r4, r4, sl
 80003d8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003dc:	fb0e 4410 	mls	r4, lr, r0, r4
 80003e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003e4:	fa1f f888 	uxth.w	r8, r8
 80003e8:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x270>
 80003f0:	18e4      	adds	r4, r4, r3
 80003f2:	f100 3eff 	add.w	lr, r0, #4294967295
 80003f6:	d229      	bcs.n	800044c <__udivmoddi4+0x2bc>
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d927      	bls.n	800044c <__udivmoddi4+0x2bc>
 80003fc:	3802      	subs	r0, #2
 80003fe:	441c      	add	r4, r3
 8000400:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000404:	fba0 8902 	umull	r8, r9, r0, r2
 8000408:	eba4 0c0c 	sub.w	ip, r4, ip
 800040c:	45cc      	cmp	ip, r9
 800040e:	46c2      	mov	sl, r8
 8000410:	46ce      	mov	lr, r9
 8000412:	d315      	bcc.n	8000440 <__udivmoddi4+0x2b0>
 8000414:	d012      	beq.n	800043c <__udivmoddi4+0x2ac>
 8000416:	b155      	cbz	r5, 800042e <__udivmoddi4+0x29e>
 8000418:	ebb6 030a 	subs.w	r3, r6, sl
 800041c:	eb6c 060e 	sbc.w	r6, ip, lr
 8000420:	fa06 f707 	lsl.w	r7, r6, r7
 8000424:	40cb      	lsrs	r3, r1
 8000426:	431f      	orrs	r7, r3
 8000428:	40ce      	lsrs	r6, r1
 800042a:	602f      	str	r7, [r5, #0]
 800042c:	606e      	str	r6, [r5, #4]
 800042e:	2100      	movs	r1, #0
 8000430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000434:	4610      	mov	r0, r2
 8000436:	e6f7      	b.n	8000228 <__udivmoddi4+0x98>
 8000438:	4689      	mov	r9, r1
 800043a:	e6de      	b.n	80001fa <__udivmoddi4+0x6a>
 800043c:	4546      	cmp	r6, r8
 800043e:	d2ea      	bcs.n	8000416 <__udivmoddi4+0x286>
 8000440:	ebb8 0a02 	subs.w	sl, r8, r2
 8000444:	eb69 0e03 	sbc.w	lr, r9, r3
 8000448:	3801      	subs	r0, #1
 800044a:	e7e4      	b.n	8000416 <__udivmoddi4+0x286>
 800044c:	4670      	mov	r0, lr
 800044e:	e7d7      	b.n	8000400 <__udivmoddi4+0x270>
 8000450:	4618      	mov	r0, r3
 8000452:	e78f      	b.n	8000374 <__udivmoddi4+0x1e4>
 8000454:	4681      	mov	r9, r0
 8000456:	e7bd      	b.n	80003d4 <__udivmoddi4+0x244>
 8000458:	4611      	mov	r1, r2
 800045a:	e776      	b.n	800034a <__udivmoddi4+0x1ba>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	e744      	b.n	80002ec <__udivmoddi4+0x15c>
 8000462:	4608      	mov	r0, r1
 8000464:	e706      	b.n	8000274 <__udivmoddi4+0xe4>
 8000466:	3a02      	subs	r2, #2
 8000468:	443e      	add	r6, r7
 800046a:	e72b      	b.n	80002c4 <__udivmoddi4+0x134>

0800046c <__aeabi_idiv0>:
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <requestFlush>:
	USART1_Reset();
}

static void requestFlush()
{
	memset(request, '0', 512);
 8000470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000474:	2130      	movs	r1, #48	; 0x30
 8000476:	4801      	ldr	r0, [pc, #4]	; (800047c <requestFlush+0xc>)
 8000478:	f002 bf39 	b.w	80032ee <memset>
 800047c:	2000136c 	.word	0x2000136c

08000480 <ESPInit>:
	 MX_USART1_UART_Init();
 8000480:	f002 bd2c 	b.w	8002edc <MX_USART1_UART_Init>

08000484 <ESP_Resset>:
	USART1_Reset();
 8000484:	f002 bd1e 	b.w	8002ec4 <USART1_Reset>

08000488 <requestRefresh>:

	return 1;
}

uint8_t requestRefresh()
{
 8000488:	b538      	push	{r3, r4, r5, lr}
	memset(answer, '0', 512);
 800048a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800048e:	2130      	movs	r1, #48	; 0x30
 8000490:	480e      	ldr	r0, [pc, #56]	; (80004cc <requestRefresh+0x44>)
 8000492:	f002 ff2c 	bl	80032ee <memset>
 8000496:	2400      	movs	r4, #0
	answerFlush();
	int i = 0;
	while(!(RingBuff_IsEmpty() == 0) && i < 512)
	{
		answer[i++] = RingBuff_Pop();
 8000498:	4d0c      	ldr	r5, [pc, #48]	; (80004cc <requestRefresh+0x44>)
	while(!(RingBuff_IsEmpty() == 0) && i < 512)
 800049a:	f000 fab7 	bl	8000a0c <RingBuff_IsEmpty>
 800049e:	b110      	cbz	r0, 80004a6 <requestRefresh+0x1e>
 80004a0:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80004a4:	d10b      	bne.n	80004be <requestRefresh+0x36>
	}

	char * search;
	search = strstr(answer, "+IPD,");
 80004a6:	490a      	ldr	r1, [pc, #40]	; (80004d0 <requestRefresh+0x48>)
 80004a8:	4808      	ldr	r0, [pc, #32]	; (80004cc <requestRefresh+0x44>)
 80004aa:	f002 ff4d 	bl	8003348 <strstr>
	if(search != NULL)
 80004ae:	b158      	cbz	r0, 80004c8 <requestRefresh+0x40>
	{
		search+=5;
		uint8_t ID = strtol(search, NULL, 10);
 80004b0:	220a      	movs	r2, #10
 80004b2:	2100      	movs	r1, #0
 80004b4:	3005      	adds	r0, #5
 80004b6:	f002 ffe3 	bl	8003480 <strtol>
 80004ba:	b2c0      	uxtb	r0, r0
		//search += 2;
		//answerLength = strtol(search, NULL, 10);

		return ID;
 80004bc:	bd38      	pop	{r3, r4, r5, pc}
		answer[i++] = RingBuff_Pop();
 80004be:	f000 fa97 	bl	80009f0 <RingBuff_Pop>
 80004c2:	5528      	strb	r0, [r5, r4]
 80004c4:	3401      	adds	r4, #1
 80004c6:	e7e8      	b.n	800049a <requestRefresh+0x12>
	}
	return 100;
 80004c8:	2064      	movs	r0, #100	; 0x64
}
 80004ca:	bd38      	pop	{r3, r4, r5, pc}
 80004cc:	2000156c 	.word	0x2000156c
 80004d0:	08003d7c 	.word	0x08003d7c

080004d4 <requestConstFind>:
	return 0;
}

uint8_t requestConstFind(const char * key)
{
	if(strstr(answer, key) != NULL)
 80004d4:	4601      	mov	r1, r0
{
 80004d6:	b508      	push	{r3, lr}
	if(strstr(answer, key) != NULL)
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <requestConstFind+0x14>)
 80004da:	f002 ff35 	bl	8003348 <strstr>
	{
		return 1;
	}
	return 0;
}
 80004de:	3000      	adds	r0, #0
 80004e0:	bf18      	it	ne
 80004e2:	2001      	movne	r0, #1
 80004e4:	bd08      	pop	{r3, pc}
 80004e6:	bf00      	nop
 80004e8:	2000156c 	.word	0x2000156c

080004ec <ESP_GetRequest>:

char * ESP_GetRequest()
{
	return answer;
}
 80004ec:	4800      	ldr	r0, [pc, #0]	; (80004f0 <ESP_GetRequest+0x4>)
 80004ee:	4770      	bx	lr
 80004f0:	2000156c 	.word	0x2000156c

080004f4 <charCallBack>:

uint8_t charCallBack(char * key)
{
 80004f4:	b570      	push	{r4, r5, r6, lr}
	memset(answer, '0', 512);
 80004f6:	f44f 7200 	mov.w	r2, #512	; 0x200
{
 80004fa:	4605      	mov	r5, r0
	memset(answer, '0', 512);
 80004fc:	2130      	movs	r1, #48	; 0x30
 80004fe:	4811      	ldr	r0, [pc, #68]	; (8000544 <charCallBack+0x50>)
 8000500:	f002 fef5 	bl	80032ee <memset>
 8000504:	2400      	movs	r4, #0
 8000506:	4e0f      	ldr	r6, [pc, #60]	; (8000544 <charCallBack+0x50>)
	answerFlush();
	uint16_t i = 0;
	while(!(RingBuff_IsEmpty() == 0) && i < 512)
 8000508:	f000 fa80 	bl	8000a0c <RingBuff_IsEmpty>
 800050c:	b110      	cbz	r0, 8000514 <charCallBack+0x20>
 800050e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8000512:	d110      	bne.n	8000536 <charCallBack+0x42>
	{
		answer[i++] = RingBuff_Pop();
	}

	if(strlen(answer) >= strlen(key))
 8000514:	480b      	ldr	r0, [pc, #44]	; (8000544 <charCallBack+0x50>)
 8000516:	f7ff fe1b 	bl	8000150 <strlen>
 800051a:	4604      	mov	r4, r0
 800051c:	4628      	mov	r0, r5
 800051e:	f7ff fe17 	bl	8000150 <strlen>
 8000522:	4284      	cmp	r4, r0
 8000524:	d30c      	bcc.n	8000540 <charCallBack+0x4c>
	{
		if(strstr(answer, key) != NULL)
 8000526:	4629      	mov	r1, r5
 8000528:	4806      	ldr	r0, [pc, #24]	; (8000544 <charCallBack+0x50>)
 800052a:	f002 ff0d 	bl	8003348 <strstr>
 800052e:	3000      	adds	r0, #0
 8000530:	bf18      	it	ne
 8000532:	2001      	movne	r0, #1
 8000534:	bd70      	pop	{r4, r5, r6, pc}
		answer[i++] = RingBuff_Pop();
 8000536:	f000 fa5b 	bl	80009f0 <RingBuff_Pop>
 800053a:	5530      	strb	r0, [r6, r4]
 800053c:	3401      	adds	r4, #1
 800053e:	e7e3      	b.n	8000508 <charCallBack+0x14>
 8000540:	2000      	movs	r0, #0
			return 1;
		}
	}

	return 0;
}
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	2000156c 	.word	0x2000156c

08000548 <waitCallBack.constprop.2>:
static bool waitCallBack(uint8_t ms)
 8000548:	b570      	push	{r4, r5, r6, lr}
	uint32_t time = SysTick->VAL;
 800054a:	4c08      	ldr	r4, [pc, #32]	; (800056c <waitCallBack.constprop.2+0x24>)
		if(charCallBack("OK"))
 800054c:	4e08      	ldr	r6, [pc, #32]	; (8000570 <waitCallBack.constprop.2+0x28>)
	uint32_t time = SysTick->VAL;
 800054e:	68a5      	ldr	r5, [r4, #8]
	while(time + ms > SysTick->VAL)
 8000550:	3514      	adds	r5, #20
 8000552:	68a3      	ldr	r3, [r4, #8]
 8000554:	429d      	cmp	r5, r3
 8000556:	d801      	bhi.n	800055c <waitCallBack.constprop.2+0x14>
	return 0;
 8000558:	2000      	movs	r0, #0
 800055a:	bd70      	pop	{r4, r5, r6, pc}
		if(charCallBack("OK"))
 800055c:	4630      	mov	r0, r6
 800055e:	f7ff ffc9 	bl	80004f4 <charCallBack>
 8000562:	2800      	cmp	r0, #0
 8000564:	d0f5      	beq.n	8000552 <waitCallBack.constprop.2+0xa>
			return 1;
 8000566:	2001      	movs	r0, #1
}
 8000568:	bd70      	pop	{r4, r5, r6, pc}
 800056a:	bf00      	nop
 800056c:	e000e010 	.word	0xe000e010
 8000570:	08003d9b 	.word	0x08003d9b

08000574 <ESP_StartTCPServer>:
{
 8000574:	b538      	push	{r3, r4, r5, lr}
 8000576:	4605      	mov	r5, r0
	USART_SendData("AT+CIPMUX=1\r\n", 13);
 8000578:	210d      	movs	r1, #13
	sprintf(request, "AT+CIPSERVER=1,%d\r\n", port);
 800057a:	4c0e      	ldr	r4, [pc, #56]	; (80005b4 <ESP_StartTCPServer+0x40>)
	USART_SendData("AT+CIPMUX=1\r\n", 13);
 800057c:	480e      	ldr	r0, [pc, #56]	; (80005b8 <ESP_StartTCPServer+0x44>)
 800057e:	f002 fc61 	bl	8002e44 <USART_SendData>
	LL_mDelay(100);
 8000582:	2064      	movs	r0, #100	; 0x64
 8000584:	f000 fed4 	bl	8001330 <LL_mDelay>
	requestFlush();
 8000588:	f7ff ff72 	bl	8000470 <requestFlush>
	sprintf(request, "AT+CIPSERVER=1,%d\r\n", port);
 800058c:	462a      	mov	r2, r5
 800058e:	490b      	ldr	r1, [pc, #44]	; (80005bc <ESP_StartTCPServer+0x48>)
 8000590:	4620      	mov	r0, r4
 8000592:	f002 feb5 	bl	8003300 <siprintf>
	charCallBack("");
 8000596:	480a      	ldr	r0, [pc, #40]	; (80005c0 <ESP_StartTCPServer+0x4c>)
 8000598:	f7ff ffac 	bl	80004f4 <charCallBack>
	USART_SendData(request, strlen(request));
 800059c:	4620      	mov	r0, r4
 800059e:	f7ff fdd7 	bl	8000150 <strlen>
 80005a2:	4601      	mov	r1, r0
 80005a4:	4620      	mov	r0, r4
 80005a6:	f002 fc4d 	bl	8002e44 <USART_SendData>
}
 80005aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if(waitCallBack(20))
 80005ae:	f7ff bfcb 	b.w	8000548 <waitCallBack.constprop.2>
 80005b2:	bf00      	nop
 80005b4:	2000136c 	.word	0x2000136c
 80005b8:	08003d5a 	.word	0x08003d5a
 80005bc:	08003d68 	.word	0x08003d68
 80005c0:	08003d67 	.word	0x08003d67

080005c4 <ESP_SetParamsSoftAP>:
{
 80005c4:	b538      	push	{r3, r4, r5, lr}
 80005c6:	4604      	mov	r4, r0
 80005c8:	460d      	mov	r5, r1
	requestFlush();
 80005ca:	f7ff ff51 	bl	8000470 <requestFlush>
	sprintf(request, "AT+CWSAP=\"%s\",\"%s\",5,3\r\n", ssid, password);
 80005ce:	462b      	mov	r3, r5
 80005d0:	4622      	mov	r2, r4
 80005d2:	490d      	ldr	r1, [pc, #52]	; (8000608 <ESP_SetParamsSoftAP+0x44>)
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <ESP_SetParamsSoftAP+0x48>)
 80005d6:	f002 fe93 	bl	8003300 <siprintf>
	charCallBack("");
 80005da:	480d      	ldr	r0, [pc, #52]	; (8000610 <ESP_SetParamsSoftAP+0x4c>)
 80005dc:	f7ff ff8a 	bl	80004f4 <charCallBack>
	USART_SendData(request, strlen(request));
 80005e0:	480a      	ldr	r0, [pc, #40]	; (800060c <ESP_SetParamsSoftAP+0x48>)
 80005e2:	f7ff fdb5 	bl	8000150 <strlen>
 80005e6:	4601      	mov	r1, r0
 80005e8:	4808      	ldr	r0, [pc, #32]	; (800060c <ESP_SetParamsSoftAP+0x48>)
 80005ea:	f002 fc2b 	bl	8002e44 <USART_SendData>
	if(waitCallBack(20))
 80005ee:	f7ff ffab 	bl	8000548 <waitCallBack.constprop.2>
 80005f2:	b140      	cbz	r0, 8000606 <ESP_SetParamsSoftAP+0x42>
		USART_SendData("AT+RST\r\n", 8);
 80005f4:	2108      	movs	r1, #8
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <ESP_SetParamsSoftAP+0x50>)
 80005f8:	f002 fc24 	bl	8002e44 <USART_SendData>
		LL_mDelay(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000600:	f000 fe96 	bl	8001330 <LL_mDelay>
		return 1;
 8000604:	2001      	movs	r0, #1
}
 8000606:	bd38      	pop	{r3, r4, r5, pc}
 8000608:	08003d38 	.word	0x08003d38
 800060c:	2000136c 	.word	0x2000136c
 8000610:	08003d67 	.word	0x08003d67
 8000614:	08003d51 	.word	0x08003d51

08000618 <ESP_SetMode>:
{
 8000618:	b510      	push	{r4, lr}
 800061a:	4604      	mov	r4, r0
	requestFlush();
 800061c:	f7ff ff28 	bl	8000470 <requestFlush>
	sprintf(request, "AT+CWMODE=%d\r\n", mode);
 8000620:	4622      	mov	r2, r4
 8000622:	490c      	ldr	r1, [pc, #48]	; (8000654 <ESP_SetMode+0x3c>)
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <ESP_SetMode+0x40>)
 8000626:	f002 fe6b 	bl	8003300 <siprintf>
	USART_SendData(request, strlen(request));
 800062a:	480b      	ldr	r0, [pc, #44]	; (8000658 <ESP_SetMode+0x40>)
 800062c:	f7ff fd90 	bl	8000150 <strlen>
 8000630:	4601      	mov	r1, r0
 8000632:	4809      	ldr	r0, [pc, #36]	; (8000658 <ESP_SetMode+0x40>)
 8000634:	f002 fc06 	bl	8002e44 <USART_SendData>
	if(waitCallBack(20))
 8000638:	f7ff ff86 	bl	8000548 <waitCallBack.constprop.2>
 800063c:	b140      	cbz	r0, 8000650 <ESP_SetMode+0x38>
		USART_SendData("AT+RST\r\n", 8);
 800063e:	2108      	movs	r1, #8
 8000640:	4806      	ldr	r0, [pc, #24]	; (800065c <ESP_SetMode+0x44>)
 8000642:	f002 fbff 	bl	8002e44 <USART_SendData>
		LL_mDelay(1000);
 8000646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064a:	f000 fe71 	bl	8001330 <LL_mDelay>
 800064e:	2001      	movs	r0, #1
}
 8000650:	bd10      	pop	{r4, pc}
 8000652:	bf00      	nop
 8000654:	08003d29 	.word	0x08003d29
 8000658:	2000136c 	.word	0x2000136c
 800065c:	08003d51 	.word	0x08003d51

08000660 <ESP_SetModeSoftAP>:
	return ESP_SetMode(2);
 8000660:	2002      	movs	r0, #2
 8000662:	f7ff bfd9 	b.w	8000618 <ESP_SetMode>
	...

08000668 <ESP_SendData>:

uint8_t ESP_SendData(char *data, uint16_t dataLength, uint8_t flagRN)
{
 8000668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066a:	4607      	mov	r7, r0
 800066c:	460c      	mov	r4, r1
	if(flagRN)
 800066e:	4615      	mov	r5, r2
 8000670:	b10a      	cbz	r2, 8000676 <ESP_SendData+0xe>
	{
		dataLength += 2;
 8000672:	3402      	adds	r4, #2
 8000674:	b2a4      	uxth	r4, r4
	}
	requestFlush();
 8000676:	f7ff fefb 	bl	8000470 <requestFlush>
	sprintf(request, "AT+CIPSEND=%d,%d\r\n", linkID, dataLength);
 800067a:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <ESP_SendData+0x68>)
 800067c:	4623      	mov	r3, r4
 800067e:	7812      	ldrb	r2, [r2, #0]
 8000680:	4914      	ldr	r1, [pc, #80]	; (80006d4 <ESP_SendData+0x6c>)
 8000682:	4815      	ldr	r0, [pc, #84]	; (80006d8 <ESP_SendData+0x70>)
 8000684:	f002 fe3c 	bl	8003300 <siprintf>
	USART_SendData(request, strlen(request));
 8000688:	4813      	ldr	r0, [pc, #76]	; (80006d8 <ESP_SendData+0x70>)
 800068a:	f7ff fd61 	bl	8000150 <strlen>
 800068e:	4601      	mov	r1, r0
 8000690:	4811      	ldr	r0, [pc, #68]	; (80006d8 <ESP_SendData+0x70>)
 8000692:	f002 fbd7 	bl	8002e44 <USART_SendData>
	LL_mDelay(200);
 8000696:	20c8      	movs	r0, #200	; 0xc8
 8000698:	f000 fe4a 	bl	8001330 <LL_mDelay>

	if(flagRN)
 800069c:	b10d      	cbz	r5, 80006a2 <ESP_SendData+0x3a>
	{
		dataLength -= 2;
 800069e:	3c02      	subs	r4, #2
 80006a0:	b2a4      	uxth	r4, r4
	}

	if(charCallBack(">"))
 80006a2:	480e      	ldr	r0, [pc, #56]	; (80006dc <ESP_SendData+0x74>)
 80006a4:	f7ff ff26 	bl	80004f4 <charCallBack>
 80006a8:	b160      	cbz	r0, 80006c4 <ESP_SendData+0x5c>
 80006aa:	463e      	mov	r6, r7
	{
		for(int i = 0; i < dataLength; i++)
 80006ac:	1bf3      	subs	r3, r6, r7
 80006ae:	429c      	cmp	r4, r3
 80006b0:	dc09      	bgt.n	80006c6 <ESP_SendData+0x5e>
		{
			USART_SendData_byte(data[i]);
		}
		if(flagRN)
 80006b2:	b11d      	cbz	r5, 80006bc <ESP_SendData+0x54>
		{
			USART_SendData("\r\n", 2);
 80006b4:	2102      	movs	r1, #2
 80006b6:	480a      	ldr	r0, [pc, #40]	; (80006e0 <ESP_SendData+0x78>)
 80006b8:	f002 fbc4 	bl	8002e44 <USART_SendData>
		}
	}
	else return 0;

	LL_mDelay(100);
 80006bc:	2064      	movs	r0, #100	; 0x64
 80006be:	f000 fe37 	bl	8001330 <LL_mDelay>

	return 1;
 80006c2:	2001      	movs	r0, #1
}
 80006c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			USART_SendData_byte(data[i]);
 80006c6:	f816 0b01 	ldrb.w	r0, [r6], #1
 80006ca:	f002 fbb3 	bl	8002e34 <USART_SendData_byte>
 80006ce:	e7ed      	b.n	80006ac <ESP_SendData+0x44>
 80006d0:	2000176c 	.word	0x2000176c
 80006d4:	08003d14 	.word	0x08003d14
 80006d8:	2000136c 	.word	0x2000136c
 80006dc:	08003d27 	.word	0x08003d27
 80006e0:	08003d65 	.word	0x08003d65

080006e4 <ESP_SendConstData>:

uint8_t ESP_SendConstData(const char *data, uint16_t dataLength, uint8_t flagRN)
{
 80006e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e6:	4607      	mov	r7, r0
 80006e8:	460c      	mov	r4, r1
	if(flagRN)
 80006ea:	4615      	mov	r5, r2
 80006ec:	b10a      	cbz	r2, 80006f2 <ESP_SendConstData+0xe>
	{
		dataLength += 2;
 80006ee:	3402      	adds	r4, #2
 80006f0:	b2a4      	uxth	r4, r4
	}
	requestFlush();
 80006f2:	f7ff febd 	bl	8000470 <requestFlush>
	sprintf(request, "AT+CIPSEND=%d,%d\r\n", linkID, dataLength);
 80006f6:	4a15      	ldr	r2, [pc, #84]	; (800074c <ESP_SendConstData+0x68>)
 80006f8:	4623      	mov	r3, r4
 80006fa:	7812      	ldrb	r2, [r2, #0]
 80006fc:	4914      	ldr	r1, [pc, #80]	; (8000750 <ESP_SendConstData+0x6c>)
 80006fe:	4815      	ldr	r0, [pc, #84]	; (8000754 <ESP_SendConstData+0x70>)
 8000700:	f002 fdfe 	bl	8003300 <siprintf>
	USART_SendData(request, strlen(request));
 8000704:	4813      	ldr	r0, [pc, #76]	; (8000754 <ESP_SendConstData+0x70>)
 8000706:	f7ff fd23 	bl	8000150 <strlen>
 800070a:	4601      	mov	r1, r0
 800070c:	4811      	ldr	r0, [pc, #68]	; (8000754 <ESP_SendConstData+0x70>)
 800070e:	f002 fb99 	bl	8002e44 <USART_SendData>
	LL_mDelay(200);
 8000712:	20c8      	movs	r0, #200	; 0xc8
 8000714:	f000 fe0c 	bl	8001330 <LL_mDelay>

	if(flagRN)
 8000718:	b10d      	cbz	r5, 800071e <ESP_SendConstData+0x3a>
	{
		dataLength -= 2;
 800071a:	3c02      	subs	r4, #2
 800071c:	b2a4      	uxth	r4, r4
	}

	if(charCallBack(">"))
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <ESP_SendConstData+0x74>)
 8000720:	f7ff fee8 	bl	80004f4 <charCallBack>
 8000724:	b160      	cbz	r0, 8000740 <ESP_SendConstData+0x5c>
 8000726:	463e      	mov	r6, r7
	{
		for(int i = 0; i < dataLength; i++)
 8000728:	1bf3      	subs	r3, r6, r7
 800072a:	429c      	cmp	r4, r3
 800072c:	dc09      	bgt.n	8000742 <ESP_SendConstData+0x5e>
		{
			USART_SendData_byte(data[i]);
		}
		if(flagRN)
 800072e:	b11d      	cbz	r5, 8000738 <ESP_SendConstData+0x54>
		{
			USART_SendData("\r\n", 2);
 8000730:	2102      	movs	r1, #2
 8000732:	480a      	ldr	r0, [pc, #40]	; (800075c <ESP_SendConstData+0x78>)
 8000734:	f002 fb86 	bl	8002e44 <USART_SendData>
		}
	}
	else return 0;
	LL_mDelay(100);
 8000738:	2064      	movs	r0, #100	; 0x64
 800073a:	f000 fdf9 	bl	8001330 <LL_mDelay>
 800073e:	2001      	movs	r0, #1

	return 1;
}
 8000740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			USART_SendData_byte(data[i]);
 8000742:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000746:	f002 fb75 	bl	8002e34 <USART_SendData_byte>
 800074a:	e7ed      	b.n	8000728 <ESP_SendConstData+0x44>
 800074c:	2000176c 	.word	0x2000176c
 8000750:	08003d14 	.word	0x08003d14
 8000754:	2000136c 	.word	0x2000136c
 8000758:	08003d27 	.word	0x08003d27
 800075c:	08003d65 	.word	0x08003d65

08000760 <ESP_Request>:

void ESP_Request(const char ** pages, const foo * functions, uint8_t number)
{
 8000760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000764:	4606      	mov	r6, r0
 8000766:	460f      	mov	r7, r1
 8000768:	4615      	mov	r5, r2
	linkID = requestRefresh();
 800076a:	f7ff fe8d 	bl	8000488 <requestRefresh>
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <ESP_Request+0x4c>)
	if(linkID >= 0 && linkID < 5)
 8000770:	2804      	cmp	r0, #4
	linkID = requestRefresh();
 8000772:	7018      	strb	r0, [r3, #0]
	if(linkID >= 0 && linkID < 5)
 8000774:	d817      	bhi.n	80007a6 <ESP_Request+0x46>
 8000776:	2400      	movs	r4, #0
	{
		for(int i = 0; i < number; i++)
 8000778:	42ac      	cmp	r4, r5
 800077a:	db06      	blt.n	800078a <ESP_Request+0x2a>
			{
				functions[i]();
				return;
			}
		}
		ESP_SendConstData(statusNOTFOUND, strlen(statusNOTFOUND), 1);
 800077c:	2201      	movs	r2, #1
	}
}
 800077e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ESP_SendConstData(statusNOTFOUND, strlen(statusNOTFOUND), 1);
 8000782:	2118      	movs	r1, #24
 8000784:	480a      	ldr	r0, [pc, #40]	; (80007b0 <ESP_Request+0x50>)
 8000786:	f7ff bfad 	b.w	80006e4 <ESP_SendConstData>
			if(requestConstFind(pages[i]))
 800078a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800078e:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8000792:	f7ff fe9f 	bl	80004d4 <requestConstFind>
 8000796:	b120      	cbz	r0, 80007a2 <ESP_Request+0x42>
				functions[i]();
 8000798:	f857 3008 	ldr.w	r3, [r7, r8]
}
 800079c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				functions[i]();
 80007a0:	4718      	bx	r3
		for(int i = 0; i < number; i++)
 80007a2:	3401      	adds	r4, #1
 80007a4:	e7e8      	b.n	8000778 <ESP_Request+0x18>
 80007a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007aa:	bf00      	nop
 80007ac:	2000176c 	.word	0x2000176c
 80007b0:	08003d82 	.word	0x08003d82

080007b4 <EncoderInit>:
#include "stdbool.h"
#include "stdint.h"

void EncoderInit(void)
{
	GPIO_Init();
 80007b4:	f001 bf44 	b.w	8002640 <GPIO_Init>

080007b8 <Encoder_State>:
}

eState Encoder_State(void)
{
 80007b8:	b510      	push	{r4, lr}
	eState res = eNone;
    if(GetButton())
 80007ba:	f001 ffb5 	bl	8002728 <GetButton>
 80007be:	b190      	cbz	r0, 80007e6 <Encoder_State+0x2e>
    {
      res = eButton;
      ClearButton();
 80007c0:	f001 ffb8 	bl	8002734 <ClearButton>
      res = eButton;
 80007c4:	2403      	movs	r4, #3
    }
    if(GetRotateStatus())
 80007c6:	f001 ffbb 	bl	8002740 <GetRotateStatus>
 80007ca:	b140      	cbz	r0, 80007de <Encoder_State+0x26>
    {
		if(GetRotatePinA() == GetRotatePinB())
 80007cc:	f001 ffca 	bl	8002764 <GetRotatePinA>
 80007d0:	4604      	mov	r4, r0
 80007d2:	f001 ffc1 	bl	8002758 <GetRotatePinB>
		{
			res = eRight;
		}
		else
		{
			res = eLeft;
 80007d6:	4284      	cmp	r4, r0
 80007d8:	bf0c      	ite	eq
 80007da:	2402      	moveq	r4, #2
 80007dc:	2401      	movne	r4, #1
		}
	}
	ClearRotateStatus();
 80007de:	f001 ffb5 	bl	800274c <ClearRotateStatus>
    return res;
}
 80007e2:	4620      	mov	r0, r4
 80007e4:	bd10      	pop	{r4, pc}
	eState res = eNone;
 80007e6:	4604      	mov	r4, r0
 80007e8:	e7ed      	b.n	80007c6 <Encoder_State+0xe>

080007ea <LDRInit>:
#include "ldr_driver.h"
#define N 10

void LDRInit(void)
{
	MX_ADC1_Init();
 80007ea:	f002 b8db 	b.w	80029a4 <MX_ADC1_Init>

080007ee <LDR_Get>:
}

uint16_t LDR_Get(void)
{
 80007ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f0:	260a      	movs	r6, #10
	uint64_t adc = 0;
 80007f2:	2400      	movs	r4, #0
 80007f4:	2500      	movs	r5, #0
	uint16_t adc_value = 0;

	for(int i = 0; i < N; i++)
	{
		ADC1_Activate();
		adc += (((4095 - ADC1_Get()) * 65535) / 4095);
 80007f6:	f640 77ff 	movw	r7, #4095	; 0xfff
		ADC1_Activate();
 80007fa:	f002 f94b 	bl	8002a94 <ADC1_Activate>
		adc += (((4095 - ADC1_Get()) * 65535) / 4095);
 80007fe:	f002 f971 	bl	8002ae4 <ADC1_Get>
 8000802:	1a38      	subs	r0, r7, r0
 8000804:	ebc0 4000 	rsb	r0, r0, r0, lsl #16
 8000808:	fb90 f0f7 	sdiv	r0, r0, r7
 800080c:	1824      	adds	r4, r4, r0
 800080e:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	for(int i = 0; i < N; i++)
 8000812:	3e01      	subs	r6, #1
 8000814:	d1f1      	bne.n	80007fa <LDR_Get+0xc>

		adc_value = adc / N;
 8000816:	220a      	movs	r2, #10
 8000818:	2300      	movs	r3, #0
 800081a:	4620      	mov	r0, r4
 800081c:	4629      	mov	r1, r5
 800081e:	f7ff fc9f 	bl	8000160 <__aeabi_uldivmod>
	}

	return adc_value;
}
 8000822:	b280      	uxth	r0, r0
 8000824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000826 <LedInit>:

uint32_t led[3] = {0, 0, 0};

void LedInit(void)
{
	MX_TIM4_Init();
 8000826:	f002 b9b7 	b.w	8002b98 <MX_TIM4_Init>
	...

0800082c <Led_Set>:
}

void Led_Set(uint16_t red, uint16_t green, uint16_t blue)
{
	led[0] = red;
 800082c:	4b01      	ldr	r3, [pc, #4]	; (8000834 <Led_Set+0x8>)
	led[1] = green;
	led[2] = blue;
 800082e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000832:	4770      	bx	lr
 8000834:	20000200 	.word	0x20000200

08000838 <Led_Set_Color>:
}

void Led_Set_Color(color color, uint16_t value)
{
	switch(color)
 8000838:	2801      	cmp	r0, #1
 800083a:	d006      	beq.n	800084a <Led_Set_Color+0x12>
 800083c:	d302      	bcc.n	8000844 <Led_Set_Color+0xc>
 800083e:	2802      	cmp	r0, #2
 8000840:	d006      	beq.n	8000850 <Led_Set_Color+0x18>
 8000842:	4770      	bx	lr
	{
		case eRed: led[0] = value; break;
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <Led_Set_Color+0x20>)
 8000846:	6019      	str	r1, [r3, #0]
 8000848:	4770      	bx	lr
		case eGreen: led[1] = value; break;
 800084a:	4b03      	ldr	r3, [pc, #12]	; (8000858 <Led_Set_Color+0x20>)
 800084c:	6059      	str	r1, [r3, #4]
 800084e:	4770      	bx	lr
		case eBlue: led[2] = value; break;
 8000850:	4b01      	ldr	r3, [pc, #4]	; (8000858 <Led_Set_Color+0x20>)
 8000852:	6099      	str	r1, [r3, #8]
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000200 	.word	0x20000200

0800085c <Led_Get_Color>:

}

uint16_t Led_Get_Color(color color)
{
	switch(color)
 800085c:	2801      	cmp	r0, #1
 800085e:	d007      	beq.n	8000870 <Led_Get_Color+0x14>
 8000860:	d303      	bcc.n	800086a <Led_Get_Color+0xe>
 8000862:	2802      	cmp	r0, #2
 8000864:	d007      	beq.n	8000876 <Led_Get_Color+0x1a>
		case eRed: return led[0]; break;
		case eGreen: return led[1]; break;
		case eBlue: return led[2]; break;
		default: break;
	}
	return 0;
 8000866:	2000      	movs	r0, #0
}
 8000868:	4770      	bx	lr
		case eRed: return led[0]; break;
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <Led_Get_Color+0x20>)
 800086c:	8818      	ldrh	r0, [r3, #0]
 800086e:	4770      	bx	lr
		case eGreen: return led[1]; break;
 8000870:	4b02      	ldr	r3, [pc, #8]	; (800087c <Led_Get_Color+0x20>)
 8000872:	8898      	ldrh	r0, [r3, #4]
 8000874:	4770      	bx	lr
		case eBlue: return led[2]; break;
 8000876:	4b01      	ldr	r3, [pc, #4]	; (800087c <Led_Get_Color+0x20>)
 8000878:	8918      	ldrh	r0, [r3, #8]
 800087a:	4770      	bx	lr
 800087c:	20000200 	.word	0x20000200

08000880 <Led_Refresh>:
	uint16_t map_res = value * max_value / 65535;
	return map_res;
}

void Led_Refresh(uint16_t max_value)
{
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	4604      	mov	r4, r0
	uint16_t map_res = value * max_value / 65535;
 8000884:	f64f 75ff 	movw	r5, #65535	; 0xffff
	TIM4_SET_CH1(map(led[0], max_value));
 8000888:	4e0b      	ldr	r6, [pc, #44]	; (80008b8 <Led_Refresh+0x38>)
	uint16_t map_res = value * max_value / 65535;
 800088a:	8830      	ldrh	r0, [r6, #0]
 800088c:	4360      	muls	r0, r4
 800088e:	fb90 f0f5 	sdiv	r0, r0, r5
	TIM4_SET_CH1(map(led[0], max_value));
 8000892:	b280      	uxth	r0, r0
 8000894:	f002 fa0e 	bl	8002cb4 <TIM4_SET_CH1>
	uint16_t map_res = value * max_value / 65535;
 8000898:	88b0      	ldrh	r0, [r6, #4]
 800089a:	4360      	muls	r0, r4
 800089c:	fb90 f0f5 	sdiv	r0, r0, r5
	TIM4_SET_CH2(map(led[1], max_value));
 80008a0:	b280      	uxth	r0, r0
 80008a2:	f002 fa0d 	bl	8002cc0 <TIM4_SET_CH2>
	uint16_t map_res = value * max_value / 65535;
 80008a6:	8930      	ldrh	r0, [r6, #8]
 80008a8:	4360      	muls	r0, r4
 80008aa:	fb90 f0f5 	sdiv	r0, r0, r5
	TIM4_SET_CH3(map(led[2], max_value));
}
 80008ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	TIM4_SET_CH3(map(led[2], max_value));
 80008b2:	b280      	uxth	r0, r0
 80008b4:	f002 ba0a 	b.w	8002ccc <TIM4_SET_CH3>
 80008b8:	20000200 	.word	0x20000200

080008bc <PICKER>:

const char statusOK[] = {"HTTP/1.1 200 OK\r\nConnection: Keep-Alive\r\nContent-Type: text/html"};
const char statusOK_CL0[] = {"HTTP/1.1 200 OK\r\nConnection: Keep-Alive\r\nContent-Type: text/html\r\nContent-Length: 0"};

void PICKER()
{
 80008bc:	b530      	push	{r4, r5, lr}
	char hex[7], ContentLength[22];

	ESP_SendConstData(statusOK, strlen(statusOK), 1);
 80008be:	2201      	movs	r2, #1
{
 80008c0:	b08b      	sub	sp, #44	; 0x2c
	ESP_SendConstData(statusOK, strlen(statusOK), 1);
 80008c2:	2140      	movs	r1, #64	; 0x40
 80008c4:	481b      	ldr	r0, [pc, #108]	; (8000934 <PICKER+0x78>)
 80008c6:	f7ff ff0d 	bl	80006e4 <ESP_SendConstData>

	int length = strlen(htmlpicker1) + strlen(htmlpicker2) + 6;
	sprintf(ContentLength, "Content-Length: %04d\r\n", length);
 80008ca:	f240 128f 	movw	r2, #399	; 0x18f
 80008ce:	491a      	ldr	r1, [pc, #104]	; (8000938 <PICKER+0x7c>)
 80008d0:	a804      	add	r0, sp, #16
 80008d2:	f002 fd15 	bl	8003300 <siprintf>
	ESP_SendData(ContentLength, 22, 1);
 80008d6:	2201      	movs	r2, #1
 80008d8:	2116      	movs	r1, #22
 80008da:	a804      	add	r0, sp, #16
 80008dc:	f7ff fec4 	bl	8000668 <ESP_SendData>

	sprintf(hex, "%02x%02x%02x", Led_Get_Color(eRed)*255/65535, Led_Get_Color(eGreen)*255/65535, Led_Get_Color(eBlue)*255/65535);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff ffbb 	bl	800085c <Led_Get_Color>
 80008e6:	4604      	mov	r4, r0
 80008e8:	2001      	movs	r0, #1
 80008ea:	f7ff ffb7 	bl	800085c <Led_Get_Color>
 80008ee:	4605      	mov	r5, r0
 80008f0:	2002      	movs	r0, #2
 80008f2:	f7ff ffb3 	bl	800085c <Led_Get_Color>
 80008f6:	f240 1201 	movw	r2, #257	; 0x101
 80008fa:	fb90 f0f2 	sdiv	r0, r0, r2
 80008fe:	fb95 f3f2 	sdiv	r3, r5, r2
 8000902:	9000      	str	r0, [sp, #0]
 8000904:	fb94 f2f2 	sdiv	r2, r4, r2
 8000908:	490c      	ldr	r1, [pc, #48]	; (800093c <PICKER+0x80>)
 800090a:	a802      	add	r0, sp, #8
 800090c:	f002 fcf8 	bl	8003300 <siprintf>

	ESP_SendConstData(htmlpicker1, strlen(htmlpicker1), 0);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 7191 	mov.w	r1, #290	; 0x122
 8000916:	480a      	ldr	r0, [pc, #40]	; (8000940 <PICKER+0x84>)
 8000918:	f7ff fee4 	bl	80006e4 <ESP_SendConstData>
	ESP_SendData(hex, 6, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2106      	movs	r1, #6
 8000920:	a802      	add	r0, sp, #8
 8000922:	f7ff fea1 	bl	8000668 <ESP_SendData>
	ESP_SendConstData(htmlpicker2, strlen(htmlpicker2), 1);
 8000926:	2201      	movs	r2, #1
 8000928:	2167      	movs	r1, #103	; 0x67
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <PICKER+0x88>)
 800092c:	f7ff feda 	bl	80006e4 <ESP_SendConstData>
}
 8000930:	b00b      	add	sp, #44	; 0x2c
 8000932:	bd30      	pop	{r4, r5, pc}
 8000934:	08003f61 	.word	0x08003f61
 8000938:	08003da8 	.word	0x08003da8
 800093c:	08003dbf 	.word	0x08003dbf
 8000940:	08003dd6 	.word	0x08003dd6
 8000944:	08003ef9 	.word	0x08003ef9

08000948 <PickerSetLed>:

void PickerSetLed()
{
 8000948:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	char * search;
	search = strstr(ESP_GetRequest(), "?picker=%");
 800094a:	f7ff fdcf 	bl	80004ec <ESP_GetRequest>
 800094e:	491c      	ldr	r1, [pc, #112]	; (80009c0 <PickerSetLed+0x78>)
 8000950:	f002 fcfa 	bl	8003348 <strstr>
	if(search != NULL)
 8000954:	4606      	mov	r6, r0
 8000956:	b388      	cbz	r0, 80009bc <PickerSetLed+0x74>
	{
		char hex[2];
		uint16_t colors[3] = {0, 0, 0};
 8000958:	2400      	movs	r4, #0
 800095a:	f8ad 4008 	strh.w	r4, [sp, #8]
 800095e:	f8ad 400a 	strh.w	r4, [sp, #10]
 8000962:	f8ad 400c 	strh.w	r4, [sp, #12]
		for(int i = 0, l = 0; i < 6; i += 2, l++)
		{
			int position = search - ESP_GetRequest() + 11 + i;
 8000966:	f7ff fdc1 	bl	80004ec <ESP_GetRequest>
 800096a:	1a35      	subs	r5, r6, r0
			hex[0] = ESP_GetRequest()[position];
 800096c:	f7ff fdbe 	bl	80004ec <ESP_GetRequest>
			int position = search - ESP_GetRequest() + 11 + i;
 8000970:	350b      	adds	r5, #11
 8000972:	4425      	add	r5, r4
			hex[0] = ESP_GetRequest()[position];
 8000974:	5d43      	ldrb	r3, [r0, r5]
 8000976:	f88d 3004 	strb.w	r3, [sp, #4]
			hex[1] = ESP_GetRequest()[position + 1];
 800097a:	f7ff fdb7 	bl	80004ec <ESP_GetRequest>
 800097e:	4428      	add	r0, r5
 8000980:	7843      	ldrb	r3, [r0, #1]
			colors[l] = strtol(hex, NULL, 16);
 8000982:	2210      	movs	r2, #16
 8000984:	2100      	movs	r1, #0
 8000986:	a801      	add	r0, sp, #4
			hex[1] = ESP_GetRequest()[position + 1];
 8000988:	f88d 3005 	strb.w	r3, [sp, #5]
			colors[l] = strtol(hex, NULL, 16);
 800098c:	f002 fd78 	bl	8003480 <strtol>
 8000990:	ab02      	add	r3, sp, #8
 8000992:	5318      	strh	r0, [r3, r4]
		for(int i = 0, l = 0; i < 6; i += 2, l++)
 8000994:	3402      	adds	r4, #2
 8000996:	2c06      	cmp	r4, #6
 8000998:	d1e5      	bne.n	8000966 <PickerSetLed+0x1e>
		}
		Led_Set(colors[0]*65535/255, colors[1]*65535/255, colors[2]*65535/255);
 800099a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800099e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80009a2:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80009a6:	eb02 2202 	add.w	r2, r2, r2, lsl #8
 80009aa:	eb01 2101 	add.w	r1, r1, r1, lsl #8
 80009ae:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80009b2:	b292      	uxth	r2, r2
 80009b4:	b289      	uxth	r1, r1
 80009b6:	b280      	uxth	r0, r0
 80009b8:	f7ff ff38 	bl	800082c <Led_Set>
	}
}
 80009bc:	b004      	add	sp, #16
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	08003dcc 	.word	0x08003dcc

080009c4 <PICKER_picker>:

void PICKER_picker()
{
 80009c4:	b508      	push	{r3, lr}
	PickerSetLed();
 80009c6:	f7ff ffbf 	bl	8000948 <PickerSetLed>

	PICKER();
}
 80009ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	PICKER();
 80009ce:	f7ff bf75 	b.w	80008bc <PICKER>
	...

080009d4 <RingBuff_Push>:
	index_in = index_out = 0;
}

void RingBuff_Push(char element)
{
	buffer[index_in++] = element;
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <RingBuff_Push+0x14>)
 80009d6:	4905      	ldr	r1, [pc, #20]	; (80009ec <RingBuff_Push+0x18>)
 80009d8:	8813      	ldrh	r3, [r2, #0]
 80009da:	54c8      	strb	r0, [r1, r3]
 80009dc:	3301      	adds	r3, #1
	index_in &= BUF_MASK;
 80009de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009e2:	8013      	strh	r3, [r2, #0]
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20001970 	.word	0x20001970
 80009ec:	20001770 	.word	0x20001770

080009f0 <RingBuff_Pop>:
}

char RingBuff_Pop()
{
	char element = buffer[index_out++];
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <RingBuff_Pop+0x14>)
 80009f2:	4905      	ldr	r1, [pc, #20]	; (8000a08 <RingBuff_Pop+0x18>)
 80009f4:	8813      	ldrh	r3, [r2, #0]
 80009f6:	5cc8      	ldrb	r0, [r1, r3]
 80009f8:	3301      	adds	r3, #1
	index_out &= BUF_MASK;
 80009fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009fe:	8013      	strh	r3, [r2, #0]
	return element;
}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	2000176e 	.word	0x2000176e
 8000a08:	20001770 	.word	0x20001770

08000a0c <RingBuff_IsEmpty>:

uint8_t RingBuff_IsEmpty()
{
	if (index_in != index_out)
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <RingBuff_IsEmpty+0x10>)
 8000a0e:	8818      	ldrh	r0, [r3, #0]
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <RingBuff_IsEmpty+0x14>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
		return 1;
	return 0;
}
 8000a14:	1ac0      	subs	r0, r0, r3
 8000a16:	bf18      	it	ne
 8000a18:	2001      	movne	r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	20001970 	.word	0x20001970
 8000a20:	2000176e 	.word	0x2000176e

08000a24 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_Init+0x20>)
{
 8000a26:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	f043 0310 	orr.w	r3, r3, #16
 8000a30:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a32:	f000 f815 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f002 fb76 	bl	8003128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3c:	f002 fb4c 	bl	80030d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000a40:	2000      	movs	r0, #0
 8000a42:	bd08      	pop	{r3, pc}
 8000a44:	40022000 	.word	0x40022000

08000a48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a48:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <HAL_IncTick+0x10>)
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <HAL_IncTick+0x14>)
 8000a4c:	6811      	ldr	r1, [r2, #0]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	440b      	add	r3, r1
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20001974 	.word	0x20001974
 8000a5c:	20000008 	.word	0x20000008

08000a60 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a62:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a64:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a66:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a6e:	041b      	lsls	r3, r3, #16
 8000a70:	0c1b      	lsrs	r3, r3, #16
 8000a72:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000a7a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a7c:	60d3      	str	r3, [r2, #12]
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a86:	b530      	push	{r4, r5, lr}
 8000a88:	68dc      	ldr	r4, [r3, #12]
 8000a8a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a8e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a92:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	bf28      	it	cs
 8000a98:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa0:	bf98      	it	ls
 8000aa2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	fa05 f303 	lsl.w	r3, r5, r3
 8000aa8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aac:	bf88      	it	hi
 8000aae:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	4019      	ands	r1, r3
 8000ab2:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	fa05 f404 	lsl.w	r4, r5, r4
 8000ab8:	3c01      	subs	r4, #1
 8000aba:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000abc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abe:	ea42 0201 	orr.w	r2, r2, r1
 8000ac2:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	bfaf      	iteee	ge
 8000ac8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	4b06      	ldrlt	r3, [pc, #24]	; (8000ae8 <HAL_NVIC_SetPriority+0x64>)
 8000ace:	f000 000f 	andlt.w	r0, r0, #15
 8000ad2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	bfa5      	ittet	ge
 8000ad6:	b2d2      	uxtbge	r2, r2
 8000ad8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000adc:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ade:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ae2:	bd30      	pop	{r4, r5, pc}
 8000ae4:	e000ed00 	.word	0xe000ed00
 8000ae8:	e000ed14 	.word	0xe000ed14

08000aec <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000aec:	2301      	movs	r3, #1
 8000aee:	0942      	lsrs	r2, r0, #5
 8000af0:	f000 001f 	and.w	r0, r0, #31
 8000af4:	fa03 f000 	lsl.w	r0, r3, r0
 8000af8:	4b01      	ldr	r3, [pc, #4]	; (8000b00 <HAL_NVIC_EnableIRQ+0x14>)
 8000afa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000afe:	4770      	bx	lr
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000b0e:	5cd3      	ldrb	r3, [r2, r3]
 8000b10:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000b12:	6810      	ldr	r0, [r2, #0]
} 
 8000b14:	40d8      	lsrs	r0, r3
 8000b16:	4770      	bx	lr
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	08004001 	.word	0x08004001
 8000b20:	20000010 	.word	0x20000010

08000b24 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b24:	230f      	movs	r3, #15
 8000b26:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_RCC_GetClockConfig+0x34>)
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	f002 0203 	and.w	r2, r2, #3
 8000b30:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000b38:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000b40:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	08db      	lsrs	r3, r3, #3
 8000b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b4a:	6103      	str	r3, [r0, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_RCC_GetClockConfig+0x38>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 0307 	and.w	r3, r3, #7
 8000b54:	600b      	str	r3, [r1, #0]
 8000b56:	4770      	bx	lr
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40022000 	.word	0x40022000

08000b60 <HAL_TIM_Base_MspInit>:
 8000b60:	4770      	bx	lr

08000b62 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000b62:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8000b64:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000b66:	68da      	ldr	r2, [r3, #12]
 8000b68:	f042 0201 	orr.w	r2, r2, #1
 8000b6c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	f042 0201 	orr.w	r2, r2, #1
 8000b74:	601a      	str	r2, [r3, #0]
}
 8000b76:	4770      	bx	lr

08000b78 <HAL_TIM_OC_DelayElapsedCallback>:
 8000b78:	4770      	bx	lr

08000b7a <HAL_TIM_IC_CaptureCallback>:
 8000b7a:	4770      	bx	lr

08000b7c <HAL_TIM_PWM_PulseFinishedCallback>:
 8000b7c:	4770      	bx	lr

08000b7e <HAL_TIM_TriggerCallback>:
 8000b7e:	4770      	bx	lr

08000b80 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b80:	6803      	ldr	r3, [r0, #0]
{
 8000b82:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b84:	691a      	ldr	r2, [r3, #16]
{
 8000b86:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b88:	0791      	lsls	r1, r2, #30
 8000b8a:	d50e      	bpl.n	8000baa <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000b8c:	68da      	ldr	r2, [r3, #12]
 8000b8e:	0792      	lsls	r2, r2, #30
 8000b90:	d50b      	bpl.n	8000baa <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000b92:	f06f 0202 	mvn.w	r2, #2
 8000b96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b98:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b9a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b9c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b9e:	079b      	lsls	r3, r3, #30
 8000ba0:	d077      	beq.n	8000c92 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000ba2:	f7ff ffea 	bl	8000b7a <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000baa:	6823      	ldr	r3, [r4, #0]
 8000bac:	691a      	ldr	r2, [r3, #16]
 8000bae:	0750      	lsls	r0, r2, #29
 8000bb0:	d510      	bpl.n	8000bd4 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000bb2:	68da      	ldr	r2, [r3, #12]
 8000bb4:	0751      	lsls	r1, r2, #29
 8000bb6:	d50d      	bpl.n	8000bd4 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000bb8:	f06f 0204 	mvn.w	r2, #4
 8000bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000bbe:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bc0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000bc2:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bc4:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000bc8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bca:	d068      	beq.n	8000c9e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000bcc:	f7ff ffd5 	bl	8000b7a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000bd4:	6823      	ldr	r3, [r4, #0]
 8000bd6:	691a      	ldr	r2, [r3, #16]
 8000bd8:	0712      	lsls	r2, r2, #28
 8000bda:	d50f      	bpl.n	8000bfc <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000bdc:	68da      	ldr	r2, [r3, #12]
 8000bde:	0710      	lsls	r0, r2, #28
 8000be0:	d50c      	bpl.n	8000bfc <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000be2:	f06f 0208 	mvn.w	r2, #8
 8000be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000be8:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bea:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000bec:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bee:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000bf0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bf2:	d05a      	beq.n	8000caa <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000bf4:	f7ff ffc1 	bl	8000b7a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000bfc:	6823      	ldr	r3, [r4, #0]
 8000bfe:	691a      	ldr	r2, [r3, #16]
 8000c00:	06d2      	lsls	r2, r2, #27
 8000c02:	d510      	bpl.n	8000c26 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000c04:	68da      	ldr	r2, [r3, #12]
 8000c06:	06d0      	lsls	r0, r2, #27
 8000c08:	d50d      	bpl.n	8000c26 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000c0a:	f06f 0210 	mvn.w	r2, #16
 8000c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c10:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c12:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c14:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c16:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000c1a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c1c:	d04b      	beq.n	8000cb6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c1e:	f7ff ffac 	bl	8000b7a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c22:	2300      	movs	r3, #0
 8000c24:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000c26:	6823      	ldr	r3, [r4, #0]
 8000c28:	691a      	ldr	r2, [r3, #16]
 8000c2a:	07d1      	lsls	r1, r2, #31
 8000c2c:	d508      	bpl.n	8000c40 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	07d2      	lsls	r2, r2, #31
 8000c32:	d505      	bpl.n	8000c40 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000c34:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c38:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000c3a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c3c:	f002 fa42 	bl	80030c4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000c40:	6823      	ldr	r3, [r4, #0]
 8000c42:	691a      	ldr	r2, [r3, #16]
 8000c44:	0610      	lsls	r0, r2, #24
 8000c46:	d508      	bpl.n	8000c5a <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000c48:	68da      	ldr	r2, [r3, #12]
 8000c4a:	0611      	lsls	r1, r2, #24
 8000c4c:	d505      	bpl.n	8000c5a <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8000c52:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c54:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000c56:	f000 f888 	bl	8000d6a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000c5a:	6823      	ldr	r3, [r4, #0]
 8000c5c:	691a      	ldr	r2, [r3, #16]
 8000c5e:	0652      	lsls	r2, r2, #25
 8000c60:	d508      	bpl.n	8000c74 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	0650      	lsls	r0, r2, #25
 8000c66:	d505      	bpl.n	8000c74 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c68:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8000c6c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c6e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000c70:	f7ff ff85 	bl	8000b7e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	691a      	ldr	r2, [r3, #16]
 8000c78:	0691      	lsls	r1, r2, #26
 8000c7a:	d522      	bpl.n	8000cc2 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000c7c:	68da      	ldr	r2, [r3, #12]
 8000c7e:	0692      	lsls	r2, r2, #26
 8000c80:	d51f      	bpl.n	8000cc2 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c82:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000c86:	4620      	mov	r0, r4
    }
  }
}
 8000c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c8c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000c8e:	f000 b86b 	b.w	8000d68 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c92:	f7ff ff71 	bl	8000b78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c96:	4620      	mov	r0, r4
 8000c98:	f7ff ff70 	bl	8000b7c <HAL_TIM_PWM_PulseFinishedCallback>
 8000c9c:	e783      	b.n	8000ba6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c9e:	f7ff ff6b 	bl	8000b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	f7ff ff6a 	bl	8000b7c <HAL_TIM_PWM_PulseFinishedCallback>
 8000ca8:	e792      	b.n	8000bd0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000caa:	f7ff ff65 	bl	8000b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000cae:	4620      	mov	r0, r4
 8000cb0:	f7ff ff64 	bl	8000b7c <HAL_TIM_PWM_PulseFinishedCallback>
 8000cb4:	e7a0      	b.n	8000bf8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cb6:	f7ff ff5f 	bl	8000b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f7ff ff5e 	bl	8000b7c <HAL_TIM_PWM_PulseFinishedCallback>
 8000cc0:	e7af      	b.n	8000c22 <HAL_TIM_IRQHandler+0xa2>
 8000cc2:	bd10      	pop	{r4, pc}

08000cc4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000cc4:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000cc6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000cc8:	4290      	cmp	r0, r2
 8000cca:	d00a      	beq.n	8000ce2 <TIM_Base_SetConfig+0x1e>
 8000ccc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cd0:	d007      	beq.n	8000ce2 <TIM_Base_SetConfig+0x1e>
 8000cd2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	d003      	beq.n	8000ce2 <TIM_Base_SetConfig+0x1e>
 8000cda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	d115      	bne.n	8000d0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000ce2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000ce8:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000cea:	4a11      	ldr	r2, [pc, #68]	; (8000d30 <TIM_Base_SetConfig+0x6c>)
 8000cec:	4290      	cmp	r0, r2
 8000cee:	d00a      	beq.n	8000d06 <TIM_Base_SetConfig+0x42>
 8000cf0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cf4:	d007      	beq.n	8000d06 <TIM_Base_SetConfig+0x42>
 8000cf6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d003      	beq.n	8000d06 <TIM_Base_SetConfig+0x42>
 8000cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d02:	4290      	cmp	r0, r2
 8000d04:	d103      	bne.n	8000d0e <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d06:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d0c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000d0e:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000d14:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000d16:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d18:	688b      	ldr	r3, [r1, #8]
 8000d1a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d1c:	680b      	ldr	r3, [r1, #0]
 8000d1e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <TIM_Base_SetConfig+0x6c>)
 8000d22:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000d24:	bf04      	itt	eq
 8000d26:	690b      	ldreq	r3, [r1, #16]
 8000d28:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	6143      	str	r3, [r0, #20]
 8000d2e:	4770      	bx	lr
 8000d30:	40012c00 	.word	0x40012c00

08000d34 <HAL_TIM_Base_Init>:
{
 8000d34:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000d36:	4604      	mov	r4, r0
 8000d38:	b1a0      	cbz	r0, 8000d64 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000d3a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000d3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d42:	b91b      	cbnz	r3, 8000d4c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000d44:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000d48:	f7ff ff0a 	bl	8000b60 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000d4c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d4e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000d50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d54:	1d21      	adds	r1, r4, #4
 8000d56:	f7ff ffb5 	bl	8000cc4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000d5a:	2301      	movs	r3, #1
  return HAL_OK;
 8000d5c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000d5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000d62:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d64:	2001      	movs	r0, #1
}
 8000d66:	bd10      	pop	{r4, pc}

08000d68 <HAL_TIMEx_CommutationCallback>:
 8000d68:	4770      	bx	lr

08000d6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000d6a:	4770      	bx	lr

08000d6c <LL_ADC_CommonInit>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <LL_ADC_CommonInit+0x28>)
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d74:	689b      	ldr	r3, [r3, #8]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8000d76:	4313      	orrs	r3, r2
 8000d78:	07db      	lsls	r3, r3, #31
 8000d7a:	d408      	bmi.n	8000d8e <LL_ADC_CommonInit+0x22>
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8000d7c:	6843      	ldr	r3, [r0, #4]
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8000d7e:	680a      	ldr	r2, [r1, #0]
      MODIFY_REG(ADCxy_COMMON->CR1,
 8000d80:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8000d84:	b102      	cbz	r2, 8000d88 <LL_ADC_CommonInit+0x1c>
      MODIFY_REG(ADCxy_COMMON->CR1,
 8000d86:	4313      	orrs	r3, r2
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8000d88:	6043      	str	r3, [r0, #4]
  ErrorStatus status = SUCCESS;
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	4770      	bx	lr
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8000d8e:	2000      	movs	r0, #0
  }
  
  return status;
}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40012400 	.word	0x40012400

08000d98 <LL_ADC_Init>:
 8000d98:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000d9a:	07db      	lsls	r3, r3, #31
 8000d9c:	d40d      	bmi.n	8000dba <LL_ADC_Init+0x22>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8000d9e:	6843      	ldr	r3, [r0, #4]
 8000da0:	684a      	ldr	r2, [r1, #4]
 8000da2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000da6:	4313      	orrs	r3, r2
 8000da8:	6043      	str	r3, [r0, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8000daa:	6883      	ldr	r3, [r0, #8]
 8000dac:	680a      	ldr	r2, [r1, #0]
 8000dae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000db2:	4313      	orrs	r3, r2
 8000db4:	6083      	str	r3, [r0, #8]
  ErrorStatus status = SUCCESS;
 8000db6:	2001      	movs	r0, #1
 8000db8:	4770      	bx	lr

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000dba:	2000      	movs	r0, #0
  }
  return status;
}
 8000dbc:	4770      	bx	lr

08000dbe <LL_ADC_REG_Init>:
 8000dbe:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8000dc0:	b510      	push	{r4, lr}
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000dc2:	07db      	lsls	r3, r3, #31
 8000dc4:	d41b      	bmi.n	8000dfe <LL_ADC_REG_Init+0x40>
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
    {
      MODIFY_REG(ADCx->CR1,
 8000dc6:	6843      	ldr	r3, [r0, #4]
  if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8000dc8:	684a      	ldr	r2, [r1, #4]
      MODIFY_REG(ADCx->CR1,
 8000dca:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8000dce:	b112      	cbz	r2, 8000dd6 <LL_ADC_REG_Init+0x18>
      MODIFY_REG(ADCx->CR1,
 8000dd0:	688c      	ldr	r4, [r1, #8]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	4323      	orrs	r3, r4
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8000dd6:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8000dd8:	6883      	ldr	r3, [r0, #8]
 8000dda:	680c      	ldr	r4, [r1, #0]
 8000ddc:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8000de0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000de4:	4323      	orrs	r3, r4
 8000de6:	68cc      	ldr	r4, [r1, #12]
 8000de8:	6909      	ldr	r1, [r1, #16]
 8000dea:	4323      	orrs	r3, r4
 8000dec:	430b      	orrs	r3, r1
 8000dee:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8000df0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000df2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000df6:	4313      	orrs	r3, r2
 8000df8:	62c3      	str	r3, [r0, #44]	; 0x2c
  ErrorStatus status = SUCCESS;
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	bd10      	pop	{r4, pc}
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000dfe:	2000      	movs	r0, #0
  }
  return status;
}
 8000e00:	bd10      	pop	{r4, pc}
	...

08000e04 <LL_EXTI_Init>:
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000e04:	7901      	ldrb	r1, [r0, #4]
{
 8000e06:	b510      	push	{r4, lr}
 8000e08:	4602      	mov	r2, r0
 8000e0a:	6803      	ldr	r3, [r0, #0]
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000e0c:	2900      	cmp	r1, #0
 8000e0e:	d042      	beq.n	8000e96 <LL_EXTI_Init+0x92>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d048      	beq.n	8000ea6 <LL_EXTI_Init+0xa2>
    {
      switch (EXTI_InitStruct->Mode)
 8000e14:	7940      	ldrb	r0, [r0, #5]
 8000e16:	2801      	cmp	r0, #1
 8000e18:	d00e      	beq.n	8000e38 <LL_EXTI_Init+0x34>
 8000e1a:	d303      	bcc.n	8000e24 <LL_EXTI_Init+0x20>
 8000e1c:	2802      	cmp	r0, #2
 8000e1e:	d025      	beq.n	8000e6c <LL_EXTI_Init+0x68>
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
          break;
        default:
          status = ERROR;
 8000e20:	2000      	movs	r0, #0
 8000e22:	e011      	b.n	8000e48 <LL_EXTI_Init+0x44>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000e24:	4922      	ldr	r1, [pc, #136]	; (8000eb0 <LL_EXTI_Init+0xac>)
 8000e26:	6848      	ldr	r0, [r1, #4]
 8000e28:	ea20 0003 	bic.w	r0, r0, r3
 8000e2c:	6048      	str	r0, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000e2e:	6808      	ldr	r0, [r1, #0]
 8000e30:	4318      	orrs	r0, r3
 8000e32:	6008      	str	r0, [r1, #0]
  ErrorStatus status = SUCCESS;
 8000e34:	2001      	movs	r0, #1
 8000e36:	e007      	b.n	8000e48 <LL_EXTI_Init+0x44>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000e38:	491d      	ldr	r1, [pc, #116]	; (8000eb0 <LL_EXTI_Init+0xac>)
 8000e3a:	680c      	ldr	r4, [r1, #0]
 8000e3c:	ea24 0403 	bic.w	r4, r4, r3
 8000e40:	600c      	str	r4, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000e42:	684c      	ldr	r4, [r1, #4]
 8000e44:	431c      	orrs	r4, r3
 8000e46:	604c      	str	r4, [r1, #4]
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000e48:	7992      	ldrb	r2, [r2, #6]
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d02e      	beq.n	8000eac <LL_EXTI_Init+0xa8>
      {
        switch (EXTI_InitStruct->Trigger)
 8000e4e:	2a02      	cmp	r2, #2
 8000e50:	d014      	beq.n	8000e7c <LL_EXTI_Init+0x78>
 8000e52:	2a03      	cmp	r2, #3
 8000e54:	d01b      	beq.n	8000e8e <LL_EXTI_Init+0x8a>
 8000e56:	2a01      	cmp	r2, #1
 8000e58:	d127      	bne.n	8000eaa <LL_EXTI_Init+0xa6>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000e5a:	4a15      	ldr	r2, [pc, #84]	; (8000eb0 <LL_EXTI_Init+0xac>)
 8000e5c:	68d1      	ldr	r1, [r2, #12]
 8000e5e:	ea21 0103 	bic.w	r1, r1, r3
 8000e62:	60d1      	str	r1, [r2, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000e64:	6891      	ldr	r1, [r2, #8]
 8000e66:	430b      	orrs	r3, r1
 8000e68:	6093      	str	r3, [r2, #8]
 8000e6a:	bd10      	pop	{r4, pc}
  SET_BIT(EXTI->IMR, ExtiLine);
 8000e6c:	4910      	ldr	r1, [pc, #64]	; (8000eb0 <LL_EXTI_Init+0xac>)
 8000e6e:	6808      	ldr	r0, [r1, #0]
 8000e70:	4318      	orrs	r0, r3
 8000e72:	6008      	str	r0, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000e74:	6848      	ldr	r0, [r1, #4]
 8000e76:	4318      	orrs	r0, r3
 8000e78:	6048      	str	r0, [r1, #4]
 8000e7a:	e7db      	b.n	8000e34 <LL_EXTI_Init+0x30>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <LL_EXTI_Init+0xac>)
 8000e7e:	6891      	ldr	r1, [r2, #8]
 8000e80:	ea21 0103 	bic.w	r1, r1, r3
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000e84:	6091      	str	r1, [r2, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000e86:	68d1      	ldr	r1, [r2, #12]
 8000e88:	430b      	orrs	r3, r1
 8000e8a:	60d3      	str	r3, [r2, #12]
 8000e8c:	bd10      	pop	{r4, pc}
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <LL_EXTI_Init+0xac>)
 8000e90:	6891      	ldr	r1, [r2, #8]
 8000e92:	4319      	orrs	r1, r3
 8000e94:	e7f6      	b.n	8000e84 <LL_EXTI_Init+0x80>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <LL_EXTI_Init+0xac>)
 8000e9a:	6811      	ldr	r1, [r2, #0]
 8000e9c:	4019      	ands	r1, r3
 8000e9e:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000ea0:	6851      	ldr	r1, [r2, #4]
 8000ea2:	400b      	ands	r3, r1
 8000ea4:	6053      	str	r3, [r2, #4]
  ErrorStatus status = SUCCESS;
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	bd10      	pop	{r4, pc}
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
            break;
          default:
            status = ERROR;
 8000eaa:	2000      	movs	r0, #0
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
  }
  return status;
}
 8000eac:	bd10      	pop	{r4, pc}
 8000eae:	bf00      	nop
 8000eb0:	40010400 	.word	0x40010400

08000eb4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000eb8:	680d      	ldr	r5, [r1, #0]
 8000eba:	f3c5 250f 	ubfx	r5, r5, #8, #16
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebe:	fa95 f2a5 	rbit	r2, r5
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000ec2:	f04f 090f 	mov.w	r9, #15
  pinpos = POSITION_VAL(pinmask);
 8000ec6:	fab2 f282 	clz	r2, r2
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000eca:	f04f 0803 	mov.w	r8, #3
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000ece:	f04f 0c04 	mov.w	ip, #4
    if ((pinmask & (1U << pinpos)) != 0U)
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
      {
        currentpin = (0x00000101U << pinpos);
 8000ed2:	f240 1e01 	movw	lr, #257	; 0x101
  while ((pinmask  >> pinpos) != 0U)
 8000ed6:	fa35 f302 	lsrs.w	r3, r5, r2
 8000eda:	d102      	bne.n	8000ee2 <LL_GPIO_Init+0x2e>
      }
    }
    pinpos++;
  }
  return (SUCCESS);
}
 8000edc:	2001      	movs	r0, #1
 8000ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pinmask & (1U << pinpos)) != 0U)
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	422b      	tst	r3, r5
 8000ee8:	d063      	beq.n	8000fb2 <LL_GPIO_Init+0xfe>
      if (pinpos < GPIO_PIN_MASK_POS)
 8000eea:	2a07      	cmp	r2, #7
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 8000eec:	bf83      	ittte	hi
 8000eee:	f04f 1401 	movhi.w	r4, #65537	; 0x10001
 8000ef2:	f1a2 0308 	subhi.w	r3, r2, #8
 8000ef6:	fa04 f303 	lslhi.w	r3, r4, r3
        currentpin = (0x00000101U << pinpos);
 8000efa:	fa0e f302 	lslls.w	r3, lr, r2
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 8000efe:	bf88      	it	hi
 8000f00:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000f04:	0e1e      	lsrs	r6, r3, #24
 8000f06:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000f0a:	faba fa8a 	clz	sl, sl
 8000f0e:	fa93 fba3 	rbit	fp, r3
 8000f12:	fabb fb8b 	clz	fp, fp
 8000f16:	5984      	ldr	r4, [r0, r6]
 8000f18:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000f1c:	fa09 fa0a 	lsl.w	sl, r9, sl
 8000f20:	ea24 0a0a 	bic.w	sl, r4, sl
 8000f24:	684c      	ldr	r4, [r1, #4]
 8000f26:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f2a:	fa04 fb0b 	lsl.w	fp, r4, fp
 8000f2e:	ea4a 040b 	orr.w	r4, sl, fp
 8000f32:	5184      	str	r4, [r0, r6]
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000f34:	68c4      	ldr	r4, [r0, #12]
 8000f36:	ea4f 2a13 	mov.w	sl, r3, lsr #8
 8000f3a:	fa9a fbaa 	rbit	fp, sl
 8000f3e:	fabb fb8b 	clz	fp, fp
 8000f42:	ea24 0a0a 	bic.w	sl, r4, sl
 8000f46:	690c      	ldr	r4, [r1, #16]
 8000f48:	fa04 f40b 	lsl.w	r4, r4, fp
 8000f4c:	ea4a 0404 	orr.w	r4, sl, r4
 8000f50:	60c4      	str	r4, [r0, #12]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f52:	684c      	ldr	r4, [r1, #4]
 8000f54:	f024 0408 	bic.w	r4, r4, #8
 8000f58:	2c01      	cmp	r4, #1
 8000f5a:	d12a      	bne.n	8000fb2 <LL_GPIO_Init+0xfe>
 8000f5c:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000f60:	faba fa8a 	clz	sl, sl
 8000f64:	fa93 f4a3 	rbit	r4, r3
 8000f68:	fab4 f484 	clz	r4, r4
 8000f6c:	5987      	ldr	r7, [r0, r6]
 8000f6e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8000f72:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000f76:	688c      	ldr	r4, [r1, #8]
 8000f78:	fa08 fa0a 	lsl.w	sl, r8, sl
 8000f7c:	ea27 0a0a 	bic.w	sl, r7, sl
 8000f80:	fa04 f40b 	lsl.w	r4, r4, fp
 8000f84:	ea4a 0404 	orr.w	r4, sl, r4
 8000f88:	5184      	str	r4, [r0, r6]
 8000f8a:	fa93 fba3 	rbit	fp, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000f8e:	fabb fb8b 	clz	fp, fp
 8000f92:	fa93 f3a3 	rbit	r3, r3
 8000f96:	fab3 f383 	clz	r3, r3
 8000f9a:	68cf      	ldr	r7, [r1, #12]
 8000f9c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000fa0:	fa0c fb0b 	lsl.w	fp, ip, fp
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	ea24 040b 	bic.w	r4, r4, fp
 8000faa:	fa07 f303 	lsl.w	r3, r7, r3
 8000fae:	431c      	orrs	r4, r3
 8000fb0:	5184      	str	r4, [r0, r6]
    pinpos++;
 8000fb2:	3201      	adds	r2, #1
 8000fb4:	e78f      	b.n	8000ed6 <LL_GPIO_Init+0x22>
	...

08000fb8 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000fba:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <RCC_GetHCLKClockFreq+0x14>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fc2:	5cd3      	ldrb	r3, [r2, r3]
}
 8000fc4:	40d8      	lsrs	r0, r3
 8000fc6:	4770      	bx	lr
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	08003ff1 	.word	0x08003ff1

08000fd0 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <RCC_GetPCLK1ClockFreq+0x14>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000fda:	5cd3      	ldrb	r3, [r2, r3]
}
 8000fdc:	40d8      	lsrs	r0, r3
 8000fde:	4770      	bx	lr
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	08004001 	.word	0x08004001

08000fe8 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <RCC_GetPCLK2ClockFreq+0x14>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000ff2:	5cd3      	ldrb	r3, [r2, r3]
}
 8000ff4:	40d8      	lsrs	r0, r3
 8000ff6:	4770      	bx	lr
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	08004001 	.word	0x08004001

08001000 <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <RCC_PLL_GetFreqDomain_SYS+0x28>)
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8001008:	b162      	cbz	r2, 8001024 <RCC_PLL_GetFreqDomain_SYS+0x24>
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 800100a:	6858      	ldr	r0, [r3, #4]
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 800100e:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8001012:	3001      	adds	r0, #1
 8001014:	fbb2 f0f0 	udiv	r0, r2, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001018:	685b      	ldr	r3, [r3, #4]

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800101a:	f3c3 4383 	ubfx	r3, r3, #18, #4
 800101e:	3302      	adds	r3, #2
}
 8001020:	4358      	muls	r0, r3
 8001022:	4770      	bx	lr
      pllinputfreq = HSI_VALUE / 2U;
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 8001026:	e7f7      	b.n	8001018 <RCC_PLL_GetFreqDomain_SYS+0x18>
 8001028:	40021000 	.word	0x40021000
 800102c:	007a1200 	.word	0x007a1200
 8001030:	003d0900 	.word	0x003d0900

08001034 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <RCC_GetSystemClockFreq+0x14>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 800103c:	2b08      	cmp	r3, #8
 800103e:	d101      	bne.n	8001044 <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001040:	f7ff bfde 	b.w	8001000 <RCC_PLL_GetFreqDomain_SYS>
}
 8001044:	4801      	ldr	r0, [pc, #4]	; (800104c <RCC_GetSystemClockFreq+0x18>)
 8001046:	4770      	bx	lr
 8001048:	40021000 	.word	0x40021000
 800104c:	007a1200 	.word	0x007a1200

08001050 <LL_RCC_GetSystemClocksFreq>:
{
 8001050:	b508      	push	{r3, lr}
 8001052:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001054:	f7ff ffee 	bl	8001034 <RCC_GetSystemClockFreq>
 8001058:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800105a:	f7ff ffad 	bl	8000fb8 <RCC_GetHCLKClockFreq>
 800105e:	6048      	str	r0, [r1, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001060:	f7ff ffb6 	bl	8000fd0 <RCC_GetPCLK1ClockFreq>
 8001064:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001066:	6848      	ldr	r0, [r1, #4]
 8001068:	f7ff ffbe 	bl	8000fe8 <RCC_GetPCLK2ClockFreq>
 800106c:	60c8      	str	r0, [r1, #12]
 800106e:	bd08      	pop	{r3, pc}

08001070 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001070:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <LL_TIM_Init+0x6c>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001072:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001074:	4290      	cmp	r0, r2
 8001076:	d00a      	beq.n	800108e <LL_TIM_Init+0x1e>
 8001078:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800107c:	d007      	beq.n	800108e <LL_TIM_Init+0x1e>
 800107e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001082:	4290      	cmp	r0, r2
 8001084:	d003      	beq.n	800108e <LL_TIM_Init+0x1e>
 8001086:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800108a:	4290      	cmp	r0, r2
 800108c:	d115      	bne.n	80010ba <LL_TIM_Init+0x4a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800108e:	684a      	ldr	r2, [r1, #4]
 8001090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001094:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001096:	4a11      	ldr	r2, [pc, #68]	; (80010dc <LL_TIM_Init+0x6c>)
 8001098:	4290      	cmp	r0, r2
 800109a:	d00a      	beq.n	80010b2 <LL_TIM_Init+0x42>
 800109c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80010a0:	d007      	beq.n	80010b2 <LL_TIM_Init+0x42>
 80010a2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80010a6:	4290      	cmp	r0, r2
 80010a8:	d003      	beq.n	80010b2 <LL_TIM_Init+0x42>
 80010aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010ae:	4290      	cmp	r0, r2
 80010b0:	d103      	bne.n	80010ba <LL_TIM_Init+0x4a>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80010b2:	68ca      	ldr	r2, [r1, #12]
 80010b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010b8:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80010ba:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80010bc:	688b      	ldr	r3, [r1, #8]
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
  WRITE_REG(TIMx->ARR, AutoReload);
 80010be:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80010c0:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80010c2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <LL_TIM_Init+0x6c>)
 80010c6:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80010c8:	bf04      	itt	eq
 80010ca:	7c0b      	ldrbeq	r3, [r1, #16]
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80010cc:	6303      	streq	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80010ce:	6943      	ldr	r3, [r0, #20]
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80010d6:	2001      	movs	r0, #1
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40012c00 	.word	0x40012c00

080010e0 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 80010e0:	2910      	cmp	r1, #16
{
 80010e2:	b530      	push	{r4, r5, lr}
  switch (Channel)
 80010e4:	d05f      	beq.n	80011a6 <LL_TIM_OC_Init+0xc6>
 80010e6:	d803      	bhi.n	80010f0 <LL_TIM_OC_Init+0x10>
 80010e8:	2901      	cmp	r1, #1
 80010ea:	d02c      	beq.n	8001146 <LL_TIM_OC_Init+0x66>
  ErrorStatus result = ERROR;
 80010ec:	2000      	movs	r0, #0
    default:
      break;
  }

  return result;
}
 80010ee:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 80010f0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80010f4:	f000 8089 	beq.w	800120a <LL_TIM_OC_Init+0x12a>
 80010f8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80010fc:	d1f6      	bne.n	80010ec <LL_TIM_OC_Init+0xc>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80010fe:	6a03      	ldr	r3, [r0, #32]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001100:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001102:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001106:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001108:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800110a:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800110c:	69c1      	ldr	r1, [r0, #28]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800110e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001112:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8001116:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800111a:	6915      	ldr	r5, [r2, #16]
 800111c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001120:	6855      	ldr	r5, [r2, #4]
 8001122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001126:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800112a:	4d50      	ldr	r5, [pc, #320]	; (800126c <LL_TIM_OC_Init+0x18c>)
 800112c:	42a8      	cmp	r0, r5
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800112e:	bf04      	itt	eq
 8001130:	6995      	ldreq	r5, [r2, #24]
 8001132:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001136:	68d2      	ldr	r2, [r2, #12]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001138:	bf08      	it	eq
 800113a:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800113e:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001140:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001142:	6402      	str	r2, [r0, #64]	; 0x40
 8001144:	e02c      	b.n	80011a0 <LL_TIM_OC_Init+0xc0>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001146:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001148:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800114a:	f023 0301 	bic.w	r3, r3, #1
 800114e:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001150:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001152:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001154:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001156:	f023 0302 	bic.w	r3, r3, #2
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800115a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 800115e:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001160:	6915      	ldr	r5, [r2, #16]
 8001162:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001164:	6855      	ldr	r5, [r2, #4]
 8001166:	f023 0301 	bic.w	r3, r3, #1
 800116a:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800116c:	4d3f      	ldr	r5, [pc, #252]	; (800126c <LL_TIM_OC_Init+0x18c>)
 800116e:	42a8      	cmp	r0, r5
 8001170:	d112      	bne.n	8001198 <LL_TIM_OC_Init+0xb8>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001172:	6955      	ldr	r5, [r2, #20]
 8001174:	f023 0308 	bic.w	r3, r3, #8
 8001178:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800117c:	6895      	ldr	r5, [r2, #8]
 800117e:	f023 0304 	bic.w	r3, r3, #4
 8001182:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001186:	6995      	ldr	r5, [r2, #24]
 8001188:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800118c:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800118e:	69d5      	ldr	r5, [r2, #28]
 8001190:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8001194:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001198:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800119a:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800119c:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800119e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80011a0:	6203      	str	r3, [r0, #32]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80011a2:	2001      	movs	r0, #1
      break;
 80011a4:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80011a6:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80011a8:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80011aa:	f023 0310 	bic.w	r3, r3, #16
 80011ae:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80011b0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80011b2:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80011b4:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80011b6:	f023 0320 	bic.w	r3, r3, #32
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80011ba:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80011be:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80011c2:	6915      	ldr	r5, [r2, #16]
 80011c4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80011c8:	6855      	ldr	r5, [r2, #4]
 80011ca:	f023 0310 	bic.w	r3, r3, #16
 80011ce:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80011d2:	4d26      	ldr	r5, [pc, #152]	; (800126c <LL_TIM_OC_Init+0x18c>)
 80011d4:	42a8      	cmp	r0, r5
 80011d6:	d113      	bne.n	8001200 <LL_TIM_OC_Init+0x120>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80011d8:	6955      	ldr	r5, [r2, #20]
 80011da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011de:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80011e2:	6895      	ldr	r5, [r2, #8]
 80011e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011e8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80011ec:	6995      	ldr	r5, [r2, #24]
 80011ee:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80011f2:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80011f6:	69d5      	ldr	r5, [r2, #28]
 80011f8:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80011fc:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001200:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001202:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001204:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001206:	6382      	str	r2, [r0, #56]	; 0x38
 8001208:	e7ca      	b.n	80011a0 <LL_TIM_OC_Init+0xc0>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800120a:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800120c:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800120e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001212:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001214:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001216:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001218:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800121a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800121e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8001222:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001224:	6915      	ldr	r5, [r2, #16]
 8001226:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800122a:	6855      	ldr	r5, [r2, #4]
 800122c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001230:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001234:	4d0d      	ldr	r5, [pc, #52]	; (800126c <LL_TIM_OC_Init+0x18c>)
 8001236:	42a8      	cmp	r0, r5
 8001238:	d113      	bne.n	8001262 <LL_TIM_OC_Init+0x182>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800123a:	6955      	ldr	r5, [r2, #20]
 800123c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001240:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001244:	6895      	ldr	r5, [r2, #8]
 8001246:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800124a:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800124e:	6995      	ldr	r5, [r2, #24]
 8001250:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001254:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001258:	69d5      	ldr	r5, [r2, #28]
 800125a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800125e:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001262:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001264:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001266:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001268:	63c2      	str	r2, [r0, #60]	; 0x3c
 800126a:	e799      	b.n	80011a0 <LL_TIM_OC_Init+0xc0>
 800126c:	40012c00 	.word	0x40012c00

08001270 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001270:	b530      	push	{r4, r5, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001272:	68c3      	ldr	r3, [r0, #12]
 8001274:	b085      	sub	sp, #20
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001276:	049b      	lsls	r3, r3, #18
{
 8001278:	4604      	mov	r4, r0
 800127a:	460d      	mov	r5, r1
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800127c:	d502      	bpl.n	8001284 <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 800127e:	2000      	movs	r0, #0
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8001280:	b005      	add	sp, #20
 8001282:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 8001284:	684b      	ldr	r3, [r1, #4]
 8001286:	68c9      	ldr	r1, [r1, #12]
 8001288:	68c2      	ldr	r2, [r0, #12]
 800128a:	430b      	orrs	r3, r1
 800128c:	6929      	ldr	r1, [r5, #16]
 800128e:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001292:	430b      	orrs	r3, r1
 8001294:	f022 020c 	bic.w	r2, r2, #12
 8001298:	4313      	orrs	r3, r2
 800129a:	60c3      	str	r3, [r0, #12]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800129c:	6903      	ldr	r3, [r0, #16]
 800129e:	68aa      	ldr	r2, [r5, #8]
 80012a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012a4:	4313      	orrs	r3, r2
 80012a6:	6103      	str	r3, [r0, #16]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80012a8:	6943      	ldr	r3, [r0, #20]
 80012aa:	696a      	ldr	r2, [r5, #20]
 80012ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012b0:	4313      	orrs	r3, r2
 80012b2:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80012b4:	4668      	mov	r0, sp
 80012b6:	f7ff fecb 	bl	8001050 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <LL_USART_Init+0x98>)
 80012bc:	429c      	cmp	r4, r3
 80012be:	d119      	bne.n	80012f4 <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK2_Frequency;
 80012c0:	9903      	ldr	r1, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80012c2:	2900      	cmp	r1, #0
 80012c4:	d0db      	beq.n	800127e <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 80012c6:	682a      	ldr	r2, [r5, #0]
 80012c8:	2a00      	cmp	r2, #0
 80012ca:	d0d8      	beq.n	800127e <LL_USART_Init+0xe>
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80012cc:	2319      	movs	r3, #25
 80012ce:	434b      	muls	r3, r1
 80012d0:	0092      	lsls	r2, r2, #2
 80012d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80012d6:	2264      	movs	r2, #100	; 0x64
 80012d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80012dc:	fb02 3311 	mls	r3, r2, r1, r3
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	3332      	adds	r3, #50	; 0x32
 80012e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80012e8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 80012f0:	2001      	movs	r0, #1
 80012f2:	e7c5      	b.n	8001280 <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <LL_USART_Init+0x9c>)
 80012f6:	429c      	cmp	r4, r3
 80012f8:	d101      	bne.n	80012fe <LL_USART_Init+0x8e>
      periphclk = rcc_clocks.PCLK1_Frequency;
 80012fa:	9902      	ldr	r1, [sp, #8]
 80012fc:	e7e1      	b.n	80012c2 <LL_USART_Init+0x52>
    else if (USARTx == USART3)
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <LL_USART_Init+0xa0>)
 8001300:	429c      	cmp	r4, r3
 8001302:	d1bc      	bne.n	800127e <LL_USART_Init+0xe>
 8001304:	e7f9      	b.n	80012fa <LL_USART_Init+0x8a>
 8001306:	bf00      	nop
 8001308:	40013800 	.word	0x40013800
 800130c:	40004400 	.word	0x40004400
 8001310:	40004800 	.word	0x40004800

08001314 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001318:	fbb0 f0f3 	udiv	r0, r0, r3
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800131c:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800131e:	4b03      	ldr	r3, [pc, #12]	; (800132c <LL_Init1msTick+0x18>)
 8001320:	3801      	subs	r0, #1
 8001322:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	2205      	movs	r2, #5
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	4770      	bx	lr
 800132c:	e000e010 	.word	0xe000e010

08001330 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <LL_mDelay+0x24>)
{
 8001332:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001334:	681b      	ldr	r3, [r3, #0]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001336:	1c41      	adds	r1, r0, #1
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001338:	9301      	str	r3, [sp, #4]
  ((void)tmp);
 800133a:	9b01      	ldr	r3, [sp, #4]
    Delay++;
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <LL_mDelay+0x24>)
    Delay++;
 800133e:	bf18      	it	ne
 8001340:	3001      	addne	r0, #1
  while (Delay)
 8001342:	b908      	cbnz	r0, 8001348 <LL_mDelay+0x18>
    {
      Delay--;
    }
  }
}
 8001344:	b002      	add	sp, #8
 8001346:	4770      	bx	lr
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	03d2      	lsls	r2, r2, #15
      Delay--;
 800134c:	bf48      	it	mi
 800134e:	f100 30ff 	addmi.w	r0, r0, #4294967295
 8001352:	e7f6      	b.n	8001342 <LL_mDelay+0x12>
 8001354:	e000e010 	.word	0xe000e010

08001358 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001358:	4b01      	ldr	r3, [pc, #4]	; (8001360 <LL_SetSystemCoreClock+0x8>)
 800135a:	6018      	str	r0, [r3, #0]
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000010 	.word	0x20000010

08001364 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001364:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001366:	f000 fe0d 	bl	8001f84 <vTaskStartScheduler>
  
  return osOK;
}
 800136a:	2000      	movs	r0, #0
 800136c:	bd08      	pop	{r3, pc}

0800136e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800136e:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001370:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8001374:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001376:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001378:	bf08      	it	eq
 800137a:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800137c:	8a02      	ldrh	r2, [r0, #16]
    fpriority += (priority - osPriorityIdle);
 800137e:	bf18      	it	ne
 8001380:	3403      	addne	r4, #3
{
 8001382:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001384:	e890 0022 	ldmia.w	r0, {r1, r5}
 8001388:	a803      	add	r0, sp, #12
 800138a:	9001      	str	r0, [sp, #4]
 800138c:	9400      	str	r4, [sp, #0]
 800138e:	4628      	mov	r0, r5
 8001390:	f000 fd28 	bl	8001de4 <xTaskCreate>
 8001394:	2801      	cmp	r0, #1
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 8001396:	bf14      	ite	ne
 8001398:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
 800139a:	9803      	ldreq	r0, [sp, #12]
}
 800139c:	b005      	add	sp, #20
 800139e:	bd30      	pop	{r4, r5, pc}

080013a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80013a0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80013a2:	2800      	cmp	r0, #0
 80013a4:	bf08      	it	eq
 80013a6:	2001      	moveq	r0, #1
 80013a8:	f000 ff3a 	bl	8002220 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80013ac:	2000      	movs	r0, #0
 80013ae:	bd08      	pop	{r3, pc}

080013b0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013b0:	f100 0308 	add.w	r3, r0, #8
 80013b4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80013b6:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013ba:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013bc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80013be:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80013c0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80013c2:	6003      	str	r3, [r0, #0]
 80013c4:	4770      	bx	lr

080013c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	6103      	str	r3, [r0, #16]
 80013ca:	4770      	bx	lr

080013cc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80013cc:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80013ce:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80013d0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80013d2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80013d8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80013da:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80013dc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80013de:	3301      	adds	r3, #1
 80013e0:	6003      	str	r3, [r0, #0]
 80013e2:	4770      	bx	lr

080013e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80013e4:	680a      	ldr	r2, [r1, #0]
{
 80013e6:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80013e8:	1c53      	adds	r3, r2, #1
 80013ea:	d10a      	bne.n	8001402 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80013ec:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80013f2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80013f4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80013f6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80013f8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80013fa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80013fc:	3301      	adds	r3, #1
 80013fe:	6003      	str	r3, [r0, #0]
 8001400:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001402:	f100 0308 	add.w	r3, r0, #8
 8001406:	685c      	ldr	r4, [r3, #4]
 8001408:	6825      	ldr	r5, [r4, #0]
 800140a:	42aa      	cmp	r2, r5
 800140c:	d3ef      	bcc.n	80013ee <vListInsert+0xa>
 800140e:	4623      	mov	r3, r4
 8001410:	e7f9      	b.n	8001406 <vListInsert+0x22>

08001412 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001412:	6841      	ldr	r1, [r0, #4]
 8001414:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001416:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001418:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800141a:	6882      	ldr	r2, [r0, #8]
 800141c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800141e:	6859      	ldr	r1, [r3, #4]
 8001420:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001422:	bf08      	it	eq
 8001424:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001426:	2200      	movs	r2, #0
 8001428:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	3801      	subs	r0, #1
 800142e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001430:	4770      	bx	lr
	...

08001434 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <prvTaskExitError+0x2c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	d008      	beq.n	800144e <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800143c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001440:	f383 8811 	msr	BASEPRI, r3
 8001444:	f3bf 8f6f 	isb	sy
 8001448:	f3bf 8f4f 	dsb	sy
 800144c:	e7fe      	b.n	800144c <prvTaskExitError+0x18>
 800144e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001452:	f383 8811 	msr	BASEPRI, r3
 8001456:	f3bf 8f6f 	isb	sy
 800145a:	f3bf 8f4f 	dsb	sy
 800145e:	e7fe      	b.n	800145e <prvTaskExitError+0x2a>
 8001460:	2000000c 	.word	0x2000000c

08001464 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <prvPortStartFirstTask+0x1c>)
 8001466:	6800      	ldr	r0, [r0, #0]
 8001468:	6800      	ldr	r0, [r0, #0]
 800146a:	f380 8808 	msr	MSP, r0
 800146e:	b662      	cpsie	i
 8001470:	b661      	cpsie	f
 8001472:	f3bf 8f4f 	dsb	sy
 8001476:	f3bf 8f6f 	isb	sy
 800147a:	df00      	svc	0
 800147c:	bf00      	nop
 800147e:	0000      	.short	0x0000
 8001480:	e000ed08 	.word	0xe000ed08

08001484 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001484:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001488:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800148e:	f021 0101 	bic.w	r1, r1, #1
 8001492:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001496:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800149a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800149e:	3840      	subs	r0, #64	; 0x40
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	08001435 	.word	0x08001435
	...

080014b0 <SVC_Handler>:
	__asm volatile (
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <pxCurrentTCBConst2>)
 80014b2:	6819      	ldr	r1, [r3, #0]
 80014b4:	6808      	ldr	r0, [r1, #0]
 80014b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80014ba:	f380 8809 	msr	PSP, r0
 80014be:	f3bf 8f6f 	isb	sy
 80014c2:	f04f 0000 	mov.w	r0, #0
 80014c6:	f380 8811 	msr	BASEPRI, r0
 80014ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80014ce:	4770      	bx	lr

080014d0 <pxCurrentTCBConst2>:
 80014d0:	2000122c 	.word	0x2000122c

080014d4 <vPortEnterCritical>:
 80014d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d8:	f383 8811 	msr	BASEPRI, r3
 80014dc:	f3bf 8f6f 	isb	sy
 80014e0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80014e4:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <vPortEnterCritical+0x3c>)
 80014e6:	6813      	ldr	r3, [r2, #0]
 80014e8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80014ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80014ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80014ee:	d10d      	bne.n	800150c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <vPortEnterCritical+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80014f8:	d008      	beq.n	800150c <vPortEnterCritical+0x38>
 80014fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014fe:	f383 8811 	msr	BASEPRI, r3
 8001502:	f3bf 8f6f 	isb	sy
 8001506:	f3bf 8f4f 	dsb	sy
 800150a:	e7fe      	b.n	800150a <vPortEnterCritical+0x36>
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2000000c 	.word	0x2000000c
 8001514:	e000ed04 	.word	0xe000ed04

08001518 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001518:	4a08      	ldr	r2, [pc, #32]	; (800153c <vPortExitCritical+0x24>)
 800151a:	6813      	ldr	r3, [r2, #0]
 800151c:	b943      	cbnz	r3, 8001530 <vPortExitCritical+0x18>
 800151e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001522:	f383 8811 	msr	BASEPRI, r3
 8001526:	f3bf 8f6f 	isb	sy
 800152a:	f3bf 8f4f 	dsb	sy
 800152e:	e7fe      	b.n	800152e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001530:	3b01      	subs	r3, #1
 8001532:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001534:	b90b      	cbnz	r3, 800153a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001536:	f383 8811 	msr	BASEPRI, r3
 800153a:	4770      	bx	lr
 800153c:	2000000c 	.word	0x2000000c

08001540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001540:	f3ef 8009 	mrs	r0, PSP
 8001544:	f3bf 8f6f 	isb	sy
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <pxCurrentTCBConst>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001550:	6010      	str	r0, [r2, #0]
 8001552:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001556:	f04f 0050 	mov.w	r0, #80	; 0x50
 800155a:	f380 8811 	msr	BASEPRI, r0
 800155e:	f000 febd 	bl	80022dc <vTaskSwitchContext>
 8001562:	f04f 0000 	mov.w	r0, #0
 8001566:	f380 8811 	msr	BASEPRI, r0
 800156a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800156e:	6819      	ldr	r1, [r3, #0]
 8001570:	6808      	ldr	r0, [r1, #0]
 8001572:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001576:	f380 8809 	msr	PSP, r0
 800157a:	f3bf 8f6f 	isb	sy
 800157e:	4770      	bx	lr

08001580 <pxCurrentTCBConst>:
 8001580:	2000122c 	.word	0x2000122c

08001584 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001584:	b508      	push	{r3, lr}
	__asm volatile
 8001586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800158a:	f383 8811 	msr	BASEPRI, r3
 800158e:	f3bf 8f6f 	isb	sy
 8001592:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001596:	f000 fd39 	bl	800200c <xTaskIncrementTick>
 800159a:	b118      	cbz	r0, 80015a4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800159c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015a0:	4b02      	ldr	r3, [pc, #8]	; (80015ac <SysTick_Handler+0x28>)
 80015a2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80015a4:	2300      	movs	r3, #0
 80015a6:	f383 8811 	msr	BASEPRI, r3
 80015aa:	bd08      	pop	{r3, pc}
 80015ac:	e000ed04 	.word	0xe000ed04

080015b0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80015b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <vPortSetupTimerInterrupt+0x1c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <vPortSetupTimerInterrupt+0x20>)
 80015be:	3b01      	subs	r3, #1
 80015c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80015c2:	2207      	movs	r2, #7
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <vPortSetupTimerInterrupt+0x24>)
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000010 	.word	0x20000010
 80015d0:	e000e014 	.word	0xe000e014
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <xPortStartScheduler>:
{
 80015d8:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80015dc:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80015de:	781a      	ldrb	r2, [r3, #0]
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80015e4:	22ff      	movs	r2, #255	; 0xff
 80015e6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80015e8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80015ea:	4a1c      	ldr	r2, [pc, #112]	; (800165c <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80015f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80015f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015fa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80015fc:	2207      	movs	r2, #7
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <xPortStartScheduler+0x88>)
 8001600:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001602:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001606:	1e54      	subs	r4, r2, #1
 8001608:	0600      	lsls	r0, r0, #24
 800160a:	d41c      	bmi.n	8001646 <xPortStartScheduler+0x6e>
 800160c:	b101      	cbz	r1, 8001610 <xPortStartScheduler+0x38>
 800160e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001614:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001618:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <xPortStartScheduler+0x80>)
 800161e:	b2db      	uxtb	r3, r3
 8001620:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <xPortStartScheduler+0x8c>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800162a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001632:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001634:	f7ff ffbc 	bl	80015b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001638:	2200      	movs	r2, #0
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <xPortStartScheduler+0x90>)
 800163c:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 800163e:	f7ff ff11 	bl	8001464 <prvPortStartFirstTask>
	prvTaskExitError();
 8001642:	f7ff fef7 	bl	8001434 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001646:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800164a:	2101      	movs	r1, #1
 800164c:	0052      	lsls	r2, r2, #1
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	f88d 2003 	strb.w	r2, [sp, #3]
 8001654:	4622      	mov	r2, r4
 8001656:	e7d4      	b.n	8001602 <xPortStartScheduler+0x2a>
 8001658:	e000e400 	.word	0xe000e400
 800165c:	2000020c 	.word	0x2000020c
 8001660:	20000210 	.word	0x20000210
 8001664:	e000ed20 	.word	0xe000ed20
 8001668:	2000000c 	.word	0x2000000c

0800166c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800166c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <prvInsertBlockIntoFreeList+0x40>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4282      	cmp	r2, r0
 8001674:	d318      	bcc.n	80016a8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001676:	685c      	ldr	r4, [r3, #4]
 8001678:	1919      	adds	r1, r3, r4
 800167a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800167c:	bf01      	itttt	eq
 800167e:	6841      	ldreq	r1, [r0, #4]
 8001680:	4618      	moveq	r0, r3
 8001682:	1909      	addeq	r1, r1, r4
 8001684:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001686:	6844      	ldr	r4, [r0, #4]
 8001688:	1901      	adds	r1, r0, r4
 800168a:	428a      	cmp	r2, r1
 800168c:	d107      	bne.n	800169e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800168e:	4908      	ldr	r1, [pc, #32]	; (80016b0 <prvInsertBlockIntoFreeList+0x44>)
 8001690:	6809      	ldr	r1, [r1, #0]
 8001692:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001694:	bf1f      	itttt	ne
 8001696:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001698:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800169a:	1909      	addne	r1, r1, r4
 800169c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800169e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80016a0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80016a2:	bf18      	it	ne
 80016a4:	6018      	strne	r0, [r3, #0]
 80016a6:	bd10      	pop	{r4, pc}
 80016a8:	4613      	mov	r3, r2
 80016aa:	e7e1      	b.n	8001670 <prvInsertBlockIntoFreeList+0x4>
 80016ac:	20001224 	.word	0x20001224
 80016b0:	20000214 	.word	0x20000214

080016b4 <pvPortMalloc>:
{
 80016b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80016ba:	f000 fc9f 	bl	8001ffc <vTaskSuspendAll>
		if( pxEnd == NULL )
 80016be:	493e      	ldr	r1, [pc, #248]	; (80017b8 <pvPortMalloc+0x104>)
 80016c0:	4d3e      	ldr	r5, [pc, #248]	; (80017bc <pvPortMalloc+0x108>)
 80016c2:	680b      	ldr	r3, [r1, #0]
 80016c4:	bb0b      	cbnz	r3, 800170a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80016c6:	4a3e      	ldr	r2, [pc, #248]	; (80017c0 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80016c8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80016ca:	bf1d      	ittte	ne
 80016cc:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80016ce:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80016d2:	f502 5380 	addne.w	r3, r2, #4096	; 0x1000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80016d6:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80016da:	bf1c      	itt	ne
 80016dc:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80016de:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 80016e0:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80016e2:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80016e4:	4e37      	ldr	r6, [pc, #220]	; (80017c4 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 80016e6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80016e8:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80016ec:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80016ee:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80016f0:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80016f2:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 80016f4:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80016f6:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80016f8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80016fc:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016fe:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001700:	4b32      	ldr	r3, [pc, #200]	; (80017cc <pvPortMalloc+0x118>)
 8001702:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001704:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001708:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800170a:	682f      	ldr	r7, [r5, #0]
 800170c:	4227      	tst	r7, r4
 800170e:	d116      	bne.n	800173e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001710:	2c00      	cmp	r4, #0
 8001712:	d040      	beq.n	8001796 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8001714:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001718:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800171a:	bf1c      	itt	ne
 800171c:	f023 0307 	bicne.w	r3, r3, #7
 8001720:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001722:	b163      	cbz	r3, 800173e <pvPortMalloc+0x8a>
 8001724:	4a29      	ldr	r2, [pc, #164]	; (80017cc <pvPortMalloc+0x118>)
 8001726:	6816      	ldr	r6, [r2, #0]
 8001728:	4690      	mov	r8, r2
 800172a:	42b3      	cmp	r3, r6
 800172c:	d807      	bhi.n	800173e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800172e:	4a25      	ldr	r2, [pc, #148]	; (80017c4 <pvPortMalloc+0x110>)
 8001730:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001732:	6868      	ldr	r0, [r5, #4]
 8001734:	4283      	cmp	r3, r0
 8001736:	d804      	bhi.n	8001742 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001738:	6809      	ldr	r1, [r1, #0]
 800173a:	428d      	cmp	r5, r1
 800173c:	d107      	bne.n	800174e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800173e:	2400      	movs	r4, #0
 8001740:	e029      	b.n	8001796 <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001742:	682c      	ldr	r4, [r5, #0]
 8001744:	2c00      	cmp	r4, #0
 8001746:	d0f7      	beq.n	8001738 <pvPortMalloc+0x84>
 8001748:	462a      	mov	r2, r5
 800174a:	4625      	mov	r5, r4
 800174c:	e7f1      	b.n	8001732 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800174e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001750:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001752:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001754:	1ac2      	subs	r2, r0, r3
 8001756:	2a10      	cmp	r2, #16
 8001758:	d90f      	bls.n	800177a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800175a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800175c:	0741      	lsls	r1, r0, #29
 800175e:	d008      	beq.n	8001772 <pvPortMalloc+0xbe>
	__asm volatile
 8001760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001764:	f383 8811 	msr	BASEPRI, r3
 8001768:	f3bf 8f6f 	isb	sy
 800176c:	f3bf 8f4f 	dsb	sy
 8001770:	e7fe      	b.n	8001770 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001772:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001774:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001776:	f7ff ff79 	bl	800166c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800177a:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800177c:	4912      	ldr	r1, [pc, #72]	; (80017c8 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800177e:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001780:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8001782:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001784:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001786:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800178a:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800178c:	bf38      	it	cc
 800178e:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001790:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001792:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001794:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001796:	f000 fccb 	bl	8002130 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800179a:	0763      	lsls	r3, r4, #29
 800179c:	d008      	beq.n	80017b0 <pvPortMalloc+0xfc>
 800179e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	f3bf 8f6f 	isb	sy
 80017aa:	f3bf 8f4f 	dsb	sy
 80017ae:	e7fe      	b.n	80017ae <pvPortMalloc+0xfa>
}
 80017b0:	4620      	mov	r0, r4
 80017b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017b6:	bf00      	nop
 80017b8:	20000214 	.word	0x20000214
 80017bc:	20001218 	.word	0x20001218
 80017c0:	20000218 	.word	0x20000218
 80017c4:	20001224 	.word	0x20001224
 80017c8:	20001220 	.word	0x20001220
 80017cc:	2000121c 	.word	0x2000121c

080017d0 <vPortFree>:
{
 80017d0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80017d2:	4604      	mov	r4, r0
 80017d4:	b370      	cbz	r0, 8001834 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80017d6:	4a18      	ldr	r2, [pc, #96]	; (8001838 <vPortFree+0x68>)
 80017d8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	4213      	tst	r3, r2
 80017e0:	d108      	bne.n	80017f4 <vPortFree+0x24>
 80017e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e6:	f383 8811 	msr	BASEPRI, r3
 80017ea:	f3bf 8f6f 	isb	sy
 80017ee:	f3bf 8f4f 	dsb	sy
 80017f2:	e7fe      	b.n	80017f2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80017f4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80017f8:	b141      	cbz	r1, 800180c <vPortFree+0x3c>
 80017fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fe:	f383 8811 	msr	BASEPRI, r3
 8001802:	f3bf 8f6f 	isb	sy
 8001806:	f3bf 8f4f 	dsb	sy
 800180a:	e7fe      	b.n	800180a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800180c:	ea23 0302 	bic.w	r3, r3, r2
 8001810:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001814:	f000 fbf2 	bl	8001ffc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001818:	4a08      	ldr	r2, [pc, #32]	; (800183c <vPortFree+0x6c>)
 800181a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800181e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001820:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001824:	440b      	add	r3, r1
 8001826:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001828:	f7ff ff20 	bl	800166c <prvInsertBlockIntoFreeList>
}
 800182c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001830:	f000 bc7e 	b.w	8002130 <xTaskResumeAll>
 8001834:	bd10      	pop	{r4, pc}
 8001836:	bf00      	nop
 8001838:	20001218 	.word	0x20001218
 800183c:	2000121c 	.word	0x2000121c

08001840 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001840:	b570      	push	{r4, r5, r6, lr}
 8001842:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001844:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8001846:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001848:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800184a:	b942      	cbnz	r2, 800185e <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800184c:	6805      	ldr	r5, [r0, #0]
 800184e:	b99d      	cbnz	r5, 8001878 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001850:	6840      	ldr	r0, [r0, #4]
 8001852:	f000 fe81 	bl	8002558 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001856:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001858:	3601      	adds	r6, #1
 800185a:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800185c:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800185e:	b96d      	cbnz	r5, 800187c <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001860:	6880      	ldr	r0, [r0, #8]
 8001862:	f001 fd39 	bl	80032d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001866:	68a3      	ldr	r3, [r4, #8]
 8001868:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800186a:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800186c:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800186e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001870:	4293      	cmp	r3, r2
 8001872:	d301      	bcc.n	8001878 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8001878:	2000      	movs	r0, #0
 800187a:	e7ed      	b.n	8001858 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800187c:	68c0      	ldr	r0, [r0, #12]
 800187e:	f001 fd2b 	bl	80032d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001882:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001884:	68e2      	ldr	r2, [r4, #12]
 8001886:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001888:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800188a:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800188c:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800188e:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001890:	bf3e      	ittt	cc
 8001892:	6862      	ldrcc	r2, [r4, #4]
 8001894:	189b      	addcc	r3, r3, r2
 8001896:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001898:	2d02      	cmp	r5, #2
 800189a:	d1ed      	bne.n	8001878 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800189c:	b10e      	cbz	r6, 80018a2 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800189e:	3e01      	subs	r6, #1
 80018a0:	e7ea      	b.n	8001878 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80018a2:	4630      	mov	r0, r6
 80018a4:	e7d8      	b.n	8001858 <prvCopyDataToQueue+0x18>

080018a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80018a6:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80018a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80018aa:	b410      	push	{r4}
 80018ac:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80018ae:	b162      	cbz	r2, 80018ca <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80018b0:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80018b2:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80018b4:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80018b6:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80018b8:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80018ba:	bf28      	it	cs
 80018bc:	6819      	ldrcs	r1, [r3, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 80018be:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80018c0:	bf28      	it	cs
 80018c2:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80018c4:	68d9      	ldr	r1, [r3, #12]
 80018c6:	f001 bd07 	b.w	80032d8 <memcpy>
}
 80018ca:	bc10      	pop	{r4}
 80018cc:	4770      	bx	lr

080018ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80018ce:	b570      	push	{r4, r5, r6, lr}
 80018d0:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80018d2:	f7ff fdff 	bl	80014d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80018d6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018da:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80018de:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80018e0:	2d00      	cmp	r5, #0
 80018e2:	dc14      	bgt.n	800190e <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80018e4:	23ff      	movs	r3, #255	; 0xff
 80018e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80018ea:	f7ff fe15 	bl	8001518 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80018ee:	f7ff fdf1 	bl	80014d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80018f2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018f6:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80018fa:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80018fc:	2d00      	cmp	r5, #0
 80018fe:	dc12      	bgt.n	8001926 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001900:	23ff      	movs	r3, #255	; 0xff
 8001902:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8001906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800190a:	f7ff be05 	b.w	8001518 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800190e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0e7      	beq.n	80018e4 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001914:	4630      	mov	r0, r6
 8001916:	f000 fd35 	bl	8002384 <xTaskRemoveFromEventList>
 800191a:	b108      	cbz	r0, 8001920 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800191c:	f000 fdbe 	bl	800249c <vTaskMissedYield>
 8001920:	3d01      	subs	r5, #1
 8001922:	b26d      	sxtb	r5, r5
 8001924:	e7dc      	b.n	80018e0 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001926:	6923      	ldr	r3, [r4, #16]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0e9      	beq.n	8001900 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800192c:	4630      	mov	r0, r6
 800192e:	f000 fd29 	bl	8002384 <xTaskRemoveFromEventList>
 8001932:	b108      	cbz	r0, 8001938 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8001934:	f000 fdb2 	bl	800249c <vTaskMissedYield>
 8001938:	3d01      	subs	r5, #1
 800193a:	b26d      	sxtb	r5, r5
 800193c:	e7de      	b.n	80018fc <prvUnlockQueue+0x2e>
	...

08001940 <xQueueGenericReset>:
{
 8001940:	b538      	push	{r3, r4, r5, lr}
 8001942:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8001944:	4604      	mov	r4, r0
 8001946:	b940      	cbnz	r0, 800195a <xQueueGenericReset+0x1a>
 8001948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194c:	f383 8811 	msr	BASEPRI, r3
 8001950:	f3bf 8f6f 	isb	sy
 8001954:	f3bf 8f4f 	dsb	sy
 8001958:	e7fe      	b.n	8001958 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800195a:	f7ff fdbb 	bl	80014d4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800195e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001960:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001962:	6822      	ldr	r2, [r4, #0]
 8001964:	4343      	muls	r3, r0
 8001966:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001968:	1a1b      	subs	r3, r3, r0
 800196a:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800196c:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800196e:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001970:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8001972:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001974:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001976:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8001978:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800197c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8001980:	b995      	cbnz	r5, 80019a8 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001982:	6923      	ldr	r3, [r4, #16]
 8001984:	b163      	cbz	r3, 80019a0 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001986:	f104 0010 	add.w	r0, r4, #16
 800198a:	f000 fcfb 	bl	8002384 <xTaskRemoveFromEventList>
 800198e:	b138      	cbz	r0, 80019a0 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8001990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <xQueueGenericReset+0x7c>)
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	f3bf 8f4f 	dsb	sy
 800199c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80019a0:	f7ff fdba 	bl	8001518 <vPortExitCritical>
}
 80019a4:	2001      	movs	r0, #1
 80019a6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80019a8:	f104 0010 	add.w	r0, r4, #16
 80019ac:	f7ff fd00 	bl	80013b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80019b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80019b4:	f7ff fcfc 	bl	80013b0 <vListInitialise>
 80019b8:	e7f2      	b.n	80019a0 <xQueueGenericReset+0x60>
 80019ba:	bf00      	nop
 80019bc:	e000ed04 	.word	0xe000ed04

080019c0 <xQueueGenericCreate>:
	{
 80019c0:	b570      	push	{r4, r5, r6, lr}
 80019c2:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80019c4:	4606      	mov	r6, r0
 80019c6:	b940      	cbnz	r0, 80019da <xQueueGenericCreate+0x1a>
 80019c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019cc:	f383 8811 	msr	BASEPRI, r3
 80019d0:	f3bf 8f6f 	isb	sy
 80019d4:	f3bf 8f4f 	dsb	sy
 80019d8:	e7fe      	b.n	80019d8 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019da:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80019dc:	3048      	adds	r0, #72	; 0x48
 80019de:	f7ff fe69 	bl	80016b4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80019e2:	4604      	mov	r4, r0
 80019e4:	b138      	cbz	r0, 80019f6 <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80019e6:	b945      	cbnz	r5, 80019fa <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80019e8:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80019ea:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80019ec:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80019ee:	2101      	movs	r1, #1
 80019f0:	4620      	mov	r0, r4
 80019f2:	f7ff ffa5 	bl	8001940 <xQueueGenericReset>
	}
 80019f6:	4620      	mov	r0, r4
 80019f8:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80019fa:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80019fe:	6003      	str	r3, [r0, #0]
 8001a00:	e7f3      	b.n	80019ea <xQueueGenericCreate+0x2a>
	...

08001a04 <xQueueGenericSend>:
{
 8001a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a08:	4689      	mov	r9, r1
 8001a0a:	9201      	str	r2, [sp, #4]
 8001a0c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8001a0e:	4604      	mov	r4, r0
 8001a10:	b940      	cbnz	r0, 8001a24 <xQueueGenericSend+0x20>
 8001a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a16:	f383 8811 	msr	BASEPRI, r3
 8001a1a:	f3bf 8f6f 	isb	sy
 8001a1e:	f3bf 8f4f 	dsb	sy
 8001a22:	e7fe      	b.n	8001a22 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a24:	2900      	cmp	r1, #0
 8001a26:	f040 8088 	bne.w	8001b3a <xQueueGenericSend+0x136>
 8001a2a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 8084 	beq.w	8001b3a <xQueueGenericSend+0x136>
 8001a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a36:	f383 8811 	msr	BASEPRI, r3
 8001a3a:	f3bf 8f6f 	isb	sy
 8001a3e:	f3bf 8f4f 	dsb	sy
 8001a42:	e7fe      	b.n	8001a42 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a44:	9e01      	ldr	r6, [sp, #4]
 8001a46:	2e00      	cmp	r6, #0
 8001a48:	f000 8082 	beq.w	8001b50 <xQueueGenericSend+0x14c>
 8001a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a50:	f383 8811 	msr	BASEPRI, r3
 8001a54:	f3bf 8f6f 	isb	sy
 8001a58:	f3bf 8f4f 	dsb	sy
 8001a5c:	e7fe      	b.n	8001a5c <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001a5e:	9d01      	ldr	r5, [sp, #4]
 8001a60:	b91d      	cbnz	r5, 8001a6a <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8001a62:	f7ff fd59 	bl	8001518 <vPortExitCritical>
			return errQUEUE_FULL;
 8001a66:	2000      	movs	r0, #0
 8001a68:	e058      	b.n	8001b1c <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8001a6a:	b916      	cbnz	r6, 8001a72 <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8001a6c:	a802      	add	r0, sp, #8
 8001a6e:	f000 fccb 	bl	8002408 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8001a72:	f7ff fd51 	bl	8001518 <vPortExitCritical>
		vTaskSuspendAll();
 8001a76:	f000 fac1 	bl	8001ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001a7a:	f7ff fd2b 	bl	80014d4 <vPortEnterCritical>
 8001a7e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001a82:	2bff      	cmp	r3, #255	; 0xff
 8001a84:	bf08      	it	eq
 8001a86:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8001a8a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001a8e:	2bff      	cmp	r3, #255	; 0xff
 8001a90:	bf08      	it	eq
 8001a92:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8001a96:	f7ff fd3f 	bl	8001518 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a9a:	a901      	add	r1, sp, #4
 8001a9c:	a802      	add	r0, sp, #8
 8001a9e:	f000 fcc3 	bl	8002428 <xTaskCheckForTimeOut>
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	d143      	bne.n	8001b2e <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001aa6:	f7ff fd15 	bl	80014d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001aaa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001aac:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001aae:	f7ff fd33 	bl	8001518 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001ab2:	42ae      	cmp	r6, r5
 8001ab4:	d135      	bne.n	8001b22 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001ab6:	9901      	ldr	r1, [sp, #4]
 8001ab8:	f104 0010 	add.w	r0, r4, #16
 8001abc:	f000 fc48 	bl	8002350 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f7ff ff04 	bl	80018ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001ac6:	f000 fb33 	bl	8002130 <xTaskResumeAll>
 8001aca:	b938      	cbnz	r0, 8001adc <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8001acc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ad0:	f8ca 3000 	str.w	r3, [sl]
 8001ad4:	f3bf 8f4f 	dsb	sy
 8001ad8:	f3bf 8f6f 	isb	sy
 8001adc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001ade:	f7ff fcf9 	bl	80014d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ae2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ae4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d301      	bcc.n	8001aee <xQueueGenericSend+0xea>
 8001aea:	2f02      	cmp	r7, #2
 8001aec:	d1b7      	bne.n	8001a5e <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001aee:	463a      	mov	r2, r7
 8001af0:	4649      	mov	r1, r9
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7ff fea4 	bl	8001840 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001afa:	b11b      	cbz	r3, 8001b04 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001afc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001b00:	f000 fc40 	bl	8002384 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8001b04:	b138      	cbz	r0, 8001b16 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8001b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <xQueueGenericSend+0x168>)
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	f3bf 8f4f 	dsb	sy
 8001b12:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001b16:	f7ff fcff 	bl	8001518 <vPortExitCritical>
				return pdPASS;
 8001b1a:	2001      	movs	r0, #1
}
 8001b1c:	b004      	add	sp, #16
 8001b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8001b22:	4620      	mov	r0, r4
 8001b24:	f7ff fed3 	bl	80018ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001b28:	f000 fb02 	bl	8002130 <xTaskResumeAll>
 8001b2c:	e7d6      	b.n	8001adc <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f7ff fecd 	bl	80018ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001b34:	f000 fafc 	bl	8002130 <xTaskResumeAll>
 8001b38:	e795      	b.n	8001a66 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b3a:	2f02      	cmp	r7, #2
 8001b3c:	d102      	bne.n	8001b44 <xQueueGenericSend+0x140>
 8001b3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d10a      	bne.n	8001b5a <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b44:	f000 fcb0 	bl	80024a8 <xTaskGetSchedulerState>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	f43f af7b 	beq.w	8001a44 <xQueueGenericSend+0x40>
 8001b4e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001b50:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8001b54:	f8df a014 	ldr.w	sl, [pc, #20]	; 8001b6c <xQueueGenericSend+0x168>
 8001b58:	e7c1      	b.n	8001ade <xQueueGenericSend+0xda>
 8001b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5e:	f383 8811 	msr	BASEPRI, r3
 8001b62:	f3bf 8f6f 	isb	sy
 8001b66:	f3bf 8f4f 	dsb	sy
 8001b6a:	e7fe      	b.n	8001b6a <xQueueGenericSend+0x166>
 8001b6c:	e000ed04 	.word	0xe000ed04

08001b70 <xQueueGenericReceive>:
{
 8001b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b74:	4688      	mov	r8, r1
 8001b76:	9201      	str	r2, [sp, #4]
 8001b78:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	b940      	cbnz	r0, 8001b90 <xQueueGenericReceive+0x20>
 8001b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b82:	f383 8811 	msr	BASEPRI, r3
 8001b86:	f3bf 8f6f 	isb	sy
 8001b8a:	f3bf 8f4f 	dsb	sy
 8001b8e:	e7fe      	b.n	8001b8e <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b90:	2900      	cmp	r1, #0
 8001b92:	f040 80a5 	bne.w	8001ce0 <xQueueGenericReceive+0x170>
 8001b96:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80a1 	beq.w	8001ce0 <xQueueGenericReceive+0x170>
 8001b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba2:	f383 8811 	msr	BASEPRI, r3
 8001ba6:	f3bf 8f6f 	isb	sy
 8001baa:	f3bf 8f4f 	dsb	sy
 8001bae:	e7fe      	b.n	8001bae <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001bb0:	9e01      	ldr	r6, [sp, #4]
 8001bb2:	2e00      	cmp	r6, #0
 8001bb4:	f000 809a 	beq.w	8001cec <xQueueGenericReceive+0x17c>
 8001bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bbc:	f383 8811 	msr	BASEPRI, r3
 8001bc0:	f3bf 8f6f 	isb	sy
 8001bc4:	f3bf 8f4f 	dsb	sy
 8001bc8:	e7fe      	b.n	8001bc8 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001bcc:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d06d      	beq.n	8001cae <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bd2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001bd6:	e05f      	b.n	8001c98 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001bd8:	9d01      	ldr	r5, [sp, #4]
 8001bda:	b91d      	cbnz	r5, 8001be4 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8001bdc:	f7ff fc9c 	bl	8001518 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8001be0:	4628      	mov	r0, r5
 8001be2:	e067      	b.n	8001cb4 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8001be4:	b916      	cbnz	r6, 8001bec <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 8001be6:	a802      	add	r0, sp, #8
 8001be8:	f000 fc0e 	bl	8002408 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8001bec:	f7ff fc94 	bl	8001518 <vPortExitCritical>
		vTaskSuspendAll();
 8001bf0:	f000 fa04 	bl	8001ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001bf4:	f7ff fc6e 	bl	80014d4 <vPortEnterCritical>
 8001bf8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001bfc:	2bff      	cmp	r3, #255	; 0xff
 8001bfe:	bf08      	it	eq
 8001c00:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8001c04:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001c08:	2bff      	cmp	r3, #255	; 0xff
 8001c0a:	bf08      	it	eq
 8001c0c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8001c10:	f7ff fc82 	bl	8001518 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c14:	a901      	add	r1, sp, #4
 8001c16:	a802      	add	r0, sp, #8
 8001c18:	f000 fc06 	bl	8002428 <xTaskCheckForTimeOut>
 8001c1c:	2800      	cmp	r0, #0
 8001c1e:	d152      	bne.n	8001cc6 <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 8001c20:	f7ff fc58 	bl	80014d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001c24:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001c26:	f7ff fc77 	bl	8001518 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c2a:	2d00      	cmp	r5, #0
 8001c2c:	d145      	bne.n	8001cba <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	b933      	cbnz	r3, 8001c40 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 8001c32:	f7ff fc4f 	bl	80014d4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001c36:	6860      	ldr	r0, [r4, #4]
 8001c38:	f000 fc46 	bl	80024c8 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8001c3c:	f7ff fc6c 	bl	8001518 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c40:	9901      	ldr	r1, [sp, #4]
 8001c42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c46:	f000 fb83 	bl	8002350 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f7ff fe3f 	bl	80018ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001c50:	f000 fa6e 	bl	8002130 <xTaskResumeAll>
 8001c54:	b938      	cbnz	r0, 8001c66 <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 8001c56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c5a:	f8ca 3000 	str.w	r3, [sl]
 8001c5e:	f3bf 8f4f 	dsb	sy
 8001c62:	f3bf 8f6f 	isb	sy
 8001c66:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001c68:	f7ff fc34 	bl	80014d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c6c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c6e:	2d00      	cmp	r5, #0
 8001c70:	d0b2      	beq.n	8001bd8 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c72:	4641      	mov	r1, r8
 8001c74:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001c76:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c78:	f7ff fe15 	bl	80018a6 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8001c7c:	f1b9 0f00 	cmp.w	r9, #0
 8001c80:	d1a3      	bne.n	8001bca <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c82:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001c84:	3d01      	subs	r5, #1
 8001c86:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c88:	b913      	cbnz	r3, 8001c90 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001c8a:	f000 fcb5 	bl	80025f8 <pvTaskIncrementMutexHeldCount>
 8001c8e:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c90:	6923      	ldr	r3, [r4, #16]
 8001c92:	b163      	cbz	r3, 8001cae <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c94:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c98:	f000 fb74 	bl	8002384 <xTaskRemoveFromEventList>
 8001c9c:	b138      	cbz	r0, 8001cae <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 8001c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <xQueueGenericReceive+0x184>)
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	f3bf 8f4f 	dsb	sy
 8001caa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001cae:	f7ff fc33 	bl	8001518 <vPortExitCritical>
				return pdPASS;
 8001cb2:	2001      	movs	r0, #1
}
 8001cb4:	b004      	add	sp, #16
 8001cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f7ff fe07 	bl	80018ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001cc0:	f000 fa36 	bl	8002130 <xTaskResumeAll>
 8001cc4:	e7cf      	b.n	8001c66 <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f7ff fe01 	bl	80018ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ccc:	f000 fa30 	bl	8002130 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8001cd0:	f7ff fc00 	bl	80014d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001cd4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001cd6:	f7ff fc1f 	bl	8001518 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001cda:	2d00      	cmp	r5, #0
 8001cdc:	d1c3      	bne.n	8001c66 <xQueueGenericReceive+0xf6>
 8001cde:	e77f      	b.n	8001be0 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ce0:	f000 fbe2 	bl	80024a8 <xTaskGetSchedulerState>
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	f43f af63 	beq.w	8001bb0 <xQueueGenericReceive+0x40>
 8001cea:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001cec:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8001cee:	f8df a004 	ldr.w	sl, [pc, #4]	; 8001cf4 <xQueueGenericReceive+0x184>
 8001cf2:	e7b9      	b.n	8001c68 <xQueueGenericReceive+0xf8>
 8001cf4:	e000ed04 	.word	0xe000ed04

08001cf8 <uxQueueMessagesWaiting>:
{
 8001cf8:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	b940      	cbnz	r0, 8001d10 <uxQueueMessagesWaiting+0x18>
 8001cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d02:	f383 8811 	msr	BASEPRI, r3
 8001d06:	f3bf 8f6f 	isb	sy
 8001d0a:	f3bf 8f4f 	dsb	sy
 8001d0e:	e7fe      	b.n	8001d0e <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8001d10:	f7ff fbe0 	bl	80014d4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8001d14:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001d16:	f7ff fbff 	bl	8001518 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	bd10      	pop	{r4, pc}
	...

08001d20 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d20:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <prvResetNextTaskUnblockTime+0x1c>)
 8001d22:	6813      	ldr	r3, [r2, #0]
 8001d24:	6819      	ldr	r1, [r3, #0]
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <prvResetNextTaskUnblockTime+0x20>)
 8001d28:	b919      	cbnz	r1, 8001d32 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001d2a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001d36:	68d2      	ldr	r2, [r2, #12]
 8001d38:	6852      	ldr	r2, [r2, #4]
 8001d3a:	e7f8      	b.n	8001d2e <prvResetNextTaskUnblockTime+0xe>
 8001d3c:	20001230 	.word	0x20001230
 8001d40:	20001308 	.word	0x20001308

08001d44 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001d46:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d48:	4e1b      	ldr	r6, [pc, #108]	; (8001db8 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001d4a:	681d      	ldr	r5, [r3, #0]
{
 8001d4c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d4e:	6830      	ldr	r0, [r6, #0]
{
 8001d50:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d52:	3004      	adds	r0, #4
 8001d54:	f7ff fb5d 	bl	8001412 <uxListRemove>
 8001d58:	4633      	mov	r3, r6
 8001d5a:	b940      	cbnz	r0, 8001d6e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	6831      	ldr	r1, [r6, #0]
 8001d60:	4e16      	ldr	r6, [pc, #88]	; (8001dbc <prvAddCurrentTaskToDelayedList+0x78>)
 8001d62:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001d64:	6832      	ldr	r2, [r6, #0]
 8001d66:	4088      	lsls	r0, r1
 8001d68:	ea22 0200 	bic.w	r2, r2, r0
 8001d6c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001d6e:	1c62      	adds	r2, r4, #1
 8001d70:	d107      	bne.n	8001d82 <prvAddCurrentTaskToDelayedList+0x3e>
 8001d72:	b137      	cbz	r7, 8001d82 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d74:	6819      	ldr	r1, [r3, #0]
 8001d76:	4812      	ldr	r0, [pc, #72]	; (8001dc0 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001d78:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001d7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d7e:	f7ff bb25 	b.w	80013cc <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001d82:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001d84:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001d86:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001d88:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001d8a:	d907      	bls.n	8001d9c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <prvAddCurrentTaskToDelayedList+0x80>)
 8001d8e:	6810      	ldr	r0, [r2, #0]
 8001d90:	6819      	ldr	r1, [r3, #0]
}
 8001d92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d96:	3104      	adds	r1, #4
 8001d98:	f7ff bb24 	b.w	80013e4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <prvAddCurrentTaskToDelayedList+0x84>)
 8001d9e:	6810      	ldr	r0, [r2, #0]
 8001da0:	6819      	ldr	r1, [r3, #0]
 8001da2:	3104      	adds	r1, #4
 8001da4:	f7ff fb1e 	bl	80013e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <prvAddCurrentTaskToDelayedList+0x88>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001dae:	bf38      	it	cc
 8001db0:	601c      	strcc	r4, [r3, #0]
 8001db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001db4:	20001350 	.word	0x20001350
 8001db8:	2000122c 	.word	0x2000122c
 8001dbc:	200012d8 	.word	0x200012d8
 8001dc0:	20001328 	.word	0x20001328
 8001dc4:	20001234 	.word	0x20001234
 8001dc8:	20001230 	.word	0x20001230
 8001dcc:	20001308 	.word	0x20001308

08001dd0 <prvTaskIsTaskSuspended.part.0>:
 8001dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd4:	f383 8811 	msr	BASEPRI, r3
 8001dd8:	f3bf 8f6f 	isb	sy
 8001ddc:	f3bf 8f4f 	dsb	sy
 8001de0:	e7fe      	b.n	8001de0 <prvTaskIsTaskSuspended.part.0+0x10>
	...

08001de4 <xTaskCreate>:
	{
 8001de4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001de8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001dec:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dee:	4650      	mov	r0, sl
	{
 8001df0:	460f      	mov	r7, r1
 8001df2:	4699      	mov	r9, r3
 8001df4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001df6:	f7ff fc5d 	bl	80016b4 <pvPortMalloc>
			if( pxStack != NULL )
 8001dfa:	4605      	mov	r5, r0
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	f000 8096 	beq.w	8001f2e <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001e02:	2054      	movs	r0, #84	; 0x54
 8001e04:	f7ff fc56 	bl	80016b4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001e08:	4604      	mov	r4, r0
 8001e0a:	2800      	cmp	r0, #0
 8001e0c:	f000 808c 	beq.w	8001f28 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001e10:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001e14:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001e16:	4455      	add	r5, sl
 8001e18:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001e1a:	f025 0a07 	bic.w	sl, r5, #7
 8001e1e:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001e22:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001e24:	7859      	ldrb	r1, [r3, #1]
 8001e26:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001e2a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001e2e:	b109      	cbz	r1, 8001e34 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e30:	42bb      	cmp	r3, r7
 8001e32:	d1f7      	bne.n	8001e24 <xTaskCreate+0x40>
 8001e34:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e36:	f04f 0b00 	mov.w	fp, #0
 8001e3a:	2d06      	cmp	r5, #6
 8001e3c:	bf28      	it	cs
 8001e3e:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e40:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001e42:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001e44:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e46:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e48:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001e4c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e50:	f7ff fab9 	bl	80013c6 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e54:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e58:	f104 0018 	add.w	r0, r4, #24
 8001e5c:	f7ff fab3 	bl	80013c6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001e60:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e64:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e66:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e68:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e6a:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e6e:	464a      	mov	r2, r9
 8001e70:	4641      	mov	r1, r8
 8001e72:	4650      	mov	r0, sl
 8001e74:	f7ff fb06 	bl	8001484 <pxPortInitialiseStack>
 8001e78:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001e7a:	b106      	cbz	r6, 8001e7e <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e7c:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001e7e:	f7ff fb29 	bl	80014d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001e82:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001e84:	4e32      	ldr	r6, [pc, #200]	; (8001f50 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001f7c <xTaskCreate+0x198>
 8001e8c:	3201      	adds	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001e90:	6835      	ldr	r5, [r6, #0]
 8001e92:	2d00      	cmp	r5, #0
 8001e94:	d14e      	bne.n	8001f34 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001e96:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d11d      	bne.n	8001eda <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e9e:	eb08 0005 	add.w	r0, r8, r5
 8001ea2:	3514      	adds	r5, #20
 8001ea4:	f7ff fa84 	bl	80013b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ea8:	2d8c      	cmp	r5, #140	; 0x8c
 8001eaa:	d1f8      	bne.n	8001e9e <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001eac:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001f80 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001eb0:	4d28      	ldr	r5, [pc, #160]	; (8001f54 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001eb2:	4648      	mov	r0, r9
 8001eb4:	f7ff fa7c 	bl	80013b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001eb8:	4628      	mov	r0, r5
 8001eba:	f7ff fa79 	bl	80013b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001ebe:	4826      	ldr	r0, [pc, #152]	; (8001f58 <xTaskCreate+0x174>)
 8001ec0:	f7ff fa76 	bl	80013b0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001ec4:	4825      	ldr	r0, [pc, #148]	; (8001f5c <xTaskCreate+0x178>)
 8001ec6:	f7ff fa73 	bl	80013b0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001eca:	4825      	ldr	r0, [pc, #148]	; (8001f60 <xTaskCreate+0x17c>)
 8001ecc:	f7ff fa70 	bl	80013b0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <xTaskCreate+0x180>)
 8001ed2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ed6:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <xTaskCreate+0x184>)
 8001ed8:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001eda:	2501      	movs	r5, #1
		uxTaskNumber++;
 8001edc:	4a23      	ldr	r2, [pc, #140]	; (8001f6c <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001ede:	4924      	ldr	r1, [pc, #144]	; (8001f70 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001ee0:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001ee2:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001ee8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001eea:	fa05 f302 	lsl.w	r3, r5, r2
 8001eee:	4303      	orrs	r3, r0
 8001ef0:	2014      	movs	r0, #20
 8001ef2:	600b      	str	r3, [r1, #0]
 8001ef4:	fb00 8002 	mla	r0, r0, r2, r8
 8001ef8:	4639      	mov	r1, r7
 8001efa:	f7ff fa67 	bl	80013cc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001efe:	f7ff fb0b 	bl	8001518 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001f02:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <xTaskCreate+0x190>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	b163      	cbz	r3, 8001f22 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001f08:	6833      	ldr	r3, [r6, #0]
 8001f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d207      	bcs.n	8001f22 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <xTaskCreate+0x194>)
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	f3bf 8f4f 	dsb	sy
 8001f1e:	f3bf 8f6f 	isb	sy
	}
 8001f22:	4628      	mov	r0, r5
 8001f24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001f28:	4628      	mov	r0, r5
 8001f2a:	f7ff fc51 	bl	80017d0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f2e:	f04f 35ff 	mov.w	r5, #4294967295
 8001f32:	e7f6      	b.n	8001f22 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <xTaskCreate+0x190>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1ce      	bne.n	8001eda <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001f3c:	6833      	ldr	r3, [r6, #0]
 8001f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f42:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001f44:	bf98      	it	ls
 8001f46:	6034      	strls	r4, [r6, #0]
 8001f48:	e7c7      	b.n	8001eda <xTaskCreate+0xf6>
 8001f4a:	bf00      	nop
 8001f4c:	200012c4 	.word	0x200012c4
 8001f50:	2000122c 	.word	0x2000122c
 8001f54:	200012f0 	.word	0x200012f0
 8001f58:	20001310 	.word	0x20001310
 8001f5c:	2000133c 	.word	0x2000133c
 8001f60:	20001328 	.word	0x20001328
 8001f64:	20001230 	.word	0x20001230
 8001f68:	20001234 	.word	0x20001234
 8001f6c:	200012d4 	.word	0x200012d4
 8001f70:	200012d8 	.word	0x200012d8
 8001f74:	20001324 	.word	0x20001324
 8001f78:	e000ed04 	.word	0xe000ed04
 8001f7c:	20001238 	.word	0x20001238
 8001f80:	200012dc 	.word	0x200012dc

08001f84 <vTaskStartScheduler>:
{
 8001f84:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001f86:	2400      	movs	r4, #0
 8001f88:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <vTaskStartScheduler+0x60>)
 8001f8a:	9400      	str	r4, [sp, #0]
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	2280      	movs	r2, #128	; 0x80
 8001f90:	4623      	mov	r3, r4
 8001f92:	4915      	ldr	r1, [pc, #84]	; (8001fe8 <vTaskStartScheduler+0x64>)
 8001f94:	4815      	ldr	r0, [pc, #84]	; (8001fec <vTaskStartScheduler+0x68>)
 8001f96:	f7ff ff25 	bl	8001de4 <xTaskCreate>
	if( xReturn == pdPASS )
 8001f9a:	2801      	cmp	r0, #1
 8001f9c:	d114      	bne.n	8001fc8 <vTaskStartScheduler+0x44>
 8001f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa2:	f383 8811 	msr	BASEPRI, r3
 8001fa6:	f3bf 8f6f 	isb	sy
 8001faa:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001fae:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <vTaskStartScheduler+0x6c>)
 8001fb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <vTaskStartScheduler+0x70>)
 8001fb8:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001fba:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <vTaskStartScheduler+0x74>)
 8001fbc:	601c      	str	r4, [r3, #0]
}
 8001fbe:	b002      	add	sp, #8
 8001fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001fc4:	f7ff bb08 	b.w	80015d8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001fc8:	3001      	adds	r0, #1
 8001fca:	d108      	bne.n	8001fde <vTaskStartScheduler+0x5a>
 8001fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd0:	f383 8811 	msr	BASEPRI, r3
 8001fd4:	f3bf 8f6f 	isb	sy
 8001fd8:	f3bf 8f4f 	dsb	sy
 8001fdc:	e7fe      	b.n	8001fdc <vTaskStartScheduler+0x58>
}
 8001fde:	b002      	add	sp, #8
 8001fe0:	bd10      	pop	{r4, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20001304 	.word	0x20001304
 8001fe8:	08003fc3 	.word	0x08003fc3
 8001fec:	08002269 	.word	0x08002269
 8001ff0:	20001308 	.word	0x20001308
 8001ff4:	20001324 	.word	0x20001324
 8001ff8:	20001350 	.word	0x20001350

08001ffc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001ffc:	4a02      	ldr	r2, [pc, #8]	; (8002008 <vTaskSuspendAll+0xc>)
 8001ffe:	6813      	ldr	r3, [r2, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	200012d0 	.word	0x200012d0

0800200c <xTaskIncrementTick>:
{
 800200c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002010:	4b3c      	ldr	r3, [pc, #240]	; (8002104 <xTaskIncrementTick+0xf8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d153      	bne.n	80020c0 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8002018:	4b3b      	ldr	r3, [pc, #236]	; (8002108 <xTaskIncrementTick+0xfc>)
 800201a:	681c      	ldr	r4, [r3, #0]
 800201c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800201e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8002020:	b9bc      	cbnz	r4, 8002052 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002022:	4b3a      	ldr	r3, [pc, #232]	; (800210c <xTaskIncrementTick+0x100>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	b142      	cbz	r2, 800203c <xTaskIncrementTick+0x30>
 800202a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800202e:	f383 8811 	msr	BASEPRI, r3
 8002032:	f3bf 8f6f 	isb	sy
 8002036:	f3bf 8f4f 	dsb	sy
 800203a:	e7fe      	b.n	800203a <xTaskIncrementTick+0x2e>
 800203c:	4a34      	ldr	r2, [pc, #208]	; (8002110 <xTaskIncrementTick+0x104>)
 800203e:	6819      	ldr	r1, [r3, #0]
 8002040:	6810      	ldr	r0, [r2, #0]
 8002042:	6018      	str	r0, [r3, #0]
 8002044:	6011      	str	r1, [r2, #0]
 8002046:	4a33      	ldr	r2, [pc, #204]	; (8002114 <xTaskIncrementTick+0x108>)
 8002048:	6813      	ldr	r3, [r2, #0]
 800204a:	3301      	adds	r3, #1
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	f7ff fe67 	bl	8001d20 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002052:	4d31      	ldr	r5, [pc, #196]	; (8002118 <xTaskIncrementTick+0x10c>)
 8002054:	f04f 0b00 	mov.w	fp, #0
 8002058:	682b      	ldr	r3, [r5, #0]
 800205a:	4f30      	ldr	r7, [pc, #192]	; (800211c <xTaskIncrementTick+0x110>)
 800205c:	429c      	cmp	r4, r3
 800205e:	d33e      	bcc.n	80020de <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002060:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800210c <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002064:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800212c <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002068:	f8d8 2000 	ldr.w	r2, [r8]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	bb72      	cbnz	r2, 80020ce <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002070:	f04f 32ff 	mov.w	r2, #4294967295
 8002074:	602a      	str	r2, [r5, #0]
					break;
 8002076:	e032      	b.n	80020de <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002078:	f106 0a04 	add.w	sl, r6, #4
 800207c:	4650      	mov	r0, sl
 800207e:	f7ff f9c8 	bl	8001412 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002082:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002084:	b119      	cbz	r1, 800208e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002086:	f106 0018 	add.w	r0, r6, #24
 800208a:	f7ff f9c2 	bl	8001412 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800208e:	2201      	movs	r2, #1
 8002090:	f04f 0e14 	mov.w	lr, #20
 8002094:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002096:	f8d9 3000 	ldr.w	r3, [r9]
 800209a:	fa02 f100 	lsl.w	r1, r2, r0
 800209e:	4319      	orrs	r1, r3
 80020a0:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <xTaskIncrementTick+0x114>)
 80020a2:	f8c9 1000 	str.w	r1, [r9]
 80020a6:	fb0e 3000 	mla	r0, lr, r0, r3
 80020aa:	4651      	mov	r1, sl
 80020ac:	f7ff f98e 	bl	80013cc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80020b0:	6838      	ldr	r0, [r7, #0]
 80020b2:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80020b4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80020b6:	4291      	cmp	r1, r2
 80020b8:	bf28      	it	cs
 80020ba:	f04f 0b01 	movcs.w	fp, #1
 80020be:	e7d3      	b.n	8002068 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80020c0:	4a18      	ldr	r2, [pc, #96]	; (8002124 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 80020c2:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80020c6:	6813      	ldr	r3, [r2, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	e011      	b.n	80020f2 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020ce:	f8d8 2000 	ldr.w	r2, [r8]
 80020d2:	68d2      	ldr	r2, [r2, #12]
 80020d4:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80020d6:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80020d8:	428c      	cmp	r4, r1
 80020da:	d2cd      	bcs.n	8002078 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80020dc:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <xTaskIncrementTick+0x114>)
 80020e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020e4:	2214      	movs	r2, #20
 80020e6:	434a      	muls	r2, r1
 80020e8:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80020ea:	2a02      	cmp	r2, #2
 80020ec:	bf28      	it	cs
 80020ee:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80020f2:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <xTaskIncrementTick+0x11c>)
 80020f4:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80020f6:	2a00      	cmp	r2, #0
 80020f8:	bf18      	it	ne
 80020fa:	f04f 0b01 	movne.w	fp, #1
}
 80020fe:	4658      	mov	r0, fp
 8002100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002104:	200012d0 	.word	0x200012d0
 8002108:	20001350 	.word	0x20001350
 800210c:	20001230 	.word	0x20001230
 8002110:	20001234 	.word	0x20001234
 8002114:	2000130c 	.word	0x2000130c
 8002118:	20001308 	.word	0x20001308
 800211c:	2000122c 	.word	0x2000122c
 8002120:	20001238 	.word	0x20001238
 8002124:	200012cc 	.word	0x200012cc
 8002128:	20001354 	.word	0x20001354
 800212c:	200012d8 	.word	0x200012d8

08002130 <xTaskResumeAll>:
{
 8002130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002134:	4c31      	ldr	r4, [pc, #196]	; (80021fc <xTaskResumeAll+0xcc>)
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	b943      	cbnz	r3, 800214c <xTaskResumeAll+0x1c>
 800213a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213e:	f383 8811 	msr	BASEPRI, r3
 8002142:	f3bf 8f6f 	isb	sy
 8002146:	f3bf 8f4f 	dsb	sy
 800214a:	e7fe      	b.n	800214a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800214c:	f7ff f9c2 	bl	80014d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	3b01      	subs	r3, #1
 8002154:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002156:	6824      	ldr	r4, [r4, #0]
 8002158:	b12c      	cbz	r4, 8002166 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800215a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800215c:	f7ff f9dc 	bl	8001518 <vPortExitCritical>
}
 8002160:	4620      	mov	r0, r4
 8002162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002166:	4b26      	ldr	r3, [pc, #152]	; (8002200 <xTaskResumeAll+0xd0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f5      	beq.n	800215a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800216e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002218 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002172:	4f24      	ldr	r7, [pc, #144]	; (8002204 <xTaskResumeAll+0xd4>)
 8002174:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800221c <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002178:	f8d9 3000 	ldr.w	r3, [r9]
 800217c:	b9e3      	cbnz	r3, 80021b8 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800217e:	b10c      	cbz	r4, 8002184 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002180:	f7ff fdce 	bl	8001d20 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002184:	4d20      	ldr	r5, [pc, #128]	; (8002208 <xTaskResumeAll+0xd8>)
 8002186:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002188:	b144      	cbz	r4, 800219c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800218a:	2701      	movs	r7, #1
 800218c:	4e1f      	ldr	r6, [pc, #124]	; (800220c <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 800218e:	f7ff ff3d 	bl	800200c <xTaskIncrementTick>
 8002192:	b100      	cbz	r0, 8002196 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002194:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002196:	3c01      	subs	r4, #1
 8002198:	d1f9      	bne.n	800218e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800219a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <xTaskResumeAll+0xdc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0da      	beq.n	800215a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80021a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <xTaskResumeAll+0xe0>)
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80021b4:	2401      	movs	r4, #1
 80021b6:	e7d1      	b.n	800215c <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80021b8:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 80021bc:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80021be:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021c0:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021c2:	f104 0018 	add.w	r0, r4, #24
 80021c6:	f7ff f924 	bl	8001412 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021ca:	4630      	mov	r0, r6
 80021cc:	f7ff f921 	bl	8001412 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80021d0:	2014      	movs	r0, #20
 80021d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	fa05 f302 	lsl.w	r3, r5, r2
 80021da:	430b      	orrs	r3, r1
 80021dc:	fb00 8002 	mla	r0, r0, r2, r8
 80021e0:	4631      	mov	r1, r6
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	f7ff f8f2 	bl	80013cc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <xTaskResumeAll+0xe4>)
 80021ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80021f2:	bf24      	itt	cs
 80021f4:	4b05      	ldrcs	r3, [pc, #20]	; (800220c <xTaskResumeAll+0xdc>)
 80021f6:	601d      	strcs	r5, [r3, #0]
 80021f8:	e7be      	b.n	8002178 <xTaskResumeAll+0x48>
 80021fa:	bf00      	nop
 80021fc:	200012d0 	.word	0x200012d0
 8002200:	200012c4 	.word	0x200012c4
 8002204:	200012d8 	.word	0x200012d8
 8002208:	200012cc 	.word	0x200012cc
 800220c:	20001354 	.word	0x20001354
 8002210:	e000ed04 	.word	0xe000ed04
 8002214:	2000122c 	.word	0x2000122c
 8002218:	20001310 	.word	0x20001310
 800221c:	20001238 	.word	0x20001238

08002220 <vTaskDelay>:
	{
 8002220:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002222:	b940      	cbnz	r0, 8002236 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002228:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <vTaskDelay+0x40>)
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	f3bf 8f4f 	dsb	sy
 8002230:	f3bf 8f6f 	isb	sy
 8002234:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <vTaskDelay+0x44>)
 8002238:	6819      	ldr	r1, [r3, #0]
 800223a:	b141      	cbz	r1, 800224e <vTaskDelay+0x2e>
 800223c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002240:	f383 8811 	msr	BASEPRI, r3
 8002244:	f3bf 8f6f 	isb	sy
 8002248:	f3bf 8f4f 	dsb	sy
 800224c:	e7fe      	b.n	800224c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800224e:	f7ff fed5 	bl	8001ffc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002252:	f7ff fd77 	bl	8001d44 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002256:	f7ff ff6b 	bl	8002130 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800225a:	2800      	cmp	r0, #0
 800225c:	d0e2      	beq.n	8002224 <vTaskDelay+0x4>
 800225e:	bd08      	pop	{r3, pc}
 8002260:	e000ed04 	.word	0xe000ed04
 8002264:	200012d0 	.word	0x200012d0

08002268 <prvIdleTask>:
{
 8002268:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800226a:	4e17      	ldr	r6, [pc, #92]	; (80022c8 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800226c:	4c17      	ldr	r4, [pc, #92]	; (80022cc <prvIdleTask+0x64>)
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	b963      	cbnz	r3, 800228c <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <prvIdleTask+0x68>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d9f8      	bls.n	800226c <prvIdleTask+0x4>
				taskYIELD();
 800227a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <prvIdleTask+0x6c>)
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	f3bf 8f4f 	dsb	sy
 8002286:	f3bf 8f6f 	isb	sy
 800228a:	e7ef      	b.n	800226c <prvIdleTask+0x4>
			vTaskSuspendAll();
 800228c:	f7ff feb6 	bl	8001ffc <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002290:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8002292:	f7ff ff4d 	bl	8002130 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8002296:	2d00      	cmp	r5, #0
 8002298:	d0e9      	beq.n	800226e <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800229a:	f7ff f91b 	bl	80014d4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800229e:	68f3      	ldr	r3, [r6, #12]
 80022a0:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022a2:	1d28      	adds	r0, r5, #4
 80022a4:	f7ff f8b5 	bl	8001412 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80022a8:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <prvIdleTask+0x70>)
 80022aa:	6813      	ldr	r3, [r2, #0]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80022b6:	f7ff f92f 	bl	8001518 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80022ba:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80022bc:	f7ff fa88 	bl	80017d0 <vPortFree>
			vPortFree( pxTCB );
 80022c0:	4628      	mov	r0, r5
 80022c2:	f7ff fa85 	bl	80017d0 <vPortFree>
 80022c6:	e7d2      	b.n	800226e <prvIdleTask+0x6>
 80022c8:	2000133c 	.word	0x2000133c
 80022cc:	200012c8 	.word	0x200012c8
 80022d0:	20001238 	.word	0x20001238
 80022d4:	e000ed04 	.word	0xe000ed04
 80022d8:	200012c4 	.word	0x200012c4

080022dc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80022dc:	4b17      	ldr	r3, [pc, #92]	; (800233c <vTaskSwitchContext+0x60>)
{
 80022de:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4b17      	ldr	r3, [pc, #92]	; (8002340 <vTaskSwitchContext+0x64>)
 80022e4:	b112      	cbz	r2, 80022ec <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80022e6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80022ec:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <vTaskSwitchContext+0x68>)
 80022f0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	2214      	movs	r2, #20
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f1c3 031f 	rsb	r3, r3, #31
 80022fe:	435a      	muls	r2, r3
 8002300:	4911      	ldr	r1, [pc, #68]	; (8002348 <vTaskSwitchContext+0x6c>)
 8002302:	588c      	ldr	r4, [r1, r2]
 8002304:	1888      	adds	r0, r1, r2
 8002306:	b944      	cbnz	r4, 800231a <vTaskSwitchContext+0x3e>
	__asm volatile
 8002308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	e7fe      	b.n	8002318 <vTaskSwitchContext+0x3c>
 800231a:	6844      	ldr	r4, [r0, #4]
 800231c:	3208      	adds	r2, #8
 800231e:	6864      	ldr	r4, [r4, #4]
 8002320:	440a      	add	r2, r1
 8002322:	4294      	cmp	r4, r2
 8002324:	bf08      	it	eq
 8002326:	6862      	ldreq	r2, [r4, #4]
 8002328:	6044      	str	r4, [r0, #4]
 800232a:	bf08      	it	eq
 800232c:	6042      	streq	r2, [r0, #4]
 800232e:	2214      	movs	r2, #20
 8002330:	fb02 1303 	mla	r3, r2, r3, r1
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <vTaskSwitchContext+0x70>)
 800233a:	e7d5      	b.n	80022e8 <vTaskSwitchContext+0xc>
 800233c:	200012d0 	.word	0x200012d0
 8002340:	20001354 	.word	0x20001354
 8002344:	200012d8 	.word	0x200012d8
 8002348:	20001238 	.word	0x20001238
 800234c:	2000122c 	.word	0x2000122c

08002350 <vTaskPlaceOnEventList>:
{
 8002350:	b510      	push	{r4, lr}
 8002352:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8002354:	b940      	cbnz	r0, 8002368 <vTaskPlaceOnEventList+0x18>
 8002356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235a:	f383 8811 	msr	BASEPRI, r3
 800235e:	f3bf 8f6f 	isb	sy
 8002362:	f3bf 8f4f 	dsb	sy
 8002366:	e7fe      	b.n	8002366 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <vTaskPlaceOnEventList+0x30>)
 800236a:	6819      	ldr	r1, [r3, #0]
 800236c:	3118      	adds	r1, #24
 800236e:	f7ff f839 	bl	80013e4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002372:	4620      	mov	r0, r4
}
 8002374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002378:	2101      	movs	r1, #1
 800237a:	f7ff bce3 	b.w	8001d44 <prvAddCurrentTaskToDelayedList>
 800237e:	bf00      	nop
 8002380:	2000122c 	.word	0x2000122c

08002384 <xTaskRemoveFromEventList>:
{
 8002384:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002386:	68c3      	ldr	r3, [r0, #12]
 8002388:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800238a:	b944      	cbnz	r4, 800239e <xTaskRemoveFromEventList+0x1a>
 800238c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	e7fe      	b.n	800239c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800239e:	f104 0518 	add.w	r5, r4, #24
 80023a2:	4628      	mov	r0, r5
 80023a4:	f7ff f835 	bl	8001412 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <xTaskRemoveFromEventList+0x6c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	b9e3      	cbnz	r3, 80023e8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80023ae:	1d25      	adds	r5, r4, #4
 80023b0:	4628      	mov	r0, r5
 80023b2:	f7ff f82e 	bl	8001412 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80023b6:	2301      	movs	r3, #1
 80023b8:	490e      	ldr	r1, [pc, #56]	; (80023f4 <xTaskRemoveFromEventList+0x70>)
 80023ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023bc:	6808      	ldr	r0, [r1, #0]
 80023be:	4093      	lsls	r3, r2
 80023c0:	4303      	orrs	r3, r0
 80023c2:	2014      	movs	r0, #20
 80023c4:	600b      	str	r3, [r1, #0]
 80023c6:	4629      	mov	r1, r5
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <xTaskRemoveFromEventList+0x74>)
 80023ca:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80023ce:	f7fe fffd 	bl	80013cc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <xTaskRemoveFromEventList+0x78>)
 80023d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80023dc:	bf85      	ittet	hi
 80023de:	2001      	movhi	r0, #1
 80023e0:	4b07      	ldrhi	r3, [pc, #28]	; (8002400 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 80023e2:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 80023e4:	6018      	strhi	r0, [r3, #0]
}
 80023e6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80023e8:	4629      	mov	r1, r5
 80023ea:	4806      	ldr	r0, [pc, #24]	; (8002404 <xTaskRemoveFromEventList+0x80>)
 80023ec:	e7ef      	b.n	80023ce <xTaskRemoveFromEventList+0x4a>
 80023ee:	bf00      	nop
 80023f0:	200012d0 	.word	0x200012d0
 80023f4:	200012d8 	.word	0x200012d8
 80023f8:	20001238 	.word	0x20001238
 80023fc:	2000122c 	.word	0x2000122c
 8002400:	20001354 	.word	0x20001354
 8002404:	20001310 	.word	0x20001310

08002408 <vTaskSetTimeOutState>:
{
 8002408:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800240a:	b908      	cbnz	r0, 8002410 <vTaskSetTimeOutState+0x8>
 800240c:	f7ff fce0 	bl	8001dd0 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <vTaskSetTimeOutState+0x18>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002416:	4b03      	ldr	r3, [pc, #12]	; (8002424 <vTaskSetTimeOutState+0x1c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6043      	str	r3, [r0, #4]
 800241c:	bd08      	pop	{r3, pc}
 800241e:	bf00      	nop
 8002420:	2000130c 	.word	0x2000130c
 8002424:	20001350 	.word	0x20001350

08002428 <xTaskCheckForTimeOut>:
{
 8002428:	b538      	push	{r3, r4, r5, lr}
 800242a:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 800242c:	4604      	mov	r4, r0
 800242e:	b940      	cbnz	r0, 8002442 <xTaskCheckForTimeOut+0x1a>
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	e7fe      	b.n	8002440 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8002442:	b941      	cbnz	r1, 8002456 <xTaskCheckForTimeOut+0x2e>
 8002444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002448:	f383 8811 	msr	BASEPRI, r3
 800244c:	f3bf 8f6f 	isb	sy
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	e7fe      	b.n	8002454 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8002456:	f7ff f83d 	bl	80014d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <xTaskCheckForTimeOut+0x6c>)
 800245c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800245e:	682b      	ldr	r3, [r5, #0]
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	d010      	beq.n	8002486 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002464:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <xTaskCheckForTimeOut+0x70>)
 8002466:	6820      	ldr	r0, [r4, #0]
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	4290      	cmp	r0, r2
 800246c:	6862      	ldr	r2, [r4, #4]
 800246e:	d001      	beq.n	8002474 <xTaskCheckForTimeOut+0x4c>
 8002470:	4291      	cmp	r1, r2
 8002472:	d20d      	bcs.n	8002490 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002474:	1a88      	subs	r0, r1, r2
 8002476:	4283      	cmp	r3, r0
 8002478:	d90a      	bls.n	8002490 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800247a:	1a5b      	subs	r3, r3, r1
 800247c:	4413      	add	r3, r2
 800247e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002480:	4620      	mov	r0, r4
 8002482:	f7ff ffc1 	bl	8002408 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8002486:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002488:	f7ff f846 	bl	8001518 <vPortExitCritical>
}
 800248c:	4620      	mov	r0, r4
 800248e:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8002490:	2401      	movs	r4, #1
 8002492:	e7f9      	b.n	8002488 <xTaskCheckForTimeOut+0x60>
 8002494:	20001350 	.word	0x20001350
 8002498:	2000130c 	.word	0x2000130c

0800249c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800249c:	2201      	movs	r2, #1
 800249e:	4b01      	ldr	r3, [pc, #4]	; (80024a4 <vTaskMissedYield+0x8>)
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	4770      	bx	lr
 80024a4:	20001354 	.word	0x20001354

080024a8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <xTaskGetSchedulerState+0x18>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	b133      	cbz	r3, 80024bc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <xTaskGetSchedulerState+0x1c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80024b4:	bf0c      	ite	eq
 80024b6:	2002      	moveq	r0, #2
 80024b8:	2000      	movne	r0, #0
 80024ba:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80024bc:	2001      	movs	r0, #1
	}
 80024be:	4770      	bx	lr
 80024c0:	20001324 	.word	0x20001324
 80024c4:	200012d0 	.word	0x200012d0

080024c8 <vTaskPriorityInherit>:
	{
 80024c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80024cc:	4604      	mov	r4, r0
 80024ce:	2800      	cmp	r0, #0
 80024d0:	d039      	beq.n	8002546 <vTaskPriorityInherit+0x7e>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80024d2:	4d1e      	ldr	r5, [pc, #120]	; (800254c <vTaskPriorityInherit+0x84>)
 80024d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80024d6:	682a      	ldr	r2, [r5, #0]
 80024d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024da:	4293      	cmp	r3, r2
 80024dc:	d233      	bcs.n	8002546 <vTaskPriorityInherit+0x7e>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80024de:	2714      	movs	r7, #20
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80024e0:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80024e2:	4e1b      	ldr	r6, [pc, #108]	; (8002550 <vTaskPriorityInherit+0x88>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80024e4:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024e6:	bfa8      	it	ge
 80024e8:	682a      	ldrge	r2, [r5, #0]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80024ea:	fb07 6303 	mla	r3, r7, r3, r6
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024ee:	bfa2      	ittt	ge
 80024f0:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 80024f2:	f1c2 0207 	rsbge	r2, r2, #7
 80024f6:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80024f8:	6942      	ldr	r2, [r0, #20]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d120      	bne.n	8002540 <vTaskPriorityInherit+0x78>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024fe:	f100 0804 	add.w	r8, r0, #4
 8002502:	4640      	mov	r0, r8
 8002504:	f7fe ff85 	bl	8001412 <uxListRemove>
 8002508:	4a12      	ldr	r2, [pc, #72]	; (8002554 <vTaskPriorityInherit+0x8c>)
 800250a:	b948      	cbnz	r0, 8002520 <vTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800250c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800250e:	4347      	muls	r7, r0
 8002510:	59f3      	ldr	r3, [r6, r7]
 8002512:	b92b      	cbnz	r3, 8002520 <vTaskPriorityInherit+0x58>
 8002514:	2101      	movs	r1, #1
 8002516:	6813      	ldr	r3, [r2, #0]
 8002518:	4081      	lsls	r1, r0
 800251a:	ea23 0301 	bic.w	r3, r3, r1
 800251e:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002520:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8002522:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002524:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002526:	2301      	movs	r3, #1
 8002528:	4083      	lsls	r3, r0
 800252a:	430b      	orrs	r3, r1
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	2314      	movs	r3, #20
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002530:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002532:	4641      	mov	r1, r8
 8002534:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8002538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 800253c:	f7fe bf46 	b.w	80013cc <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002540:	682b      	ldr	r3, [r5, #0]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800254a:	bf00      	nop
 800254c:	2000122c 	.word	0x2000122c
 8002550:	20001238 	.word	0x20001238
 8002554:	200012d8 	.word	0x200012d8

08002558 <xTaskPriorityDisinherit>:
	{
 8002558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800255a:	4604      	mov	r4, r0
 800255c:	b908      	cbnz	r0, 8002562 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800255e:	2000      	movs	r0, #0
 8002560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8002562:	4b22      	ldr	r3, [pc, #136]	; (80025ec <xTaskPriorityDisinherit+0x94>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4298      	cmp	r0, r3
 8002568:	d008      	beq.n	800257c <xTaskPriorityDisinherit+0x24>
 800256a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256e:	f383 8811 	msr	BASEPRI, r3
 8002572:	f3bf 8f6f 	isb	sy
 8002576:	f3bf 8f4f 	dsb	sy
 800257a:	e7fe      	b.n	800257a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800257c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800257e:	b943      	cbnz	r3, 8002592 <xTaskPriorityDisinherit+0x3a>
 8002580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	e7fe      	b.n	8002590 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002592:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002594:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8002596:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002598:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800259a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800259c:	d0df      	beq.n	800255e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1dd      	bne.n	800255e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025a2:	1d05      	adds	r5, r0, #4
 80025a4:	4628      	mov	r0, r5
 80025a6:	f7fe ff34 	bl	8001412 <uxListRemove>
 80025aa:	4e11      	ldr	r6, [pc, #68]	; (80025f0 <xTaskPriorityDisinherit+0x98>)
 80025ac:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <xTaskPriorityDisinherit+0x9c>)
 80025ae:	b950      	cbnz	r0, 80025c6 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80025b0:	2114      	movs	r1, #20
 80025b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80025b4:	4379      	muls	r1, r7
 80025b6:	5873      	ldr	r3, [r6, r1]
 80025b8:	b92b      	cbnz	r3, 80025c6 <xTaskPriorityDisinherit+0x6e>
 80025ba:	2001      	movs	r0, #1
 80025bc:	6813      	ldr	r3, [r2, #0]
 80025be:	40b8      	lsls	r0, r7
 80025c0:	ea23 0300 	bic.w	r3, r3, r0
 80025c4:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80025c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025c8:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80025cc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025ce:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80025d0:	2401      	movs	r4, #1
 80025d2:	6811      	ldr	r1, [r2, #0]
 80025d4:	fa04 f003 	lsl.w	r0, r4, r3
 80025d8:	4308      	orrs	r0, r1
 80025da:	6010      	str	r0, [r2, #0]
 80025dc:	2014      	movs	r0, #20
 80025de:	4629      	mov	r1, r5
 80025e0:	fb00 6003 	mla	r0, r0, r3, r6
 80025e4:	f7fe fef2 	bl	80013cc <vListInsertEnd>
					xReturn = pdTRUE;
 80025e8:	4620      	mov	r0, r4
	}
 80025ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025ec:	2000122c 	.word	0x2000122c
 80025f0:	20001238 	.word	0x20001238
 80025f4:	200012d8 	.word	0x200012d8

080025f8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <pvTaskIncrementMutexHeldCount+0x14>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	b11a      	cbz	r2, 8002606 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8002602:	3201      	adds	r2, #1
 8002604:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8002606:	6818      	ldr	r0, [r3, #0]
	}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	2000122c 	.word	0x2000122c

08002610 <NVIC_EncodePriority.constprop.1>:
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002610:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002614:	f1c0 0207 	rsb	r2, r0, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002618:	1d03      	adds	r3, r0, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800261a:	2a04      	cmp	r2, #4
 800261c:	bf28      	it	cs
 800261e:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002620:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002622:	f04f 0301 	mov.w	r3, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002626:	bf98      	it	ls
 8002628:	2000      	movls	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262a:	fa03 f302 	lsl.w	r3, r3, r2
 800262e:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002632:	bf88      	it	hi
 8002634:	3803      	subhi	r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002636:	f003 0308 	and.w	r3, r3, #8
         );
}
 800263a:	fa03 f000 	lsl.w	r0, r3, r0
 800263e:	4770      	bx	lr

08002640 <GPIO_Init>:
#include "encoder_driver.h"

static bool button_status = false, rotate_status = false, rotate_pin_A, rotate_pin_B;

void GPIO_Init()
{
 8002640:	b570      	push	{r4, r5, r6, lr}
    LL_EXTI_InitTypeDef EXTI_InitStruct = {0};

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
    EXTI_InitStruct.LineCommand = ENABLE;
 8002642:	2401      	movs	r4, #1
    LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8002644:	2500      	movs	r5, #0
    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8002646:	2602      	movs	r6, #2
{
 8002648:	b088      	sub	sp, #32
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
    LL_EXTI_Init(&EXTI_InitStruct);
 800264a:	a801      	add	r0, sp, #4
    LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800264c:	9502      	str	r5, [sp, #8]
    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 800264e:	9601      	str	r6, [sp, #4]
    EXTI_InitStruct.LineCommand = ENABLE;
 8002650:	f88d 4008 	strb.w	r4, [sp, #8]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002654:	f88d 400a 	strb.w	r4, [sp, #10]
    LL_EXTI_Init(&EXTI_InitStruct);
 8002658:	f7fe fbd4 	bl	8000e04 <LL_EXTI_Init>

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 800265c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    EXTI_InitStruct.LineCommand = ENABLE;
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
    LL_EXTI_Init(&EXTI_InitStruct);
 8002660:	a801      	add	r0, sp, #4
    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 8002662:	9301      	str	r3, [sp, #4]
    EXTI_InitStruct.LineCommand = ENABLE;
 8002664:	f88d 4008 	strb.w	r4, [sp, #8]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002668:	f88d 5009 	strb.w	r5, [sp, #9]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800266c:	f88d 600a 	strb.w	r6, [sp, #10]
    LL_EXTI_Init(&EXTI_InitStruct);
 8002670:	f7fe fbc8 	bl	8000e04 <LL_EXTI_Init>
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002674:	4921      	ldr	r1, [pc, #132]	; (80026fc <GPIO_Init+0xbc>)
 8002676:	23f0      	movs	r3, #240	; 0xf0
 8002678:	688a      	ldr	r2, [r1, #8]
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002686:	fa04 f303 	lsl.w	r3, r4, r3
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
 800268e:	690b      	ldr	r3, [r1, #16]
 8002690:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002694:	fa92 f2a2 	rbit	r2, r2
 8002698:	fab2 f282 	clz	r2, r2
 800269c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026a0:	4094      	lsls	r4, r2
 80026a2:	431c      	orrs	r4, r3

    LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE1);
    LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE10);


	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	2214      	movs	r2, #20
 80026a6:	610c      	str	r4, [r1, #16]
 80026a8:	a803      	add	r0, sp, #12
 80026aa:	4629      	mov	r1, r5
 80026ac:	f000 fe1f 	bl	80032ee <memset>

    GPIO_InitStruct.Pin = LL_GPIO_PIN_1 | LL_GPIO_PIN_10 | LL_GPIO_PIN_11;
 80026b0:	4b13      	ldr	r3, [pc, #76]	; (8002700 <GPIO_Init+0xc0>)
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b2:	4c14      	ldr	r4, [pc, #80]	; (8002704 <GPIO_Init+0xc4>)
 80026b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80026b6:	2308      	movs	r3, #8
 80026b8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80026ba:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026bc:	a903      	add	r1, sp, #12
 80026be:	4812      	ldr	r0, [pc, #72]	; (8002708 <GPIO_Init+0xc8>)
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80026c0:	9305      	str	r3, [sp, #20]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c2:	f7fe fbf7 	bl	8000eb4 <LL_GPIO_Init>
 80026c6:	68e0      	ldr	r0, [r4, #12]

    NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),8, 0));
 80026c8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80026cc:	f7ff ffa0 	bl	8002610 <NVIC_EncodePriority.constprop.1>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026d0:	2380      	movs	r3, #128	; 0x80
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d2:	490e      	ldr	r1, [pc, #56]	; (800270c <GPIO_Init+0xcc>)
 80026d4:	0100      	lsls	r0, r0, #4
 80026d6:	b2c0      	uxtb	r0, r0
 80026d8:	f881 0307 	strb.w	r0, [r1, #775]	; 0x307
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026dc:	600b      	str	r3, [r1, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026de:	68e0      	ldr	r0, [r4, #12]
    NVIC_EnableIRQ(EXTI1_IRQn);


    NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),8, 0));
 80026e0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80026e4:	f7ff ff94 	bl	8002610 <NVIC_EncodePriority.constprop.1>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026e8:	f44f 7380 	mov.w	r3, #256	; 0x100
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	0100      	lsls	r0, r0, #4
 80026ee:	b2c0      	uxtb	r0, r0
 80026f0:	f881 0328 	strb.w	r0, [r1, #808]	; 0x328
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026f4:	604b      	str	r3, [r1, #4]
    NVIC_EnableIRQ(EXTI15_10_IRQn);
}
 80026f6:	b008      	add	sp, #32
 80026f8:	bd70      	pop	{r4, r5, r6, pc}
 80026fa:	bf00      	nop
 80026fc:	40010000 	.word	0x40010000
 8002700:	040c020e 	.word	0x040c020e
 8002704:	e000ed00 	.word	0xe000ed00
 8002708:	40010c00 	.word	0x40010c00
 800270c:	e000e100 	.word	0xe000e100

08002710 <EXTI1_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8002710:	2202      	movs	r2, #2
 8002712:	4b03      	ldr	r3, [pc, #12]	; (8002720 <EXTI1_IRQHandler+0x10>)
 8002714:	615a      	str	r2, [r3, #20]

void EXTI1_IRQHandler(void)
{
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);

	button_status = true;
 8002716:	2201      	movs	r2, #1
 8002718:	4b02      	ldr	r3, [pc, #8]	; (8002724 <EXTI1_IRQHandler+0x14>)
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40010400 	.word	0x40010400
 8002724:	20001358 	.word	0x20001358

08002728 <GetButton>:
}

bool GetButton(void)
{
	return button_status;
}
 8002728:	4b01      	ldr	r3, [pc, #4]	; (8002730 <GetButton+0x8>)
 800272a:	7818      	ldrb	r0, [r3, #0]
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20001358 	.word	0x20001358

08002734 <ClearButton>:

void ClearButton()
{
    button_status = false;
 8002734:	2200      	movs	r2, #0
 8002736:	4b01      	ldr	r3, [pc, #4]	; (800273c <ClearButton+0x8>)
 8002738:	701a      	strb	r2, [r3, #0]
 800273a:	4770      	bx	lr
 800273c:	20001358 	.word	0x20001358

08002740 <GetRotateStatus>:
}

bool GetRotateStatus(void)
{
	return rotate_status;
}
 8002740:	4b01      	ldr	r3, [pc, #4]	; (8002748 <GetRotateStatus+0x8>)
 8002742:	7818      	ldrb	r0, [r3, #0]
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	2000135b 	.word	0x2000135b

0800274c <ClearRotateStatus>:

void ClearRotateStatus()
{
    rotate_status = false;
 800274c:	2200      	movs	r2, #0
 800274e:	4b01      	ldr	r3, [pc, #4]	; (8002754 <ClearRotateStatus+0x8>)
 8002750:	701a      	strb	r2, [r3, #0]
 8002752:	4770      	bx	lr
 8002754:	2000135b 	.word	0x2000135b

08002758 <GetRotatePinB>:
}

bool GetRotatePinB()
{
	return rotate_pin_A;
}
 8002758:	4b01      	ldr	r3, [pc, #4]	; (8002760 <GetRotatePinB+0x8>)
 800275a:	7818      	ldrb	r0, [r3, #0]
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20001359 	.word	0x20001359

08002764 <GetRotatePinA>:

bool GetRotatePinA()
{
	return rotate_pin_B;
}
 8002764:	4b01      	ldr	r3, [pc, #4]	; (800276c <GetRotatePinA+0x8>)
 8002766:	7818      	ldrb	r0, [r3, #0]
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	2000135a 	.word	0x2000135a

08002770 <GPIO_Read_Pin>:
  return (READ_REG(GPIOx->IDR));
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <GPIO_Read_Pin+0x10>)
 8002772:	689b      	ldr	r3, [r3, #8]

uint8_t GPIO_Read_Pin(uint8_t mask)
{
	uint16_t port_bits = LL_GPIO_ReadInputPort(GPIOB);
	return ((port_bits & (1 << mask)) != 0);
 8002774:	b29b      	uxth	r3, r3
 8002776:	fa43 f000 	asr.w	r0, r3, r0
}
 800277a:	f000 0001 	and.w	r0, r0, #1
 800277e:	4770      	bx	lr
 8002780:	40010c00 	.word	0x40010c00

08002784 <EXTI15_10_IRQHandler>:
 8002784:	f44f 6280 	mov.w	r2, #1024	; 0x400
{
 8002788:	b508      	push	{r3, lr}
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <EXTI15_10_IRQHandler+0x34>)
		rotate_pin_A = GPIO_Read_Pin(10);
 800278c:	200a      	movs	r0, #10
 800278e:	615a      	str	r2, [r3, #20]
		rotate_status = true;
 8002790:	2201      	movs	r2, #1
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <EXTI15_10_IRQHandler+0x38>)
 8002794:	701a      	strb	r2, [r3, #0]
		rotate_pin_A = GPIO_Read_Pin(10);
 8002796:	f7ff ffeb 	bl	8002770 <GPIO_Read_Pin>
 800279a:	3000      	adds	r0, #0
 800279c:	bf18      	it	ne
 800279e:	2001      	movne	r0, #1
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <EXTI15_10_IRQHandler+0x3c>)
 80027a2:	7018      	strb	r0, [r3, #0]
		rotate_pin_B = GPIO_Read_Pin(11);
 80027a4:	200b      	movs	r0, #11
 80027a6:	f7ff ffe3 	bl	8002770 <GPIO_Read_Pin>
 80027aa:	3000      	adds	r0, #0
 80027ac:	bf18      	it	ne
 80027ae:	2001      	movne	r0, #1
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <EXTI15_10_IRQHandler+0x40>)
 80027b2:	7018      	strb	r0, [r3, #0]
 80027b4:	bd08      	pop	{r3, pc}
 80027b6:	bf00      	nop
 80027b8:	40010400 	.word	0x40010400
 80027bc:	2000135b 	.word	0x2000135b
 80027c0:	20001359 	.word	0x20001359
 80027c4:	2000135a 	.word	0x2000135a

080027c8 <EncoderQueueInit>:

xQueueHandle encoder_queue;
EncoderRotateInfo xEncoder_info;

void EncoderQueueInit(void)
{
 80027c8:	b508      	push	{r3, lr}
	encoder_queue = xQueueCreate( 2, sizeof(EncoderRotateInfo));
 80027ca:	2200      	movs	r2, #0
 80027cc:	2104      	movs	r1, #4
 80027ce:	2002      	movs	r0, #2
 80027d0:	f7ff f8f6 	bl	80019c0 <xQueueGenericCreate>
 80027d4:	4b01      	ldr	r3, [pc, #4]	; (80027dc <EncoderQueueInit+0x14>)
 80027d6:	6018      	str	r0, [r3, #0]
 80027d8:	bd08      	pop	{r3, pc}
 80027da:	bf00      	nop
 80027dc:	20001978 	.word	0x20001978

080027e0 <EncoderQueue_Send>:
}

void EncoderQueue_Send(uint16_t value, uint8_t button)
{
 80027e0:	b410      	push	{r4}
	const portTickType xTicksToWait = 100 / portTICK_RATE_MS;
	xEncoder_info.button = button;
 80027e2:	4c05      	ldr	r4, [pc, #20]	; (80027f8 <EncoderQueue_Send+0x18>)
	xEncoder_info.state = value;
	xQueueSendToBack(encoder_queue, &xEncoder_info, xTicksToWait);
 80027e4:	2300      	movs	r3, #0
	xEncoder_info.state = value;
 80027e6:	8020      	strh	r0, [r4, #0]
	xQueueSendToBack(encoder_queue, &xEncoder_info, xTicksToWait);
 80027e8:	4804      	ldr	r0, [pc, #16]	; (80027fc <EncoderQueue_Send+0x1c>)
	xEncoder_info.button = button;
 80027ea:	70a1      	strb	r1, [r4, #2]
	xQueueSendToBack(encoder_queue, &xEncoder_info, xTicksToWait);
 80027ec:	2264      	movs	r2, #100	; 0x64
 80027ee:	4621      	mov	r1, r4
 80027f0:	6800      	ldr	r0, [r0, #0]
}
 80027f2:	bc10      	pop	{r4}
	xQueueSendToBack(encoder_queue, &xEncoder_info, xTicksToWait);
 80027f4:	f7ff b906 	b.w	8001a04 <xQueueGenericSend>
 80027f8:	2000197c 	.word	0x2000197c
 80027fc:	20001978 	.word	0x20001978

08002800 <EncoderQueue_Receive>:

EncoderRotateInfo EncoderQueue_Receive(void)
{
	EncoderRotateInfo value;
	xQueueReceive(encoder_queue, &value, 0);
 8002800:	2300      	movs	r3, #0
{
 8002802:	b507      	push	{r0, r1, r2, lr}
	xQueueReceive(encoder_queue, &value, 0);
 8002804:	4808      	ldr	r0, [pc, #32]	; (8002828 <EncoderQueue_Receive+0x28>)
 8002806:	461a      	mov	r2, r3
 8002808:	4669      	mov	r1, sp
 800280a:	6800      	ldr	r0, [r0, #0]
 800280c:	f7ff f9b0 	bl	8001b70 <xQueueGenericReceive>
	return value;
 8002810:	2000      	movs	r0, #0
 8002812:	9b00      	ldr	r3, [sp, #0]
 8002814:	b29a      	uxth	r2, r3
 8002816:	f362 000f 	bfi	r0, r2, #0, #16
 800281a:	0c1b      	lsrs	r3, r3, #16
 800281c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8002820:	b003      	add	sp, #12
 8002822:	f85d fb04 	ldr.w	pc, [sp], #4
 8002826:	bf00      	nop
 8002828:	20001978 	.word	0x20001978

0800282c <EncoderQueue_IsElements>:
bool EncoderQueue_IsElements(void)
{
 800282c:	b508      	push	{r3, lr}
	if(uxQueueMessagesWaiting(encoder_queue) > 0)
 800282e:	4b04      	ldr	r3, [pc, #16]	; (8002840 <EncoderQueue_IsElements+0x14>)
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	f7ff fa61 	bl	8001cf8 <uxQueueMessagesWaiting>
	{
		return true;
	}
	return false;
}
 8002836:	3000      	adds	r0, #0
 8002838:	bf18      	it	ne
 800283a:	2001      	movne	r0, #1
 800283c:	bd08      	pop	{r3, pc}
 800283e:	bf00      	nop
 8002840:	20001978 	.word	0x20001978

08002844 <pxEncoder>:
#include "encoder_queue.h"
#include "encoder.h"
#include "cmsis_os.h"

static void pxEncoder(void * arg)
{
 8002844:	b508      	push	{r3, lr}
	EncoderInit();
 8002846:	f7fd ffb5 	bl	80007b4 <EncoderInit>
			case eButton:
			{
				encoder_button_step++;
				if(encoder_button_step > 4)
				{
					encoder_button_step = 0;
 800284a:	2500      	movs	r5, #0
				EncoderQueue_Send(-1000, encoder_button_step);
				break;
			}
			case eRight:
			{
				EncoderQueue_Send(1000, encoder_button_step);
 800284c:	4c0e      	ldr	r4, [pc, #56]	; (8002888 <pxEncoder+0x44>)
		switch(Encoder_State())
 800284e:	f7fd ffb3 	bl	80007b8 <Encoder_State>
 8002852:	2802      	cmp	r0, #2
 8002854:	d014      	beq.n	8002880 <pxEncoder+0x3c>
 8002856:	2803      	cmp	r0, #3
 8002858:	d007      	beq.n	800286a <pxEncoder+0x26>
 800285a:	2801      	cmp	r0, #1
 800285c:	d10c      	bne.n	8002878 <pxEncoder+0x34>
				EncoderQueue_Send(-1000, encoder_button_step);
 800285e:	f64f 4018 	movw	r0, #64536	; 0xfc18
 8002862:	7821      	ldrb	r1, [r4, #0]
				EncoderQueue_Send(1000, encoder_button_step);
 8002864:	f7ff ffbc 	bl	80027e0 <EncoderQueue_Send>
				break;
 8002868:	e006      	b.n	8002878 <pxEncoder+0x34>
				encoder_button_step++;
 800286a:	7823      	ldrb	r3, [r4, #0]
 800286c:	3301      	adds	r3, #1
 800286e:	b2db      	uxtb	r3, r3
				if(encoder_button_step > 4)
 8002870:	2b04      	cmp	r3, #4
				encoder_button_step++;
 8002872:	bf94      	ite	ls
 8002874:	7023      	strbls	r3, [r4, #0]
					encoder_button_step = 0;
 8002876:	7025      	strbhi	r5, [r4, #0]
			}
			default: break;
		}
		osDelay(5);
 8002878:	2005      	movs	r0, #5
 800287a:	f7fe fd91 	bl	80013a0 <osDelay>
		switch(Encoder_State())
 800287e:	e7e6      	b.n	800284e <pxEncoder+0xa>
				EncoderQueue_Send(1000, encoder_button_step);
 8002880:	7821      	ldrb	r1, [r4, #0]
 8002882:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002886:	e7ed      	b.n	8002864 <pxEncoder+0x20>
 8002888:	2000135c 	.word	0x2000135c

0800288c <EncoderTaskInit>:
	}
}

void EncoderTaskInit(void)
{
	xTaskCreate(pxEncoder, "Encoder", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 800288c:	2300      	movs	r3, #0
{
 800288e:	b507      	push	{r0, r1, r2, lr}
	xTaskCreate(pxEncoder, "Encoder", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 8002890:	2280      	movs	r2, #128	; 0x80
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	4903      	ldr	r1, [pc, #12]	; (80028a4 <EncoderTaskInit+0x18>)
 8002898:	4803      	ldr	r0, [pc, #12]	; (80028a8 <EncoderTaskInit+0x1c>)
 800289a:	f7ff faa3 	bl	8001de4 <xTaskCreate>
}
 800289e:	b003      	add	sp, #12
 80028a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80028a4:	08003fc8 	.word	0x08003fc8
 80028a8:	08002845 	.word	0x08002845

080028ac <pxESP>:
	}
	return 1;
}

static void pxESP(void * arg)
{
 80028ac:	b508      	push	{r3, lr}
	StatusLedInit();
 80028ae:	f000 fa7f 	bl	8002db0 <StatusLedInit>
	ESPInit();
 80028b2:	f7fd fde5 	bl	8000480 <ESPInit>
	while((ESP_SetModeSoftAP()==0) || (ESP_SetParamsSoftAP("ESP", "12345678")==0) || (ESP_StartTCPServer(80)==0))
 80028b6:	4d1d      	ldr	r5, [pc, #116]	; (800292c <pxESP+0x80>)
 80028b8:	4e1d      	ldr	r6, [pc, #116]	; (8002930 <pxESP+0x84>)
		gMissConnection++;
 80028ba:	4c1e      	ldr	r4, [pc, #120]	; (8002934 <pxESP+0x88>)
	while((ESP_SetModeSoftAP()==0) || (ESP_SetParamsSoftAP("ESP", "12345678")==0) || (ESP_StartTCPServer(80)==0))
 80028bc:	f7fd fed0 	bl	8000660 <ESP_SetModeSoftAP>
 80028c0:	b158      	cbz	r0, 80028da <pxESP+0x2e>
 80028c2:	4629      	mov	r1, r5
 80028c4:	4630      	mov	r0, r6
 80028c6:	f7fd fe7d 	bl	80005c4 <ESP_SetParamsSoftAP>
 80028ca:	b130      	cbz	r0, 80028da <pxESP+0x2e>
 80028cc:	2050      	movs	r0, #80	; 0x50
 80028ce:	f7fd fe51 	bl	8000574 <ESP_StartTCPServer>
 80028d2:	b110      	cbz	r0, 80028da <pxESP+0x2e>

	if(!espStart(5))
	{
		ErrorBlink();
	}
	else StatusLedON();
 80028d4:	f000 fa9a 	bl	8002e0c <StatusLedON>
 80028d8:	e00c      	b.n	80028f4 <pxESP+0x48>
		gMissConnection++;
 80028da:	7823      	ldrb	r3, [r4, #0]
		LL_mDelay(200);
 80028dc:	20c8      	movs	r0, #200	; 0xc8
		gMissConnection++;
 80028de:	3301      	adds	r3, #1
 80028e0:	7023      	strb	r3, [r4, #0]
		LL_mDelay(200);
 80028e2:	f7fe fd25 	bl	8001330 <LL_mDelay>
		ESP_Resset();
 80028e6:	f7fd fdcd 	bl	8000484 <ESP_Resset>
		if(gMissConnection >= fails)
 80028ea:	7823      	ldrb	r3, [r4, #0]
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	dde5      	ble.n	80028bc <pxESP+0x10>
		ErrorBlink();
 80028f0:	f000 fa94 	bl	8002e1c <ErrorBlink>
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80028f4:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000

	while(1)
	{
		ITM_SendChar('1');
		ESP_Request(PAGES, FUNCTIONS, 2);
 80028f8:	4e0f      	ldr	r6, [pc, #60]	; (8002938 <pxESP+0x8c>)
 80028fa:	4d10      	ldr	r5, [pc, #64]	; (800293c <pxESP+0x90>)
 80028fc:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
 8002900:	07da      	lsls	r2, r3, #31
 8002902:	d503      	bpl.n	800290c <pxESP+0x60>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002904:	f8d4 3e00 	ldr.w	r3, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002908:	07db      	lsls	r3, r3, #31
 800290a:	d409      	bmi.n	8002920 <pxESP+0x74>
 800290c:	4628      	mov	r0, r5
 800290e:	2202      	movs	r2, #2
 8002910:	4631      	mov	r1, r6
 8002912:	f7fd ff25 	bl	8000760 <ESP_Request>
		osDelay(10);
 8002916:	200a      	movs	r0, #10
 8002918:	f7fe fd42 	bl	80013a0 <osDelay>
		ITM_SendChar('1');
 800291c:	e7ee      	b.n	80028fc <pxESP+0x50>
  __ASM volatile ("nop");
 800291e:	bf00      	nop
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0fb      	beq.n	800291e <pxESP+0x72>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002926:	2331      	movs	r3, #49	; 0x31
 8002928:	7023      	strb	r3, [r4, #0]
 800292a:	e7ef      	b.n	800290c <pxESP+0x60>
 800292c:	08003fd0 	.word	0x08003fd0
 8002930:	08003fd9 	.word	0x08003fd9
 8002934:	2000135d 	.word	0x2000135d
 8002938:	08003da0 	.word	0x08003da0
 800293c:	20000000 	.word	0x20000000

08002940 <ESPTaskInit>:
	}
}


void ESPTaskInit(void)
{
 8002940:	b507      	push	{r0, r1, r2, lr}
	xTaskCreate(pxESP, "ESP", configMINIMAL_STACK_SIZE, NULL, osPriorityAboveNormal, NULL);
 8002942:	2300      	movs	r3, #0
 8002944:	2201      	movs	r2, #1
 8002946:	4905      	ldr	r1, [pc, #20]	; (800295c <ESPTaskInit+0x1c>)
 8002948:	e88d 000c 	stmia.w	sp, {r2, r3}
 800294c:	4804      	ldr	r0, [pc, #16]	; (8002960 <ESPTaskInit+0x20>)
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	f7ff fa48 	bl	8001de4 <xTaskCreate>
}
 8002954:	b003      	add	sp, #12
 8002956:	f85d fb04 	ldr.w	pc, [sp], #4
 800295a:	bf00      	nop
 800295c:	08003fd9 	.word	0x08003fd9
 8002960:	080028ad 	.word	0x080028ad

08002964 <LL_ADC_SetChannelSamplingTime.constprop.0>:
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
 8002964:	b510      	push	{r4, lr}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800296a:	fa93 f2a3 	rbit	r2, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800296e:	fab2 f282 	clz	r2, r2
 8002972:	4c0b      	ldr	r4, [pc, #44]	; (80029a0 <LL_ADC_SetChannelSamplingTime.constprop.0+0x3c>)
 8002974:	40d3      	lsrs	r3, r2
 8002976:	f04f 70f8 	mov.w	r0, #32505856	; 0x1f00000
 800297a:	fa90 f1a0 	rbit	r1, r0
  MODIFY_REG(*preg,
 800297e:	fab1 f281 	clz	r2, r1
 8002982:	fa90 f0a0 	rbit	r0, r0
 8002986:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 800298a:	40d1      	lsrs	r1, r2
 800298c:	2207      	movs	r2, #7
 800298e:	fa02 f101 	lsl.w	r1, r2, r1
 8002992:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8002996:	ea22 0201 	bic.w	r2, r2, r1
 800299a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 800299e:	bd10      	pop	{r4, pc}
 80029a0:	4001240c 	.word	0x4001240c

080029a4 <MX_ADC1_Init>:
#include "ldr_driver.h"

uint16_t ADC1_value = 0;

void MX_ADC1_Init(void)
{
 80029a4:	b530      	push	{r4, r5, lr}
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80029a6:	2400      	movs	r4, #0
{
 80029a8:	b091      	sub	sp, #68	; 0x44
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80029aa:	4621      	mov	r1, r4
 80029ac:	2214      	movs	r2, #20
 80029ae:	a806      	add	r0, sp, #24
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80029b0:	9404      	str	r4, [sp, #16]
 80029b2:	9405      	str	r4, [sp, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80029b4:	9401      	str	r4, [sp, #4]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80029b6:	f000 fc9a 	bl	80032ee <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ba:	4621      	mov	r1, r4
 80029bc:	2214      	movs	r2, #20
 80029be:	a80b      	add	r0, sp, #44	; 0x2c
 80029c0:	f000 fc95 	bl	80032ee <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80029c4:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <MX_ADC1_Init+0xd8>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80029c6:	4d2e      	ldr	r5, [pc, #184]	; (8002a80 <MX_ADC1_Init+0xdc>)
 80029c8:	699a      	ldr	r2, [r3, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ca:	a90b      	add	r1, sp, #44	; 0x2c
 80029cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d0:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80029d2:	699a      	ldr	r2, [r3, #24]
 80029d4:	482b      	ldr	r0, [pc, #172]	; (8002a84 <MX_ADC1_Init+0xe0>)
 80029d6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80029da:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80029dc:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->APB2ENR, Periphs);
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	f042 0204 	orr.w	r2, r2, #4
 80029e4:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80029ee:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80029f0:	f241 0310 	movw	r3, #4112	; 0x1010
 80029f4:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f6:	f7fe fa5d 	bl	8000eb4 <LL_GPIO_Init>
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80029fa:	a904      	add	r1, sp, #16
 80029fc:	4628      	mov	r0, r5
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80029fe:	9404      	str	r4, [sp, #16]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8002a00:	9405      	str	r4, [sp, #20]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002a02:	f7fe f9c9 	bl	8000d98 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002a06:	a910      	add	r1, sp, #64	; 0x40
 8002a08:	f841 4d3c 	str.w	r4, [r1, #-60]!
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	f7fe f9ad 	bl	8000d6c <LL_ADC_CommonInit>

  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002a12:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_SCAN_DISABLE;
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002a16:	a906      	add	r1, sp, #24
 8002a18:	4628      	mov	r0, r5
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002a1a:	9306      	str	r3, [sp, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8002a1c:	9407      	str	r4, [sp, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8002a1e:	9408      	str	r4, [sp, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002a20:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8002a22:	940a      	str	r4, [sp, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002a24:	f7fe f9cb 	bl	8000dbe <LL_ADC_REG_Init>
 8002a28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a2c:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	4913      	ldr	r1, [pc, #76]	; (8002a88 <MX_ADC1_Init+0xe4>)
 8002a3a:	40da      	lsrs	r2, r3
  MODIFY_REG(*preg,
 8002a3c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8002a40:	f023 031f 	bic.w	r3, r3, #31
 8002a44:	f043 0304 	orr.w	r3, r3, #4
 8002a48:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002a4c:	f7ff ff8a 	bl	8002964 <LL_ADC_SetChannelSamplingTime.constprop.0>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002a50:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a54:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <MX_ADC1_Init+0xe8>)
 8002a56:	68db      	ldr	r3, [r3, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a58:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <MX_ADC1_Init+0xec>)
 8002a5a:	f883 4312 	strb.w	r4, [r3, #786]	; 0x312
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002a5e:	601a      	str	r2, [r3, #0]
{
  /* Note: on this STM32 serie, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  SET_BIT(ADCx->CR1, ADC_CR1_EOCIE);
 8002a60:	686b      	ldr	r3, [r5, #4]
 8002a62:	f043 0320 	orr.w	r3, r3, #32
 8002a66:	606b      	str	r3, [r5, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002a68:	68ab      	ldr	r3, [r5, #8]
  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(ADC1_2_IRQn);
  LL_ADC_EnableIT_EOS(ADC1);

  if (LL_ADC_IsEnabled(ADC1) == 0)
 8002a6a:	07db      	lsls	r3, r3, #31
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002a6c:	bf5e      	ittt	pl
 8002a6e:	68ab      	ldrpl	r3, [r5, #8]
 8002a70:	f043 0301 	orrpl.w	r3, r3, #1
 8002a74:	60ab      	strpl	r3, [r5, #8]
  {
	  LL_ADC_Enable(ADC1);
  }
}
 8002a76:	b011      	add	sp, #68	; 0x44
 8002a78:	bd30      	pop	{r4, r5, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40012400 	.word	0x40012400
 8002a84:	40010800 	.word	0x40010800
 8002a88:	4001242c 	.word	0x4001242c
 8002a8c:	e000ed00 	.word	0xe000ed00
 8002a90:	e000e100 	.word	0xe000e100

08002a94 <ADC1_Activate>:

void ADC1_Activate(void)
{
 8002a94:	b510      	push	{r4, lr}
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002a96:	4c0a      	ldr	r4, [pc, #40]	; (8002ac0 <ADC1_Activate+0x2c>)
 8002a98:	68a3      	ldr	r3, [r4, #8]
	if (LL_ADC_IsEnabled(ADC1) == 1)
 8002a9a:	07da      	lsls	r2, r3, #31
 8002a9c:	d50f      	bpl.n	8002abe <ADC1_Activate+0x2a>
	{
		LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002a9e:	f7ff ff61 	bl	8002964 <LL_ADC_SetChannelSamplingTime.constprop.0>
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002aa2:	68a3      	ldr	r3, [r4, #8]
		LL_ADC_Enable(ADC1);
		LL_mDelay(1);
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	60a3      	str	r3, [r4, #8]
 8002aac:	f7fe fc40 	bl	8001330 <LL_mDelay>
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8002ab0:	68a3      	ldr	r3, [r4, #8]
 8002ab2:	f043 0304 	orr.w	r3, r3, #4
 8002ab6:	60a3      	str	r3, [r4, #8]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8002ab8:	68a3      	ldr	r3, [r4, #8]

	    LL_ADC_StartCalibration(ADC1);
	    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0);
 8002aba:	075b      	lsls	r3, r3, #29
 8002abc:	d4fc      	bmi.n	8002ab8 <ADC1_Activate+0x24>
 8002abe:	bd10      	pop	{r4, pc}
 8002ac0:	40012400 	.word	0x40012400

08002ac4 <ADC1_2_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <ADC1_2_IRQHandler+0x18>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
	}
}

void ADC1_2_IRQHandler(void)
{
  if(LL_ADC_IsActiveFlag_EOS(ADC1) != 0)
 8002ac8:	0792      	lsls	r2, r2, #30
 8002aca:	d505      	bpl.n	8002ad8 <ADC1_2_IRQHandler+0x14>
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 8002acc:	f06f 0202 	mvn.w	r2, #2
 8002ad0:	601a      	str	r2, [r3, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  {
    LL_ADC_ClearFlag_EOS(ADC1);

    ADC1_value = LL_ADC_REG_ReadConversionData12(ADC1);
 8002ad4:	4b02      	ldr	r3, [pc, #8]	; (8002ae0 <ADC1_2_IRQHandler+0x1c>)
 8002ad6:	801a      	strh	r2, [r3, #0]
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40012400 	.word	0x40012400
 8002ae0:	2000135e 	.word	0x2000135e

08002ae4 <ADC1_Get>:
}

uint16_t ADC1_Get()
{
	return ADC1_value;
}
 8002ae4:	4b01      	ldr	r3, [pc, #4]	; (8002aec <ADC1_Get+0x8>)
 8002ae6:	8818      	ldrh	r0, [r3, #0]
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	2000135e 	.word	0x2000135e

08002af0 <LDRQueueInit>:

xQueueHandle ldr_queue;

void LDRQueueInit(void)
{
	  ldr_queue = xQueueCreate(2, sizeof(uint16_t));
 8002af0:	2102      	movs	r1, #2
{
 8002af2:	b508      	push	{r3, lr}
	  ldr_queue = xQueueCreate(2, sizeof(uint16_t));
 8002af4:	2200      	movs	r2, #0
 8002af6:	4608      	mov	r0, r1
 8002af8:	f7fe ff62 	bl	80019c0 <xQueueGenericCreate>
 8002afc:	4b01      	ldr	r3, [pc, #4]	; (8002b04 <LDRQueueInit+0x14>)
 8002afe:	6018      	str	r0, [r3, #0]
 8002b00:	bd08      	pop	{r3, pc}
 8002b02:	bf00      	nop
 8002b04:	20001980 	.word	0x20001980

08002b08 <LDRQueue_Send>:
}

void LDRQueue_Send(uint16_t value)
{
 8002b08:	b507      	push	{r0, r1, r2, lr}
 8002b0a:	a902      	add	r1, sp, #8
 8002b0c:	f821 0d02 	strh.w	r0, [r1, #-2]!
	const portTickType xTicksToWait = 100 / portTICK_RATE_MS;
	xQueueSendToBack(ldr_queue, &value, xTicksToWait);
 8002b10:	4804      	ldr	r0, [pc, #16]	; (8002b24 <LDRQueue_Send+0x1c>)
 8002b12:	2300      	movs	r3, #0
 8002b14:	2264      	movs	r2, #100	; 0x64
 8002b16:	6800      	ldr	r0, [r0, #0]
 8002b18:	f7fe ff74 	bl	8001a04 <xQueueGenericSend>
}
 8002b1c:	b003      	add	sp, #12
 8002b1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b22:	bf00      	nop
 8002b24:	20001980 	.word	0x20001980

08002b28 <LDRQueue_Receive>:

uint16_t LDRQueue_Receive(void)
{
	uint16_t value;
	xQueueReceive(ldr_queue, &value, 0);
 8002b28:	2300      	movs	r3, #0
{
 8002b2a:	b507      	push	{r0, r1, r2, lr}
	xQueueReceive(ldr_queue, &value, 0);
 8002b2c:	4805      	ldr	r0, [pc, #20]	; (8002b44 <LDRQueue_Receive+0x1c>)
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f10d 0106 	add.w	r1, sp, #6
 8002b34:	6800      	ldr	r0, [r0, #0]
 8002b36:	f7ff f81b 	bl	8001b70 <xQueueGenericReceive>
	return value;
}
 8002b3a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002b3e:	b003      	add	sp, #12
 8002b40:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b44:	20001980 	.word	0x20001980

08002b48 <LDRQueue_IsElements>:

bool LDRQueue_IsElements(void)
{
 8002b48:	b508      	push	{r3, lr}
	if(uxQueueMessagesWaiting(ldr_queue) > 0)
 8002b4a:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <LDRQueue_IsElements+0x14>)
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	f7ff f8d3 	bl	8001cf8 <uxQueueMessagesWaiting>
	{
		return true;
	}
	return false;
}
 8002b52:	3000      	adds	r0, #0
 8002b54:	bf18      	it	ne
 8002b56:	2001      	movne	r0, #1
 8002b58:	bd08      	pop	{r3, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20001980 	.word	0x20001980

08002b60 <pxLDR>:
#include "ldr.h"
#include "ldr_queue.h"
#include "cmsis_os.h"

static void pxLDR(void * arg)
{
 8002b60:	b508      	push	{r3, lr}
	LDRInit();
 8002b62:	f7fd fe42 	bl	80007ea <LDRInit>
	while(1)
	{
		uint16_t adc_value = LDR_Get();
 8002b66:	f7fd fe42 	bl	80007ee <LDR_Get>
		LDRQueue_Send(adc_value);
 8002b6a:	f7ff ffcd 	bl	8002b08 <LDRQueue_Send>
		osDelay(100);
 8002b6e:	2064      	movs	r0, #100	; 0x64
 8002b70:	f7fe fc16 	bl	80013a0 <osDelay>
 8002b74:	e7f7      	b.n	8002b66 <pxLDR+0x6>
	...

08002b78 <LDRTaskInit>:
	}
}

void LDRTaskInit(void)
{
	xTaskCreate(pxLDR, "LDR", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 8002b78:	2300      	movs	r3, #0
{
 8002b7a:	b507      	push	{r0, r1, r2, lr}
	xTaskCreate(pxLDR, "LDR", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	4903      	ldr	r1, [pc, #12]	; (8002b90 <LDRTaskInit+0x18>)
 8002b84:	4803      	ldr	r0, [pc, #12]	; (8002b94 <LDRTaskInit+0x1c>)
 8002b86:	f7ff f92d 	bl	8001de4 <xTaskCreate>
}
 8002b8a:	b003      	add	sp, #12
 8002b8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b90:	08003fdd 	.word	0x08003fdd
 8002b94:	08002b61 	.word	0x08002b61

08002b98 <MX_TIM4_Init>:
#include "led_driver.h"

void MX_TIM4_Init(void)
{
 8002b98:	b5f0      	push	{r4, r5, r6, r7, lr}
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002b9a:	2414      	movs	r4, #20
{
 8002b9c:	b095      	sub	sp, #84	; 0x54
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002b9e:	4622      	mov	r2, r4
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	a802      	add	r0, sp, #8
  SET_BIT(RCC->APB1ENR, Periphs);
 8002ba4:	4e3e      	ldr	r6, [pc, #248]	; (8002ca0 <MX_TIM4_Init+0x108>)
 8002ba6:	f000 fba2 	bl	80032ee <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002baa:	2220      	movs	r2, #32
 8002bac:	2100      	movs	r1, #0
 8002bae:	a80c      	add	r0, sp, #48	; 0x30
 8002bb0:	f000 fb9d 	bl	80032ee <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	4622      	mov	r2, r4
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	a807      	add	r0, sp, #28
 8002bba:	f000 fb98 	bl	80032ee <memset>
 8002bbe:	69f3      	ldr	r3, [r6, #28]

  TIM_InitStruct.Prescaler = 0;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 65535;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002bc0:	4c38      	ldr	r4, [pc, #224]	; (8002ca4 <MX_TIM4_Init+0x10c>)
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	61f3      	str	r3, [r6, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002bc8:	69f3      	ldr	r3, [r6, #28]
 8002bca:	a902      	add	r1, sp, #8
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002bd2:	9b01      	ldr	r3, [sp, #4]
  TIM_InitStruct.Autoreload = 65535;
 8002bd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002bd8:	4620      	mov	r0, r4
  TIM_InitStruct.Autoreload = 65535;
 8002bda:	9304      	str	r3, [sp, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002bdc:	f7fe fa48 	bl	8001070 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002be0:	6823      	ldr	r3, [r4, #0]
  LL_TIM_EnableARRPreload(TIM4);

  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002be2:	2500      	movs	r5, #0
 8002be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be8:	6023      	str	r3, [r4, #0]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002bea:	2360      	movs	r3, #96	; 0x60
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002bec:	950d      	str	r5, [sp, #52]	; 0x34
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002bee:	930c      	str	r3, [sp, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002bf0:	950e      	str	r5, [sp, #56]	; 0x38
  return (uint32_t)(READ_REG(TIMx->ARR));
 8002bf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  TIM_OC_InitStruct.CompareValue = LL_TIM_GetAutoReload(TIM4);
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002bf4:	aa0c      	add	r2, sp, #48	; 0x30
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4620      	mov	r0, r4
  TIM_OC_InitStruct.CompareValue = LL_TIM_GetAutoReload(TIM4);
 8002bfa:	930f      	str	r3, [sp, #60]	; 0x3c
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002bfc:	9510      	str	r5, [sp, #64]	; 0x40
  TIM_OC_InitStruct.OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 8002bfe:	9511      	str	r5, [sp, #68]	; 0x44
  TIM_OC_InitStruct.OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
 8002c00:	9512      	str	r5, [sp, #72]	; 0x48
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002c02:	9513      	str	r5, [sp, #76]	; 0x4c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002c04:	f7fe fa6c 	bl	80010e0 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002c08:	69a3      	ldr	r3, [r4, #24]

  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002c0a:	aa0c      	add	r2, sp, #48	; 0x30
 8002c0c:	f023 0304 	bic.w	r3, r3, #4
 8002c10:	61a3      	str	r3, [r4, #24]
 8002c12:	2110      	movs	r1, #16
 8002c14:	4620      	mov	r0, r4
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002c16:	950d      	str	r5, [sp, #52]	; 0x34
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002c18:	950e      	str	r5, [sp, #56]	; 0x38
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002c1a:	f7fe fa61 	bl	80010e0 <LL_TIM_OC_Init>
 8002c1e:	69a3      	ldr	r3, [r4, #24]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002c20:	4f21      	ldr	r7, [pc, #132]	; (8002ca8 <MX_TIM4_Init+0x110>)
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c26:	61a3      	str	r3, [r4, #24]

  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002c28:	aa0c      	add	r2, sp, #48	; 0x30
 8002c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c2e:	4620      	mov	r0, r4
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002c30:	950d      	str	r5, [sp, #52]	; 0x34
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002c32:	950e      	str	r5, [sp, #56]	; 0x38
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002c34:	f7fe fa54 	bl	80010e0 <LL_TIM_OC_Init>
 8002c38:	687b      	ldr	r3, [r7, #4]
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3a:	a907      	add	r1, sp, #28
 8002c3c:	f023 0304 	bic.w	r3, r3, #4
 8002c40:	607b      	str	r3, [r7, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002c42:	6863      	ldr	r3, [r4, #4]
 8002c44:	4819      	ldr	r0, [pc, #100]	; (8002cac <MX_TIM4_Init+0x114>)
 8002c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4a:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002c4c:	68a3      	ldr	r3, [r4, #8]
 8002c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c52:	60a3      	str	r3, [r4, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002c54:	69b3      	ldr	r3, [r6, #24]
 8002c56:	f043 0308 	orr.w	r3, r3, #8
 8002c5a:	61b3      	str	r3, [r6, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002c5c:	69b3      	ldr	r3, [r6, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c5e:	950a      	str	r5, [sp, #40]	; 0x28
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002c66:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <MX_TIM4_Init+0x118>)
 8002c6a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c6c:	2309      	movs	r3, #9
 8002c6e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002c70:	2303      	movs	r3, #3
 8002c72:	9309      	str	r3, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c74:	f7fe f91e 	bl	8000eb4 <LL_GPIO_Init>
  SET_BIT(TIMx->CCER, Channels);
 8002c78:	6a23      	ldr	r3, [r4, #32]
 8002c7a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6223      	str	r3, [r4, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6023      	str	r3, [r4, #0]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002c8c:	6963      	ldr	r3, [r4, #20]
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002c94:	6365      	str	r5, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002c96:	63a5      	str	r5, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002c98:	63e5      	str	r5, [r4, #60]	; 0x3c
  LL_TIM_GenerateEvent_UPDATE(TIM4);

  LL_TIM_OC_SetCompareCH1(TIM4, 0);
  LL_TIM_OC_SetCompareCH2(TIM4, 0);
  LL_TIM_OC_SetCompareCH3(TIM4, 0);
}
 8002c9a:	b015      	add	sp, #84	; 0x54
 8002c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40000800 	.word	0x40000800
 8002ca8:	40000818 	.word	0x40000818
 8002cac:	40010c00 	.word	0x40010c00
 8002cb0:	0401c0c1 	.word	0x0401c0c1

08002cb4 <TIM4_SET_CH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002cb4:	4b01      	ldr	r3, [pc, #4]	; (8002cbc <TIM4_SET_CH1+0x8>)
 8002cb6:	6358      	str	r0, [r3, #52]	; 0x34
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40000800 	.word	0x40000800

08002cc0 <TIM4_SET_CH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002cc0:	4b01      	ldr	r3, [pc, #4]	; (8002cc8 <TIM4_SET_CH2+0x8>)
 8002cc2:	6398      	str	r0, [r3, #56]	; 0x38
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40000800 	.word	0x40000800

08002ccc <TIM4_SET_CH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002ccc:	4b01      	ldr	r3, [pc, #4]	; (8002cd4 <TIM4_SET_CH3+0x8>)
 8002cce:	63d8      	str	r0, [r3, #60]	; 0x3c
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40000800 	.word	0x40000800

08002cd8 <pxLed>:
	if(value < 0) value = 0;
	return value;
}

static void pxLed(void * arg)
{
 8002cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	LedInit();
 8002cda:	f7fd fda4 	bl	8000826 <LedInit>

	uint16_t ldr_value = 65535;
 8002cde:	f64f 76ff 	movw	r6, #65535	; 0xffff
	EncoderRotateInfo xEncoder_info;

	while(1)
	{
		if(EncoderQueue_IsElements())
 8002ce2:	f7ff fda3 	bl	800282c <EncoderQueue_IsElements>
 8002ce6:	b1f0      	cbz	r0, 8002d26 <pxLed+0x4e>
		{
			xEncoder_info = EncoderQueue_Receive();
 8002ce8:	f7ff fd8a 	bl	8002800 <EncoderQueue_Receive>
 8002cec:	9001      	str	r0, [sp, #4]
 8002cee:	b204      	sxth	r4, r0
			int32_t red = Led_Get_Color(eRed), green = Led_Get_Color(eGreen), blue = Led_Get_Color(eBlue);
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7fd fdb3 	bl	800085c <Led_Get_Color>
 8002cf6:	4605      	mov	r5, r0
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f7fd fdaf 	bl	800085c <Led_Get_Color>
 8002cfe:	4607      	mov	r7, r0
 8002d00:	2002      	movs	r0, #2
 8002d02:	f7fd fdab 	bl	800085c <Led_Get_Color>

			switch(xEncoder_info.button)
 8002d06:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d80a      	bhi.n	8002d26 <pxLed+0x4e>
 8002d10:	e8df f003 	tbb	[pc, r3]
 8002d14:	221c1602 	.word	0x221c1602
			{
				case 0: break;
				case 1:
					{
						Led_Set_Color(eRed, constrain(red + xEncoder_info.state));
 8002d18:	2000      	movs	r0, #0
 8002d1a:	1961      	adds	r1, r4, r5
 8002d1c:	f381 0110 	usat	r1, #16, r1
 8002d20:	b289      	uxth	r1, r1
						break;
					}
				case 2:
					{
						Led_Set_Color(eGreen, constrain(green + xEncoder_info.state));
 8002d22:	f7fd fd89 	bl	8000838 <Led_Set_Color>
						break;
					}
				default: break;
			}
		}
		if(LDRQueue_IsElements())
 8002d26:	f7ff ff0f 	bl	8002b48 <LDRQueue_IsElements>
 8002d2a:	b110      	cbz	r0, 8002d32 <pxLed+0x5a>
		{
			 ldr_value = LDRQueue_Receive();
 8002d2c:	f7ff fefc 	bl	8002b28 <LDRQueue_Receive>
 8002d30:	4606      	mov	r6, r0
		}

		Led_Refresh(ldr_value);
 8002d32:	4630      	mov	r0, r6
 8002d34:	f7fd fda4 	bl	8000880 <Led_Refresh>
		osDelay(10);
 8002d38:	200a      	movs	r0, #10
 8002d3a:	f7fe fb31 	bl	80013a0 <osDelay>
		if(EncoderQueue_IsElements())
 8002d3e:	e7d0      	b.n	8002ce2 <pxLed+0xa>
						Led_Set_Color(eGreen, constrain(green + xEncoder_info.state));
 8002d40:	19e1      	adds	r1, r4, r7
 8002d42:	f381 0110 	usat	r1, #16, r1
 8002d46:	b289      	uxth	r1, r1
 8002d48:	2001      	movs	r0, #1
 8002d4a:	e7ea      	b.n	8002d22 <pxLed+0x4a>
						Led_Set_Color(eBlue, constrain(blue + xEncoder_info.state));
 8002d4c:	1821      	adds	r1, r4, r0
 8002d4e:	f381 0110 	usat	r1, #16, r1
 8002d52:	b289      	uxth	r1, r1
 8002d54:	2002      	movs	r0, #2
 8002d56:	e7e4      	b.n	8002d22 <pxLed+0x4a>
						Led_Set(constrain(red + xEncoder_info.state), constrain(green + xEncoder_info.state), constrain(blue + xEncoder_info.state));
 8002d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d5c:	1902      	adds	r2, r0, r4
 8002d5e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002d62:	1939      	adds	r1, r7, r4
 8002d64:	429a      	cmp	r2, r3
 8002d66:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8002d6a:	eb05 0004 	add.w	r0, r5, r4
 8002d6e:	bfa8      	it	ge
 8002d70:	461a      	movge	r2, r3
 8002d72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8002d76:	4299      	cmp	r1, r3
 8002d78:	bfa8      	it	ge
 8002d7a:	4619      	movge	r1, r3
 8002d7c:	4298      	cmp	r0, r3
 8002d7e:	bfa8      	it	ge
 8002d80:	4618      	movge	r0, r3
 8002d82:	b292      	uxth	r2, r2
 8002d84:	b289      	uxth	r1, r1
 8002d86:	b280      	uxth	r0, r0
 8002d88:	f7fd fd50 	bl	800082c <Led_Set>
						break;
 8002d8c:	e7cb      	b.n	8002d26 <pxLed+0x4e>
	...

08002d90 <LedTaskInit>:
	}
}

void LedTaskInit(void)
{
	xTaskCreate(pxLed, "Led", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 8002d90:	2300      	movs	r3, #0
{
 8002d92:	b507      	push	{r0, r1, r2, lr}
	xTaskCreate(pxLed, "Led", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 8002d94:	2280      	movs	r2, #128	; 0x80
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	4903      	ldr	r1, [pc, #12]	; (8002da8 <LedTaskInit+0x18>)
 8002d9c:	4803      	ldr	r0, [pc, #12]	; (8002dac <LedTaskInit+0x1c>)
 8002d9e:	f7ff f821 	bl	8001de4 <xTaskCreate>
}
 8002da2:	b003      	add	sp, #12
 8002da4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002da8:	08003fe1 	.word	0x08003fe1
 8002dac:	08002cd9 	.word	0x08002cd9

08002db0 <StatusLedInit>:
  SET_BIT(RCC->APB2ENR, Periphs);
 8002db0:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <StatusLedInit+0x50>)
#include "status_led.h"
#include "main.h"

void StatusLedInit(void)
{
 8002db2:	b500      	push	{lr}
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	b089      	sub	sp, #36	; 0x24
 8002db8:	f042 0204 	orr.w	r2, r2, #4
 8002dbc:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002dbe:	699a      	ldr	r2, [r3, #24]
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);

  	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	f002 0204 	and.w	r2, r2, #4
 8002dc6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002dc8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	a803      	add	r0, sp, #12
 8002dce:	f042 0208 	orr.w	r2, r2, #8
 8002dd2:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2214      	movs	r2, #20
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002dde:	9b01      	ldr	r3, [sp, #4]
 8002de0:	f000 fa85 	bl	80032ee <memset>

    GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8002de4:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <StatusLedInit+0x54>)
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
    GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8002de8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002dea:	2301      	movs	r3, #1
 8002dec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002dee:	2303      	movs	r3, #3
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df0:	4805      	ldr	r0, [pc, #20]	; (8002e08 <StatusLedInit+0x58>)
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002df2:	9305      	str	r3, [sp, #20]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df4:	f7fe f85e 	bl	8000eb4 <LL_GPIO_Init>
}
 8002df8:	b009      	add	sp, #36	; 0x24
 8002dfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	04200020 	.word	0x04200020
 8002e08:	40010c00 	.word	0x40010c00

08002e0c <StatusLedON>:
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002e0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e10:	4b01      	ldr	r3, [pc, #4]	; (8002e18 <StatusLedON+0xc>)
 8002e12:	611a      	str	r2, [r3, #16]
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40010c00 	.word	0x40010c00

08002e1c <ErrorBlink>:
{
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_13);
}

void ErrorBlink()
{
 8002e1c:	b508      	push	{r3, lr}
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8002e1e:	4c04      	ldr	r4, [pc, #16]	; (8002e30 <ErrorBlink+0x14>)
 8002e20:	68e3      	ldr	r3, [r4, #12]
	while(1)
	{
		LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_13);
		LL_mDelay(200);
 8002e22:	20c8      	movs	r0, #200	; 0xc8
 8002e24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e28:	60e3      	str	r3, [r4, #12]
 8002e2a:	f7fe fa81 	bl	8001330 <LL_mDelay>
 8002e2e:	e7f7      	b.n	8002e20 <ErrorBlink+0x4>
 8002e30:	40010c00 	.word	0x40010c00

08002e34 <USART_SendData_byte>:
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8002e34:	4b02      	ldr	r3, [pc, #8]	; (8002e40 <USART_SendData_byte+0xc>)
 8002e36:	6058      	str	r0, [r3, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8002e38:	681a      	ldr	r2, [r3, #0]
//char uart_rx_buffer[512];

void USART_SendData_byte(char data)
{
	LL_USART_TransmitData8(USART1, data);
	while (!LL_USART_IsActiveFlag_TC(USART1));
 8002e3a:	0652      	lsls	r2, r2, #25
 8002e3c:	d5fc      	bpl.n	8002e38 <USART_SendData_byte+0x4>
}
 8002e3e:	4770      	bx	lr
 8002e40:	40013800 	.word	0x40013800

08002e44 <USART_SendData>:

void USART_SendData(char * data, uint32_t data_length)
{
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	4604      	mov	r4, r0
  USARTx->DR = Value;
 8002e48:	4d07      	ldr	r5, [pc, #28]	; (8002e68 <USART_SendData+0x24>)
 8002e4a:	1846      	adds	r6, r0, r1
	for(int i = 0; i < data_length; i++)
 8002e4c:	42b4      	cmp	r4, r6
 8002e4e:	d100      	bne.n	8002e52 <USART_SendData+0xe>
	{
		LL_USART_TransmitData8(USART1, data[i]);
		LL_mDelay(2);
		while (!LL_USART_IsActiveFlag_TC(USART1));
	}
}
 8002e50:	bd70      	pop	{r4, r5, r6, pc}
		LL_USART_TransmitData8(USART1, data[i]);
 8002e52:	f814 3b01 	ldrb.w	r3, [r4], #1
		LL_mDelay(2);
 8002e56:	2002      	movs	r0, #2
 8002e58:	606b      	str	r3, [r5, #4]
 8002e5a:	f7fe fa69 	bl	8001330 <LL_mDelay>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8002e5e:	682b      	ldr	r3, [r5, #0]
		while (!LL_USART_IsActiveFlag_TC(USART1));
 8002e60:	065b      	lsls	r3, r3, #25
 8002e62:	d5fc      	bpl.n	8002e5e <USART_SendData+0x1a>
 8002e64:	e7f2      	b.n	8002e4c <USART_SendData+0x8>
 8002e66:	bf00      	nop
 8002e68:	40013800 	.word	0x40013800

08002e6c <USART_CharReception_Callback>:

void USART_CharReception_Callback(void)
{
 8002e6c:	b507      	push	{r0, r1, r2, lr}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <USART_CharReception_Callback+0x18>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	b2db      	uxtb	r3, r3
	__IO uint32_t received_char;
	received_char = LL_USART_ReceiveData8(USART1);
 8002e74:	9301      	str	r3, [sp, #4]

	RingBuff_Push(received_char);
 8002e76:	9801      	ldr	r0, [sp, #4]
 8002e78:	b2c0      	uxtb	r0, r0
 8002e7a:	f7fd fdab 	bl	80009d4 <RingBuff_Push>
  //LL_USART_TransmitData8(USART1, received_char);
}
 8002e7e:	b003      	add	sp, #12
 8002e80:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e84:	40013800 	.word	0x40013800

08002e88 <Error_Callback>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002e88:	2220      	movs	r2, #32
 8002e8a:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <Error_Callback+0x18>)

void Error_Callback(void)
{
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __IO uint32_t sr_reg;

  NVIC_DisableIRQ(USART1_IRQn);

  sr_reg = LL_USART_ReadReg(USART1, SR);
 8002e92:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <Error_Callback+0x1c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	9301      	str	r3, [sp, #4]
  if (sr_reg & LL_USART_SR_NE)
 8002e98:	9b01      	ldr	r3, [sp, #4]
  {

  }
}
 8002e9a:	b002      	add	sp, #8
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	e000e100 	.word	0xe000e100
 8002ea4:	40013800 	.word	0x40013800

08002ea8 <USART1_IRQHandler>:
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <USART1_IRQHandler+0x18>)
 8002eaa:	681a      	ldr	r2, [r3, #0]

void USART1_IRQHandler(void)
{
  if(LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
 8002eac:	0692      	lsls	r2, r2, #26
 8002eae:	d504      	bpl.n	8002eba <USART1_IRQHandler+0x12>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	069b      	lsls	r3, r3, #26
 8002eb4:	d501      	bpl.n	8002eba <USART1_IRQHandler+0x12>
  {
    USART_CharReception_Callback();
 8002eb6:	f7ff bfd9 	b.w	8002e6c <USART_CharReception_Callback>
  }
  else
  {
    Error_Callback();
 8002eba:	f7ff bfe5 	b.w	8002e88 <Error_Callback>
 8002ebe:	bf00      	nop
 8002ec0:	40013800 	.word	0x40013800

08002ec4 <USART1_Reset>:
  }
}

void USART1_Reset(void)
{
 8002ec4:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002ec6:	f44f 7580 	mov.w	r5, #256	; 0x100
 8002eca:	4c03      	ldr	r4, [pc, #12]	; (8002ed8 <USART1_Reset+0x14>)
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
	LL_mDelay(100);
 8002ecc:	2064      	movs	r0, #100	; 0x64
 8002ece:	6165      	str	r5, [r4, #20]
 8002ed0:	f7fe fa2e 	bl	8001330 <LL_mDelay>
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002ed4:	6125      	str	r5, [r4, #16]
 8002ed6:	bd38      	pop	{r3, r4, r5, pc}
 8002ed8:	40010800 	.word	0x40010800

08002edc <MX_USART1_UART_Init>:
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
}

void MX_USART1_UART_Init(void)
{
 8002edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee0:	b08e      	sub	sp, #56	; 0x38
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002ee2:	2218      	movs	r2, #24
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	a808      	add	r0, sp, #32
 8002ee8:	f000 fa01 	bl	80032ee <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eec:	2214      	movs	r2, #20
 8002eee:	2100      	movs	r1, #0
 8002ef0:	a803      	add	r0, sp, #12
 8002ef2:	f000 f9fc 	bl	80032ee <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002ef6:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <MX_USART1_UART_Init+0xec>)

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002ef8:	2701      	movs	r7, #1
 8002efa:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002efc:	f04f 0803 	mov.w	r8, #3
 8002f00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f04:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f06:	699a      	ldr	r2, [r3, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f08:	4e30      	ldr	r6, [pc, #192]	; (8002fcc <MX_USART1_UART_Init+0xf0>)
 8002f0a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002f0e:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002f10:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f12:	699a      	ldr	r2, [r3, #24]
 8002f14:	a903      	add	r1, sp, #12
 8002f16:	f042 0204 	orr.w	r2, r2, #4
 8002f1a:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	4630      	mov	r0, r6
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002f26:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002f28:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <MX_USART1_UART_Init+0xf4>)
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002f2a:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002f2e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f30:	2309      	movs	r3, #9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002f32:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f34:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f36:	f7fd ffbd 	bl	8000eb4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002f3a:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <MX_USART1_UART_Init+0xf8>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;

  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;

  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002f3e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002f40:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f42:	4630      	mov	r0, r6
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f44:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002f46:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002f48:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002f4c:	9707      	str	r7, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4e:	f7fd ffb1 	bl	8000eb4 <LL_GPIO_Init>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002f52:	2220      	movs	r2, #32
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f54:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <MX_USART1_UART_Init+0xfc>)
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;

  LL_USART_Init(USART1, &USART_InitStruct);
 8002f56:	4c21      	ldr	r4, [pc, #132]	; (8002fdc <MX_USART1_UART_Init+0x100>)
 8002f58:	68db      	ldr	r3, [r3, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5a:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <MX_USART1_UART_Init+0x104>)
 8002f5c:	eb0d 0102 	add.w	r1, sp, r2
 8002f60:	f883 5325 	strb.w	r5, [r3, #805]	; 0x325
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002f64:	605a      	str	r2, [r3, #4]
  USART_InitStruct.BaudRate = 115200;
 8002f66:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002f6a:	9308      	str	r3, [sp, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002f6c:	230c      	movs	r3, #12
  LL_USART_Init(USART1, &USART_InitStruct);
 8002f6e:	4620      	mov	r0, r4
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002f70:	930c      	str	r3, [sp, #48]	; 0x30
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002f72:	9509      	str	r5, [sp, #36]	; 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002f74:	950a      	str	r5, [sp, #40]	; 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002f76:	950b      	str	r5, [sp, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002f78:	950d      	str	r5, [sp, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8002f7a:	f7fe f979 	bl	8001270 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7e:	6923      	ldr	r3, [r4, #16]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f80:	a903      	add	r1, sp, #12
 8002f82:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002f86:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002f88:	6963      	ldr	r3, [r4, #20]
 8002f8a:	4630      	mov	r0, r6
 8002f8c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002f90:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002f92:	68e3      	ldr	r3, [r4, #12]
 8002f94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f98:	60e3      	str	r3, [r4, #12]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002f9a:	68e3      	ldr	r3, [r4, #12]
 8002f9c:	f043 0320 	orr.w	r3, r3, #32
 8002fa0:	60e3      	str	r3, [r4, #12]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002fa2:	6963      	ldr	r3, [r4, #20]
 8002fa4:	433b      	orrs	r3, r7
 8002fa6:	6163      	str	r3, [r4, #20]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <MX_USART1_UART_Init+0x108>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002faa:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002fac:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002fae:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002fb2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002fb4:	9707      	str	r7, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb6:	f7fd ff7d 	bl	8000eb4 <LL_GPIO_Init>
 8002fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fbe:	6133      	str	r3, [r6, #16]

  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
}
 8002fc0:	b00e      	add	sp, #56	; 0x38
 8002fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40010800 	.word	0x40010800
 8002fd0:	04020002 	.word	0x04020002
 8002fd4:	04040004 	.word	0x04040004
 8002fd8:	e000ed00 	.word	0xe000ed00
 8002fdc:	40013800 	.word	0x40013800
 8002fe0:	e000e100 	.word	0xe000e100
 8002fe4:	04010001 	.word	0x04010001

08002fe8 <StartDefaultTask>:
  LDRTaskInit();
  EncoderTaskInit();
}

void StartDefaultTask(void const * argument)
{
 8002fe8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002fea:	2001      	movs	r0, #1
 8002fec:	f7fe f9d8 	bl	80013a0 <osDelay>
 8002ff0:	e7fb      	b.n	8002fea <StartDefaultTask+0x2>
	...

08002ff4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8002ff4:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002ff6:	4d0d      	ldr	r5, [pc, #52]	; (800302c <MX_FREERTOS_Init+0x38>)
void MX_FREERTOS_Init(void) {
 8002ff8:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002ffa:	ac01      	add	r4, sp, #4
 8002ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003000:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003002:	2100      	movs	r1, #0
 8003004:	a801      	add	r0, sp, #4
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003006:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003008:	f7fe f9b1 	bl	800136e <osThreadCreate>
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <MX_FREERTOS_Init+0x3c>)
 800300e:	6018      	str	r0, [r3, #0]
  EncoderQueueInit();
 8003010:	f7ff fbda 	bl	80027c8 <EncoderQueueInit>
  LDRQueueInit();
 8003014:	f7ff fd6c 	bl	8002af0 <LDRQueueInit>
  LedTaskInit();
 8003018:	f7ff feba 	bl	8002d90 <LedTaskInit>
  ESPTaskInit();
 800301c:	f7ff fc90 	bl	8002940 <ESPTaskInit>
  LDRTaskInit();
 8003020:	f7ff fdaa 	bl	8002b78 <LDRTaskInit>
  EncoderTaskInit();
 8003024:	f7ff fc32 	bl	800288c <EncoderTaskInit>
}
 8003028:	b007      	add	sp, #28
 800302a:	bd30      	pop	{r4, r5, pc}
 800302c:	08003d00 	.word	0x08003d00
 8003030:	20001984 	.word	0x20001984

08003034 <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 8003034:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003036:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <SystemClock_Config+0x6c>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	f022 0207 	bic.w	r2, r2, #7
 800303e:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003040:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8003042:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <SystemClock_Config+0x70>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800304a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800304e:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003058:	681a      	ldr	r2, [r3, #0]
    Error_Handler();  
  }
  LL_RCC_HSI_SetCalibTrimming(16);
  LL_RCC_HSI_Enable();

  while(LL_RCC_HSI_IsReady() != 1)
 800305a:	0792      	lsls	r2, r2, #30
 800305c:	d5fc      	bpl.n	8003058 <SystemClock_Config+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003064:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800306c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8003074:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	f022 0203 	bic.w	r2, r2, #3
 800307c:	605a      	str	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800307e:	685a      	ldr	r2, [r3, #4]
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);

  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003080:	f012 0f0c 	tst.w	r2, #12
 8003084:	d1fb      	bne.n	800307e <SystemClock_Config+0x4a>
  {
  
  }
  LL_Init1msTick(8000000);
 8003086:	4808      	ldr	r0, [pc, #32]	; (80030a8 <SystemClock_Config+0x74>)
 8003088:	f7fe f944 	bl	8001314 <LL_Init1msTick>
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800308c:	4a07      	ldr	r2, [pc, #28]	; (80030ac <SystemClock_Config+0x78>)
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
  LL_SetSystemCoreClock(8000000);
 800308e:	4806      	ldr	r0, [pc, #24]	; (80030a8 <SystemClock_Config+0x74>)
 8003090:	6813      	ldr	r3, [r2, #0]
 8003092:	f043 0304 	orr.w	r3, r3, #4
 8003096:	6013      	str	r3, [r2, #0]
}
 8003098:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_SetSystemCoreClock(8000000);
 800309c:	f7fe b95c 	b.w	8001358 <LL_SetSystemCoreClock>
 80030a0:	40022000 	.word	0x40022000
 80030a4:	40021000 	.word	0x40021000
 80030a8:	007a1200 	.word	0x007a1200
 80030ac:	e000e010 	.word	0xe000e010

080030b0 <main>:
{
 80030b0:	b508      	push	{r3, lr}
  HAL_Init();
 80030b2:	f7fd fcb7 	bl	8000a24 <HAL_Init>
  SystemClock_Config();
 80030b6:	f7ff ffbd 	bl	8003034 <SystemClock_Config>
  MX_FREERTOS_Init();
 80030ba:	f7ff ff9b 	bl	8002ff4 <MX_FREERTOS_Init>
  osKernelStart();
 80030be:	f7fe f951 	bl	8001364 <osKernelStart>
 80030c2:	e7fe      	b.n	80030c2 <main+0x12>

080030c4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == TIM1) {
 80030c4:	6802      	ldr	r2, [r0, #0]
 80030c6:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d101      	bne.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80030cc:	f7fd bcbc 	b.w	8000a48 <HAL_IncTick>
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40012c00 	.word	0x40012c00

080030d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <HAL_MspInit+0x48>)
{
 80030da:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80030dc:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030de:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 80030e0:	f042 0201 	orr.w	r2, r2, #1
 80030e4:	619a      	str	r2, [r3, #24]
 80030e6:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030e8:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 80030ec:	f002 0201 	and.w	r2, r2, #1
 80030f0:	9200      	str	r2, [sp, #0]
 80030f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030fa:	61da      	str	r2, [r3, #28]
 80030fc:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030fe:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8003100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003108:	f7fd fcbc 	bl	8000a84 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800310c:	4a05      	ldr	r2, [pc, #20]	; (8003124 <HAL_MspInit+0x4c>)
 800310e:	6853      	ldr	r3, [r2, #4]
 8003110:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003114:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003118:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800311a:	b003      	add	sp, #12
 800311c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003120:	40021000 	.word	0x40021000
 8003124:	40010000 	.word	0x40010000

08003128 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003128:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 800312a:	4601      	mov	r1, r0
{
 800312c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 800312e:	2200      	movs	r2, #0
 8003130:	2019      	movs	r0, #25
 8003132:	f7fd fca7 	bl	8000a84 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8003136:	2019      	movs	r0, #25
 8003138:	f7fd fcd8 	bl	8000aec <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800313c:	4b14      	ldr	r3, [pc, #80]	; (8003190 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800313e:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003140:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003142:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003148:	619a      	str	r2, [r3, #24]
 800314a:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800314c:	4c11      	ldr	r4, [pc, #68]	; (8003194 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800314e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003152:	9302      	str	r3, [sp, #8]
 8003154:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003156:	f7fd fce5 	bl	8000b24 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800315a:	f7fd fcd3 	bl	8000b04 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800315e:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_InitTick+0x70>)
 8003160:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003162:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003166:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <HAL_InitTick+0x74>)
 800316a:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800316e:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003170:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8003172:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003174:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8003176:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003178:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800317a:	f7fd fddb 	bl	8000d34 <HAL_TIM_Base_Init>
 800317e:	b920      	cbnz	r0, 800318a <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003180:	4620      	mov	r0, r4
 8003182:	f7fd fcee 	bl	8000b62 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8003186:	b008      	add	sp, #32
 8003188:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800318a:	2001      	movs	r0, #1
 800318c:	e7fb      	b.n	8003186 <HAL_InitTick+0x5e>
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	20001988 	.word	0x20001988
 8003198:	40012c00 	.word	0x40012c00
 800319c:	000f4240 	.word	0x000f4240

080031a0 <NMI_Handler>:
 80031a0:	4770      	bx	lr

080031a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031a2:	e7fe      	b.n	80031a2 <HardFault_Handler>

080031a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031a4:	e7fe      	b.n	80031a4 <MemManage_Handler>

080031a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031a6:	e7fe      	b.n	80031a6 <BusFault_Handler>

080031a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031a8:	e7fe      	b.n	80031a8 <UsageFault_Handler>

080031aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031aa:	4770      	bx	lr

080031ac <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031ac:	4801      	ldr	r0, [pc, #4]	; (80031b4 <TIM1_UP_IRQHandler+0x8>)
 80031ae:	f7fd bce7 	b.w	8000b80 <HAL_TIM_IRQHandler>
 80031b2:	bf00      	nop
 80031b4:	20001988 	.word	0x20001988

080031b8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80031b8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <_sbrk+0x2c>)
{
 80031bc:	4602      	mov	r2, r0
	if (heap_end == 0)
 80031be:	6819      	ldr	r1, [r3, #0]
 80031c0:	b909      	cbnz	r1, 80031c6 <_sbrk+0xe>
		heap_end = &end;
 80031c2:	4909      	ldr	r1, [pc, #36]	; (80031e8 <_sbrk+0x30>)
 80031c4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80031c6:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80031c8:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80031ca:	4402      	add	r2, r0
 80031cc:	428a      	cmp	r2, r1
 80031ce:	d906      	bls.n	80031de <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80031d0:	f000 f858 	bl	8003284 <__errno>
 80031d4:	230c      	movs	r3, #12
 80031d6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80031d8:	f04f 30ff 	mov.w	r0, #4294967295
 80031dc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80031de:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80031e0:	bd08      	pop	{r3, pc}
 80031e2:	bf00      	nop
 80031e4:	20001360 	.word	0x20001360
 80031e8:	200019cc 	.word	0x200019cc

080031ec <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <SystemInit+0x40>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	4a0d      	ldr	r2, [pc, #52]	; (8003230 <SystemInit+0x44>)
 80031fa:	400a      	ands	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003204:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003208:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003210:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003218:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800321a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800321e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003220:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <SystemInit+0x48>)
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40021000 	.word	0x40021000
 8003230:	f8ff0000 	.word	0xf8ff0000
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003238:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800323a:	e003      	b.n	8003244 <LoopCopyDataInit>

0800323c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800323e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003240:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003242:	3104      	adds	r1, #4

08003244 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003244:	480a      	ldr	r0, [pc, #40]	; (8003270 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003248:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800324a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800324c:	d3f6      	bcc.n	800323c <CopyDataInit>
  ldr r2, =_sbss
 800324e:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003250:	e002      	b.n	8003258 <LoopFillZerobss>

08003252 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003252:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003254:	f842 3b04 	str.w	r3, [r2], #4

08003258 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003258:	4b08      	ldr	r3, [pc, #32]	; (800327c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800325a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800325c:	d3f9      	bcc.n	8003252 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800325e:	f7ff ffc5 	bl	80031ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003262:	f000 f815 	bl	8003290 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003266:	f7ff ff23 	bl	80030b0 <main>
  bx lr
 800326a:	4770      	bx	lr
  ldr r3, =_sidata
 800326c:	08004158 	.word	0x08004158
  ldr r0, =_sdata
 8003270:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003274:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8003278:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 800327c:	200019cc 	.word	0x200019cc

08003280 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003280:	e7fe      	b.n	8003280 <CAN1_RX1_IRQHandler>
	...

08003284 <__errno>:
 8003284:	4b01      	ldr	r3, [pc, #4]	; (800328c <__errno+0x8>)
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20000014 	.word	0x20000014

08003290 <__libc_init_array>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	2500      	movs	r5, #0
 8003294:	4e0c      	ldr	r6, [pc, #48]	; (80032c8 <__libc_init_array+0x38>)
 8003296:	4c0d      	ldr	r4, [pc, #52]	; (80032cc <__libc_init_array+0x3c>)
 8003298:	1ba4      	subs	r4, r4, r6
 800329a:	10a4      	asrs	r4, r4, #2
 800329c:	42a5      	cmp	r5, r4
 800329e:	d109      	bne.n	80032b4 <__libc_init_array+0x24>
 80032a0:	f000 fd22 	bl	8003ce8 <_init>
 80032a4:	2500      	movs	r5, #0
 80032a6:	4e0a      	ldr	r6, [pc, #40]	; (80032d0 <__libc_init_array+0x40>)
 80032a8:	4c0a      	ldr	r4, [pc, #40]	; (80032d4 <__libc_init_array+0x44>)
 80032aa:	1ba4      	subs	r4, r4, r6
 80032ac:	10a4      	asrs	r4, r4, #2
 80032ae:	42a5      	cmp	r5, r4
 80032b0:	d105      	bne.n	80032be <__libc_init_array+0x2e>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032b8:	4798      	blx	r3
 80032ba:	3501      	adds	r5, #1
 80032bc:	e7ee      	b.n	800329c <__libc_init_array+0xc>
 80032be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032c2:	4798      	blx	r3
 80032c4:	3501      	adds	r5, #1
 80032c6:	e7f2      	b.n	80032ae <__libc_init_array+0x1e>
 80032c8:	08004150 	.word	0x08004150
 80032cc:	08004150 	.word	0x08004150
 80032d0:	08004150 	.word	0x08004150
 80032d4:	08004154 	.word	0x08004154

080032d8 <memcpy>:
 80032d8:	b510      	push	{r4, lr}
 80032da:	1e43      	subs	r3, r0, #1
 80032dc:	440a      	add	r2, r1
 80032de:	4291      	cmp	r1, r2
 80032e0:	d100      	bne.n	80032e4 <memcpy+0xc>
 80032e2:	bd10      	pop	{r4, pc}
 80032e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032ec:	e7f7      	b.n	80032de <memcpy+0x6>

080032ee <memset>:
 80032ee:	4603      	mov	r3, r0
 80032f0:	4402      	add	r2, r0
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d100      	bne.n	80032f8 <memset+0xa>
 80032f6:	4770      	bx	lr
 80032f8:	f803 1b01 	strb.w	r1, [r3], #1
 80032fc:	e7f9      	b.n	80032f2 <memset+0x4>
	...

08003300 <siprintf>:
 8003300:	b40e      	push	{r1, r2, r3}
 8003302:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003306:	b500      	push	{lr}
 8003308:	b09c      	sub	sp, #112	; 0x70
 800330a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800330e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003312:	9104      	str	r1, [sp, #16]
 8003314:	9107      	str	r1, [sp, #28]
 8003316:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800331a:	ab1d      	add	r3, sp, #116	; 0x74
 800331c:	9002      	str	r0, [sp, #8]
 800331e:	9006      	str	r0, [sp, #24]
 8003320:	4808      	ldr	r0, [pc, #32]	; (8003344 <siprintf+0x44>)
 8003322:	f853 2b04 	ldr.w	r2, [r3], #4
 8003326:	f8ad 1016 	strh.w	r1, [sp, #22]
 800332a:	6800      	ldr	r0, [r0, #0]
 800332c:	a902      	add	r1, sp, #8
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	f000 f92c 	bl	800358c <_svfiprintf_r>
 8003334:	2200      	movs	r2, #0
 8003336:	9b02      	ldr	r3, [sp, #8]
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	b01c      	add	sp, #112	; 0x70
 800333c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003340:	b003      	add	sp, #12
 8003342:	4770      	bx	lr
 8003344:	20000014 	.word	0x20000014

08003348 <strstr>:
 8003348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800334a:	7803      	ldrb	r3, [r0, #0]
 800334c:	b133      	cbz	r3, 800335c <strstr+0x14>
 800334e:	4603      	mov	r3, r0
 8003350:	4618      	mov	r0, r3
 8003352:	1c5e      	adds	r6, r3, #1
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	b933      	cbnz	r3, 8003366 <strstr+0x1e>
 8003358:	4618      	mov	r0, r3
 800335a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800335c:	780b      	ldrb	r3, [r1, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	bf18      	it	ne
 8003362:	2000      	movne	r0, #0
 8003364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003366:	1e4d      	subs	r5, r1, #1
 8003368:	1e44      	subs	r4, r0, #1
 800336a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800336e:	2a00      	cmp	r2, #0
 8003370:	d0f3      	beq.n	800335a <strstr+0x12>
 8003372:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8003376:	4633      	mov	r3, r6
 8003378:	4297      	cmp	r7, r2
 800337a:	d0f6      	beq.n	800336a <strstr+0x22>
 800337c:	e7e8      	b.n	8003350 <strstr+0x8>

0800337e <_strtol_l.isra.0>:
 800337e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003382:	4680      	mov	r8, r0
 8003384:	4689      	mov	r9, r1
 8003386:	4692      	mov	sl, r2
 8003388:	461f      	mov	r7, r3
 800338a:	468b      	mov	fp, r1
 800338c:	465d      	mov	r5, fp
 800338e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003390:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003394:	f000 f88a 	bl	80034ac <__locale_ctype_ptr_l>
 8003398:	4420      	add	r0, r4
 800339a:	7846      	ldrb	r6, [r0, #1]
 800339c:	f016 0608 	ands.w	r6, r6, #8
 80033a0:	d10b      	bne.n	80033ba <_strtol_l.isra.0+0x3c>
 80033a2:	2c2d      	cmp	r4, #45	; 0x2d
 80033a4:	d10b      	bne.n	80033be <_strtol_l.isra.0+0x40>
 80033a6:	2601      	movs	r6, #1
 80033a8:	782c      	ldrb	r4, [r5, #0]
 80033aa:	f10b 0502 	add.w	r5, fp, #2
 80033ae:	b167      	cbz	r7, 80033ca <_strtol_l.isra.0+0x4c>
 80033b0:	2f10      	cmp	r7, #16
 80033b2:	d114      	bne.n	80033de <_strtol_l.isra.0+0x60>
 80033b4:	2c30      	cmp	r4, #48	; 0x30
 80033b6:	d00a      	beq.n	80033ce <_strtol_l.isra.0+0x50>
 80033b8:	e011      	b.n	80033de <_strtol_l.isra.0+0x60>
 80033ba:	46ab      	mov	fp, r5
 80033bc:	e7e6      	b.n	800338c <_strtol_l.isra.0+0xe>
 80033be:	2c2b      	cmp	r4, #43	; 0x2b
 80033c0:	bf04      	itt	eq
 80033c2:	782c      	ldrbeq	r4, [r5, #0]
 80033c4:	f10b 0502 	addeq.w	r5, fp, #2
 80033c8:	e7f1      	b.n	80033ae <_strtol_l.isra.0+0x30>
 80033ca:	2c30      	cmp	r4, #48	; 0x30
 80033cc:	d127      	bne.n	800341e <_strtol_l.isra.0+0xa0>
 80033ce:	782b      	ldrb	r3, [r5, #0]
 80033d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80033d4:	2b58      	cmp	r3, #88	; 0x58
 80033d6:	d14b      	bne.n	8003470 <_strtol_l.isra.0+0xf2>
 80033d8:	2710      	movs	r7, #16
 80033da:	786c      	ldrb	r4, [r5, #1]
 80033dc:	3502      	adds	r5, #2
 80033de:	2e00      	cmp	r6, #0
 80033e0:	bf0c      	ite	eq
 80033e2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80033e6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80033ea:	2200      	movs	r2, #0
 80033ec:	fbb1 fef7 	udiv	lr, r1, r7
 80033f0:	4610      	mov	r0, r2
 80033f2:	fb07 1c1e 	mls	ip, r7, lr, r1
 80033f6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80033fa:	2b09      	cmp	r3, #9
 80033fc:	d811      	bhi.n	8003422 <_strtol_l.isra.0+0xa4>
 80033fe:	461c      	mov	r4, r3
 8003400:	42a7      	cmp	r7, r4
 8003402:	dd1d      	ble.n	8003440 <_strtol_l.isra.0+0xc2>
 8003404:	1c53      	adds	r3, r2, #1
 8003406:	d007      	beq.n	8003418 <_strtol_l.isra.0+0x9a>
 8003408:	4586      	cmp	lr, r0
 800340a:	d316      	bcc.n	800343a <_strtol_l.isra.0+0xbc>
 800340c:	d101      	bne.n	8003412 <_strtol_l.isra.0+0x94>
 800340e:	45a4      	cmp	ip, r4
 8003410:	db13      	blt.n	800343a <_strtol_l.isra.0+0xbc>
 8003412:	2201      	movs	r2, #1
 8003414:	fb00 4007 	mla	r0, r0, r7, r4
 8003418:	f815 4b01 	ldrb.w	r4, [r5], #1
 800341c:	e7eb      	b.n	80033f6 <_strtol_l.isra.0+0x78>
 800341e:	270a      	movs	r7, #10
 8003420:	e7dd      	b.n	80033de <_strtol_l.isra.0+0x60>
 8003422:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003426:	2b19      	cmp	r3, #25
 8003428:	d801      	bhi.n	800342e <_strtol_l.isra.0+0xb0>
 800342a:	3c37      	subs	r4, #55	; 0x37
 800342c:	e7e8      	b.n	8003400 <_strtol_l.isra.0+0x82>
 800342e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003432:	2b19      	cmp	r3, #25
 8003434:	d804      	bhi.n	8003440 <_strtol_l.isra.0+0xc2>
 8003436:	3c57      	subs	r4, #87	; 0x57
 8003438:	e7e2      	b.n	8003400 <_strtol_l.isra.0+0x82>
 800343a:	f04f 32ff 	mov.w	r2, #4294967295
 800343e:	e7eb      	b.n	8003418 <_strtol_l.isra.0+0x9a>
 8003440:	1c53      	adds	r3, r2, #1
 8003442:	d108      	bne.n	8003456 <_strtol_l.isra.0+0xd8>
 8003444:	2322      	movs	r3, #34	; 0x22
 8003446:	4608      	mov	r0, r1
 8003448:	f8c8 3000 	str.w	r3, [r8]
 800344c:	f1ba 0f00 	cmp.w	sl, #0
 8003450:	d107      	bne.n	8003462 <_strtol_l.isra.0+0xe4>
 8003452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003456:	b106      	cbz	r6, 800345a <_strtol_l.isra.0+0xdc>
 8003458:	4240      	negs	r0, r0
 800345a:	f1ba 0f00 	cmp.w	sl, #0
 800345e:	d00c      	beq.n	800347a <_strtol_l.isra.0+0xfc>
 8003460:	b122      	cbz	r2, 800346c <_strtol_l.isra.0+0xee>
 8003462:	3d01      	subs	r5, #1
 8003464:	f8ca 5000 	str.w	r5, [sl]
 8003468:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800346c:	464d      	mov	r5, r9
 800346e:	e7f9      	b.n	8003464 <_strtol_l.isra.0+0xe6>
 8003470:	2430      	movs	r4, #48	; 0x30
 8003472:	2f00      	cmp	r7, #0
 8003474:	d1b3      	bne.n	80033de <_strtol_l.isra.0+0x60>
 8003476:	2708      	movs	r7, #8
 8003478:	e7b1      	b.n	80033de <_strtol_l.isra.0+0x60>
 800347a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003480 <strtol>:
 8003480:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <strtol+0x24>)
 8003482:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003484:	681c      	ldr	r4, [r3, #0]
 8003486:	4d08      	ldr	r5, [pc, #32]	; (80034a8 <strtol+0x28>)
 8003488:	6a23      	ldr	r3, [r4, #32]
 800348a:	2b00      	cmp	r3, #0
 800348c:	bf08      	it	eq
 800348e:	462b      	moveq	r3, r5
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	4613      	mov	r3, r2
 8003494:	460a      	mov	r2, r1
 8003496:	4601      	mov	r1, r0
 8003498:	4620      	mov	r0, r4
 800349a:	f7ff ff70 	bl	800337e <_strtol_l.isra.0>
 800349e:	b003      	add	sp, #12
 80034a0:	bd30      	pop	{r4, r5, pc}
 80034a2:	bf00      	nop
 80034a4:	20000014 	.word	0x20000014
 80034a8:	20000078 	.word	0x20000078

080034ac <__locale_ctype_ptr_l>:
 80034ac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80034b0:	4770      	bx	lr

080034b2 <__ascii_mbtowc>:
 80034b2:	b082      	sub	sp, #8
 80034b4:	b901      	cbnz	r1, 80034b8 <__ascii_mbtowc+0x6>
 80034b6:	a901      	add	r1, sp, #4
 80034b8:	b142      	cbz	r2, 80034cc <__ascii_mbtowc+0x1a>
 80034ba:	b14b      	cbz	r3, 80034d0 <__ascii_mbtowc+0x1e>
 80034bc:	7813      	ldrb	r3, [r2, #0]
 80034be:	600b      	str	r3, [r1, #0]
 80034c0:	7812      	ldrb	r2, [r2, #0]
 80034c2:	1c10      	adds	r0, r2, #0
 80034c4:	bf18      	it	ne
 80034c6:	2001      	movne	r0, #1
 80034c8:	b002      	add	sp, #8
 80034ca:	4770      	bx	lr
 80034cc:	4610      	mov	r0, r2
 80034ce:	e7fb      	b.n	80034c8 <__ascii_mbtowc+0x16>
 80034d0:	f06f 0001 	mvn.w	r0, #1
 80034d4:	e7f8      	b.n	80034c8 <__ascii_mbtowc+0x16>

080034d6 <__ssputs_r>:
 80034d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034da:	688e      	ldr	r6, [r1, #8]
 80034dc:	4682      	mov	sl, r0
 80034de:	429e      	cmp	r6, r3
 80034e0:	460c      	mov	r4, r1
 80034e2:	4691      	mov	r9, r2
 80034e4:	4698      	mov	r8, r3
 80034e6:	d835      	bhi.n	8003554 <__ssputs_r+0x7e>
 80034e8:	898a      	ldrh	r2, [r1, #12]
 80034ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034ee:	d031      	beq.n	8003554 <__ssputs_r+0x7e>
 80034f0:	2302      	movs	r3, #2
 80034f2:	6825      	ldr	r5, [r4, #0]
 80034f4:	6909      	ldr	r1, [r1, #16]
 80034f6:	1a6f      	subs	r7, r5, r1
 80034f8:	6965      	ldr	r5, [r4, #20]
 80034fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034fe:	fb95 f5f3 	sdiv	r5, r5, r3
 8003502:	f108 0301 	add.w	r3, r8, #1
 8003506:	443b      	add	r3, r7
 8003508:	429d      	cmp	r5, r3
 800350a:	bf38      	it	cc
 800350c:	461d      	movcc	r5, r3
 800350e:	0553      	lsls	r3, r2, #21
 8003510:	d531      	bpl.n	8003576 <__ssputs_r+0xa0>
 8003512:	4629      	mov	r1, r5
 8003514:	f000 fb48 	bl	8003ba8 <_malloc_r>
 8003518:	4606      	mov	r6, r0
 800351a:	b950      	cbnz	r0, 8003532 <__ssputs_r+0x5c>
 800351c:	230c      	movs	r3, #12
 800351e:	f8ca 3000 	str.w	r3, [sl]
 8003522:	89a3      	ldrh	r3, [r4, #12]
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800352c:	81a3      	strh	r3, [r4, #12]
 800352e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003532:	463a      	mov	r2, r7
 8003534:	6921      	ldr	r1, [r4, #16]
 8003536:	f7ff fecf 	bl	80032d8 <memcpy>
 800353a:	89a3      	ldrh	r3, [r4, #12]
 800353c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003544:	81a3      	strh	r3, [r4, #12]
 8003546:	6126      	str	r6, [r4, #16]
 8003548:	443e      	add	r6, r7
 800354a:	6026      	str	r6, [r4, #0]
 800354c:	4646      	mov	r6, r8
 800354e:	6165      	str	r5, [r4, #20]
 8003550:	1bed      	subs	r5, r5, r7
 8003552:	60a5      	str	r5, [r4, #8]
 8003554:	4546      	cmp	r6, r8
 8003556:	bf28      	it	cs
 8003558:	4646      	movcs	r6, r8
 800355a:	4649      	mov	r1, r9
 800355c:	4632      	mov	r2, r6
 800355e:	6820      	ldr	r0, [r4, #0]
 8003560:	f000 fabb 	bl	8003ada <memmove>
 8003564:	68a3      	ldr	r3, [r4, #8]
 8003566:	2000      	movs	r0, #0
 8003568:	1b9b      	subs	r3, r3, r6
 800356a:	60a3      	str	r3, [r4, #8]
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	441e      	add	r6, r3
 8003570:	6026      	str	r6, [r4, #0]
 8003572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003576:	462a      	mov	r2, r5
 8003578:	f000 fb74 	bl	8003c64 <_realloc_r>
 800357c:	4606      	mov	r6, r0
 800357e:	2800      	cmp	r0, #0
 8003580:	d1e1      	bne.n	8003546 <__ssputs_r+0x70>
 8003582:	6921      	ldr	r1, [r4, #16]
 8003584:	4650      	mov	r0, sl
 8003586:	f000 fac3 	bl	8003b10 <_free_r>
 800358a:	e7c7      	b.n	800351c <__ssputs_r+0x46>

0800358c <_svfiprintf_r>:
 800358c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003590:	b09d      	sub	sp, #116	; 0x74
 8003592:	9303      	str	r3, [sp, #12]
 8003594:	898b      	ldrh	r3, [r1, #12]
 8003596:	4680      	mov	r8, r0
 8003598:	061c      	lsls	r4, r3, #24
 800359a:	460d      	mov	r5, r1
 800359c:	4616      	mov	r6, r2
 800359e:	d50f      	bpl.n	80035c0 <_svfiprintf_r+0x34>
 80035a0:	690b      	ldr	r3, [r1, #16]
 80035a2:	b96b      	cbnz	r3, 80035c0 <_svfiprintf_r+0x34>
 80035a4:	2140      	movs	r1, #64	; 0x40
 80035a6:	f000 faff 	bl	8003ba8 <_malloc_r>
 80035aa:	6028      	str	r0, [r5, #0]
 80035ac:	6128      	str	r0, [r5, #16]
 80035ae:	b928      	cbnz	r0, 80035bc <_svfiprintf_r+0x30>
 80035b0:	230c      	movs	r3, #12
 80035b2:	f8c8 3000 	str.w	r3, [r8]
 80035b6:	f04f 30ff 	mov.w	r0, #4294967295
 80035ba:	e0c4      	b.n	8003746 <_svfiprintf_r+0x1ba>
 80035bc:	2340      	movs	r3, #64	; 0x40
 80035be:	616b      	str	r3, [r5, #20]
 80035c0:	2300      	movs	r3, #0
 80035c2:	9309      	str	r3, [sp, #36]	; 0x24
 80035c4:	2320      	movs	r3, #32
 80035c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035ca:	2330      	movs	r3, #48	; 0x30
 80035cc:	f04f 0b01 	mov.w	fp, #1
 80035d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035d4:	4637      	mov	r7, r6
 80035d6:	463c      	mov	r4, r7
 80035d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d13c      	bne.n	800365a <_svfiprintf_r+0xce>
 80035e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80035e4:	d00b      	beq.n	80035fe <_svfiprintf_r+0x72>
 80035e6:	4653      	mov	r3, sl
 80035e8:	4632      	mov	r2, r6
 80035ea:	4629      	mov	r1, r5
 80035ec:	4640      	mov	r0, r8
 80035ee:	f7ff ff72 	bl	80034d6 <__ssputs_r>
 80035f2:	3001      	adds	r0, #1
 80035f4:	f000 80a2 	beq.w	800373c <_svfiprintf_r+0x1b0>
 80035f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035fa:	4453      	add	r3, sl
 80035fc:	9309      	str	r3, [sp, #36]	; 0x24
 80035fe:	783b      	ldrb	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 809b 	beq.w	800373c <_svfiprintf_r+0x1b0>
 8003606:	2300      	movs	r3, #0
 8003608:	f04f 32ff 	mov.w	r2, #4294967295
 800360c:	9304      	str	r3, [sp, #16]
 800360e:	9307      	str	r3, [sp, #28]
 8003610:	9205      	str	r2, [sp, #20]
 8003612:	9306      	str	r3, [sp, #24]
 8003614:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003618:	931a      	str	r3, [sp, #104]	; 0x68
 800361a:	2205      	movs	r2, #5
 800361c:	7821      	ldrb	r1, [r4, #0]
 800361e:	4850      	ldr	r0, [pc, #320]	; (8003760 <_svfiprintf_r+0x1d4>)
 8003620:	f000 fa4d 	bl	8003abe <memchr>
 8003624:	1c67      	adds	r7, r4, #1
 8003626:	9b04      	ldr	r3, [sp, #16]
 8003628:	b9d8      	cbnz	r0, 8003662 <_svfiprintf_r+0xd6>
 800362a:	06d9      	lsls	r1, r3, #27
 800362c:	bf44      	itt	mi
 800362e:	2220      	movmi	r2, #32
 8003630:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003634:	071a      	lsls	r2, r3, #28
 8003636:	bf44      	itt	mi
 8003638:	222b      	movmi	r2, #43	; 0x2b
 800363a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800363e:	7822      	ldrb	r2, [r4, #0]
 8003640:	2a2a      	cmp	r2, #42	; 0x2a
 8003642:	d016      	beq.n	8003672 <_svfiprintf_r+0xe6>
 8003644:	2100      	movs	r1, #0
 8003646:	200a      	movs	r0, #10
 8003648:	9a07      	ldr	r2, [sp, #28]
 800364a:	4627      	mov	r7, r4
 800364c:	783b      	ldrb	r3, [r7, #0]
 800364e:	3401      	adds	r4, #1
 8003650:	3b30      	subs	r3, #48	; 0x30
 8003652:	2b09      	cmp	r3, #9
 8003654:	d950      	bls.n	80036f8 <_svfiprintf_r+0x16c>
 8003656:	b1c9      	cbz	r1, 800368c <_svfiprintf_r+0x100>
 8003658:	e011      	b.n	800367e <_svfiprintf_r+0xf2>
 800365a:	2b25      	cmp	r3, #37	; 0x25
 800365c:	d0c0      	beq.n	80035e0 <_svfiprintf_r+0x54>
 800365e:	4627      	mov	r7, r4
 8003660:	e7b9      	b.n	80035d6 <_svfiprintf_r+0x4a>
 8003662:	4a3f      	ldr	r2, [pc, #252]	; (8003760 <_svfiprintf_r+0x1d4>)
 8003664:	463c      	mov	r4, r7
 8003666:	1a80      	subs	r0, r0, r2
 8003668:	fa0b f000 	lsl.w	r0, fp, r0
 800366c:	4318      	orrs	r0, r3
 800366e:	9004      	str	r0, [sp, #16]
 8003670:	e7d3      	b.n	800361a <_svfiprintf_r+0x8e>
 8003672:	9a03      	ldr	r2, [sp, #12]
 8003674:	1d11      	adds	r1, r2, #4
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	9103      	str	r1, [sp, #12]
 800367a:	2a00      	cmp	r2, #0
 800367c:	db01      	blt.n	8003682 <_svfiprintf_r+0xf6>
 800367e:	9207      	str	r2, [sp, #28]
 8003680:	e004      	b.n	800368c <_svfiprintf_r+0x100>
 8003682:	4252      	negs	r2, r2
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	9207      	str	r2, [sp, #28]
 800368a:	9304      	str	r3, [sp, #16]
 800368c:	783b      	ldrb	r3, [r7, #0]
 800368e:	2b2e      	cmp	r3, #46	; 0x2e
 8003690:	d10d      	bne.n	80036ae <_svfiprintf_r+0x122>
 8003692:	787b      	ldrb	r3, [r7, #1]
 8003694:	1c79      	adds	r1, r7, #1
 8003696:	2b2a      	cmp	r3, #42	; 0x2a
 8003698:	d132      	bne.n	8003700 <_svfiprintf_r+0x174>
 800369a:	9b03      	ldr	r3, [sp, #12]
 800369c:	3702      	adds	r7, #2
 800369e:	1d1a      	adds	r2, r3, #4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	9203      	str	r2, [sp, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bfb8      	it	lt
 80036a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80036ac:	9305      	str	r3, [sp, #20]
 80036ae:	4c2d      	ldr	r4, [pc, #180]	; (8003764 <_svfiprintf_r+0x1d8>)
 80036b0:	2203      	movs	r2, #3
 80036b2:	7839      	ldrb	r1, [r7, #0]
 80036b4:	4620      	mov	r0, r4
 80036b6:	f000 fa02 	bl	8003abe <memchr>
 80036ba:	b138      	cbz	r0, 80036cc <_svfiprintf_r+0x140>
 80036bc:	2340      	movs	r3, #64	; 0x40
 80036be:	1b00      	subs	r0, r0, r4
 80036c0:	fa03 f000 	lsl.w	r0, r3, r0
 80036c4:	9b04      	ldr	r3, [sp, #16]
 80036c6:	3701      	adds	r7, #1
 80036c8:	4303      	orrs	r3, r0
 80036ca:	9304      	str	r3, [sp, #16]
 80036cc:	7839      	ldrb	r1, [r7, #0]
 80036ce:	2206      	movs	r2, #6
 80036d0:	4825      	ldr	r0, [pc, #148]	; (8003768 <_svfiprintf_r+0x1dc>)
 80036d2:	1c7e      	adds	r6, r7, #1
 80036d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036d8:	f000 f9f1 	bl	8003abe <memchr>
 80036dc:	2800      	cmp	r0, #0
 80036de:	d035      	beq.n	800374c <_svfiprintf_r+0x1c0>
 80036e0:	4b22      	ldr	r3, [pc, #136]	; (800376c <_svfiprintf_r+0x1e0>)
 80036e2:	b9fb      	cbnz	r3, 8003724 <_svfiprintf_r+0x198>
 80036e4:	9b03      	ldr	r3, [sp, #12]
 80036e6:	3307      	adds	r3, #7
 80036e8:	f023 0307 	bic.w	r3, r3, #7
 80036ec:	3308      	adds	r3, #8
 80036ee:	9303      	str	r3, [sp, #12]
 80036f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036f2:	444b      	add	r3, r9
 80036f4:	9309      	str	r3, [sp, #36]	; 0x24
 80036f6:	e76d      	b.n	80035d4 <_svfiprintf_r+0x48>
 80036f8:	fb00 3202 	mla	r2, r0, r2, r3
 80036fc:	2101      	movs	r1, #1
 80036fe:	e7a4      	b.n	800364a <_svfiprintf_r+0xbe>
 8003700:	2300      	movs	r3, #0
 8003702:	240a      	movs	r4, #10
 8003704:	4618      	mov	r0, r3
 8003706:	9305      	str	r3, [sp, #20]
 8003708:	460f      	mov	r7, r1
 800370a:	783a      	ldrb	r2, [r7, #0]
 800370c:	3101      	adds	r1, #1
 800370e:	3a30      	subs	r2, #48	; 0x30
 8003710:	2a09      	cmp	r2, #9
 8003712:	d903      	bls.n	800371c <_svfiprintf_r+0x190>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ca      	beq.n	80036ae <_svfiprintf_r+0x122>
 8003718:	9005      	str	r0, [sp, #20]
 800371a:	e7c8      	b.n	80036ae <_svfiprintf_r+0x122>
 800371c:	fb04 2000 	mla	r0, r4, r0, r2
 8003720:	2301      	movs	r3, #1
 8003722:	e7f1      	b.n	8003708 <_svfiprintf_r+0x17c>
 8003724:	ab03      	add	r3, sp, #12
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	462a      	mov	r2, r5
 800372a:	4b11      	ldr	r3, [pc, #68]	; (8003770 <_svfiprintf_r+0x1e4>)
 800372c:	a904      	add	r1, sp, #16
 800372e:	4640      	mov	r0, r8
 8003730:	f3af 8000 	nop.w
 8003734:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003738:	4681      	mov	r9, r0
 800373a:	d1d9      	bne.n	80036f0 <_svfiprintf_r+0x164>
 800373c:	89ab      	ldrh	r3, [r5, #12]
 800373e:	065b      	lsls	r3, r3, #25
 8003740:	f53f af39 	bmi.w	80035b6 <_svfiprintf_r+0x2a>
 8003744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003746:	b01d      	add	sp, #116	; 0x74
 8003748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800374c:	ab03      	add	r3, sp, #12
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	462a      	mov	r2, r5
 8003752:	4b07      	ldr	r3, [pc, #28]	; (8003770 <_svfiprintf_r+0x1e4>)
 8003754:	a904      	add	r1, sp, #16
 8003756:	4640      	mov	r0, r8
 8003758:	f000 f884 	bl	8003864 <_printf_i>
 800375c:	e7ea      	b.n	8003734 <_svfiprintf_r+0x1a8>
 800375e:	bf00      	nop
 8003760:	08004013 	.word	0x08004013
 8003764:	08004019 	.word	0x08004019
 8003768:	0800401d 	.word	0x0800401d
 800376c:	00000000 	.word	0x00000000
 8003770:	080034d7 	.word	0x080034d7

08003774 <_printf_common>:
 8003774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003778:	4691      	mov	r9, r2
 800377a:	461f      	mov	r7, r3
 800377c:	688a      	ldr	r2, [r1, #8]
 800377e:	690b      	ldr	r3, [r1, #16]
 8003780:	4606      	mov	r6, r0
 8003782:	4293      	cmp	r3, r2
 8003784:	bfb8      	it	lt
 8003786:	4613      	movlt	r3, r2
 8003788:	f8c9 3000 	str.w	r3, [r9]
 800378c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003790:	460c      	mov	r4, r1
 8003792:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003796:	b112      	cbz	r2, 800379e <_printf_common+0x2a>
 8003798:	3301      	adds	r3, #1
 800379a:	f8c9 3000 	str.w	r3, [r9]
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	0699      	lsls	r1, r3, #26
 80037a2:	bf42      	ittt	mi
 80037a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80037a8:	3302      	addmi	r3, #2
 80037aa:	f8c9 3000 	strmi.w	r3, [r9]
 80037ae:	6825      	ldr	r5, [r4, #0]
 80037b0:	f015 0506 	ands.w	r5, r5, #6
 80037b4:	d107      	bne.n	80037c6 <_printf_common+0x52>
 80037b6:	f104 0a19 	add.w	sl, r4, #25
 80037ba:	68e3      	ldr	r3, [r4, #12]
 80037bc:	f8d9 2000 	ldr.w	r2, [r9]
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	429d      	cmp	r5, r3
 80037c4:	db2a      	blt.n	800381c <_printf_common+0xa8>
 80037c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80037ca:	6822      	ldr	r2, [r4, #0]
 80037cc:	3300      	adds	r3, #0
 80037ce:	bf18      	it	ne
 80037d0:	2301      	movne	r3, #1
 80037d2:	0692      	lsls	r2, r2, #26
 80037d4:	d42f      	bmi.n	8003836 <_printf_common+0xc2>
 80037d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037da:	4639      	mov	r1, r7
 80037dc:	4630      	mov	r0, r6
 80037de:	47c0      	blx	r8
 80037e0:	3001      	adds	r0, #1
 80037e2:	d022      	beq.n	800382a <_printf_common+0xb6>
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	68e5      	ldr	r5, [r4, #12]
 80037e8:	f003 0306 	and.w	r3, r3, #6
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	bf18      	it	ne
 80037f0:	2500      	movne	r5, #0
 80037f2:	f8d9 2000 	ldr.w	r2, [r9]
 80037f6:	f04f 0900 	mov.w	r9, #0
 80037fa:	bf08      	it	eq
 80037fc:	1aad      	subeq	r5, r5, r2
 80037fe:	68a3      	ldr	r3, [r4, #8]
 8003800:	6922      	ldr	r2, [r4, #16]
 8003802:	bf08      	it	eq
 8003804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003808:	4293      	cmp	r3, r2
 800380a:	bfc4      	itt	gt
 800380c:	1a9b      	subgt	r3, r3, r2
 800380e:	18ed      	addgt	r5, r5, r3
 8003810:	341a      	adds	r4, #26
 8003812:	454d      	cmp	r5, r9
 8003814:	d11b      	bne.n	800384e <_printf_common+0xda>
 8003816:	2000      	movs	r0, #0
 8003818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800381c:	2301      	movs	r3, #1
 800381e:	4652      	mov	r2, sl
 8003820:	4639      	mov	r1, r7
 8003822:	4630      	mov	r0, r6
 8003824:	47c0      	blx	r8
 8003826:	3001      	adds	r0, #1
 8003828:	d103      	bne.n	8003832 <_printf_common+0xbe>
 800382a:	f04f 30ff 	mov.w	r0, #4294967295
 800382e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003832:	3501      	adds	r5, #1
 8003834:	e7c1      	b.n	80037ba <_printf_common+0x46>
 8003836:	2030      	movs	r0, #48	; 0x30
 8003838:	18e1      	adds	r1, r4, r3
 800383a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003844:	4422      	add	r2, r4
 8003846:	3302      	adds	r3, #2
 8003848:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800384c:	e7c3      	b.n	80037d6 <_printf_common+0x62>
 800384e:	2301      	movs	r3, #1
 8003850:	4622      	mov	r2, r4
 8003852:	4639      	mov	r1, r7
 8003854:	4630      	mov	r0, r6
 8003856:	47c0      	blx	r8
 8003858:	3001      	adds	r0, #1
 800385a:	d0e6      	beq.n	800382a <_printf_common+0xb6>
 800385c:	f109 0901 	add.w	r9, r9, #1
 8003860:	e7d7      	b.n	8003812 <_printf_common+0x9e>
	...

08003864 <_printf_i>:
 8003864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003868:	4617      	mov	r7, r2
 800386a:	7e0a      	ldrb	r2, [r1, #24]
 800386c:	b085      	sub	sp, #20
 800386e:	2a6e      	cmp	r2, #110	; 0x6e
 8003870:	4698      	mov	r8, r3
 8003872:	4606      	mov	r6, r0
 8003874:	460c      	mov	r4, r1
 8003876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003878:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800387c:	f000 80bc 	beq.w	80039f8 <_printf_i+0x194>
 8003880:	d81a      	bhi.n	80038b8 <_printf_i+0x54>
 8003882:	2a63      	cmp	r2, #99	; 0x63
 8003884:	d02e      	beq.n	80038e4 <_printf_i+0x80>
 8003886:	d80a      	bhi.n	800389e <_printf_i+0x3a>
 8003888:	2a00      	cmp	r2, #0
 800388a:	f000 80c8 	beq.w	8003a1e <_printf_i+0x1ba>
 800388e:	2a58      	cmp	r2, #88	; 0x58
 8003890:	f000 808a 	beq.w	80039a8 <_printf_i+0x144>
 8003894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003898:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800389c:	e02a      	b.n	80038f4 <_printf_i+0x90>
 800389e:	2a64      	cmp	r2, #100	; 0x64
 80038a0:	d001      	beq.n	80038a6 <_printf_i+0x42>
 80038a2:	2a69      	cmp	r2, #105	; 0x69
 80038a4:	d1f6      	bne.n	8003894 <_printf_i+0x30>
 80038a6:	6821      	ldr	r1, [r4, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80038ae:	d023      	beq.n	80038f8 <_printf_i+0x94>
 80038b0:	1d11      	adds	r1, r2, #4
 80038b2:	6019      	str	r1, [r3, #0]
 80038b4:	6813      	ldr	r3, [r2, #0]
 80038b6:	e027      	b.n	8003908 <_printf_i+0xa4>
 80038b8:	2a73      	cmp	r2, #115	; 0x73
 80038ba:	f000 80b4 	beq.w	8003a26 <_printf_i+0x1c2>
 80038be:	d808      	bhi.n	80038d2 <_printf_i+0x6e>
 80038c0:	2a6f      	cmp	r2, #111	; 0x6f
 80038c2:	d02a      	beq.n	800391a <_printf_i+0xb6>
 80038c4:	2a70      	cmp	r2, #112	; 0x70
 80038c6:	d1e5      	bne.n	8003894 <_printf_i+0x30>
 80038c8:	680a      	ldr	r2, [r1, #0]
 80038ca:	f042 0220 	orr.w	r2, r2, #32
 80038ce:	600a      	str	r2, [r1, #0]
 80038d0:	e003      	b.n	80038da <_printf_i+0x76>
 80038d2:	2a75      	cmp	r2, #117	; 0x75
 80038d4:	d021      	beq.n	800391a <_printf_i+0xb6>
 80038d6:	2a78      	cmp	r2, #120	; 0x78
 80038d8:	d1dc      	bne.n	8003894 <_printf_i+0x30>
 80038da:	2278      	movs	r2, #120	; 0x78
 80038dc:	496f      	ldr	r1, [pc, #444]	; (8003a9c <_printf_i+0x238>)
 80038de:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80038e2:	e064      	b.n	80039ae <_printf_i+0x14a>
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80038ea:	1d11      	adds	r1, r2, #4
 80038ec:	6019      	str	r1, [r3, #0]
 80038ee:	6813      	ldr	r3, [r2, #0]
 80038f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0a3      	b.n	8003a40 <_printf_i+0x1dc>
 80038f8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80038fc:	f102 0104 	add.w	r1, r2, #4
 8003900:	6019      	str	r1, [r3, #0]
 8003902:	d0d7      	beq.n	80038b4 <_printf_i+0x50>
 8003904:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003908:	2b00      	cmp	r3, #0
 800390a:	da03      	bge.n	8003914 <_printf_i+0xb0>
 800390c:	222d      	movs	r2, #45	; 0x2d
 800390e:	425b      	negs	r3, r3
 8003910:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003914:	4962      	ldr	r1, [pc, #392]	; (8003aa0 <_printf_i+0x23c>)
 8003916:	220a      	movs	r2, #10
 8003918:	e017      	b.n	800394a <_printf_i+0xe6>
 800391a:	6820      	ldr	r0, [r4, #0]
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003922:	d003      	beq.n	800392c <_printf_i+0xc8>
 8003924:	1d08      	adds	r0, r1, #4
 8003926:	6018      	str	r0, [r3, #0]
 8003928:	680b      	ldr	r3, [r1, #0]
 800392a:	e006      	b.n	800393a <_printf_i+0xd6>
 800392c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003930:	f101 0004 	add.w	r0, r1, #4
 8003934:	6018      	str	r0, [r3, #0]
 8003936:	d0f7      	beq.n	8003928 <_printf_i+0xc4>
 8003938:	880b      	ldrh	r3, [r1, #0]
 800393a:	2a6f      	cmp	r2, #111	; 0x6f
 800393c:	bf14      	ite	ne
 800393e:	220a      	movne	r2, #10
 8003940:	2208      	moveq	r2, #8
 8003942:	4957      	ldr	r1, [pc, #348]	; (8003aa0 <_printf_i+0x23c>)
 8003944:	2000      	movs	r0, #0
 8003946:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800394a:	6865      	ldr	r5, [r4, #4]
 800394c:	2d00      	cmp	r5, #0
 800394e:	60a5      	str	r5, [r4, #8]
 8003950:	f2c0 809c 	blt.w	8003a8c <_printf_i+0x228>
 8003954:	6820      	ldr	r0, [r4, #0]
 8003956:	f020 0004 	bic.w	r0, r0, #4
 800395a:	6020      	str	r0, [r4, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d13f      	bne.n	80039e0 <_printf_i+0x17c>
 8003960:	2d00      	cmp	r5, #0
 8003962:	f040 8095 	bne.w	8003a90 <_printf_i+0x22c>
 8003966:	4675      	mov	r5, lr
 8003968:	2a08      	cmp	r2, #8
 800396a:	d10b      	bne.n	8003984 <_printf_i+0x120>
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	07da      	lsls	r2, r3, #31
 8003970:	d508      	bpl.n	8003984 <_printf_i+0x120>
 8003972:	6923      	ldr	r3, [r4, #16]
 8003974:	6862      	ldr	r2, [r4, #4]
 8003976:	429a      	cmp	r2, r3
 8003978:	bfde      	ittt	le
 800397a:	2330      	movle	r3, #48	; 0x30
 800397c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003980:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003984:	ebae 0305 	sub.w	r3, lr, r5
 8003988:	6123      	str	r3, [r4, #16]
 800398a:	f8cd 8000 	str.w	r8, [sp]
 800398e:	463b      	mov	r3, r7
 8003990:	aa03      	add	r2, sp, #12
 8003992:	4621      	mov	r1, r4
 8003994:	4630      	mov	r0, r6
 8003996:	f7ff feed 	bl	8003774 <_printf_common>
 800399a:	3001      	adds	r0, #1
 800399c:	d155      	bne.n	8003a4a <_printf_i+0x1e6>
 800399e:	f04f 30ff 	mov.w	r0, #4294967295
 80039a2:	b005      	add	sp, #20
 80039a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039a8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80039ac:	493c      	ldr	r1, [pc, #240]	; (8003aa0 <_printf_i+0x23c>)
 80039ae:	6822      	ldr	r2, [r4, #0]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80039b6:	f100 0504 	add.w	r5, r0, #4
 80039ba:	601d      	str	r5, [r3, #0]
 80039bc:	d001      	beq.n	80039c2 <_printf_i+0x15e>
 80039be:	6803      	ldr	r3, [r0, #0]
 80039c0:	e002      	b.n	80039c8 <_printf_i+0x164>
 80039c2:	0655      	lsls	r5, r2, #25
 80039c4:	d5fb      	bpl.n	80039be <_printf_i+0x15a>
 80039c6:	8803      	ldrh	r3, [r0, #0]
 80039c8:	07d0      	lsls	r0, r2, #31
 80039ca:	bf44      	itt	mi
 80039cc:	f042 0220 	orrmi.w	r2, r2, #32
 80039d0:	6022      	strmi	r2, [r4, #0]
 80039d2:	b91b      	cbnz	r3, 80039dc <_printf_i+0x178>
 80039d4:	6822      	ldr	r2, [r4, #0]
 80039d6:	f022 0220 	bic.w	r2, r2, #32
 80039da:	6022      	str	r2, [r4, #0]
 80039dc:	2210      	movs	r2, #16
 80039de:	e7b1      	b.n	8003944 <_printf_i+0xe0>
 80039e0:	4675      	mov	r5, lr
 80039e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80039e6:	fb02 3310 	mls	r3, r2, r0, r3
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80039f0:	4603      	mov	r3, r0
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d1f5      	bne.n	80039e2 <_printf_i+0x17e>
 80039f6:	e7b7      	b.n	8003968 <_printf_i+0x104>
 80039f8:	6808      	ldr	r0, [r1, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003a00:	6949      	ldr	r1, [r1, #20]
 8003a02:	d004      	beq.n	8003a0e <_printf_i+0x1aa>
 8003a04:	1d10      	adds	r0, r2, #4
 8003a06:	6018      	str	r0, [r3, #0]
 8003a08:	6813      	ldr	r3, [r2, #0]
 8003a0a:	6019      	str	r1, [r3, #0]
 8003a0c:	e007      	b.n	8003a1e <_printf_i+0x1ba>
 8003a0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a12:	f102 0004 	add.w	r0, r2, #4
 8003a16:	6018      	str	r0, [r3, #0]
 8003a18:	6813      	ldr	r3, [r2, #0]
 8003a1a:	d0f6      	beq.n	8003a0a <_printf_i+0x1a6>
 8003a1c:	8019      	strh	r1, [r3, #0]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	4675      	mov	r5, lr
 8003a22:	6123      	str	r3, [r4, #16]
 8003a24:	e7b1      	b.n	800398a <_printf_i+0x126>
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	1d11      	adds	r1, r2, #4
 8003a2a:	6019      	str	r1, [r3, #0]
 8003a2c:	6815      	ldr	r5, [r2, #0]
 8003a2e:	2100      	movs	r1, #0
 8003a30:	6862      	ldr	r2, [r4, #4]
 8003a32:	4628      	mov	r0, r5
 8003a34:	f000 f843 	bl	8003abe <memchr>
 8003a38:	b108      	cbz	r0, 8003a3e <_printf_i+0x1da>
 8003a3a:	1b40      	subs	r0, r0, r5
 8003a3c:	6060      	str	r0, [r4, #4]
 8003a3e:	6863      	ldr	r3, [r4, #4]
 8003a40:	6123      	str	r3, [r4, #16]
 8003a42:	2300      	movs	r3, #0
 8003a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a48:	e79f      	b.n	800398a <_printf_i+0x126>
 8003a4a:	6923      	ldr	r3, [r4, #16]
 8003a4c:	462a      	mov	r2, r5
 8003a4e:	4639      	mov	r1, r7
 8003a50:	4630      	mov	r0, r6
 8003a52:	47c0      	blx	r8
 8003a54:	3001      	adds	r0, #1
 8003a56:	d0a2      	beq.n	800399e <_printf_i+0x13a>
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	079b      	lsls	r3, r3, #30
 8003a5c:	d507      	bpl.n	8003a6e <_printf_i+0x20a>
 8003a5e:	2500      	movs	r5, #0
 8003a60:	f104 0919 	add.w	r9, r4, #25
 8003a64:	68e3      	ldr	r3, [r4, #12]
 8003a66:	9a03      	ldr	r2, [sp, #12]
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	429d      	cmp	r5, r3
 8003a6c:	db05      	blt.n	8003a7a <_printf_i+0x216>
 8003a6e:	68e0      	ldr	r0, [r4, #12]
 8003a70:	9b03      	ldr	r3, [sp, #12]
 8003a72:	4298      	cmp	r0, r3
 8003a74:	bfb8      	it	lt
 8003a76:	4618      	movlt	r0, r3
 8003a78:	e793      	b.n	80039a2 <_printf_i+0x13e>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	464a      	mov	r2, r9
 8003a7e:	4639      	mov	r1, r7
 8003a80:	4630      	mov	r0, r6
 8003a82:	47c0      	blx	r8
 8003a84:	3001      	adds	r0, #1
 8003a86:	d08a      	beq.n	800399e <_printf_i+0x13a>
 8003a88:	3501      	adds	r5, #1
 8003a8a:	e7eb      	b.n	8003a64 <_printf_i+0x200>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1a7      	bne.n	80039e0 <_printf_i+0x17c>
 8003a90:	780b      	ldrb	r3, [r1, #0]
 8003a92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a9a:	e765      	b.n	8003968 <_printf_i+0x104>
 8003a9c:	08004035 	.word	0x08004035
 8003aa0:	08004024 	.word	0x08004024

08003aa4 <__ascii_wctomb>:
 8003aa4:	b149      	cbz	r1, 8003aba <__ascii_wctomb+0x16>
 8003aa6:	2aff      	cmp	r2, #255	; 0xff
 8003aa8:	bf8b      	itete	hi
 8003aaa:	238a      	movhi	r3, #138	; 0x8a
 8003aac:	700a      	strbls	r2, [r1, #0]
 8003aae:	6003      	strhi	r3, [r0, #0]
 8003ab0:	2001      	movls	r0, #1
 8003ab2:	bf88      	it	hi
 8003ab4:	f04f 30ff 	movhi.w	r0, #4294967295
 8003ab8:	4770      	bx	lr
 8003aba:	4608      	mov	r0, r1
 8003abc:	4770      	bx	lr

08003abe <memchr>:
 8003abe:	b510      	push	{r4, lr}
 8003ac0:	b2c9      	uxtb	r1, r1
 8003ac2:	4402      	add	r2, r0
 8003ac4:	4290      	cmp	r0, r2
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	d101      	bne.n	8003ace <memchr+0x10>
 8003aca:	2000      	movs	r0, #0
 8003acc:	bd10      	pop	{r4, pc}
 8003ace:	781c      	ldrb	r4, [r3, #0]
 8003ad0:	3001      	adds	r0, #1
 8003ad2:	428c      	cmp	r4, r1
 8003ad4:	d1f6      	bne.n	8003ac4 <memchr+0x6>
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	bd10      	pop	{r4, pc}

08003ada <memmove>:
 8003ada:	4288      	cmp	r0, r1
 8003adc:	b510      	push	{r4, lr}
 8003ade:	eb01 0302 	add.w	r3, r1, r2
 8003ae2:	d803      	bhi.n	8003aec <memmove+0x12>
 8003ae4:	1e42      	subs	r2, r0, #1
 8003ae6:	4299      	cmp	r1, r3
 8003ae8:	d10c      	bne.n	8003b04 <memmove+0x2a>
 8003aea:	bd10      	pop	{r4, pc}
 8003aec:	4298      	cmp	r0, r3
 8003aee:	d2f9      	bcs.n	8003ae4 <memmove+0xa>
 8003af0:	1881      	adds	r1, r0, r2
 8003af2:	1ad2      	subs	r2, r2, r3
 8003af4:	42d3      	cmn	r3, r2
 8003af6:	d100      	bne.n	8003afa <memmove+0x20>
 8003af8:	bd10      	pop	{r4, pc}
 8003afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003afe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003b02:	e7f7      	b.n	8003af4 <memmove+0x1a>
 8003b04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b08:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003b0c:	e7eb      	b.n	8003ae6 <memmove+0xc>
	...

08003b10 <_free_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	4605      	mov	r5, r0
 8003b14:	2900      	cmp	r1, #0
 8003b16:	d043      	beq.n	8003ba0 <_free_r+0x90>
 8003b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b1c:	1f0c      	subs	r4, r1, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bfb8      	it	lt
 8003b22:	18e4      	addlt	r4, r4, r3
 8003b24:	f000 f8d4 	bl	8003cd0 <__malloc_lock>
 8003b28:	4a1e      	ldr	r2, [pc, #120]	; (8003ba4 <_free_r+0x94>)
 8003b2a:	6813      	ldr	r3, [r2, #0]
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	b933      	cbnz	r3, 8003b3e <_free_r+0x2e>
 8003b30:	6063      	str	r3, [r4, #4]
 8003b32:	6014      	str	r4, [r2, #0]
 8003b34:	4628      	mov	r0, r5
 8003b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b3a:	f000 b8ca 	b.w	8003cd2 <__malloc_unlock>
 8003b3e:	42a3      	cmp	r3, r4
 8003b40:	d90b      	bls.n	8003b5a <_free_r+0x4a>
 8003b42:	6821      	ldr	r1, [r4, #0]
 8003b44:	1862      	adds	r2, r4, r1
 8003b46:	4293      	cmp	r3, r2
 8003b48:	bf01      	itttt	eq
 8003b4a:	681a      	ldreq	r2, [r3, #0]
 8003b4c:	685b      	ldreq	r3, [r3, #4]
 8003b4e:	1852      	addeq	r2, r2, r1
 8003b50:	6022      	streq	r2, [r4, #0]
 8003b52:	6063      	str	r3, [r4, #4]
 8003b54:	6004      	str	r4, [r0, #0]
 8003b56:	e7ed      	b.n	8003b34 <_free_r+0x24>
 8003b58:	4613      	mov	r3, r2
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	b10a      	cbz	r2, 8003b62 <_free_r+0x52>
 8003b5e:	42a2      	cmp	r2, r4
 8003b60:	d9fa      	bls.n	8003b58 <_free_r+0x48>
 8003b62:	6819      	ldr	r1, [r3, #0]
 8003b64:	1858      	adds	r0, r3, r1
 8003b66:	42a0      	cmp	r0, r4
 8003b68:	d10b      	bne.n	8003b82 <_free_r+0x72>
 8003b6a:	6820      	ldr	r0, [r4, #0]
 8003b6c:	4401      	add	r1, r0
 8003b6e:	1858      	adds	r0, r3, r1
 8003b70:	4282      	cmp	r2, r0
 8003b72:	6019      	str	r1, [r3, #0]
 8003b74:	d1de      	bne.n	8003b34 <_free_r+0x24>
 8003b76:	6810      	ldr	r0, [r2, #0]
 8003b78:	6852      	ldr	r2, [r2, #4]
 8003b7a:	4401      	add	r1, r0
 8003b7c:	6019      	str	r1, [r3, #0]
 8003b7e:	605a      	str	r2, [r3, #4]
 8003b80:	e7d8      	b.n	8003b34 <_free_r+0x24>
 8003b82:	d902      	bls.n	8003b8a <_free_r+0x7a>
 8003b84:	230c      	movs	r3, #12
 8003b86:	602b      	str	r3, [r5, #0]
 8003b88:	e7d4      	b.n	8003b34 <_free_r+0x24>
 8003b8a:	6820      	ldr	r0, [r4, #0]
 8003b8c:	1821      	adds	r1, r4, r0
 8003b8e:	428a      	cmp	r2, r1
 8003b90:	bf01      	itttt	eq
 8003b92:	6811      	ldreq	r1, [r2, #0]
 8003b94:	6852      	ldreq	r2, [r2, #4]
 8003b96:	1809      	addeq	r1, r1, r0
 8003b98:	6021      	streq	r1, [r4, #0]
 8003b9a:	6062      	str	r2, [r4, #4]
 8003b9c:	605c      	str	r4, [r3, #4]
 8003b9e:	e7c9      	b.n	8003b34 <_free_r+0x24>
 8003ba0:	bd38      	pop	{r3, r4, r5, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20001364 	.word	0x20001364

08003ba8 <_malloc_r>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	1ccd      	adds	r5, r1, #3
 8003bac:	f025 0503 	bic.w	r5, r5, #3
 8003bb0:	3508      	adds	r5, #8
 8003bb2:	2d0c      	cmp	r5, #12
 8003bb4:	bf38      	it	cc
 8003bb6:	250c      	movcc	r5, #12
 8003bb8:	2d00      	cmp	r5, #0
 8003bba:	4606      	mov	r6, r0
 8003bbc:	db01      	blt.n	8003bc2 <_malloc_r+0x1a>
 8003bbe:	42a9      	cmp	r1, r5
 8003bc0:	d903      	bls.n	8003bca <_malloc_r+0x22>
 8003bc2:	230c      	movs	r3, #12
 8003bc4:	6033      	str	r3, [r6, #0]
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	bd70      	pop	{r4, r5, r6, pc}
 8003bca:	f000 f881 	bl	8003cd0 <__malloc_lock>
 8003bce:	4a23      	ldr	r2, [pc, #140]	; (8003c5c <_malloc_r+0xb4>)
 8003bd0:	6814      	ldr	r4, [r2, #0]
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	b991      	cbnz	r1, 8003bfc <_malloc_r+0x54>
 8003bd6:	4c22      	ldr	r4, [pc, #136]	; (8003c60 <_malloc_r+0xb8>)
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	b91b      	cbnz	r3, 8003be4 <_malloc_r+0x3c>
 8003bdc:	4630      	mov	r0, r6
 8003bde:	f000 f867 	bl	8003cb0 <_sbrk_r>
 8003be2:	6020      	str	r0, [r4, #0]
 8003be4:	4629      	mov	r1, r5
 8003be6:	4630      	mov	r0, r6
 8003be8:	f000 f862 	bl	8003cb0 <_sbrk_r>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d126      	bne.n	8003c3e <_malloc_r+0x96>
 8003bf0:	230c      	movs	r3, #12
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	6033      	str	r3, [r6, #0]
 8003bf6:	f000 f86c 	bl	8003cd2 <__malloc_unlock>
 8003bfa:	e7e4      	b.n	8003bc6 <_malloc_r+0x1e>
 8003bfc:	680b      	ldr	r3, [r1, #0]
 8003bfe:	1b5b      	subs	r3, r3, r5
 8003c00:	d41a      	bmi.n	8003c38 <_malloc_r+0x90>
 8003c02:	2b0b      	cmp	r3, #11
 8003c04:	d90f      	bls.n	8003c26 <_malloc_r+0x7e>
 8003c06:	600b      	str	r3, [r1, #0]
 8003c08:	18cc      	adds	r4, r1, r3
 8003c0a:	50cd      	str	r5, [r1, r3]
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	f000 f860 	bl	8003cd2 <__malloc_unlock>
 8003c12:	f104 000b 	add.w	r0, r4, #11
 8003c16:	1d23      	adds	r3, r4, #4
 8003c18:	f020 0007 	bic.w	r0, r0, #7
 8003c1c:	1ac3      	subs	r3, r0, r3
 8003c1e:	d01b      	beq.n	8003c58 <_malloc_r+0xb0>
 8003c20:	425a      	negs	r2, r3
 8003c22:	50e2      	str	r2, [r4, r3]
 8003c24:	bd70      	pop	{r4, r5, r6, pc}
 8003c26:	428c      	cmp	r4, r1
 8003c28:	bf0b      	itete	eq
 8003c2a:	6863      	ldreq	r3, [r4, #4]
 8003c2c:	684b      	ldrne	r3, [r1, #4]
 8003c2e:	6013      	streq	r3, [r2, #0]
 8003c30:	6063      	strne	r3, [r4, #4]
 8003c32:	bf18      	it	ne
 8003c34:	460c      	movne	r4, r1
 8003c36:	e7e9      	b.n	8003c0c <_malloc_r+0x64>
 8003c38:	460c      	mov	r4, r1
 8003c3a:	6849      	ldr	r1, [r1, #4]
 8003c3c:	e7ca      	b.n	8003bd4 <_malloc_r+0x2c>
 8003c3e:	1cc4      	adds	r4, r0, #3
 8003c40:	f024 0403 	bic.w	r4, r4, #3
 8003c44:	42a0      	cmp	r0, r4
 8003c46:	d005      	beq.n	8003c54 <_malloc_r+0xac>
 8003c48:	1a21      	subs	r1, r4, r0
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	f000 f830 	bl	8003cb0 <_sbrk_r>
 8003c50:	3001      	adds	r0, #1
 8003c52:	d0cd      	beq.n	8003bf0 <_malloc_r+0x48>
 8003c54:	6025      	str	r5, [r4, #0]
 8003c56:	e7d9      	b.n	8003c0c <_malloc_r+0x64>
 8003c58:	bd70      	pop	{r4, r5, r6, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20001364 	.word	0x20001364
 8003c60:	20001368 	.word	0x20001368

08003c64 <_realloc_r>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	4607      	mov	r7, r0
 8003c68:	4614      	mov	r4, r2
 8003c6a:	460e      	mov	r6, r1
 8003c6c:	b921      	cbnz	r1, 8003c78 <_realloc_r+0x14>
 8003c6e:	4611      	mov	r1, r2
 8003c70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c74:	f7ff bf98 	b.w	8003ba8 <_malloc_r>
 8003c78:	b922      	cbnz	r2, 8003c84 <_realloc_r+0x20>
 8003c7a:	f7ff ff49 	bl	8003b10 <_free_r>
 8003c7e:	4625      	mov	r5, r4
 8003c80:	4628      	mov	r0, r5
 8003c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c84:	f000 f826 	bl	8003cd4 <_malloc_usable_size_r>
 8003c88:	4284      	cmp	r4, r0
 8003c8a:	d90f      	bls.n	8003cac <_realloc_r+0x48>
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	4638      	mov	r0, r7
 8003c90:	f7ff ff8a 	bl	8003ba8 <_malloc_r>
 8003c94:	4605      	mov	r5, r0
 8003c96:	2800      	cmp	r0, #0
 8003c98:	d0f2      	beq.n	8003c80 <_realloc_r+0x1c>
 8003c9a:	4631      	mov	r1, r6
 8003c9c:	4622      	mov	r2, r4
 8003c9e:	f7ff fb1b 	bl	80032d8 <memcpy>
 8003ca2:	4631      	mov	r1, r6
 8003ca4:	4638      	mov	r0, r7
 8003ca6:	f7ff ff33 	bl	8003b10 <_free_r>
 8003caa:	e7e9      	b.n	8003c80 <_realloc_r+0x1c>
 8003cac:	4635      	mov	r5, r6
 8003cae:	e7e7      	b.n	8003c80 <_realloc_r+0x1c>

08003cb0 <_sbrk_r>:
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	4c05      	ldr	r4, [pc, #20]	; (8003ccc <_sbrk_r+0x1c>)
 8003cb6:	4605      	mov	r5, r0
 8003cb8:	4608      	mov	r0, r1
 8003cba:	6023      	str	r3, [r4, #0]
 8003cbc:	f7ff fa7c 	bl	80031b8 <_sbrk>
 8003cc0:	1c43      	adds	r3, r0, #1
 8003cc2:	d102      	bne.n	8003cca <_sbrk_r+0x1a>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	b103      	cbz	r3, 8003cca <_sbrk_r+0x1a>
 8003cc8:	602b      	str	r3, [r5, #0]
 8003cca:	bd38      	pop	{r3, r4, r5, pc}
 8003ccc:	200019c8 	.word	0x200019c8

08003cd0 <__malloc_lock>:
 8003cd0:	4770      	bx	lr

08003cd2 <__malloc_unlock>:
 8003cd2:	4770      	bx	lr

08003cd4 <_malloc_usable_size_r>:
 8003cd4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	f1a0 0004 	sub.w	r0, r0, #4
 8003cde:	bfbc      	itt	lt
 8003ce0:	580b      	ldrlt	r3, [r1, r0]
 8003ce2:	18c0      	addlt	r0, r0, r3
 8003ce4:	4770      	bx	lr
	...

08003ce8 <_init>:
 8003ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cea:	bf00      	nop
 8003cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cee:	bc08      	pop	{r3}
 8003cf0:	469e      	mov	lr, r3
 8003cf2:	4770      	bx	lr

08003cf4 <_fini>:
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	bf00      	nop
 8003cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfa:	bc08      	pop	{r3}
 8003cfc:	469e      	mov	lr, r3
 8003cfe:	4770      	bx	lr
