
rtos_usart_ll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d88  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  08007e98  08007e98  00017e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008714  08008714  00018714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008718  08008718  00018718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000268  20000000  0800871c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002e3c  20000268  08008984  00020268  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200030a4  08008984  000230a4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002ebe5  00000000  00000000  00020291  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000073a8  00000000  00000000  0004ee76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001de0  00000000  00000000  00056220  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001aa8  00000000  00000000  00058000  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ec9f  00000000  00000000  00059aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006ff3  00000000  00000000  00068747  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0006f73a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00007a8c  00000000  00000000  0006f7b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000268 	.word	0x20000268
 800012c:	00000000 	.word	0x00000000
 8000130:	08007e80 	.word	0x08007e80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000026c 	.word	0x2000026c
 800014c:	08007e80 	.word	0x08007e80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <waitCallBack>:

uint8_t linkID;
uint8_t TCPServerFlag = 0;

static bool waitCallBack(char * aim, uint16_t ms)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
 8000168:	460b      	mov	r3, r1
 800016a:	807b      	strh	r3, [r7, #2]
	uint32_t time_end = getSysTick() + ms;
 800016c:	f004 fe7e 	bl	8004e6c <getSysTick>
 8000170:	4602      	mov	r2, r0
 8000172:	887b      	ldrh	r3, [r7, #2]
 8000174:	4413      	add	r3, r2
 8000176:	60bb      	str	r3, [r7, #8]
	uint32_t time = getSysTick();
 8000178:	f004 fe78 	bl	8004e6c <getSysTick>
 800017c:	60f8      	str	r0, [r7, #12]
	while(time_end > time)
 800017e:	e00e      	b.n	800019e <waitCallBack+0x3e>
	{
		time++;
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	3301      	adds	r3, #1
 8000184:	60fb      	str	r3, [r7, #12]
		if(charCallBack(aim))
 8000186:	6878      	ldr	r0, [r7, #4]
 8000188:	f000 f9c6 	bl	8000518 <charCallBack>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	d001      	beq.n	8000196 <waitCallBack+0x36>
		{
			return 1;
 8000192:	2301      	movs	r3, #1
 8000194:	e008      	b.n	80001a8 <waitCallBack+0x48>
		}
		else asm("NOP");
 8000196:	bf00      	nop

		delay(1);
 8000198:	2001      	movs	r0, #1
 800019a:	f004 fe59 	bl	8004e50 <delay>
	while(time_end > time)
 800019e:	68ba      	ldr	r2, [r7, #8]
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	429a      	cmp	r2, r3
 80001a4:	d8ec      	bhi.n	8000180 <waitCallBack+0x20>
	}
	return 0;
 80001a6:	2300      	movs	r3, #0
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	3710      	adds	r7, #16
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}

080001b0 <ESPInit>:

void ESPInit()
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
	 MX_USART1_UART_Init();
 80001b4:	f006 fe36 	bl	8006e24 <MX_USART1_UART_Init>
	 RingBuff_Init();
 80001b8:	f001 f954 	bl	8001464 <RingBuff_Init>
}
 80001bc:	bf00      	nop
 80001be:	bd80      	pop	{r7, pc}

080001c0 <ESP_Resset>:

void ESP_Resset()
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	USART1_Device_Reset();
 80001c4:	f006 fe1a 	bl	8006dfc <USART1_Device_Reset>
	if(waitCallBack("ready", 2000))
 80001c8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80001cc:	4802      	ldr	r0, [pc, #8]	; (80001d8 <ESP_Resset+0x18>)
 80001ce:	f7ff ffc7 	bl	8000160 <waitCallBack>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
	{
		return;
	}
}
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	08007e98 	.word	0x08007e98

080001dc <requestFlush>:

static void requestFlush()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	memset(request, 0, sizeof(request));
 80001e0:	f240 4201 	movw	r2, #1025	; 0x401
 80001e4:	2100      	movs	r1, #0
 80001e6:	4802      	ldr	r0, [pc, #8]	; (80001f0 <requestFlush+0x14>)
 80001e8:	f007 f94d 	bl	8007486 <memset>
	//request[1023] = 0;
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	2000243c 	.word	0x2000243c

080001f4 <answerFlush>:

static void answerFlush()
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	memset(answer, 0, sizeof(answer));
 80001f8:	f240 4201 	movw	r2, #1025	; 0x401
 80001fc:	2100      	movs	r1, #0
 80001fe:	4802      	ldr	r0, [pc, #8]	; (8000208 <answerFlush+0x14>)
 8000200:	f007 f941 	bl	8007486 <memset>
	//answer[1023] = 0;
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}
 8000208:	20002840 	.word	0x20002840

0800020c <ESP_SetMode>:

uint8_t ESP_SetMode(int mode)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	requestFlush();
 8000214:	f7ff ffe2 	bl	80001dc <requestFlush>

	if(mode == 1 || mode == 3)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2b01      	cmp	r3, #1
 800021c:	d002      	beq.n	8000224 <ESP_SetMode+0x18>
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2b03      	cmp	r3, #3
 8000222:	d103      	bne.n	800022c <ESP_SetMode+0x20>
	{
		USART_SendData("AT+SLEEP=0\r\n", 12);
 8000224:	210c      	movs	r1, #12
 8000226:	4816      	ldr	r0, [pc, #88]	; (8000280 <ESP_SetMode+0x74>)
 8000228:	f006 fd84 	bl	8006d34 <USART_SendData>
	}

	sprintf(request, "AT+CWMODE=%d\r\n", mode);
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	4915      	ldr	r1, [pc, #84]	; (8000284 <ESP_SetMode+0x78>)
 8000230:	4815      	ldr	r0, [pc, #84]	; (8000288 <ESP_SetMode+0x7c>)
 8000232:	f007 f931 	bl	8007498 <siprintf>
	RingBuff_Clear();
 8000236:	f001 f979 	bl	800152c <RingBuff_Clear>
	USART_SendData(request, strlen(request));
 800023a:	4813      	ldr	r0, [pc, #76]	; (8000288 <ESP_SetMode+0x7c>)
 800023c:	f7ff ff88 	bl	8000150 <strlen>
 8000240:	4603      	mov	r3, r0
 8000242:	4619      	mov	r1, r3
 8000244:	4810      	ldr	r0, [pc, #64]	; (8000288 <ESP_SetMode+0x7c>)
 8000246:	f006 fd75 	bl	8006d34 <USART_SendData>

	if(waitCallBack("OK", 20))
 800024a:	2114      	movs	r1, #20
 800024c:	480f      	ldr	r0, [pc, #60]	; (800028c <ESP_SetMode+0x80>)
 800024e:	f7ff ff87 	bl	8000160 <waitCallBack>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d00e      	beq.n	8000276 <ESP_SetMode+0x6a>
	{
		USART_SendData("AT+RST\r\n", 8); //restart to apply settings
 8000258:	2108      	movs	r1, #8
 800025a:	480d      	ldr	r0, [pc, #52]	; (8000290 <ESP_SetMode+0x84>)
 800025c:	f006 fd6a 	bl	8006d34 <USART_SendData>
		//delay(1000);

		if(waitCallBack("ready", 2000))
 8000260:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000264:	480b      	ldr	r0, [pc, #44]	; (8000294 <ESP_SetMode+0x88>)
 8000266:	f7ff ff7b 	bl	8000160 <waitCallBack>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <ESP_SetMode+0x68>
		{
			return 1;
 8000270:	2301      	movs	r3, #1
 8000272:	e001      	b.n	8000278 <ESP_SetMode+0x6c>
		}
		else asm("NOP");
 8000274:	bf00      	nop
	}

	return 0;
 8000276:	2300      	movs	r3, #0
}
 8000278:	4618      	mov	r0, r3
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	08007ea0 	.word	0x08007ea0
 8000284:	08007eb0 	.word	0x08007eb0
 8000288:	2000243c 	.word	0x2000243c
 800028c:	08007ec0 	.word	0x08007ec0
 8000290:	08007ec4 	.word	0x08007ec4
 8000294:	08007e98 	.word	0x08007e98

08000298 <ESP_SetModeStation>:

uint8_t ESP_SetModeStation()
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	return ESP_SetMode(1);
 800029c:	2001      	movs	r0, #1
 800029e:	f7ff ffb5 	bl	800020c <ESP_SetMode>
 80002a2:	4603      	mov	r3, r0
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <ESP_SetModeSoftAP>:

uint8_t ESP_SetModeSoftAP()
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	return ESP_SetMode(2);
 80002ac:	2002      	movs	r0, #2
 80002ae:	f7ff ffad 	bl	800020c <ESP_SetMode>
 80002b2:	4603      	mov	r3, r0
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <ESP_SetModeBoth>:

uint8_t ESP_SetModeBoth()
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	return ESP_SetMode(3);
 80002bc:	2003      	movs	r0, #3
 80002be:	f7ff ffa5 	bl	800020c <ESP_SetMode>
 80002c2:	4603      	mov	r3, r0
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <ESP_SetParamsSoftAP>:
	RingBuff_Clear();
	USART_SendData(request, strlen(request));
}

uint8_t ESP_SetParamsSoftAP(char * ssid, char * password)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	6039      	str	r1, [r7, #0]
	if(ssid != NULL && password != NULL)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d02a      	beq.n	800032e <ESP_SetParamsSoftAP+0x66>
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d027      	beq.n	800032e <ESP_SetParamsSoftAP+0x66>
	{
		requestFlush();
 80002de:	f7ff ff7d 	bl	80001dc <requestFlush>
		sprintf(request, "AT+CWSAP=\"%s\",\"%s\",5,3\r\n", ssid, password);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	4914      	ldr	r1, [pc, #80]	; (8000338 <ESP_SetParamsSoftAP+0x70>)
 80002e8:	4814      	ldr	r0, [pc, #80]	; (800033c <ESP_SetParamsSoftAP+0x74>)
 80002ea:	f007 f8d5 	bl	8007498 <siprintf>
		RingBuff_Clear();
 80002ee:	f001 f91d 	bl	800152c <RingBuff_Clear>
		USART_SendData(request, strlen(request));
 80002f2:	4812      	ldr	r0, [pc, #72]	; (800033c <ESP_SetParamsSoftAP+0x74>)
 80002f4:	f7ff ff2c 	bl	8000150 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	4619      	mov	r1, r3
 80002fc:	480f      	ldr	r0, [pc, #60]	; (800033c <ESP_SetParamsSoftAP+0x74>)
 80002fe:	f006 fd19 	bl	8006d34 <USART_SendData>

		if(waitCallBack("OK", 20))
 8000302:	2114      	movs	r1, #20
 8000304:	480e      	ldr	r0, [pc, #56]	; (8000340 <ESP_SetParamsSoftAP+0x78>)
 8000306:	f7ff ff2b 	bl	8000160 <waitCallBack>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d00e      	beq.n	800032e <ESP_SetParamsSoftAP+0x66>
		{
			USART_SendData("AT+RST\r\n", 8); //restart to apply settings
 8000310:	2108      	movs	r1, #8
 8000312:	480c      	ldr	r0, [pc, #48]	; (8000344 <ESP_SetParamsSoftAP+0x7c>)
 8000314:	f006 fd0e 	bl	8006d34 <USART_SendData>

			if(waitCallBack("ready", 2000))
 8000318:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800031c:	480a      	ldr	r0, [pc, #40]	; (8000348 <ESP_SetParamsSoftAP+0x80>)
 800031e:	f7ff ff1f 	bl	8000160 <waitCallBack>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <ESP_SetParamsSoftAP+0x64>
			{
				return 1;
 8000328:	2301      	movs	r3, #1
 800032a:	e001      	b.n	8000330 <ESP_SetParamsSoftAP+0x68>
			}
			else asm("NOP");
 800032c:	bf00      	nop
		}
	}

	return 0;
 800032e:	2300      	movs	r3, #0
}
 8000330:	4618      	mov	r0, r3
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	08007ee8 	.word	0x08007ee8
 800033c:	2000243c 	.word	0x2000243c
 8000340:	08007ec0 	.word	0x08007ec0
 8000344:	08007ec4 	.word	0x08007ec4
 8000348:	08007e98 	.word	0x08007e98

0800034c <ESP_SetParamsStation>:

uint8_t ESP_SetParamsStation(char * ssid, char * password)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	6039      	str	r1, [r7, #0]
	if(ssid != NULL && password != NULL)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d01e      	beq.n	800039a <ESP_SetParamsStation+0x4e>
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d01b      	beq.n	800039a <ESP_SetParamsStation+0x4e>
	{
		requestFlush();
 8000362:	f7ff ff3b 	bl	80001dc <requestFlush>
		sprintf(request, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	490e      	ldr	r1, [pc, #56]	; (80003a4 <ESP_SetParamsStation+0x58>)
 800036c:	480e      	ldr	r0, [pc, #56]	; (80003a8 <ESP_SetParamsStation+0x5c>)
 800036e:	f007 f893 	bl	8007498 <siprintf>
		RingBuff_Clear();
 8000372:	f001 f8db 	bl	800152c <RingBuff_Clear>
		//charCallBack("");   //clear ring buffer after restart
		USART_SendData(request, strlen(request));
 8000376:	480c      	ldr	r0, [pc, #48]	; (80003a8 <ESP_SetParamsStation+0x5c>)
 8000378:	f7ff feea 	bl	8000150 <strlen>
 800037c:	4603      	mov	r3, r0
 800037e:	4619      	mov	r1, r3
 8000380:	4809      	ldr	r0, [pc, #36]	; (80003a8 <ESP_SetParamsStation+0x5c>)
 8000382:	f006 fcd7 	bl	8006d34 <USART_SendData>

		if(waitCallBack("OK", 10000))
 8000386:	f242 7110 	movw	r1, #10000	; 0x2710
 800038a:	4808      	ldr	r0, [pc, #32]	; (80003ac <ESP_SetParamsStation+0x60>)
 800038c:	f7ff fee8 	bl	8000160 <waitCallBack>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <ESP_SetParamsStation+0x4e>
		{
			return 1;
 8000396:	2301      	movs	r3, #1
 8000398:	e000      	b.n	800039c <ESP_SetParamsStation+0x50>
		}
	}

	return 0;
 800039a:	2300      	movs	r3, #0
}
 800039c:	4618      	mov	r0, r3
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	08007f04 	.word	0x08007f04
 80003a8:	2000243c 	.word	0x2000243c
 80003ac:	08007ec0 	.word	0x08007ec0

080003b0 <ESP_StartTCPServer>:

	return 0;
}

uint8_t ESP_StartTCPServer(uint16_t port)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	80fb      	strh	r3, [r7, #6]
    if(!TCPServerFlag)
 80003ba:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <ESP_StartTCPServer+0x78>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d12d      	bne.n	800041e <ESP_StartTCPServer+0x6e>
    {
        USART_SendData("AT+CIPMUX=1\r\n", 13);
 80003c2:	210d      	movs	r1, #13
 80003c4:	4819      	ldr	r0, [pc, #100]	; (800042c <ESP_StartTCPServer+0x7c>)
 80003c6:	f006 fcb5 	bl	8006d34 <USART_SendData>
        if(!waitCallBack("OK", 100))
 80003ca:	2164      	movs	r1, #100	; 0x64
 80003cc:	4818      	ldr	r0, [pc, #96]	; (8000430 <ESP_StartTCPServer+0x80>)
 80003ce:	f7ff fec7 	bl	8000160 <waitCallBack>
 80003d2:	4603      	mov	r3, r0
 80003d4:	f083 0301 	eor.w	r3, r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <ESP_StartTCPServer+0x32>
        {
        	return 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	e01e      	b.n	8000420 <ESP_StartTCPServer+0x70>
        }

        requestFlush();
 80003e2:	f7ff fefb 	bl	80001dc <requestFlush>
        sprintf(request, "AT+CIPSERVER=1,%d\r\n", port);
 80003e6:	88fb      	ldrh	r3, [r7, #6]
 80003e8:	461a      	mov	r2, r3
 80003ea:	4912      	ldr	r1, [pc, #72]	; (8000434 <ESP_StartTCPServer+0x84>)
 80003ec:	4812      	ldr	r0, [pc, #72]	; (8000438 <ESP_StartTCPServer+0x88>)
 80003ee:	f007 f853 	bl	8007498 <siprintf>

        RingBuff_Clear();
 80003f2:	f001 f89b 	bl	800152c <RingBuff_Clear>
        USART_SendData(request, strlen(request));
 80003f6:	4810      	ldr	r0, [pc, #64]	; (8000438 <ESP_StartTCPServer+0x88>)
 80003f8:	f7ff feaa 	bl	8000150 <strlen>
 80003fc:	4603      	mov	r3, r0
 80003fe:	4619      	mov	r1, r3
 8000400:	480d      	ldr	r0, [pc, #52]	; (8000438 <ESP_StartTCPServer+0x88>)
 8000402:	f006 fc97 	bl	8006d34 <USART_SendData>
		//USART_SendData("AT+MDNS=1,\"espressif\",\"iot\",80\r\n", 32);
        if(waitCallBack("OK", 20))
 8000406:	2114      	movs	r1, #20
 8000408:	4809      	ldr	r0, [pc, #36]	; (8000430 <ESP_StartTCPServer+0x80>)
 800040a:	f7ff fea9 	bl	8000160 <waitCallBack>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d004      	beq.n	800041e <ESP_StartTCPServer+0x6e>
        {
            TCPServerFlag = 1;
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <ESP_StartTCPServer+0x78>)
 8000416:	2201      	movs	r2, #1
 8000418:	701a      	strb	r2, [r3, #0]
            return 1;
 800041a:	2301      	movs	r3, #1
 800041c:	e000      	b.n	8000420 <ESP_StartTCPServer+0x70>
        }
    }

	return 0;
 800041e:	2300      	movs	r3, #0
}
 8000420:	4618      	mov	r0, r3
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000284 	.word	0x20000284
 800042c:	08007f34 	.word	0x08007f34
 8000430:	08007ec0 	.word	0x08007ec0
 8000434:	08007f44 	.word	0x08007f44
 8000438:	2000243c 	.word	0x2000243c

0800043c <ESP_StopTCPServer>:

uint8_t ESP_StopTCPServer(uint16_t port)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	80fb      	strh	r3, [r7, #6]
	if(TCPServerFlag)
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <ESP_StopTCPServer+0x58>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d01d      	beq.n	800048a <ESP_StopTCPServer+0x4e>
	{
		requestFlush();
 800044e:	f7ff fec5 	bl	80001dc <requestFlush>
		sprintf(request, "AT+CIPSERVER=0,%d\r\n", port);
 8000452:	88fb      	ldrh	r3, [r7, #6]
 8000454:	461a      	mov	r2, r3
 8000456:	4910      	ldr	r1, [pc, #64]	; (8000498 <ESP_StopTCPServer+0x5c>)
 8000458:	4810      	ldr	r0, [pc, #64]	; (800049c <ESP_StopTCPServer+0x60>)
 800045a:	f007 f81d 	bl	8007498 <siprintf>
		RingBuff_Clear();
 800045e:	f001 f865 	bl	800152c <RingBuff_Clear>
		USART_SendData(request, strlen(request));
 8000462:	480e      	ldr	r0, [pc, #56]	; (800049c <ESP_StopTCPServer+0x60>)
 8000464:	f7ff fe74 	bl	8000150 <strlen>
 8000468:	4603      	mov	r3, r0
 800046a:	4619      	mov	r1, r3
 800046c:	480b      	ldr	r0, [pc, #44]	; (800049c <ESP_StopTCPServer+0x60>)
 800046e:	f006 fc61 	bl	8006d34 <USART_SendData>
		TCPServerFlag = 0;
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <ESP_StopTCPServer+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	701a      	strb	r2, [r3, #0]

		if(waitCallBack("OK", 20))
 8000478:	2114      	movs	r1, #20
 800047a:	4809      	ldr	r0, [pc, #36]	; (80004a0 <ESP_StopTCPServer+0x64>)
 800047c:	f7ff fe70 	bl	8000160 <waitCallBack>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <ESP_StopTCPServer+0x4e>
		{
			return 1;
 8000486:	2301      	movs	r3, #1
 8000488:	e000      	b.n	800048c <ESP_StopTCPServer+0x50>
		}
	}
	return 0;
 800048a:	2300      	movs	r3, #0
}
 800048c:	4618      	mov	r0, r3
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000284 	.word	0x20000284
 8000498:	08007f58 	.word	0x08007f58
 800049c:	2000243c 	.word	0x2000243c
 80004a0:	08007ec0 	.word	0x08007ec0

080004a4 <requestRefresh>:

uint8_t requestRefresh()
{
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
	answerFlush();
 80004aa:	f7ff fea3 	bl	80001f4 <answerFlush>
	int i = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
	while(!(RingBuff_IsEmpty()) && i < 1024)
 80004b2:	e00b      	b.n	80004cc <requestRefresh+0x28>
	{
		answer[i++] = RingBuff_Pop();
 80004b4:	68fc      	ldr	r4, [r7, #12]
 80004b6:	1c63      	adds	r3, r4, #1
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	f001 f805 	bl	80014c8 <RingBuff_Pop>
 80004be:	4603      	mov	r3, r0
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b13      	ldr	r3, [pc, #76]	; (8000510 <requestRefresh+0x6c>)
 80004c4:	551a      	strb	r2, [r3, r4]
		delay(1);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f004 fcc2 	bl	8004e50 <delay>
	while(!(RingBuff_IsEmpty()) && i < 1024)
 80004cc:	f001 f81a 	bl	8001504 <RingBuff_IsEmpty>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d103      	bne.n	80004de <requestRefresh+0x3a>
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004dc:	dbea      	blt.n	80004b4 <requestRefresh+0x10>
	}

	char * search;
	search = strstr(answer, "+IPD,");
 80004de:	490d      	ldr	r1, [pc, #52]	; (8000514 <requestRefresh+0x70>)
 80004e0:	480b      	ldr	r0, [pc, #44]	; (8000510 <requestRefresh+0x6c>)
 80004e2:	f006 fffd 	bl	80074e0 <strstr>
 80004e6:	60b8      	str	r0, [r7, #8]
	if(search != NULL)
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d00b      	beq.n	8000506 <requestRefresh+0x62>
	{
		search+=5;
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	3305      	adds	r3, #5
 80004f2:	60bb      	str	r3, [r7, #8]
		uint8_t ID = strtol(search, NULL, 10);
 80004f4:	220a      	movs	r2, #10
 80004f6:	2100      	movs	r1, #0
 80004f8:	68b8      	ldr	r0, [r7, #8]
 80004fa:	f007 f88d 	bl	8007618 <strtol>
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
		//search += 2;
		//answerLength = strtol(search, NULL, 10); // get answer length

		return ID;
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	e000      	b.n	8000508 <requestRefresh+0x64>
	}
	return 100;
 8000506:	2364      	movs	r3, #100	; 0x64
}
 8000508:	4618      	mov	r0, r3
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	bd90      	pop	{r4, r7, pc}
 8000510:	20002840 	.word	0x20002840
 8000514:	08007f6c 	.word	0x08007f6c

08000518 <charCallBack>:

uint16_t charCallBack(char * key)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	answerFlush();
 8000520:	f7ff fe68 	bl	80001f4 <answerFlush>
	uint16_t i = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	81fb      	strh	r3, [r7, #14]
	while(!(RingBuff_IsEmpty()) && i < 1024)
 8000528:	e012      	b.n	8000550 <charCallBack+0x38>
	{
		answer[i] = RingBuff_Pop();
 800052a:	89fc      	ldrh	r4, [r7, #14]
 800052c:	f000 ffcc 	bl	80014c8 <RingBuff_Pop>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <charCallBack+0x88>)
 8000536:	551a      	strb	r2, [r3, r4]

		if(answer[i] == 0)
 8000538:	89fb      	ldrh	r3, [r7, #14]
 800053a:	4a19      	ldr	r2, [pc, #100]	; (80005a0 <charCallBack+0x88>)
 800053c:	5cd3      	ldrb	r3, [r2, r3]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d103      	bne.n	800054a <charCallBack+0x32>
		{
			answer[i] = '0';
 8000542:	89fb      	ldrh	r3, [r7, #14]
 8000544:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <charCallBack+0x88>)
 8000546:	2130      	movs	r1, #48	; 0x30
 8000548:	54d1      	strb	r1, [r2, r3]
		}
		i++;
 800054a:	89fb      	ldrh	r3, [r7, #14]
 800054c:	3301      	adds	r3, #1
 800054e:	81fb      	strh	r3, [r7, #14]
	while(!(RingBuff_IsEmpty()) && i < 1024)
 8000550:	f000 ffd8 	bl	8001504 <RingBuff_IsEmpty>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d103      	bne.n	8000562 <charCallBack+0x4a>
 800055a:	89fb      	ldrh	r3, [r7, #14]
 800055c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000560:	d3e3      	bcc.n	800052a <charCallBack+0x12>
	}
	answer[1024] = 0;
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <charCallBack+0x88>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	if(key != NULL && strlen(answer) >= strlen(key))
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d012      	beq.n	8000596 <charCallBack+0x7e>
 8000570:	480b      	ldr	r0, [pc, #44]	; (80005a0 <charCallBack+0x88>)
 8000572:	f7ff fded 	bl	8000150 <strlen>
 8000576:	4604      	mov	r4, r0
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff fde9 	bl	8000150 <strlen>
 800057e:	4603      	mov	r3, r0
 8000580:	429c      	cmp	r4, r3
 8000582:	d308      	bcc.n	8000596 <charCallBack+0x7e>
	{
		if(strstr(answer, key) != NULL)
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	4806      	ldr	r0, [pc, #24]	; (80005a0 <charCallBack+0x88>)
 8000588:	f006 ffaa 	bl	80074e0 <strstr>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <charCallBack+0x7e>
		{
			return 1;
 8000592:	2301      	movs	r3, #1
 8000594:	e000      	b.n	8000598 <charCallBack+0x80>
		}
	}

	return 0;
 8000596:	2300      	movs	r3, #0
}
 8000598:	4618      	mov	r0, r3
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	bd90      	pop	{r4, r7, pc}
 80005a0:	20002840 	.word	0x20002840

080005a4 <ESP_SendConstData>:

	return 0;
}

uint8_t ESP_SendConstData(const char *data, uint16_t dataLength, uint8_t flagRN)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	807b      	strh	r3, [r7, #2]
 80005b0:	4613      	mov	r3, r2
 80005b2:	707b      	strb	r3, [r7, #1]
	requestFlush();
 80005b4:	f7ff fe12 	bl	80001dc <requestFlush>
	sprintf(request, "AT+CIPSEND=%d,%d\r\n", linkID, flagRN ? (dataLength + 2) : dataLength);
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <ESP_SendConstData+0x9c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	787b      	ldrb	r3, [r7, #1]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <ESP_SendConstData+0x26>
 80005c4:	887b      	ldrh	r3, [r7, #2]
 80005c6:	3302      	adds	r3, #2
 80005c8:	e000      	b.n	80005cc <ESP_SendConstData+0x28>
 80005ca:	887b      	ldrh	r3, [r7, #2]
 80005cc:	491d      	ldr	r1, [pc, #116]	; (8000644 <ESP_SendConstData+0xa0>)
 80005ce:	481e      	ldr	r0, [pc, #120]	; (8000648 <ESP_SendConstData+0xa4>)
 80005d0:	f006 ff62 	bl	8007498 <siprintf>
	USART_SendData(request, strlen(request));
 80005d4:	481c      	ldr	r0, [pc, #112]	; (8000648 <ESP_SendConstData+0xa4>)
 80005d6:	f7ff fdbb 	bl	8000150 <strlen>
 80005da:	4603      	mov	r3, r0
 80005dc:	4619      	mov	r1, r3
 80005de:	481a      	ldr	r0, [pc, #104]	; (8000648 <ESP_SendConstData+0xa4>)
 80005e0:	f006 fba8 	bl	8006d34 <USART_SendData>
	//delay(200);

	if(waitCallBack(">", 200) && data != NULL)
 80005e4:	21c8      	movs	r1, #200	; 0xc8
 80005e6:	4819      	ldr	r0, [pc, #100]	; (800064c <ESP_SendConstData+0xa8>)
 80005e8:	f7ff fdba 	bl	8000160 <waitCallBack>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d01b      	beq.n	800062a <ESP_SendConstData+0x86>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d018      	beq.n	800062a <ESP_SendConstData+0x86>
	{
		for(int i = 0; i < dataLength; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e009      	b.n	8000612 <ESP_SendConstData+0x6e>
		{
			USART_SendData_byte(data[i]);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f006 fb7c 	bl	8006d04 <USART_SendData_byte>
		for(int i = 0; i < dataLength; i++)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	3301      	adds	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	887a      	ldrh	r2, [r7, #2]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	429a      	cmp	r2, r3
 8000618:	dcf1      	bgt.n	80005fe <ESP_SendConstData+0x5a>
		}
		if(flagRN)
 800061a:	787b      	ldrb	r3, [r7, #1]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d006      	beq.n	800062e <ESP_SendConstData+0x8a>
		{
			USART_SendData("\r\n", 2);
 8000620:	2102      	movs	r1, #2
 8000622:	480b      	ldr	r0, [pc, #44]	; (8000650 <ESP_SendConstData+0xac>)
 8000624:	f006 fb86 	bl	8006d34 <USART_SendData>
		if(flagRN)
 8000628:	e001      	b.n	800062e <ESP_SendConstData+0x8a>
		}
	}
	else return 0;
 800062a:	2300      	movs	r3, #0
 800062c:	e003      	b.n	8000636 <ESP_SendConstData+0x92>
	delay(100);
 800062e:	2064      	movs	r0, #100	; 0x64
 8000630:	f004 fc0e 	bl	8004e50 <delay>
//	if(waitCallBack("Recv", 200))
//	{
//		return 1;
//	}

	return 0;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20002c41 	.word	0x20002c41
 8000644:	08007f74 	.word	0x08007f74
 8000648:	2000243c 	.word	0x2000243c
 800064c:	08007f88 	.word	0x08007f88
 8000650:	08007f8c 	.word	0x08007f8c

08000654 <SetLinkID>:

void SetLinkID(uint8_t ID)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	linkID = ID;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <SetLinkID+0x1c>)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	7013      	strb	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20002c41 	.word	0x20002c41

08000674 <ESP_GetAnswer>:
{
	return linkID;
}

char * ESP_GetAnswer(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	return answer;
 8000678:	4b02      	ldr	r3, [pc, #8]	; (8000684 <ESP_GetAnswer+0x10>)
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20002840 	.word	0x20002840

08000688 <SetSSID>:

void SetSSID(char * name)
{
 8000688:	b4b0      	push	{r4, r5, r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	memcpy(ssid, name, 32);
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <SetSSID+0x38>)
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	6815      	ldr	r5, [r2, #0]
 8000696:	6854      	ldr	r4, [r2, #4]
 8000698:	6890      	ldr	r0, [r2, #8]
 800069a:	68d1      	ldr	r1, [r2, #12]
 800069c:	601d      	str	r5, [r3, #0]
 800069e:	605c      	str	r4, [r3, #4]
 80006a0:	6098      	str	r0, [r3, #8]
 80006a2:	60d9      	str	r1, [r3, #12]
 80006a4:	6915      	ldr	r5, [r2, #16]
 80006a6:	6954      	ldr	r4, [r2, #20]
 80006a8:	6990      	ldr	r0, [r2, #24]
 80006aa:	69d1      	ldr	r1, [r2, #28]
 80006ac:	611d      	str	r5, [r3, #16]
 80006ae:	615c      	str	r4, [r3, #20]
 80006b0:	6198      	str	r0, [r3, #24]
 80006b2:	61d9      	str	r1, [r3, #28]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bcb0      	pop	{r4, r5, r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	200023ec 	.word	0x200023ec

080006c4 <GetSSID>:

char * GetSSID()
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	return ssid;
 80006c8:	4b02      	ldr	r3, [pc, #8]	; (80006d4 <GetSSID+0x10>)
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	200023ec 	.word	0x200023ec

080006d8 <SetPASWD>:

void SetPASWD(char * passwd)
{
 80006d8:	b4b0      	push	{r4, r5, r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	memcpy(paswd, passwd, 32);
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <SetPASWD+0x38>)
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	6815      	ldr	r5, [r2, #0]
 80006e6:	6854      	ldr	r4, [r2, #4]
 80006e8:	6890      	ldr	r0, [r2, #8]
 80006ea:	68d1      	ldr	r1, [r2, #12]
 80006ec:	601d      	str	r5, [r3, #0]
 80006ee:	605c      	str	r4, [r3, #4]
 80006f0:	6098      	str	r0, [r3, #8]
 80006f2:	60d9      	str	r1, [r3, #12]
 80006f4:	6915      	ldr	r5, [r2, #16]
 80006f6:	6954      	ldr	r4, [r2, #20]
 80006f8:	6990      	ldr	r0, [r2, #24]
 80006fa:	69d1      	ldr	r1, [r2, #28]
 80006fc:	611d      	str	r5, [r3, #16]
 80006fe:	615c      	str	r4, [r3, #20]
 8000700:	6198      	str	r0, [r3, #24]
 8000702:	61d9      	str	r1, [r3, #28]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bcb0      	pop	{r4, r5, r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	2000241c 	.word	0x2000241c

08000714 <GetPasw>:

char *  GetPasw()
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	return paswd;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <GetPasw+0x10>)
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	2000241c 	.word	0x2000241c

08000728 <GetStationIP>:

void GetStationIP(void)
{
 8000728:	b5b0      	push	{r4, r5, r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
	char * search;
	requestFlush();
 800072e:	f7ff fd55 	bl	80001dc <requestFlush>
	sprintf(request, "AT+CIPSTA_CUR?\r\n");
 8000732:	4a26      	ldr	r2, [pc, #152]	; (80007cc <GetStationIP+0xa4>)
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <GetStationIP+0xa8>)
 8000736:	4615      	mov	r5, r2
 8000738:	461c      	mov	r4, r3
 800073a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073c:	6028      	str	r0, [r5, #0]
 800073e:	6069      	str	r1, [r5, #4]
 8000740:	60aa      	str	r2, [r5, #8]
 8000742:	60eb      	str	r3, [r5, #12]
 8000744:	7823      	ldrb	r3, [r4, #0]
 8000746:	742b      	strb	r3, [r5, #16]
	RingBuff_Clear();
 8000748:	f000 fef0 	bl	800152c <RingBuff_Clear>
	USART_SendData(request, strlen(request));
 800074c:	481f      	ldr	r0, [pc, #124]	; (80007cc <GetStationIP+0xa4>)
 800074e:	f7ff fcff 	bl	8000150 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	4619      	mov	r1, r3
 8000756:	481d      	ldr	r0, [pc, #116]	; (80007cc <GetStationIP+0xa4>)
 8000758:	f006 faec 	bl	8006d34 <USART_SendData>

	uint16_t i = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	80fb      	strh	r3, [r7, #6]
	while(!(RingBuff_IsEmpty()) && i < 1024)
 8000760:	e012      	b.n	8000788 <GetStationIP+0x60>
	{
		answer[i] = RingBuff_Pop();
 8000762:	88fc      	ldrh	r4, [r7, #6]
 8000764:	f000 feb0 	bl	80014c8 <RingBuff_Pop>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <GetStationIP+0xac>)
 800076e:	551a      	strb	r2, [r3, r4]
		if(answer[i] == 0)
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <GetStationIP+0xac>)
 8000774:	5cd3      	ldrb	r3, [r2, r3]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d103      	bne.n	8000782 <GetStationIP+0x5a>
		{
			answer[i] = '0';
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <GetStationIP+0xac>)
 800077e:	2130      	movs	r1, #48	; 0x30
 8000780:	54d1      	strb	r1, [r2, r3]
		}
		i++;
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	3301      	adds	r3, #1
 8000786:	80fb      	strh	r3, [r7, #6]
	while(!(RingBuff_IsEmpty()) && i < 1024)
 8000788:	f000 febc 	bl	8001504 <RingBuff_IsEmpty>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d103      	bne.n	800079a <GetStationIP+0x72>
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000798:	d3e3      	bcc.n	8000762 <GetStationIP+0x3a>
	}
	search = strstr(answer, "ip:"); //search request for ip and copy to buffer
 800079a:	490f      	ldr	r1, [pc, #60]	; (80007d8 <GetStationIP+0xb0>)
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <GetStationIP+0xac>)
 800079e:	f006 fe9f 	bl	80074e0 <strstr>
 80007a2:	6038      	str	r0, [r7, #0]
	if(search != NULL)
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d00c      	beq.n	80007c4 <GetStationIP+0x9c>
	{
		memcpy(ip, search + 4, 15);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	1d1a      	adds	r2, r3, #4
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <GetStationIP+0xb4>)
 80007b0:	6814      	ldr	r4, [r2, #0]
 80007b2:	6850      	ldr	r0, [r2, #4]
 80007b4:	6891      	ldr	r1, [r2, #8]
 80007b6:	601c      	str	r4, [r3, #0]
 80007b8:	6058      	str	r0, [r3, #4]
 80007ba:	6099      	str	r1, [r3, #8]
 80007bc:	8991      	ldrh	r1, [r2, #12]
 80007be:	7b92      	ldrb	r2, [r2, #14]
 80007c0:	8199      	strh	r1, [r3, #12]
 80007c2:	739a      	strb	r2, [r3, #14]
	}
	//else memcpy(ip, "000.000.000.000", 15);
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bdb0      	pop	{r4, r5, r7, pc}
 80007cc:	2000243c 	.word	0x2000243c
 80007d0:	08007f90 	.word	0x08007f90
 80007d4:	20002840 	.word	0x20002840
 80007d8:	08007fa4 	.word	0x08007fa4
 80007dc:	2000240c 	.word	0x2000240c

080007e0 <GetIP>:

char * GetIP(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
	return ip;
 80007e4:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <GetIP+0x10>)
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	2000240c 	.word	0x2000240c

080007f4 <Display_Init>:
};

typedef enum {eZero, eOne, eTwo, eThree, eFour, eFive, eSeven, eEight, eNine, eTen, ePoint, eDPoint, eSpace, eFill, eR, eG, eB}symbol;

void Display_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	MX_SPI1_Init();
 80007f8:	f006 f814 	bl	8006824 <MX_SPI1_Init>

	Reset();
 80007fc:	f006 f8b0 	bl	8006960 <Reset>
	delay(100);
 8000800:	2064      	movs	r0, #100	; 0x64
 8000802:	f004 fb25 	bl	8004e50 <delay>

	ClearDC();
 8000806:	f006 f89f 	bl	8006948 <ClearDC>
	SPI1_SendByte(0xAE);
 800080a:	20ae      	movs	r0, #174	; 0xae
 800080c:	f006 f872 	bl	80068f4 <SPI1_SendByte>

	SPI1_SendByte(0xA8); //multiplex ratio
 8000810:	20a8      	movs	r0, #168	; 0xa8
 8000812:	f006 f86f 	bl	80068f4 <SPI1_SendByte>
	SPI1_SendByte(0x3F);
 8000816:	203f      	movs	r0, #63	; 0x3f
 8000818:	f006 f86c 	bl	80068f4 <SPI1_SendByte>

	SPI1_SendByte(0xD3); //offset
 800081c:	20d3      	movs	r0, #211	; 0xd3
 800081e:	f006 f869 	bl	80068f4 <SPI1_SendByte>
	SPI1_SendByte(0x00);
 8000822:	2000      	movs	r0, #0
 8000824:	f006 f866 	bl	80068f4 <SPI1_SendByte>

	SPI1_SendByte(0x40); //start line
 8000828:	2040      	movs	r0, #64	; 0x40
 800082a:	f006 f863 	bl	80068f4 <SPI1_SendByte>

	SPI1_SendByte(0xA1); //segment re-map
 800082e:	20a1      	movs	r0, #161	; 0xa1
 8000830:	f006 f860 	bl	80068f4 <SPI1_SendByte>

	SPI1_SendByte(0xC8); //scan direction
 8000834:	20c8      	movs	r0, #200	; 0xc8
 8000836:	f006 f85d 	bl	80068f4 <SPI1_SendByte>

	SPI1_SendByte(0xDA); //COM pins
 800083a:	20da      	movs	r0, #218	; 0xda
 800083c:	f006 f85a 	bl	80068f4 <SPI1_SendByte>
	SPI1_SendByte(0x12);
 8000840:	2012      	movs	r0, #18
 8000842:	f006 f857 	bl	80068f4 <SPI1_SendByte>

	SPI1_SendByte(0xD5); //clock div
 8000846:	20d5      	movs	r0, #213	; 0xd5
 8000848:	f006 f854 	bl	80068f4 <SPI1_SendByte>
	SPI1_SendByte(0x30);
 800084c:	2030      	movs	r0, #48	; 0x30
 800084e:	f006 f851 	bl	80068f4 <SPI1_SendByte>

	SPI1_SendByte(0xA4);
 8000852:	20a4      	movs	r0, #164	; 0xa4
 8000854:	f006 f84e 	bl	80068f4 <SPI1_SendByte>

	SPI1_SendByte(0x8D); //charge bump
 8000858:	208d      	movs	r0, #141	; 0x8d
 800085a:	f006 f84b 	bl	80068f4 <SPI1_SendByte>
	SPI1_SendByte(0x14); //VCC gen by DC/DC
 800085e:	2014      	movs	r0, #20
 8000860:	f006 f848 	bl	80068f4 <SPI1_SendByte>

	SPI1_SendByte(0xD9); //pre-charged period
 8000864:	20d9      	movs	r0, #217	; 0xd9
 8000866:	f006 f845 	bl	80068f4 <SPI1_SendByte>
	SPI1_SendByte(0xF1);
 800086a:	20f1      	movs	r0, #241	; 0xf1
 800086c:	f006 f842 	bl	80068f4 <SPI1_SendByte>

	SPI1_SendByte(0xB0); //start page
 8000870:	20b0      	movs	r0, #176	; 0xb0
 8000872:	f006 f83f 	bl	80068f4 <SPI1_SendByte>

	SPI1_SendByte(0xDB); //VCOM level
 8000876:	20db      	movs	r0, #219	; 0xdb
 8000878:	f006 f83c 	bl	80068f4 <SPI1_SendByte>
	SPI1_SendByte(0x40); //20
 800087c:	2040      	movs	r0, #64	; 0x40
 800087e:	f006 f839 	bl	80068f4 <SPI1_SendByte>

	SPI1_SendByte(0x20); //page mode
 8000882:	2020      	movs	r0, #32
 8000884:	f006 f836 	bl	80068f4 <SPI1_SendByte>
	SPI1_SendByte(0x22);
 8000888:	2022      	movs	r0, #34	; 0x22
 800088a:	f006 f833 	bl	80068f4 <SPI1_SendByte>

	SPI1_SendByte(0x2E); //off scroll
 800088e:	202e      	movs	r0, #46	; 0x2e
 8000890:	f006 f830 	bl	80068f4 <SPI1_SendByte>
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <Display_ON>:

void Display_ON(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	SPI1_SendByte(0xAF);
 800089c:	20af      	movs	r0, #175	; 0xaf
 800089e:	f006 f829 	bl	80068f4 <SPI1_SendByte>
	Display_Contrast(0xFF);
 80008a2:	20ff      	movs	r0, #255	; 0xff
 80008a4:	f000 f839 	bl	800091a <Display_Contrast>
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <Display_SetPage>:
	ClearDC();
	SPI1_SendByte(0xAE);
}

void Display_SetPage(uint8_t addr)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	ClearDC();
 80008b6:	f006 f847 	bl	8006948 <ClearDC>
	SPI1_SendByte(0xB0 + addr);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	3b50      	subs	r3, #80	; 0x50
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f006 f817 	bl	80068f4 <SPI1_SendByte>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <Display_Write>:

void Display_Write(uint8_t data)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]
	SetDC();
 80008d8:	f006 f82a 	bl	8006930 <SetDC>
	SPI1_SendByte(data);
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4618      	mov	r0, r3
 80008e0:	f006 f808 	bl	80068f4 <SPI1_SendByte>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <Display_SetColumn>:

void Display_SetColumn(uint8_t data)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	ClearDC();
 80008f6:	f006 f827 	bl	8006948 <ClearDC>
	SPI1_SendByte(0x00 + data);
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f005 fff9 	bl	80068f4 <SPI1_SendByte>
	SPI1_SendByte(0x10 + (data >> 4));
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	091b      	lsrs	r3, r3, #4
 8000906:	b2db      	uxtb	r3, r3
 8000908:	3310      	adds	r3, #16
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4618      	mov	r0, r3
 800090e:	f005 fff1 	bl	80068f4 <SPI1_SendByte>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <Display_Contrast>:

void Display_Contrast(uint8_t data)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	4603      	mov	r3, r0
 8000922:	71fb      	strb	r3, [r7, #7]
	ClearDC();
 8000924:	f006 f810 	bl	8006948 <ClearDC>
	SPI1_SendByte(0x81);
 8000928:	2081      	movs	r0, #129	; 0x81
 800092a:	f005 ffe3 	bl	80068f4 <SPI1_SendByte>
	SPI1_SendByte(data);
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	4618      	mov	r0, r3
 8000932:	f005 ffdf 	bl	80068f4 <SPI1_SendByte>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <Display_Clean>:
	ClearDC();
	SPI1_SendByte(0xA7); //0xA6 normal
}

void Display_Clean()
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	e01f      	b.n	800098a <Display_Clean+0x4c>
	{
		ClearDC();
 800094a:	f005 fffd 	bl	8006948 <ClearDC>
		SPI1_SendByte(0xB0 + i);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	3b50      	subs	r3, #80	; 0x50
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f005 ffcc 	bl	80068f4 <SPI1_SendByte>
		SPI1_SendByte(0x00);
 800095c:	2000      	movs	r0, #0
 800095e:	f005 ffc9 	bl	80068f4 <SPI1_SendByte>
		SPI1_SendByte(0x10);
 8000962:	2010      	movs	r0, #16
 8000964:	f005 ffc6 	bl	80068f4 <SPI1_SendByte>

		SetDC();
 8000968:	f005 ffe2 	bl	8006930 <SetDC>
		for(int c = 0; c < 128; c++)
 800096c:	2300      	movs	r3, #0
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	e005      	b.n	800097e <Display_Clean+0x40>
		{
			SPI1_SendByte(0x00);
 8000972:	2000      	movs	r0, #0
 8000974:	f005 ffbe 	bl	80068f4 <SPI1_SendByte>
		for(int c = 0; c < 128; c++)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	3301      	adds	r3, #1
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	2b7f      	cmp	r3, #127	; 0x7f
 8000982:	ddf6      	ble.n	8000972 <Display_Clean+0x34>
	for(int i = 0; i < 8; i++)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3301      	adds	r3, #1
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b07      	cmp	r3, #7
 800098e:	dddc      	ble.n	800094a <Display_Clean+0xc>
		}
	}
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <Display_PrintSymbol>:
		}
	}
}

void Display_PrintSymbol(symbol sym, uint8_t page, bool nl)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	460b      	mov	r3, r1
 80009a4:	71bb      	strb	r3, [r7, #6]
 80009a6:	4613      	mov	r3, r2
 80009a8:	717b      	strb	r3, [r7, #5]
	Display_SetPage(page);
 80009aa:	79bb      	ldrb	r3, [r7, #6]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff7d 	bl	80008ac <Display_SetPage>

	if(nl)
 80009b2:	797b      	ldrb	r3, [r7, #5]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d002      	beq.n	80009be <Display_PrintSymbol+0x26>
	{
		Display_SetColumn(0);
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff ff97 	bl	80008ec <Display_SetColumn>
	}
	for(int i = 0; i < 8; i++)
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	e00e      	b.n	80009e2 <Display_PrintSymbol+0x4a>
	{
		Display_Write(table[sym][i]);
 80009c4:	79fa      	ldrb	r2, [r7, #7]
 80009c6:	490a      	ldr	r1, [pc, #40]	; (80009f0 <Display_PrintSymbol+0x58>)
 80009c8:	4613      	mov	r3, r2
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	1a9b      	subs	r3, r3, r2
 80009ce:	18ca      	adds	r2, r1, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4413      	add	r3, r2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff79 	bl	80008ce <Display_Write>
	for(int i = 0; i < 8; i++)
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3301      	adds	r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2b07      	cmp	r3, #7
 80009e6:	dded      	ble.n	80009c4 <Display_PrintSymbol+0x2c>
	}
}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000000 	.word	0x20000000

080009f4 <display>:

void display()
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
	Display_Clean();
 80009fa:	f7ff ffa0 	bl	800093e <Display_Clean>

	uint16_t r = Led_Get_Color(eRed) * 100 / 4096; // convert led value into %
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 faca 	bl	8000f98 <Led_Get_Color>
 8000a04:	4603      	mov	r3, r0
 8000a06:	461a      	mov	r2, r3
 8000a08:	2364      	movs	r3, #100	; 0x64
 8000a0a:	fb03 f302 	mul.w	r3, r3, r2
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	da01      	bge.n	8000a16 <display+0x22>
 8000a12:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a16:	131b      	asrs	r3, r3, #12
 8000a18:	80fb      	strh	r3, [r7, #6]
	uint16_t g = Led_Get_Color(eGreen) * 100 / 4096;
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 fabc 	bl	8000f98 <Led_Get_Color>
 8000a20:	4603      	mov	r3, r0
 8000a22:	461a      	mov	r2, r3
 8000a24:	2364      	movs	r3, #100	; 0x64
 8000a26:	fb03 f302 	mul.w	r3, r3, r2
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	da01      	bge.n	8000a32 <display+0x3e>
 8000a2e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a32:	131b      	asrs	r3, r3, #12
 8000a34:	80bb      	strh	r3, [r7, #4]
	uint16_t b = Led_Get_Color(eBlue) * 100 / 4096;
 8000a36:	2002      	movs	r0, #2
 8000a38:	f000 faae 	bl	8000f98 <Led_Get_Color>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	2364      	movs	r3, #100	; 0x64
 8000a42:	fb03 f302 	mul.w	r3, r3, r2
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	da01      	bge.n	8000a4e <display+0x5a>
 8000a4a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a4e:	131b      	asrs	r3, r3, #12
 8000a50:	807b      	strh	r3, [r7, #2]

	Display_PrintSymbol(eR, 0, true);
 8000a52:	2201      	movs	r2, #1
 8000a54:	2100      	movs	r1, #0
 8000a56:	200e      	movs	r0, #14
 8000a58:	f7ff ff9e 	bl	8000998 <Display_PrintSymbol>
	Display_PrintSymbol(eDPoint, 0, false);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	200b      	movs	r0, #11
 8000a62:	f7ff ff99 	bl	8000998 <Display_PrintSymbol>
	Display_PrintSymbol(r / 100 % 10, 0, false);
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	4a77      	ldr	r2, [pc, #476]	; (8000c48 <display+0x254>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	095b      	lsrs	r3, r3, #5
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	4b76      	ldr	r3, [pc, #472]	; (8000c4c <display+0x258>)
 8000a74:	fba3 1302 	umull	r1, r3, r3, r2
 8000a78:	08d9      	lsrs	r1, r3, #3
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	440b      	add	r3, r1
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff83 	bl	8000998 <Display_PrintSymbol>
	Display_PrintSymbol(r / 10 % 10, 0, false);
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	4a6d      	ldr	r2, [pc, #436]	; (8000c4c <display+0x258>)
 8000a96:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	4b6b      	ldr	r3, [pc, #428]	; (8000c4c <display+0x258>)
 8000aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8000aa4:	08d9      	lsrs	r1, r3, #3
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	440b      	add	r3, r1
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff6d 	bl	8000998 <Display_PrintSymbol>
	Display_PrintSymbol(r % 10, 0, false);
 8000abe:	88fa      	ldrh	r2, [r7, #6]
 8000ac0:	4b62      	ldr	r3, [pc, #392]	; (8000c4c <display+0x258>)
 8000ac2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ac6:	08d9      	lsrs	r1, r3, #3
 8000ac8:	460b      	mov	r3, r1
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	440b      	add	r3, r1
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff5c 	bl	8000998 <Display_PrintSymbol>

	Display_PrintSymbol(eG, 2, true);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	200f      	movs	r0, #15
 8000ae6:	f7ff ff57 	bl	8000998 <Display_PrintSymbol>
	Display_PrintSymbol(eDPoint, 2, false);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2102      	movs	r1, #2
 8000aee:	200b      	movs	r0, #11
 8000af0:	f7ff ff52 	bl	8000998 <Display_PrintSymbol>
	Display_PrintSymbol(g / 100 % 10, 2, false);
 8000af4:	88bb      	ldrh	r3, [r7, #4]
 8000af6:	4a54      	ldr	r2, [pc, #336]	; (8000c48 <display+0x254>)
 8000af8:	fba2 2303 	umull	r2, r3, r2, r3
 8000afc:	095b      	lsrs	r3, r3, #5
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	4b52      	ldr	r3, [pc, #328]	; (8000c4c <display+0x258>)
 8000b02:	fba3 1302 	umull	r1, r3, r3, r2
 8000b06:	08d9      	lsrs	r1, r3, #3
 8000b08:	460b      	mov	r3, r1
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2200      	movs	r2, #0
 8000b18:	2102      	movs	r1, #2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff3c 	bl	8000998 <Display_PrintSymbol>
	Display_PrintSymbol(g / 10 % 10, 2, false);
 8000b20:	88bb      	ldrh	r3, [r7, #4]
 8000b22:	4a4a      	ldr	r2, [pc, #296]	; (8000c4c <display+0x258>)
 8000b24:	fba2 2303 	umull	r2, r3, r2, r3
 8000b28:	08db      	lsrs	r3, r3, #3
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	4b47      	ldr	r3, [pc, #284]	; (8000c4c <display+0x258>)
 8000b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b32:	08d9      	lsrs	r1, r3, #3
 8000b34:	460b      	mov	r3, r1
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	440b      	add	r3, r1
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2200      	movs	r2, #0
 8000b44:	2102      	movs	r1, #2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff26 	bl	8000998 <Display_PrintSymbol>
	Display_PrintSymbol(g % 10, 2, false);
 8000b4c:	88ba      	ldrh	r2, [r7, #4]
 8000b4e:	4b3f      	ldr	r3, [pc, #252]	; (8000c4c <display+0x258>)
 8000b50:	fba3 1302 	umull	r1, r3, r3, r2
 8000b54:	08d9      	lsrs	r1, r3, #3
 8000b56:	460b      	mov	r3, r1
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2200      	movs	r2, #0
 8000b66:	2102      	movs	r1, #2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff15 	bl	8000998 <Display_PrintSymbol>

	Display_PrintSymbol(eB, 4, true);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2104      	movs	r1, #4
 8000b72:	2010      	movs	r0, #16
 8000b74:	f7ff ff10 	bl	8000998 <Display_PrintSymbol>
	Display_PrintSymbol(eDPoint, 4, false);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	200b      	movs	r0, #11
 8000b7e:	f7ff ff0b 	bl	8000998 <Display_PrintSymbol>
	Display_PrintSymbol(b / 100 % 10, 4, false);
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	4a30      	ldr	r2, [pc, #192]	; (8000c48 <display+0x254>)
 8000b86:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <display+0x258>)
 8000b90:	fba3 1302 	umull	r1, r3, r3, r2
 8000b94:	08d9      	lsrs	r1, r3, #3
 8000b96:	460b      	mov	r3, r1
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fef5 	bl	8000998 <Display_PrintSymbol>
	Display_PrintSymbol(b / 10 % 10, 4, false);
 8000bae:	887b      	ldrh	r3, [r7, #2]
 8000bb0:	4a26      	ldr	r2, [pc, #152]	; (8000c4c <display+0x258>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	08db      	lsrs	r3, r3, #3
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <display+0x258>)
 8000bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8000bc0:	08d9      	lsrs	r1, r3, #3
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2104      	movs	r1, #4
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fedf 	bl	8000998 <Display_PrintSymbol>
	Display_PrintSymbol(b % 10, 4, false);
 8000bda:	887a      	ldrh	r2, [r7, #2]
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <display+0x258>)
 8000bde:	fba3 1302 	umull	r1, r3, r3, r2
 8000be2:	08d9      	lsrs	r1, r3, #3
 8000be4:	460b      	mov	r3, r1
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	440b      	add	r3, r1
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fece 	bl	8000998 <Display_PrintSymbol>

	//Display_Test();

	for(int i = 0; i < 15; i++) //display ip
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	e01b      	b.n	8000c3a <display+0x246>
	{
		int temp = GetIP()[i] - 48; //convert ascii to int
 8000c02:	f7ff fded 	bl	80007e0 <GetIP>
 8000c06:	4602      	mov	r2, r0
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	3b30      	subs	r3, #48	; 0x30
 8000c10:	60bb      	str	r3, [r7, #8]
		if(temp < 0) //symbol after convert < 0,  set '.'
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	da01      	bge.n	8000c1c <display+0x228>
		{
			temp = 10;
 8000c18:	230a      	movs	r3, #10
 8000c1a:	60bb      	str	r3, [r7, #8]
		}
		Display_PrintSymbol(temp, 6, i);
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	b2d8      	uxtb	r0, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	bf14      	ite	ne
 8000c26:	2301      	movne	r3, #1
 8000c28:	2300      	moveq	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	2106      	movs	r1, #6
 8000c30:	f7ff feb2 	bl	8000998 <Display_PrintSymbol>
	for(int i = 0; i < 15; i++) //display ip
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3301      	adds	r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2b0e      	cmp	r3, #14
 8000c3e:	dde0      	ble.n	8000c02 <display+0x20e>
	}
}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	51eb851f 	.word	0x51eb851f
 8000c4c:	cccccccd 	.word	0xcccccccd

08000c50 <EncoderInit>:
#include "stdbool.h"
#include "stdint.h"
#include "encoder_driver.h"

void EncoderInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	GPIO_Init();
 8000c54:	f004 f9d8 	bl	8005008 <GPIO_Init>
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <Encoder_State>:

eState Encoder_State(void)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
	eState res = eNone;
 8000c62:	2300      	movs	r3, #0
 8000c64:	71fb      	strb	r3, [r7, #7]
    if(GetButton())
 8000c66:	f004 fa6d 	bl	8005144 <GetButton>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d005      	beq.n	8000c7c <Encoder_State+0x20>
    {
      res = eButton;
 8000c70:	2303      	movs	r3, #3
 8000c72:	71fb      	strb	r3, [r7, #7]
      ClearButton();
 8000c74:	f004 fa70 	bl	8005158 <ClearButton>
      return res;
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	e015      	b.n	8000ca8 <Encoder_State+0x4c>
    }
    if(GetRotateStatus())
 8000c7c:	f004 fa78 	bl	8005170 <GetRotateStatus>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00d      	beq.n	8000ca2 <Encoder_State+0x46>
    {
		if(GetRotatePinA() == GetRotatePinB())
 8000c86:	f004 fa93 	bl	80051b0 <GetRotatePinA>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461c      	mov	r4, r3
 8000c8e:	f004 fa85 	bl	800519c <GetRotatePinB>
 8000c92:	4603      	mov	r3, r0
 8000c94:	429c      	cmp	r4, r3
 8000c96:	d102      	bne.n	8000c9e <Encoder_State+0x42>
		{
			res = eRight;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	e001      	b.n	8000ca2 <Encoder_State+0x46>
		}
		else
		{
			res = eLeft;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	71fb      	strb	r3, [r7, #7]
		}
	}
	ClearRotateStatus();
 8000ca2:	f004 fa6f 	bl	8005184 <ClearRotateStatus>
    return res;
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd90      	pop	{r4, r7, pc}

08000cb0 <I2C_Init>:
#define SSID_ADDR				0xA0
#define PASWD_ADDR				0xD0
#define WIFI_CHECK_SUM			0xC2

void I2C_Init()
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	MX_I2C2_Init();
 8000cb4:	f004 fd46 	bl	8005744 <MX_I2C2_Init>
	MX_CRC_Init();
 8000cb8:	f004 f896 	bl	8004de8 <MX_CRC_Init>
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <ColorToEEPROM>:

void ColorToEEPROM() //save led to EEPROM
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
	uint32_t check_sum[1] = {0};
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
	uint16_t i2c_led[4] = {0,0,0,0};
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
	i2c_led[0] = Led_Get_Arr_Color()[0];
 8000cd2:	f000 f971 	bl	8000fb8 <Led_Get_Arr_Color>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	80bb      	strh	r3, [r7, #4]
	i2c_led[1] = Led_Get_Arr_Color()[1];
 8000cdc:	f000 f96c 	bl	8000fb8 <Led_Get_Arr_Color>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	885b      	ldrh	r3, [r3, #2]
 8000ce4:	80fb      	strh	r3, [r7, #6]
	i2c_led[2] = Led_Get_Arr_Color()[2];
 8000ce6:	f000 f967 	bl	8000fb8 <Led_Get_Arr_Color>
 8000cea:	4603      	mov	r3, r0
 8000cec:	889b      	ldrh	r3, [r3, #4]
 8000cee:	813b      	strh	r3, [r7, #8]

	check_sum[0] = CRC_calc((uint32_t *)i2c_led, 2);
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f004 f87f 	bl	8004df8 <CRC_calc>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	60fb      	str	r3, [r7, #12]
	I2C2_SendData(LED_ADDR, (uint8_t *)i2c_led, 6);
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2206      	movs	r2, #6
 8000d02:	4619      	mov	r1, r3
 8000d04:	2000      	movs	r0, #0
 8000d06:	f004 fd71 	bl	80057ec <I2C2_SendData>
	delay(5);
 8000d0a:	2005      	movs	r0, #5
 8000d0c:	f004 f8a0 	bl	8004e50 <delay>
	I2C2_SendData(LED_CHECK_SUM_ADDR, (uint8_t *)check_sum, 4);
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2204      	movs	r2, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	202a      	movs	r0, #42	; 0x2a
 8000d1a:	f004 fd67 	bl	80057ec <I2C2_SendData>
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <ColorFromEEPROM>:

void ColorFromEEPROM() //load led from EEPROM
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
	uint16_t i2c_led[4] = {0, 0, 0, 0};
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
	uint32_t check_sum[1] = {0};
 8000d34:	2300      	movs	r3, #0
 8000d36:	603b      	str	r3, [r7, #0]

	I2C2_ReadData(LED_ADDR, (uint8_t *)i2c_led, 6);
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2206      	movs	r2, #6
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f004 fdbc 	bl	80058bc <I2C2_ReadData>
	delay(5);
 8000d44:	2005      	movs	r0, #5
 8000d46:	f004 f883 	bl	8004e50 <delay>
	I2C2_ReadData(LED_CHECK_SUM_ADDR, (uint8_t *)check_sum, 4);
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	202a      	movs	r0, #42	; 0x2a
 8000d52:	f004 fdb3 	bl	80058bc <I2C2_ReadData>

	uint32_t check = CRC_calc((uint32_t *)i2c_led, 2);
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f004 f84c 	bl	8004df8 <CRC_calc>
 8000d60:	60f8      	str	r0, [r7, #12]

	if(check_sum[0] == check)
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d106      	bne.n	8000d78 <ColorFromEEPROM+0x52>
	{
		Led_Set(i2c_led[eRed], i2c_led[eGreen], i2c_led[eBlue]);
 8000d6a:	88bb      	ldrh	r3, [r7, #4]
 8000d6c:	88f9      	ldrh	r1, [r7, #6]
 8000d6e:	893a      	ldrh	r2, [r7, #8]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 f8cd 	bl	8000f10 <Led_Set>
	}
	else Led_Set(0, 0, 0);
}
 8000d76:	e004      	b.n	8000d82 <ColorFromEEPROM+0x5c>
	else Led_Set(0, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f000 f8c7 	bl	8000f10 <Led_Set>
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <WifiToEEPROM>:

void WifiToEEPROM()
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
	uint32_t check_sum[2] = {0};
 8000d90:	463b      	mov	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
	check_sum[0] = CRC_calc((uint32_t *)GetSSID(), 16);
 8000d98:	f7ff fc94 	bl	80006c4 <GetSSID>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2110      	movs	r1, #16
 8000da0:	4618      	mov	r0, r3
 8000da2:	f004 f829 	bl	8004df8 <CRC_calc>
 8000da6:	4603      	mov	r3, r0
 8000da8:	603b      	str	r3, [r7, #0]
	check_sum[1] = CRC_calc((uint32_t *)GetPasw(), 16);
 8000daa:	f7ff fcb3 	bl	8000714 <GetPasw>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2110      	movs	r1, #16
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 f820 	bl	8004df8 <CRC_calc>
 8000db8:	4603      	mov	r3, r0
 8000dba:	607b      	str	r3, [r7, #4]

	I2C2_SendData(SSID_ADDR, (uint8_t *)GetSSID(), 32);
 8000dbc:	f7ff fc82 	bl	80006c4 <GetSSID>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2220      	movs	r2, #32
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	20a0      	movs	r0, #160	; 0xa0
 8000dc8:	f004 fd10 	bl	80057ec <I2C2_SendData>
	delay(5);
 8000dcc:	2005      	movs	r0, #5
 8000dce:	f004 f83f 	bl	8004e50 <delay>
	I2C2_SendData(PASWD_ADDR, (uint8_t *)GetPasw(), 32);
 8000dd2:	f7ff fc9f 	bl	8000714 <GetPasw>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2220      	movs	r2, #32
 8000dda:	4619      	mov	r1, r3
 8000ddc:	20d0      	movs	r0, #208	; 0xd0
 8000dde:	f004 fd05 	bl	80057ec <I2C2_SendData>
	delay(5);
 8000de2:	2005      	movs	r0, #5
 8000de4:	f004 f834 	bl	8004e50 <delay>
	I2C2_SendData(WIFI_CHECK_SUM, (uint8_t *)check_sum, 8);
 8000de8:	463b      	mov	r3, r7
 8000dea:	2208      	movs	r2, #8
 8000dec:	4619      	mov	r1, r3
 8000dee:	20c2      	movs	r0, #194	; 0xc2
 8000df0:	f004 fcfc 	bl	80057ec <I2C2_SendData>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <WifiFromEEPROM>:

void WifiFromEEPROM(uint8_t * ssid, uint8_t * paswd)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
	uint32_t check_sum[2] = {0};
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]

	I2C2_ReadData(SSID_ADDR, (uint8_t *)ssid, 32);
 8000e10:	2220      	movs	r2, #32
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	20a0      	movs	r0, #160	; 0xa0
 8000e16:	f004 fd51 	bl	80058bc <I2C2_ReadData>
	delay(5);
 8000e1a:	2005      	movs	r0, #5
 8000e1c:	f004 f818 	bl	8004e50 <delay>
	I2C2_ReadData(PASWD_ADDR, (uint8_t *)paswd, 32);
 8000e20:	2220      	movs	r2, #32
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	20d0      	movs	r0, #208	; 0xd0
 8000e26:	f004 fd49 	bl	80058bc <I2C2_ReadData>
	delay(5);
 8000e2a:	2005      	movs	r0, #5
 8000e2c:	f004 f810 	bl	8004e50 <delay>
	I2C2_ReadData(WIFI_CHECK_SUM, (uint8_t *)check_sum, 8);
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	2208      	movs	r2, #8
 8000e36:	4619      	mov	r1, r3
 8000e38:	20c2      	movs	r0, #194	; 0xc2
 8000e3a:	f004 fd3f 	bl	80058bc <I2C2_ReadData>

	uint32_t check_SSID = CRC_calc((uint32_t *)ssid, 2);
 8000e3e:	2102      	movs	r1, #2
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f003 ffd9 	bl	8004df8 <CRC_calc>
 8000e46:	6178      	str	r0, [r7, #20]
	uint32_t check_PASWD = CRC_calc((uint32_t *)paswd, 2);
 8000e48:	2102      	movs	r1, #2
 8000e4a:	6838      	ldr	r0, [r7, #0]
 8000e4c:	f003 ffd4 	bl	8004df8 <CRC_calc>
 8000e50:	6138      	str	r0, [r7, #16]

	if(check_SSID != check_sum[0] || check_PASWD != check_sum[1])
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d103      	bne.n	8000e62 <WifiFromEEPROM+0x66>
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d003      	beq.n	8000e6a <WifiFromEEPROM+0x6e>
	{
		ssid = NULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
		paswd = NULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	603b      	str	r3, [r7, #0]
	}
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <LDRInit>:
#include "ldr.h"
#include "ldr_driver.h"
#define N 10

void LDRInit(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8000e76:	f004 ff4d 	bl	8005d14 <MX_ADC1_Init>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <LDR_Get>:

uint16_t LDR_Get(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
	uint32_t adc = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
	uint16_t adc_value = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	817b      	strh	r3, [r7, #10]

	for(int i = 0; i < N; i++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	e015      	b.n	8000ec0 <LDR_Get+0x40>
	{
		ADC1_Activate();
 8000e94:	f004 ffbc 	bl	8005e10 <ADC1_Activate>
		adc_value = ADC1_Get();
 8000e98:	f004 fff6 	bl	8005e88 <ADC1_Get>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	817b      	strh	r3, [r7, #10]

		if(adc_value > 4096) // additional overflow protection
 8000ea0:	897b      	ldrh	r3, [r7, #10]
 8000ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ea6:	d902      	bls.n	8000eae <LDR_Get+0x2e>
		    adc_value = 4096;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eac:	817b      	strh	r3, [r7, #10]

		adc += (4096 - adc_value);
 8000eae:	897b      	ldrh	r3, [r7, #10]
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eb8:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < N; i++)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b09      	cmp	r3, #9
 8000ec4:	dde6      	ble.n	8000e94 <LDR_Get+0x14>
	}
	adc_value = adc / N;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <LDR_Get+0x5c>)
 8000eca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ece:	08db      	lsrs	r3, r3, #3
 8000ed0:	817b      	strh	r3, [r7, #10]

	return adc_value;
 8000ed2:	897b      	ldrh	r3, [r7, #10]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	cccccccd 	.word	0xcccccccd

08000ee0 <LedInit>:
#include "led_driver.h"

uint16_t led[3] = {0, 0, 0};

void LedInit(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	MX_TIM4_Init();
 8000ee4:	f005 f94c 	bl	8006180 <MX_TIM4_Init>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <OverflowProtection>:

static uint16_t OverflowProtection(uint16_t value)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
    if(value > 4096)
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000efc:	d902      	bls.n	8000f04 <OverflowProtection+0x18>
        return 4096;
 8000efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f02:	e000      	b.n	8000f06 <OverflowProtection+0x1a>
    return value;
 8000f04:	88fb      	ldrh	r3, [r7, #6]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <Led_Set>:

void Led_Set(uint16_t red, uint16_t green, uint16_t blue)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	80fb      	strh	r3, [r7, #6]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	80bb      	strh	r3, [r7, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	807b      	strh	r3, [r7, #2]
	led[0] = OverflowProtection(red);
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ffe1 	bl	8000eec <OverflowProtection>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <Led_Set+0x4c>)
 8000f30:	801a      	strh	r2, [r3, #0]
	led[1] = OverflowProtection(green);
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ffd9 	bl	8000eec <OverflowProtection>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <Led_Set+0x4c>)
 8000f40:	805a      	strh	r2, [r3, #2]
	led[2] = OverflowProtection(blue);
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ffd1 	bl	8000eec <OverflowProtection>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <Led_Set+0x4c>)
 8000f50:	809a      	strh	r2, [r3, #4]
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000288 	.word	0x20000288

08000f60 <Led_Set_Color>:

void Led_Set_Color(color color, uint16_t value)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	460a      	mov	r2, r1
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	80bb      	strh	r3, [r7, #4]
	if(color >= 0 && color < 3)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d809      	bhi.n	8000f8a <Led_Set_Color+0x2a>
	{
		led[color] = OverflowProtection(value);
 8000f76:	79fc      	ldrb	r4, [r7, #7]
 8000f78:	88bb      	ldrh	r3, [r7, #4]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ffb6 	bl	8000eec <OverflowProtection>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <Led_Set_Color+0x34>)
 8000f86:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd90      	pop	{r4, r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000288 	.word	0x20000288

08000f98 <Led_Get_Color>:

uint16_t Led_Get_Color(color color)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	return led[color];
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	4a03      	ldr	r2, [pc, #12]	; (8000fb4 <Led_Get_Color+0x1c>)
 8000fa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	20000288 	.word	0x20000288

08000fb8 <Led_Get_Arr_Color>:

uint16_t * Led_Get_Arr_Color()
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
	return led;
 8000fbc:	4b02      	ldr	r3, [pc, #8]	; (8000fc8 <Led_Get_Arr_Color+0x10>)
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000288 	.word	0x20000288

08000fcc <map>:

static uint16_t map(uint16_t value, uint16_t max_value)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	80fb      	strh	r3, [r7, #6]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	80bb      	strh	r3, [r7, #4]
	uint16_t map_res = value * max_value / 4096;
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	88ba      	ldrh	r2, [r7, #4]
 8000fe0:	fb02 f303 	mul.w	r3, r2, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	da01      	bge.n	8000fec <map+0x20>
 8000fe8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000fec:	131b      	asrs	r3, r3, #12
 8000fee:	81fb      	strh	r3, [r7, #14]

	return map_res;
 8000ff0:	89fb      	ldrh	r3, [r7, #14]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <Led_Refresh>:

void Led_Refresh(uint16_t max_value)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
	TIM4_SET_CH1(map(led[0], max_value));
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <Led_Refresh+0x54>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	88fa      	ldrh	r2, [r7, #6]
 800100c:	4611      	mov	r1, r2
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ffdc 	bl	8000fcc <map>
 8001014:	4603      	mov	r3, r0
 8001016:	4618      	mov	r0, r3
 8001018:	f005 f956 	bl	80062c8 <TIM4_SET_CH1>
	TIM4_SET_CH2(map(led[1], max_value));
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <Led_Refresh+0x54>)
 800101e:	885b      	ldrh	r3, [r3, #2]
 8001020:	88fa      	ldrh	r2, [r7, #6]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ffd1 	bl	8000fcc <map>
 800102a:	4603      	mov	r3, r0
 800102c:	4618      	mov	r0, r3
 800102e:	f005 f95b 	bl	80062e8 <TIM4_SET_CH2>
	TIM4_SET_CH3(map(led[2], max_value));
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <Led_Refresh+0x54>)
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ffc6 	bl	8000fcc <map>
 8001040:	4603      	mov	r3, r0
 8001042:	4618      	mov	r0, r3
 8001044:	f005 f960 	bl	8006308 <TIM4_SET_CH3>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000288 	.word	0x20000288

08001054 <CONFIG>:
const char statusOK_CL0[] = {"HTTP/1.1 200 OK\r\nConnection: Keep-Alive\r\nContent-Type: text/html\r\nContent-Length: 0"};

const char statusNOTFOUND[] = {"HTTP/1.1 404 Not Found"};

void CONFIG()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
	char ContentLength[23];
	ESP_SendConstData(statusOK, strlen(statusOK), 1);
 800105a:	2201      	movs	r2, #1
 800105c:	2140      	movs	r1, #64	; 0x40
 800105e:	480e      	ldr	r0, [pc, #56]	; (8001098 <CONFIG+0x44>)
 8001060:	f7ff faa0 	bl	80005a4 <ESP_SendConstData>

	int length = strlen(htmlconfig);
 8001064:	f240 23de 	movw	r3, #734	; 0x2de
 8001068:	61fb      	str	r3, [r7, #28]
	sprintf(ContentLength, "Content-Length: %04d\r\n", length);
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	490b      	ldr	r1, [pc, #44]	; (800109c <CONFIG+0x48>)
 8001070:	4618      	mov	r0, r3
 8001072:	f006 fa11 	bl	8007498 <siprintf>
	ESP_SendConstData(ContentLength, 22, 1);
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2201      	movs	r2, #1
 800107a:	2116      	movs	r1, #22
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa91 	bl	80005a4 <ESP_SendConstData>
	ESP_SendConstData(htmlconfig, strlen(htmlconfig), 1);
 8001082:	2201      	movs	r2, #1
 8001084:	f240 21de 	movw	r1, #734	; 0x2de
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <CONFIG+0x4c>)
 800108a:	f7ff fa8b 	bl	80005a4 <ESP_SendConstData>
}
 800108e:	bf00      	nop
 8001090:	3720      	adds	r7, #32
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	080084fc 	.word	0x080084fc
 800109c:	08007fe8 	.word	0x08007fe8
 80010a0:	0800821c 	.word	0x0800821c

080010a4 <CONFIG_parse>:

void CONFIG_parse()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
 80010a8:	af00      	add	r7, sp, #0
	char * search;
	char ssid_temp[32], paswd_temp[32];
	memset(ssid_temp, 0, 32);
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2220      	movs	r2, #32
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f006 f9e7 	bl	8007486 <memset>
	memset(paswd_temp, 0, 32);
 80010b8:	463b      	mov	r3, r7
 80010ba:	2220      	movs	r2, #32
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f006 f9e1 	bl	8007486 <memset>

	search = strstr(ESP_GetAnswer(), "ssid=");
 80010c4:	f7ff fad6 	bl	8000674 <ESP_GetAnswer>
 80010c8:	4603      	mov	r3, r0
 80010ca:	493f      	ldr	r1, [pc, #252]	; (80011c8 <CONFIG_parse+0x124>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f006 fa07 	bl	80074e0 <strstr>
 80010d2:	6438      	str	r0, [r7, #64]	; 0x40
	if(search != NULL)
 80010d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d03e      	beq.n	8001158 <CONFIG_parse+0xb4>
	{
		search += 5;
 80010da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010dc:	3305      	adds	r3, #5
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
		for(int i = 0, l = 0; i < 32; i++, l++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010e4:	2300      	movs	r3, #0
 80010e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80010e8:	e031      	b.n	800114e <CONFIG_parse+0xaa>
		{
			if(search[i] == '&')
 80010ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010ee:	4413      	add	r3, r2
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b26      	cmp	r3, #38	; 0x26
 80010f4:	d02f      	beq.n	8001156 <CONFIG_parse+0xb2>
			{
				break;
			}
			if(search[i] == '%' && search[i+1] == '3' && search[i+2] == 'F') // search space code and replace by space
 80010f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010fa:	4413      	add	r3, r2
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b25      	cmp	r3, #37	; 0x25
 8001100:	d115      	bne.n	800112e <CONFIG_parse+0x8a>
 8001102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001104:	3301      	adds	r3, #1
 8001106:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b33      	cmp	r3, #51	; 0x33
 800110e:	d10e      	bne.n	800112e <CONFIG_parse+0x8a>
 8001110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001112:	3302      	adds	r3, #2
 8001114:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001116:	4413      	add	r3, r2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b46      	cmp	r3, #70	; 0x46
 800111c:	d107      	bne.n	800112e <CONFIG_parse+0x8a>
			{
				i += 2;
 800111e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001120:	3302      	adds	r3, #2
 8001122:	64fb      	str	r3, [r7, #76]	; 0x4c
				search[i] = ' ';
 8001124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001126:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001128:	4413      	add	r3, r2
 800112a:	2220      	movs	r2, #32
 800112c:	701a      	strb	r2, [r3, #0]
			}

			ssid_temp[l] = search[i];
 800112e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001130:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001132:	4413      	add	r3, r2
 8001134:	7819      	ldrb	r1, [r3, #0]
 8001136:	f107 0220 	add.w	r2, r7, #32
 800113a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800113c:	4413      	add	r3, r2
 800113e:	460a      	mov	r2, r1
 8001140:	701a      	strb	r2, [r3, #0]
		for(int i = 0, l = 0; i < 32; i++, l++)
 8001142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001144:	3301      	adds	r3, #1
 8001146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800114a:	3301      	adds	r3, #1
 800114c:	64bb      	str	r3, [r7, #72]	; 0x48
 800114e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001150:	2b1f      	cmp	r3, #31
 8001152:	ddca      	ble.n	80010ea <CONFIG_parse+0x46>
 8001154:	e000      	b.n	8001158 <CONFIG_parse+0xb4>
				break;
 8001156:	bf00      	nop
		}
	}
	SetSSID(ssid_temp);
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fa93 	bl	8000688 <SetSSID>

	search = strstr(ESP_GetAnswer(), "paswd=");
 8001162:	f7ff fa87 	bl	8000674 <ESP_GetAnswer>
 8001166:	4603      	mov	r3, r0
 8001168:	4918      	ldr	r1, [pc, #96]	; (80011cc <CONFIG_parse+0x128>)
 800116a:	4618      	mov	r0, r3
 800116c:	f006 f9b8 	bl	80074e0 <strstr>
 8001170:	6438      	str	r0, [r7, #64]	; 0x40
	if(search != NULL)
 8001172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001174:	2b00      	cmp	r3, #0
 8001176:	d020      	beq.n	80011ba <CONFIG_parse+0x116>
	{
		search += 6;
 8001178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800117a:	3306      	adds	r3, #6
 800117c:	643b      	str	r3, [r7, #64]	; 0x40
		for(int i = 0; i < 32; i++)
 800117e:	2300      	movs	r3, #0
 8001180:	647b      	str	r3, [r7, #68]	; 0x44
 8001182:	e011      	b.n	80011a8 <CONFIG_parse+0x104>
		{
			if(search[i] == '&')
 8001184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001186:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b26      	cmp	r3, #38	; 0x26
 800118e:	d00f      	beq.n	80011b0 <CONFIG_parse+0x10c>
			{
				break;
			}
			paswd_temp[i] = search[i];
 8001190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001194:	4413      	add	r3, r2
 8001196:	7819      	ldrb	r1, [r3, #0]
 8001198:	463a      	mov	r2, r7
 800119a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800119c:	4413      	add	r3, r2
 800119e:	460a      	mov	r2, r1
 80011a0:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++)
 80011a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011a4:	3301      	adds	r3, #1
 80011a6:	647b      	str	r3, [r7, #68]	; 0x44
 80011a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011aa:	2b1f      	cmp	r3, #31
 80011ac:	ddea      	ble.n	8001184 <CONFIG_parse+0xe0>
 80011ae:	e000      	b.n	80011b2 <CONFIG_parse+0x10e>
				break;
 80011b0:	bf00      	nop
		}

		SetPASWD(paswd_temp);
 80011b2:	463b      	mov	r3, r7
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fa8f 	bl	80006d8 <SetPASWD>
	}
	CONFIG();
 80011ba:	f7ff ff4b 	bl	8001054 <CONFIG>
	//ESP_SendConstData(statusOK_CL0, strlen(statusOK_CL0), 1);
}
 80011be:	bf00      	nop
 80011c0:	3750      	adds	r7, #80	; 0x50
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	08008000 	.word	0x08008000
 80011cc:	08008008 	.word	0x08008008

080011d0 <PICKER>:

void PICKER()
{
 80011d0:	b5b0      	push	{r4, r5, r7, lr}
 80011d2:	b08c      	sub	sp, #48	; 0x30
 80011d4:	af02      	add	r7, sp, #8
	char hex[7], ContentLength[23];
	hex[6] = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	ESP_SendConstData(statusOK, strlen(statusOK), 1);
 80011dc:	2201      	movs	r2, #1
 80011de:	2140      	movs	r1, #64	; 0x40
 80011e0:	482c      	ldr	r0, [pc, #176]	; (8001294 <PICKER+0xc4>)
 80011e2:	f7ff f9df 	bl	80005a4 <ESP_SendConstData>

	int length = strlen(htmlpicker1) + strlen(htmlpicker2) + 6;
 80011e6:	f240 139b 	movw	r3, #411	; 0x19b
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(ContentLength, "Content-Length: %04d\r\n", length);
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f0:	4929      	ldr	r1, [pc, #164]	; (8001298 <PICKER+0xc8>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f006 f950 	bl	8007498 <siprintf>
	ESP_SendConstData(ContentLength, 22, 1);
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2201      	movs	r2, #1
 80011fc:	2116      	movs	r1, #22
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f9d0 	bl	80005a4 <ESP_SendConstData>

	sprintf(hex, "%02x%02x%02x", Led_Get_Color(eRed)*255/4096, Led_Get_Color(eGreen)*255/4096, Led_Get_Color(eBlue)*255/4096);
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff fec7 	bl	8000f98 <Led_Get_Color>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	4613      	mov	r3, r2
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	1a9b      	subs	r3, r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	da01      	bge.n	800121c <PICKER+0x4c>
 8001218:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800121c:	131b      	asrs	r3, r3, #12
 800121e:	461c      	mov	r4, r3
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff feb9 	bl	8000f98 <Led_Get_Color>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	4613      	mov	r3, r2
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	1a9b      	subs	r3, r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	da01      	bge.n	8001238 <PICKER+0x68>
 8001234:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001238:	131b      	asrs	r3, r3, #12
 800123a:	461d      	mov	r5, r3
 800123c:	2002      	movs	r0, #2
 800123e:	f7ff feab 	bl	8000f98 <Led_Get_Color>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	4613      	mov	r3, r2
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	1a9b      	subs	r3, r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	da01      	bge.n	8001254 <PICKER+0x84>
 8001250:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001254:	131b      	asrs	r3, r3, #12
 8001256:	f107 001c 	add.w	r0, r7, #28
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	462b      	mov	r3, r5
 800125e:	4622      	mov	r2, r4
 8001260:	490e      	ldr	r1, [pc, #56]	; (800129c <PICKER+0xcc>)
 8001262:	f006 f919 	bl	8007498 <siprintf>

	ESP_SendConstData(htmlpicker1, strlen(htmlpicker1), 0);
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <PICKER+0xd0>)
 800126e:	f7ff f999 	bl	80005a4 <ESP_SendConstData>
	ESP_SendConstData(hex, 6, 0);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	2200      	movs	r2, #0
 8001278:	2106      	movs	r1, #6
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f992 	bl	80005a4 <ESP_SendConstData>
	ESP_SendConstData(htmlpicker2, strlen(htmlpicker2), 1);
 8001280:	2201      	movs	r2, #1
 8001282:	2167      	movs	r1, #103	; 0x67
 8001284:	4807      	ldr	r0, [pc, #28]	; (80012a4 <PICKER+0xd4>)
 8001286:	f7ff f98d 	bl	80005a4 <ESP_SendConstData>
}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	; 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bdb0      	pop	{r4, r5, r7, pc}
 8001292:	bf00      	nop
 8001294:	080084fc 	.word	0x080084fc
 8001298:	08007fe8 	.word	0x08007fe8
 800129c:	08008010 	.word	0x08008010
 80012a0:	08008084 	.word	0x08008084
 80012a4:	080081b4 	.word	0x080081b4

080012a8 <PickerParseLed>:

void PickerParseLed()
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
	char * search;
	search = strstr(ESP_GetAnswer(), "picker=#");
 80012ae:	f7ff f9e1 	bl	8000674 <ESP_GetAnswer>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4935      	ldr	r1, [pc, #212]	; (800138c <PickerParseLed+0xe4>)
 80012b6:	4618      	mov	r0, r3
 80012b8:	f006 f912 	bl	80074e0 <strstr>
 80012bc:	6178      	str	r0, [r7, #20]
	if(search != NULL)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d05f      	beq.n	8001384 <PickerParseLed+0xdc>
	{
		char hex[3];
		hex[2] = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	73bb      	strb	r3, [r7, #14]
		uint16_t colors[3] = {0, 0, 0};
 80012c8:	2300      	movs	r3, #0
 80012ca:	80bb      	strh	r3, [r7, #4]
 80012cc:	2300      	movs	r3, #0
 80012ce:	80fb      	strh	r3, [r7, #6]
 80012d0:	2300      	movs	r3, #0
 80012d2:	813b      	strh	r3, [r7, #8]
		for(int i = 0, l = 0; i < 6; i += 2, l++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
 80012dc:	e02e      	b.n	800133c <PickerParseLed+0x94>
		{
			int position = search - ESP_GetAnswer() + 8 + i;
 80012de:	697c      	ldr	r4, [r7, #20]
 80012e0:	f7ff f9c8 	bl	8000674 <ESP_GetAnswer>
 80012e4:	4603      	mov	r3, r0
 80012e6:	1ae3      	subs	r3, r4, r3
 80012e8:	f103 0208 	add.w	r2, r3, #8
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	4413      	add	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
			hex[0] = ESP_GetAnswer()[position];
 80012f2:	f7ff f9bf 	bl	8000674 <ESP_GetAnswer>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4413      	add	r3, r2
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	733b      	strb	r3, [r7, #12]
			hex[1] = ESP_GetAnswer()[position + 1];
 8001300:	f7ff f9b8 	bl	8000674 <ESP_GetAnswer>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	3301      	adds	r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	737b      	strb	r3, [r7, #13]
			colors[l] = strtol(hex, NULL, 16);
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2210      	movs	r2, #16
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f006 f97d 	bl	8007618 <strtol>
 800131e:	4603      	mov	r3, r0
 8001320:	b29a      	uxth	r2, r3
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	f107 0120 	add.w	r1, r7, #32
 800132a:	440b      	add	r3, r1
 800132c:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for(int i = 0, l = 0; i < 6; i += 2, l++)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	3302      	adds	r3, #2
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	3301      	adds	r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	2b05      	cmp	r3, #5
 8001340:	ddcd      	ble.n	80012de <PickerParseLed+0x36>
		}
		Led_Set(colors[0]*4096/255, colors[1]*4096/255, colors[2]*4096/255);
 8001342:	88bb      	ldrh	r3, [r7, #4]
 8001344:	031b      	lsls	r3, r3, #12
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <PickerParseLed+0xe8>)
 8001348:	fb82 1203 	smull	r1, r2, r2, r3
 800134c:	441a      	add	r2, r3
 800134e:	11d2      	asrs	r2, r2, #7
 8001350:	17db      	asrs	r3, r3, #31
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	b298      	uxth	r0, r3
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	031b      	lsls	r3, r3, #12
 800135a:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <PickerParseLed+0xe8>)
 800135c:	fb82 1203 	smull	r1, r2, r2, r3
 8001360:	441a      	add	r2, r3
 8001362:	11d2      	asrs	r2, r2, #7
 8001364:	17db      	asrs	r3, r3, #31
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	b299      	uxth	r1, r3
 800136a:	893b      	ldrh	r3, [r7, #8]
 800136c:	031b      	lsls	r3, r3, #12
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <PickerParseLed+0xe8>)
 8001370:	fb82 4203 	smull	r4, r2, r2, r3
 8001374:	441a      	add	r2, r3
 8001376:	11d2      	asrs	r2, r2, #7
 8001378:	17db      	asrs	r3, r3, #31
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	b29b      	uxth	r3, r3
 800137e:	461a      	mov	r2, r3
 8001380:	f7ff fdc6 	bl	8000f10 <Led_Set>
	}
}
 8001384:	bf00      	nop
 8001386:	3724      	adds	r7, #36	; 0x24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd90      	pop	{r4, r7, pc}
 800138c:	08008020 	.word	0x08008020
 8001390:	80808081 	.word	0x80808081

08001394 <PICKER_parse>:

void PICKER_parse()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	PickerParseLed();
 8001398:	f7ff ff86 	bl	80012a8 <PickerParseLed>
	//ColorToEEPROM();
	display();
 800139c:	f7ff fb2a 	bl	80009f4 <display>
	PICKER();
 80013a0:	f7ff ff16 	bl	80011d0 <PICKER>
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <requestConstFind>:

uint8_t requestConstFind(const char * key)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	if(strstr(ESP_GetAnswer(), key) != NULL)
 80013b0:	f7ff f960 	bl	8000674 <ESP_GetAnswer>
 80013b4:	4603      	mov	r3, r0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f006 f891 	bl	80074e0 <strstr>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <requestConstFind+0x20>
	{
		return 1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e001      	b.n	80013cc <requestConstFind+0x24>
	}
	else asm("NOP");
 80013c8:	bf00      	nop
	return 0;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <ESP_Request>:


void ESP_Request(const char ** pages, const function_pointer * functions, uint8_t number)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	4613      	mov	r3, r2
 80013e0:	71fb      	strb	r3, [r7, #7]
	uint8_t linkID = requestRefresh(); //parse request for id, URL, post data
 80013e2:	f7ff f85f 	bl	80004a4 <requestRefresh>
 80013e6:	4603      	mov	r3, r0
 80013e8:	74fb      	strb	r3, [r7, #19]
	SetLinkID(linkID);
 80013ea:	7cfb      	ldrb	r3, [r7, #19]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f931 	bl	8000654 <SetLinkID>

	if(linkID >= 0 && linkID < 5)
 80013f2:	7cfb      	ldrb	r3, [r7, #19]
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d82d      	bhi.n	8001454 <ESP_Request+0x80>
	{
		if(pages != NULL
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d020      	beq.n	8001440 <ESP_Request+0x6c>
	       && functions != NULL)
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d01d      	beq.n	8001440 <ESP_Request+0x6c>
		{
			for(int i = 0; i < number; i++)
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	e016      	b.n	8001438 <ESP_Request+0x64>
			{
				if(requestConstFind(pages[i]))
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4413      	add	r3, r2
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ffc7 	bl	80013a8 <requestConstFind>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d008      	beq.n	8001432 <ESP_Request+0x5e>
				{
					functions[i]();
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	4413      	add	r3, r2
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4798      	blx	r3
					RingBuff_Clear();
 800142c:	f000 f87e 	bl	800152c <RingBuff_Clear>
					return;
 8001430:	e010      	b.n	8001454 <ESP_Request+0x80>
			for(int i = 0; i < number; i++)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3301      	adds	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	429a      	cmp	r2, r3
 800143e:	dce4      	bgt.n	800140a <ESP_Request+0x36>
				}
			}
		}
		ESP_SendConstData(statusNOTFOUND, strlen(statusNOTFOUND), 1);
 8001440:	2201      	movs	r2, #1
 8001442:	2116      	movs	r1, #22
 8001444:	4805      	ldr	r0, [pc, #20]	; (800145c <ESP_Request+0x88>)
 8001446:	f7ff f8ad 	bl	80005a4 <ESP_SendConstData>
		ESP_SendConstData(statusOK_CL0, strlen(statusOK_CL0), 1);
 800144a:	2201      	movs	r2, #1
 800144c:	2153      	movs	r1, #83	; 0x53
 800144e:	4804      	ldr	r0, [pc, #16]	; (8001460 <ESP_Request+0x8c>)
 8001450:	f7ff f8a8 	bl	80005a4 <ESP_SendConstData>
	}
}
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	08008594 	.word	0x08008594
 8001460:	08008540 	.word	0x08008540

08001464 <RingBuff_Init>:

uint16_t index_in, index_out;
char buffer[BUF_SIZE];

void RingBuff_Init()
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	index_in = index_out = 0;
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <RingBuff_Init+0x1c>)
 800146a:	2200      	movs	r2, #0
 800146c:	801a      	strh	r2, [r3, #0]
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <RingBuff_Init+0x1c>)
 8001470:	881a      	ldrh	r2, [r3, #0]
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <RingBuff_Init+0x20>)
 8001474:	801a      	strh	r2, [r3, #0]
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20002c44 	.word	0x20002c44
 8001484:	20003048 	.word	0x20003048

08001488 <RingBuff_Push>:

void RingBuff_Push(char element)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
	buffer[index_in++] = element;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <RingBuff_Push+0x38>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	b291      	uxth	r1, r2
 800149a:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <RingBuff_Push+0x38>)
 800149c:	8011      	strh	r1, [r2, #0]
 800149e:	4619      	mov	r1, r3
 80014a0:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <RingBuff_Push+0x3c>)
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	5453      	strb	r3, [r2, r1]
	index_in &= BUF_MASK;
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <RingBuff_Push+0x38>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <RingBuff_Push+0x38>)
 80014b2:	801a      	strh	r2, [r3, #0]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20003048 	.word	0x20003048
 80014c4:	20002c48 	.word	0x20002c48

080014c8 <RingBuff_Pop>:

char RingBuff_Pop()
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
	char element = buffer[index_out++];
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <RingBuff_Pop+0x34>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	b291      	uxth	r1, r2
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <RingBuff_Pop+0x34>)
 80014d8:	8011      	strh	r1, [r2, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <RingBuff_Pop+0x38>)
 80014de:	5c9b      	ldrb	r3, [r3, r2]
 80014e0:	71fb      	strb	r3, [r7, #7]
	index_out &= BUF_MASK;
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <RingBuff_Pop+0x34>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <RingBuff_Pop+0x34>)
 80014ee:	801a      	strh	r2, [r3, #0]
	return element;
 80014f0:	79fb      	ldrb	r3, [r7, #7]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	20002c44 	.word	0x20002c44
 8001500:	20002c48 	.word	0x20002c48

08001504 <RingBuff_IsEmpty>:

uint8_t RingBuff_IsEmpty()
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
	if (index_in == index_out)
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <RingBuff_IsEmpty+0x20>)
 800150a:	881a      	ldrh	r2, [r3, #0]
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <RingBuff_IsEmpty+0x24>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d101      	bne.n	8001518 <RingBuff_IsEmpty+0x14>
		return 1;
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <RingBuff_IsEmpty+0x16>
	return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20003048 	.word	0x20003048
 8001528:	20002c44 	.word	0x20002c44

0800152c <RingBuff_Clear>:

void RingBuff_Clear()
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
	index_out = index_in = 0;
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <RingBuff_Clear+0x1c>)
 8001532:	2200      	movs	r2, #0
 8001534:	801a      	strh	r2, [r3, #0]
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <RingBuff_Clear+0x1c>)
 8001538:	881a      	ldrh	r2, [r3, #0]
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <RingBuff_Clear+0x20>)
 800153c:	801a      	strh	r2, [r3, #0]
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20003048 	.word	0x20003048
 800154c:	20002c44 	.word	0x20002c44

08001550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001554:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_Init+0x28>)
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_Init+0x28>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f043 0310 	orr.w	r3, r3, #16
 800155e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001560:	2003      	movs	r0, #3
 8001562:	f000 f8c1 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001566:	2000      	movs	r0, #0
 8001568:	f005 fe5a 	bl	8007220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800156c:	f005 fe20 	bl	80071b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40022000 	.word	0x40022000

0800157c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_IncTick+0x1c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_IncTick+0x20>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a03      	ldr	r2, [pc, #12]	; (800159c <HAL_IncTick+0x20>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	20000088 	.word	0x20000088
 800159c:	2000304c 	.word	0x2000304c

080015a0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800160e:	4908      	ldr	r1, [pc, #32]	; (8001630 <NVIC_EnableIRQ+0x2c>)
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	095b      	lsrs	r3, r3, #5
 8001616:	79fa      	ldrb	r2, [r7, #7]
 8001618:	f002 021f 	and.w	r2, r2, #31
 800161c:	2001      	movs	r0, #1
 800161e:	fa00 f202 	lsl.w	r2, r0, r2
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100

08001634 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	da0b      	bge.n	8001660 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	490d      	ldr	r1, [pc, #52]	; (8001680 <NVIC_SetPriority+0x4c>)
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	3b04      	subs	r3, #4
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165e:	e009      	b.n	8001674 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	4908      	ldr	r1, [pc, #32]	; (8001684 <NVIC_SetPriority+0x50>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	440b      	add	r3, r1
 8001670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00
 8001684:	e000e100 	.word	0xe000e100

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	2201      	movs	r2, #1
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	1e5a      	subs	r2, r3, #1
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	401a      	ands	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ce:	2101      	movs	r1, #1
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	1e59      	subs	r1, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
         );
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	; 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff55 	bl	80015a0 <NVIC_SetPriorityGrouping>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff6a 	bl	80015e8 <NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ffb4 	bl	8001688 <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff83 	bl	8001634 <NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff5d 	bl	8001604 <NVIC_EnableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001758:	4b02      	ldr	r3, [pc, #8]	; (8001764 <HAL_RCC_GetHCLKFreq+0x10>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	20000094 	.word	0x20000094

08001768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800176c:	f7ff fff2 	bl	8001754 <HAL_RCC_GetHCLKFreq>
 8001770:	4601      	mov	r1, r0
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	0adb      	lsrs	r3, r3, #11
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	4a03      	ldr	r2, [pc, #12]	; (800178c <HAL_RCC_GetPCLK2Freq+0x24>)
 800177e:	5cd3      	ldrb	r3, [r2, r3]
 8001780:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001784:	4618      	mov	r0, r3
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40021000 	.word	0x40021000
 800178c:	080085cc 	.word	0x080085cc

08001790 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	220f      	movs	r2, #15
 800179e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_RCC_GetClockConfig+0x58>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0203 	and.w	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_RCC_GetClockConfig+0x58>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_RCC_GetClockConfig+0x58>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_RCC_GetClockConfig+0x58>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	611a      	str	r2, [r3, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0207 	and.w	r2, r3, #7
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40022000 	.word	0x40022000

080017f0 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e01d      	b.n	800183e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f815 	bl	8001846 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2202      	movs	r2, #2
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3304      	adds	r3, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4610      	mov	r0, r2
 8001830:	f000 f958 	bl	8001ae4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	68d2      	ldr	r2, [r2, #12]
 800186a:	f042 0201 	orr.w	r2, r2, #1
 800186e:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d122      	bne.n	80018e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d11b      	bne.n	80018e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f06f 0202 	mvn.w	r2, #2
 80018b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f8ed 	bl	8001aae <HAL_TIM_IC_CaptureCallback>
 80018d4:	e005      	b.n	80018e2 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f8e0 	bl	8001a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f8ef 	bl	8001ac0 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d122      	bne.n	800193c <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b04      	cmp	r3, #4
 8001902:	d11b      	bne.n	800193c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f06f 0204 	mvn.w	r2, #4
 800190c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2202      	movs	r2, #2
 8001912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f8c3 	bl	8001aae <HAL_TIM_IC_CaptureCallback>
 8001928:	e005      	b.n	8001936 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f8b6 	bl	8001a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f8c5 	bl	8001ac0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b08      	cmp	r3, #8
 8001948:	d122      	bne.n	8001990 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b08      	cmp	r3, #8
 8001956:	d11b      	bne.n	8001990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f06f 0208 	mvn.w	r2, #8
 8001960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2204      	movs	r2, #4
 8001966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f899 	bl	8001aae <HAL_TIM_IC_CaptureCallback>
 800197c:	e005      	b.n	800198a <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f88c 	bl	8001a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f89b 	bl	8001ac0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	2b10      	cmp	r3, #16
 800199c:	d122      	bne.n	80019e4 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b10      	cmp	r3, #16
 80019aa:	d11b      	bne.n	80019e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f06f 0210 	mvn.w	r2, #16
 80019b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2208      	movs	r2, #8
 80019ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f86f 	bl	8001aae <HAL_TIM_IC_CaptureCallback>
 80019d0:	e005      	b.n	80019de <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f862 	bl	8001a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f871 	bl	8001ac0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d10e      	bne.n	8001a10 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d107      	bne.n	8001a10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f06f 0201 	mvn.w	r2, #1
 8001a08:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f005 fbb8 	bl	8007180 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	2b80      	cmp	r3, #128	; 0x80
 8001a1c:	d10e      	bne.n	8001a3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a28:	2b80      	cmp	r3, #128	; 0x80
 8001a2a:	d107      	bne.n	8001a3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a34:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f8c3 	bl	8001bc2 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a46:	2b40      	cmp	r3, #64	; 0x40
 8001a48:	d10e      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a54:	2b40      	cmp	r3, #64	; 0x40
 8001a56:	d107      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a60:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f835 	bl	8001ad2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0320 	and.w	r3, r3, #32
 8001a72:	2b20      	cmp	r3, #32
 8001a74:	d10e      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	2b20      	cmp	r3, #32
 8001a82:	d107      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0220 	mvn.w	r2, #32
 8001a8c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f88e 	bl	8001bb0 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a2a      	ldr	r2, [pc, #168]	; (8001ba4 <TIM_Base_SetConfig+0xc0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d00b      	beq.n	8001b18 <TIM_Base_SetConfig+0x34>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b06:	d007      	beq.n	8001b18 <TIM_Base_SetConfig+0x34>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a27      	ldr	r2, [pc, #156]	; (8001ba8 <TIM_Base_SetConfig+0xc4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d003      	beq.n	8001b18 <TIM_Base_SetConfig+0x34>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a26      	ldr	r2, [pc, #152]	; (8001bac <TIM_Base_SetConfig+0xc8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d108      	bne.n	8001b2a <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ba4 <TIM_Base_SetConfig+0xc0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d00b      	beq.n	8001b4a <TIM_Base_SetConfig+0x66>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b38:	d007      	beq.n	8001b4a <TIM_Base_SetConfig+0x66>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a1a      	ldr	r2, [pc, #104]	; (8001ba8 <TIM_Base_SetConfig+0xc4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d003      	beq.n	8001b4a <TIM_Base_SetConfig+0x66>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a19      	ldr	r2, [pc, #100]	; (8001bac <TIM_Base_SetConfig+0xc8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d108      	bne.n	8001b5c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b62:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <TIM_Base_SetConfig+0xc0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d103      	bne.n	8001b94 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	615a      	str	r2, [r3, #20]
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	40012c00 	.word	0x40012c00
 8001ba8:	40000400 	.word	0x40000400
 8001bac:	40000800 	.word	0x40000800

08001bb0 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	bf0c      	ite	eq
 8001c0c:	2301      	moveq	r3, #1
 8001c0e:	2300      	movne	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001c26:	2301      	movs	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8001c2a:	4813      	ldr	r0, [pc, #76]	; (8001c78 <LL_ADC_CommonInit+0x5c>)
 8001c2c:	f7ff ffe4 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001c30:	4604      	mov	r4, r0
 8001c32:	4812      	ldr	r0, [pc, #72]	; (8001c7c <LL_ADC_CommonInit+0x60>)
 8001c34:	f7ff ffe0 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4323      	orrs	r3, r4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d114      	bne.n	8001c6a <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d009      	beq.n	8001c5c <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	e008      	b.n	8001c6e <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	e001      	b.n	8001c6e <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd90      	pop	{r4, r7, pc}
 8001c78:	40012400 	.word	0x40012400
 8001c7c:	40012800 	.word	0x40012800

08001c80 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ffb2 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d112      	bne.n	8001cc0 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	e001      	b.n	8001cc4 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ff8b 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d131      	bne.n	8001d4c <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00c      	beq.n	8001d0a <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	430b      	orrs	r3, r1
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	e008      	b.n	8001d1c <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8001d24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	6811      	ldr	r1, [r2, #0]
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	68d2      	ldr	r2, [r2, #12]
 8001d30:	4311      	orrs	r1, r2
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	6912      	ldr	r2, [r2, #16]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4619      	mov	r1, r3
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff45 	bl	8001bd4 <LL_ADC_REG_SetSequencerLength>
 8001d4a:	e001      	b.n	8001d50 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001d64:	4905      	ldr	r1, [pc, #20]	; (8001d7c <LL_EXTI_EnableIT_0_31+0x20>)
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <LL_EXTI_EnableIT_0_31+0x20>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40010400 	.word	0x40010400

08001d80 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001d88:	4905      	ldr	r1, [pc, #20]	; (8001da0 <LL_EXTI_DisableIT_0_31+0x20>)
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <LL_EXTI_DisableIT_0_31+0x20>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4013      	ands	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	40010400 	.word	0x40010400

08001da4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001dac:	4905      	ldr	r1, [pc, #20]	; (8001dc4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001dae:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]

}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40010400 	.word	0x40010400

08001dc8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001dd0:	4905      	ldr	r1, [pc, #20]	; (8001de8 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4013      	ands	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	40010400 	.word	0x40010400

08001dec <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001df4:	4905      	ldr	r1, [pc, #20]	; (8001e0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	608b      	str	r3, [r1, #8]

}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40010400 	.word	0x40010400

08001e10 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001e18:	4905      	ldr	r1, [pc, #20]	; (8001e30 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	4013      	ands	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]

}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	40010400 	.word	0x40010400

08001e34 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001e3c:	4905      	ldr	r1, [pc, #20]	; (8001e54 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60cb      	str	r3, [r1, #12]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40010400 	.word	0x40010400

08001e58 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001e60:	4905      	ldr	r1, [pc, #20]	; (8001e78 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	60cb      	str	r3, [r1, #12]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	40010400 	.word	0x40010400

08001e7c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	791b      	ldrb	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d060      	beq.n	8001f52 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d066      	beq.n	8001f66 <LL_EXTI_Init+0xea>
    {
      switch (EXTI_InitStruct->Mode)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	795b      	ldrb	r3, [r3, #5]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d00e      	beq.n	8001ebe <LL_EXTI_Init+0x42>
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d017      	beq.n	8001ed4 <LL_EXTI_Init+0x58>
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d120      	bne.n	8001eea <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff8b 	bl	8001dc8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff50 	bl	8001d5c <LL_EXTI_EnableIT_0_31>
          break;
 8001ebc:	e018      	b.n	8001ef0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff5c 	bl	8001d80 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff69 	bl	8001da4 <LL_EXTI_EnableEvent_0_31>
          break;
 8001ed2:	e00d      	b.n	8001ef0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff3f 	bl	8001d5c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff5e 	bl	8001da4 <LL_EXTI_EnableEvent_0_31>
          break;
 8001ee8:	e002      	b.n	8001ef0 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8001eea:	2300      	movs	r3, #0
 8001eec:	73fb      	strb	r3, [r7, #15]
          break;
 8001eee:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	799b      	ldrb	r3, [r3, #6]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d036      	beq.n	8001f66 <LL_EXTI_Init+0xea>
      {
        switch (EXTI_InitStruct->Trigger)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	799b      	ldrb	r3, [r3, #6]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d00e      	beq.n	8001f1e <LL_EXTI_Init+0xa2>
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d017      	beq.n	8001f34 <LL_EXTI_Init+0xb8>
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d120      	bne.n	8001f4a <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ffa3 	bl	8001e58 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff68 	bl	8001dec <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001f1c:	e023      	b.n	8001f66 <LL_EXTI_Init+0xea>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff74 	bl	8001e10 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff81 	bl	8001e34 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001f32:	e018      	b.n	8001f66 <LL_EXTI_Init+0xea>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff57 	bl	8001dec <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff76 	bl	8001e34 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001f48:	e00d      	b.n	8001f66 <LL_EXTI_Init+0xea>
          default:
            status = ERROR;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
            break;
 8001f4e:	bf00      	nop
 8001f50:	e009      	b.n	8001f66 <LL_EXTI_Init+0xea>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ff12 	bl	8001d80 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff31 	bl	8001dc8 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001f70:	b490      	push	{r4, r7}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	0e1b      	lsrs	r3, r3, #24
 8001f84:	4413      	add	r3, r2
 8001f86:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001f88:	6822      	ldr	r2, [r4, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	61bb      	str	r3, [r7, #24]
  return(result);
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	6023      	str	r3, [r4, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	3720      	adds	r7, #32
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc90      	pop	{r4, r7}
 8001fce:	4770      	bx	lr

08001fd0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001fd0:	b490      	push	{r4, r7}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	0e1b      	lsrs	r3, r3, #24
 8001fe4:	4413      	add	r3, r2
 8001fe6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001fe8:	6822      	ldr	r2, [r4, #0]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	613b      	str	r3, [r7, #16]
  return(result);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	2103      	movs	r1, #3
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	401a      	ands	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	61bb      	str	r3, [r7, #24]
  return(result);
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	4313      	orrs	r3, r2
 8002024:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8002026:	bf00      	nop
 8002028:	3720      	adds	r7, #32
 800202a:	46bd      	mov	sp, r7
 800202c:	bc90      	pop	{r4, r7}
 800202e:	4770      	bx	lr

08002030 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8002030:	b490      	push	{r4, r7}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	461a      	mov	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	0e1b      	lsrs	r3, r3, #24
 8002044:	4413      	add	r3, r2
 8002046:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002048:	6822      	ldr	r2, [r4, #0]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	613b      	str	r3, [r7, #16]
  return(result);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	2104      	movs	r1, #4
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	401a      	ands	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	61bb      	str	r3, [r7, #24]
  return(result);
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	4313      	orrs	r3, r2
 8002084:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8002086:	bf00      	nop
 8002088:	3720      	adds	r7, #32
 800208a:	46bd      	mov	sp, r7
 800208c:	bc90      	pop	{r4, r7}
 800208e:	4770      	bx	lr

08002090 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	43db      	mvns	r3, r3
 80020a6:	401a      	ands	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	613b      	str	r3, [r7, #16]
  return(result);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	431a      	orrs	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	60da      	str	r2, [r3, #12]
}
 80020c8:	bf00      	nop
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b088      	sub	sp, #32
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	0c1b      	lsrs	r3, r3, #16
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80020f2:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80020f4:	fab3 f383 	clz	r3, r3
 80020f8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0U)
 80020fa:	e040      	b.n	800217e <LL_GPIO_Init+0xac>
  {
    /* skip if bit is not set */
    if ((pinmask & (1U << pinpos)) != 0U)
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	409a      	lsls	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d036      	beq.n	8002178 <LL_GPIO_Init+0xa6>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	2b07      	cmp	r3, #7
 800210e:	d806      	bhi.n	800211e <LL_GPIO_Init+0x4c>
      {
        currentpin = (0x00000101U << pinpos);
 8002110:	f240 1201 	movw	r2, #257	; 0x101
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	e008      	b.n	8002130 <LL_GPIO_Init+0x5e>
      }
      else
      {
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3b08      	subs	r3, #8
 8002122:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800212e:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	461a      	mov	r2, r3
 8002136:	69b9      	ldr	r1, [r7, #24]
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff19 	bl	8001f70 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	461a      	mov	r2, r3
 8002144:	69b9      	ldr	r1, [r7, #24]
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ffa2 	bl	8002090 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d003      	beq.n	800215c <LL_GPIO_Init+0x8a>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b09      	cmp	r3, #9
 800215a:	d10d      	bne.n	8002178 <LL_GPIO_Init+0xa6>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	461a      	mov	r2, r3
 8002162:	69b9      	ldr	r1, [r7, #24]
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff33 	bl	8001fd0 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	461a      	mov	r2, r3
 8002170:	69b9      	ldr	r1, [r7, #24]
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ff5c 	bl	8002030 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	3301      	adds	r3, #1
 800217c:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0U)
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1b8      	bne.n	80020fc <LL_GPIO_Init+0x2a>
  }
  return (SUCCESS);
 800218a:	2301      	movs	r3, #1
}
 800218c:	4618      	mov	r0, r3
 800218e:	3720      	adds	r7, #32
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f043 0201 	orr.w	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	601a      	str	r2, [r3, #0]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 0201 	bic.w	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	431a      	orrs	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	609a      	str	r2, [r3, #8]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
	...

08002200 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8002200:	b490      	push	{r4, r7}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 800220e:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8002210:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	4a3f      	ldr	r2, [pc, #252]	; (8002314 <LL_I2C_ConfigSpeed+0x114>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002224:	ea43 0204 	orr.w	r2, r3, r4
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4938      	ldr	r1, [pc, #224]	; (8002318 <LL_I2C_ConfigSpeed+0x118>)
 8002238:	428b      	cmp	r3, r1
 800223a:	d801      	bhi.n	8002240 <LL_I2C_ConfigSpeed+0x40>
 800223c:	1c63      	adds	r3, r4, #1
 800223e:	e008      	b.n	8002252 <LL_I2C_ConfigSpeed+0x52>
 8002240:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002244:	fb03 f304 	mul.w	r3, r3, r4
 8002248:	4934      	ldr	r1, [pc, #208]	; (800231c <LL_I2C_ConfigSpeed+0x11c>)
 800224a:	fba1 1303 	umull	r1, r3, r1, r3
 800224e:	099b      	lsrs	r3, r3, #6
 8002250:	3301      	adds	r3, #1
 8002252:	431a      	orrs	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a2f      	ldr	r2, [pc, #188]	; (8002318 <LL_I2C_ConfigSpeed+0x118>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d939      	bls.n	80022d4 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d117      	bne.n	8002296 <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4413      	add	r3, r2
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	fbb2 f3f3 	udiv	r3, r2, r3
 8002274:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002278:	2b00      	cmp	r3, #0
 800227a:	d009      	beq.n	8002290 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800228a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800228e:	e01d      	b.n	80022cc <LL_I2C_ConfigSpeed+0xcc>
 8002290:	f248 0301 	movw	r3, #32769	; 0x8001
 8002294:	e01a      	b.n	80022cc <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	009a      	lsls	r2, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00b      	beq.n	80022c8 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	009a      	lsls	r2, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80022c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c6:	e001      	b.n	80022cc <LL_I2C_ConfigSpeed+0xcc>
 80022c8:	f248 0301 	movw	r3, #32769	; 0x8001
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	ea43 0402 	orr.w	r4, r3, r2
 80022d2:	e010      	b.n	80022f6 <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d905      	bls.n	80022f2 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f0:	e000      	b.n	80022f4 <LL_I2C_ConfigSpeed+0xf4>
 80022f2:	2304      	movs	r3, #4
 80022f4:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80022fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002302:	ea43 0204 	orr.w	r2, r3, r4
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	61da      	str	r2, [r3, #28]
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bc90      	pop	{r4, r7}
 8002312:	4770      	bx	lr
 8002314:	431bde83 	.word	0x431bde83
 8002318:	000186a0 	.word	0x000186a0
 800231c:	10624dd3 	.word	0x10624dd3

08002320 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 021a 	bic.w	r2, r3, #26
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	601a      	str	r2, [r3, #0]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	601a      	str	r2, [r3, #0]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ff1d 	bl	80021b2 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f87b 	bl	8002478 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8002382:	6939      	ldr	r1, [r7, #16]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff37 	bl	8002200 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68d9      	ldr	r1, [r3, #12]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	461a      	mov	r2, r3
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ff17 	bl	80021d0 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4619      	mov	r1, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ffb9 	bl	8002320 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fef0 	bl	8002194 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	4619      	mov	r1, r3
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ffc2 	bl	8002344 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80023c0:	2301      	movs	r3, #1
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <LL_RCC_GetSysClkSource+0x14>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 030c 	and.w	r3, r3, #12
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	40021000 	.word	0x40021000

080023e4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <LL_RCC_GetAHBPrescaler+0x14>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	40021000 	.word	0x40021000

080023fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	40021000 	.word	0x40021000

08002414 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <LL_RCC_GetAPB2Prescaler+0x14>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	40021000 	.word	0x40021000

0800242c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <LL_RCC_PLL_GetMainSource+0x14>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	40021000 	.word	0x40021000

08002444 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	40021000 	.word	0x40021000

0800245c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <LL_RCC_PLL_GetPrediv+0x18>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	0c5b      	lsrs	r3, r3, #17
 8002466:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000

08002478 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002480:	f000 f820 	bl	80024c4 <RCC_GetSystemClockFreq>
 8002484:	4602      	mov	r2, r0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f83a 	bl	8002508 <RCC_GetHCLKClockFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f848 	bl	8002534 <RCC_GetPCLK1ClockFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f854 	bl	800255c <RCC_GetPCLK2ClockFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	60da      	str	r2, [r3, #12]
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80024ce:	f7ff ff7d 	bl	80023cc <LL_RCC_GetSysClkSource>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d006      	beq.n	80024e6 <RCC_GetSystemClockFreq+0x22>
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d007      	beq.n	80024ec <RCC_GetSystemClockFreq+0x28>
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d109      	bne.n	80024f4 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <RCC_GetSystemClockFreq+0x40>)
 80024e2:	607b      	str	r3, [r7, #4]
      break;
 80024e4:	e009      	b.n	80024fa <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <RCC_GetSystemClockFreq+0x40>)
 80024e8:	607b      	str	r3, [r7, #4]
      break;
 80024ea:	e006      	b.n	80024fa <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80024ec:	f000 f84a 	bl	8002584 <RCC_PLL_GetFreqDomain_SYS>
 80024f0:	6078      	str	r0, [r7, #4]
      break;
 80024f2:	e002      	b.n	80024fa <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <RCC_GetSystemClockFreq+0x40>)
 80024f6:	607b      	str	r3, [r7, #4]
      break;
 80024f8:	bf00      	nop
  }

  return frequency;
 80024fa:	687b      	ldr	r3, [r7, #4]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	007a1200 	.word	0x007a1200

08002508 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002510:	f7ff ff68 	bl	80023e4 <LL_RCC_GetAHBPrescaler>
 8002514:	4603      	mov	r3, r0
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <RCC_GetHCLKClockFreq+0x28>)
 800251e:	5cd3      	ldrb	r3, [r2, r3]
 8002520:	461a      	mov	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	40d3      	lsrs	r3, r2
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	080085bc 	.word	0x080085bc

08002534 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800253c:	f7ff ff5e 	bl	80023fc <LL_RCC_GetAPB1Prescaler>
 8002540:	4603      	mov	r3, r0
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <RCC_GetPCLK1ClockFreq+0x24>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	461a      	mov	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	40d3      	lsrs	r3, r2
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	080085cc 	.word	0x080085cc

0800255c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002564:	f7ff ff56 	bl	8002414 <LL_RCC_GetAPB2Prescaler>
 8002568:	4603      	mov	r3, r0
 800256a:	0adb      	lsrs	r3, r3, #11
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <RCC_GetPCLK2ClockFreq+0x24>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	461a      	mov	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	40d3      	lsrs	r3, r2
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	080085cc 	.word	0x080085cc

08002584 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	2300      	movs	r3, #0
 8002590:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002592:	f7ff ff4b 	bl	800242c <LL_RCC_PLL_GetMainSource>
 8002596:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800259e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a2:	d003      	beq.n	80025ac <RCC_PLL_GetFreqDomain_SYS+0x28>
 80025a4:	e00b      	b.n	80025be <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80025a8:	607b      	str	r3, [r7, #4]
      break;
 80025aa:	e00b      	b.n	80025c4 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80025ac:	f7ff ff56 	bl	800245c <LL_RCC_PLL_GetPrediv>
 80025b0:	4603      	mov	r3, r0
 80025b2:	3301      	adds	r3, #1
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80025b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ba:	607b      	str	r3, [r7, #4]
      break;
 80025bc:	e002      	b.n	80025c4 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80025c0:	607b      	str	r3, [r7, #4]
      break;
 80025c2:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80025c4:	f7ff ff3e 	bl	8002444 <LL_RCC_PLL_GetMultiplicator>
 80025c8:	4603      	mov	r3, r0
 80025ca:	0c9b      	lsrs	r3, r3, #18
 80025cc:	3302      	adds	r3, #2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	fb02 f303 	mul.w	r3, r2, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	003d0900 	.word	0x003d0900
 80025e0:	007a1200 	.word	0x007a1200

080025e4 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f4:	2b40      	cmp	r3, #64	; 0x40
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	b29b      	uxth	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	611a      	str	r2, [r3, #16]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002630:	2300      	movs	r3, #0
 8002632:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ffd5 	bl	80025e4 <LL_SPI_IsEnabled>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d139      	bne.n	80026b4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002648:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	6811      	ldr	r1, [r2, #0]
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	6852      	ldr	r2, [r2, #4]
 8002654:	4311      	orrs	r1, r2
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	6892      	ldr	r2, [r2, #8]
 800265a:	4311      	orrs	r1, r2
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	68d2      	ldr	r2, [r2, #12]
 8002660:	4311      	orrs	r1, r2
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	6912      	ldr	r2, [r2, #16]
 8002666:	4311      	orrs	r1, r2
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	6952      	ldr	r2, [r2, #20]
 800266c:	4311      	orrs	r1, r2
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	6992      	ldr	r2, [r2, #24]
 8002672:	4311      	orrs	r1, r2
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	69d2      	ldr	r2, [r2, #28]
 8002678:	4311      	orrs	r1, r2
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	6a12      	ldr	r2, [r2, #32]
 800267e:	430a      	orrs	r2, r1
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f023 0204 	bic.w	r2, r3, #4
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	0c1b      	lsrs	r3, r3, #16
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a2:	d105      	bne.n	80026b0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	4619      	mov	r1, r3
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ffac 	bl	8002608 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr

080026f2 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	641a      	str	r2, [r3, #64]	; 0x40
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f043 0201 	orr.w	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	615a      	str	r2, [r3, #20]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
	...

08002794 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a27      	ldr	r2, [pc, #156]	; (8002848 <LL_TIM_Init+0xb4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00b      	beq.n	80027c8 <LL_TIM_Init+0x34>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b6:	d007      	beq.n	80027c8 <LL_TIM_Init+0x34>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a24      	ldr	r2, [pc, #144]	; (800284c <LL_TIM_Init+0xb8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d003      	beq.n	80027c8 <LL_TIM_Init+0x34>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a23      	ldr	r2, [pc, #140]	; (8002850 <LL_TIM_Init+0xbc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d106      	bne.n	80027d6 <LL_TIM_Init+0x42>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1b      	ldr	r2, [pc, #108]	; (8002848 <LL_TIM_Init+0xb4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00b      	beq.n	80027f6 <LL_TIM_Init+0x62>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e4:	d007      	beq.n	80027f6 <LL_TIM_Init+0x62>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a18      	ldr	r2, [pc, #96]	; (800284c <LL_TIM_Init+0xb8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d003      	beq.n	80027f6 <LL_TIM_Init+0x62>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a17      	ldr	r2, [pc, #92]	; (8002850 <LL_TIM_Init+0xbc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d106      	bne.n	8002804 <LL_TIM_Init+0x70>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ff61 	bl	80026d8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ff4e 	bl	80026be <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a08      	ldr	r2, [pc, #32]	; (8002848 <LL_TIM_Init+0xb4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d105      	bne.n	8002836 <LL_TIM_Init+0xa2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	7c1b      	ldrb	r3, [r3, #16]
 800282e:	4619      	mov	r1, r3
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ff5e 	bl	80026f2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff ff9c 	bl	8002774 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800283c:	2301      	movs	r3, #1
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40012c00 	.word	0x40012c00
 800284c:	40000400 	.word	0x40000400
 8002850:	40000800 	.word	0x40000800

08002854 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002860:	2300      	movs	r3, #0
 8002862:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b10      	cmp	r3, #16
 8002868:	d012      	beq.n	8002890 <LL_TIM_OC_Init+0x3c>
 800286a:	2b10      	cmp	r3, #16
 800286c:	d802      	bhi.n	8002874 <LL_TIM_OC_Init+0x20>
 800286e:	2b01      	cmp	r3, #1
 8002870:	d007      	beq.n	8002882 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002872:	e022      	b.n	80028ba <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8002874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002878:	d011      	beq.n	800289e <LL_TIM_OC_Init+0x4a>
 800287a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287e:	d015      	beq.n	80028ac <LL_TIM_OC_Init+0x58>
      break;
 8002880:	e01b      	b.n	80028ba <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f81d 	bl	80028c4 <OC1Config>
 800288a:	4603      	mov	r3, r0
 800288c:	75fb      	strb	r3, [r7, #23]
      break;
 800288e:	e014      	b.n	80028ba <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f882 	bl	800299c <OC2Config>
 8002898:	4603      	mov	r3, r0
 800289a:	75fb      	strb	r3, [r7, #23]
      break;
 800289c:	e00d      	b.n	80028ba <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f8eb 	bl	8002a7c <OC3Config>
 80028a6:	4603      	mov	r3, r0
 80028a8:	75fb      	strb	r3, [r7, #23]
      break;
 80028aa:	e006      	b.n	80028ba <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f954 	bl	8002b5c <OC4Config>
 80028b4:	4603      	mov	r3, r0
 80028b6:	75fb      	strb	r3, [r7, #23]
      break;
 80028b8:	bf00      	nop
  }

  return result;
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	f023 0201 	bic.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0303 	bic.w	r3, r3, #3
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f023 0202 	bic.w	r2, r3, #2
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f023 0201 	bic.w	r2, r3, #1
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1a      	ldr	r2, [pc, #104]	; (8002998 <OC1Config+0xd4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d11e      	bne.n	8002970 <OC1Config+0xac>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f023 0208 	bic.w	r2, r3, #8
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4313      	orrs	r3, r2
 8002940:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f023 0204 	bic.w	r2, r3, #4
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4619      	mov	r1, r3
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff fec2 	bl	800270c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800298e:	2301      	movs	r3, #1
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40012c00 	.word	0x40012c00

0800299c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f023 0210 	bic.w	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f023 0220 	bic.w	r2, r3, #32
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f023 0210 	bic.w	r2, r3, #16
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <OC2Config+0xdc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d11f      	bne.n	8002a50 <OC2Config+0xb4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	019b      	lsls	r3, r3, #6
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	019b      	lsls	r3, r3, #6
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4619      	mov	r1, r3
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fe5f 	bl	8002726 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002a6e:	2301      	movs	r3, #1
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40012c00 	.word	0x40012c00

08002a7c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0303 	bic.w	r3, r3, #3
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a1b      	ldr	r2, [pc, #108]	; (8002b58 <OC3Config+0xdc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d11f      	bne.n	8002b2e <OC3Config+0xb2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	029b      	lsls	r3, r3, #10
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	029b      	lsls	r3, r3, #10
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	015b      	lsls	r3, r3, #5
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff fdfd 	bl	8002740 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b4c:	2301      	movs	r3, #1
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40012c00 	.word	0x40012c00

08002b5c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b96:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	031b      	lsls	r3, r3, #12
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	031b      	lsls	r3, r3, #12
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a0f      	ldr	r2, [pc, #60]	; (8002c08 <OC4Config+0xac>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d107      	bne.n	8002be0 <OC4Config+0x84>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	019b      	lsls	r3, r3, #6
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff fdb1 	bl	800275a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002bfe:	2301      	movs	r3, #1
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40012c00 	.word	0x40012c00

08002c0c <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c20:	bf0c      	ite	eq
 8002c22:	2301      	moveq	r3, #1
 8002c24:	2300      	movne	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	611a      	str	r2, [r3, #16]
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	615a      	str	r2, [r3, #20]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
	...

08002c7c <LL_USART_SetBaudRate>:
  * @param  PeriphClk Peripheral Clock
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	009a      	lsls	r2, r3, #2
 8002c92:	441a      	add	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <LL_USART_SetBaudRate+0xb8>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	b299      	uxth	r1, r3
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009a      	lsls	r2, r3, #2
 8002cb4:	441a      	add	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <LL_USART_SetBaudRate+0xb8>)
 8002cc0:	fba3 0302 	umull	r0, r3, r3, r2
 8002cc4:	095b      	lsrs	r3, r3, #5
 8002cc6:	2064      	movs	r0, #100	; 0x64
 8002cc8:	fb00 f303 	mul.w	r3, r0, r3
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	3332      	adds	r3, #50	; 0x32
 8002cd2:	4a18      	ldr	r2, [pc, #96]	; (8002d34 <LL_USART_SetBaudRate+0xb8>)
 8002cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	b299      	uxth	r1, r3
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	009a      	lsls	r2, r3, #2
 8002cf0:	441a      	add	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <LL_USART_SetBaudRate+0xb8>)
 8002cfc:	fba3 0302 	umull	r0, r3, r3, r2
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	2064      	movs	r0, #100	; 0x64
 8002d04:	fb00 f303 	mul.w	r3, r0, r3
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	3332      	adds	r3, #50	; 0x32
 8002d0e:	4a09      	ldr	r2, [pc, #36]	; (8002d34 <LL_USART_SetBaudRate+0xb8>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	440b      	add	r3, r1
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	609a      	str	r2, [r3, #8]
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	51eb851f 	.word	0x51eb851f

08002d38 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002d42:	2300      	movs	r3, #0
 8002d44:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff ff5e 	bl	8002c0c <LL_USART_IsEnabled>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d145      	bne.n	8002de2 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d5e:	f023 030c 	bic.w	r3, r3, #12
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	6851      	ldr	r1, [r2, #4]
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	68d2      	ldr	r2, [r2, #12]
 8002d6a:	4311      	orrs	r1, r2
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	6912      	ldr	r2, [r2, #16]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff ff57 	bl	8002c32 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff ff63 	bl	8002c56 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002d90:	f107 0308 	add.w	r3, r7, #8
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fb6f 	bl	8002478 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a13      	ldr	r2, [pc, #76]	; (8002dec <LL_USART_Init+0xb4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d102      	bne.n	8002da8 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	e00c      	b.n	8002dc2 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a11      	ldr	r2, [pc, #68]	; (8002df0 <LL_USART_Init+0xb8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d102      	bne.n	8002db6 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	e005      	b.n	8002dc2 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a0e      	ldr	r2, [pc, #56]	; (8002df4 <LL_USART_Init+0xbc>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00c      	beq.n	8002de2 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	69b9      	ldr	r1, [r7, #24]
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff ff4d 	bl	8002c7c <LL_USART_SetBaudRate>
#endif /* USART_OverSampling_Feature */
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002de2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40013800 	.word	0x40013800
 8002df0:	40004400 	.word	0x40004400
 8002df4:	40004800 	.word	0x40004800

08002df8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002e02:	4909      	ldr	r1, [pc, #36]	; (8002e28 <LL_InitTick+0x30>)
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <LL_InitTick+0x30>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e16:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <LL_InitTick+0x30>)
 8002e18:	2205      	movs	r2, #5
 8002e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000e010 	.word	0xe000e010

08002e2c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002e34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ffdd 	bl	8002df8 <LL_InitTick>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002e50:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <LL_mDelay+0x44>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002e56:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5e:	d00c      	beq.n	8002e7a <LL_mDelay+0x32>
  {
    Delay++;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3301      	adds	r3, #1
 8002e64:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002e66:	e008      	b.n	8002e7a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002e68:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <LL_mDelay+0x44>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <LL_mDelay+0x32>
    {
      Delay--;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f3      	bne.n	8002e68 <LL_mDelay+0x20>
    }
  }
}
 8002e80:	bf00      	nop
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000e010 	.word	0xe000e010

08002e90 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002e98:	4a03      	ldr	r2, [pc, #12]	; (8002ea8 <LL_SetSystemCoreClock+0x18>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6013      	str	r3, [r2, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	20000094 	.word	0x20000094

08002eac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ebe:	2b84      	cmp	r3, #132	; 0x84
 8002ec0:	d005      	beq.n	8002ece <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002ec2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4413      	add	r3, r2
 8002eca:	3303      	adds	r3, #3
 8002ecc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002ece:	68fb      	ldr	r3, [r7, #12]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002ede:	f001 f9c5 	bl	800426c <vTaskStartScheduler>
  
  return osOK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685c      	ldr	r4, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002efe:	b29e      	uxth	r6, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ffd0 	bl	8002eac <makeFreeRtosPriority>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	f107 030c 	add.w	r3, r7, #12
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	9200      	str	r2, [sp, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	4632      	mov	r2, r6
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f001 f83f 	bl	8003fa0 <xTaskCreate>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d001      	beq.n	8002f2c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e000      	b.n	8002f2e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f36 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <osDelay+0x16>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	e000      	b.n	8002f4e <osDelay+0x18>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f001 f958 	bl	8004204 <vTaskDelay>
  
  return osOK;
 8002f54:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f103 0208 	add.w	r2, r3, #8
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f04f 32ff 	mov.w	r2, #4294967295
 8002f76:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f103 0208 	add.w	r2, r3, #8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f103 0208 	add.w	r2, r3, #8
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	601a      	str	r2, [r3, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr

08002ffa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b085      	sub	sp, #20
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d103      	bne.n	800301a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	e00c      	b.n	8003034 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3308      	adds	r3, #8
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	e002      	b.n	8003028 <vListInsert+0x2e>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	429a      	cmp	r2, r3
 8003032:	d9f6      	bls.n	8003022 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	601a      	str	r2, [r3, #0]
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6892      	ldr	r2, [r2, #8]
 8003080:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6852      	ldr	r2, [r2, #4]
 800308a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	429a      	cmp	r2, r3
 8003094:	d103      	bne.n	800309e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	1e5a      	subs	r2, r3, #1
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3b04      	subs	r3, #4
 80030cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3b04      	subs	r3, #4
 80030da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f023 0201 	bic.w	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	3b04      	subs	r3, #4
 80030ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80030ec:	4a08      	ldr	r2, [pc, #32]	; (8003110 <pxPortInitialiseStack+0x54>)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	3b14      	subs	r3, #20
 80030f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3b20      	subs	r3, #32
 8003102:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003104:	68fb      	ldr	r3, [r7, #12]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	08003115 	.word	0x08003115

08003114 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800311a:	4b0c      	ldr	r3, [pc, #48]	; (800314c <prvTaskExitError+0x38>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d009      	beq.n	8003138 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	e7fe      	b.n	8003136 <prvTaskExitError+0x22>
 8003138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 800314a:	e7fe      	b.n	800314a <prvTaskExitError+0x36>
 800314c:	2000008c 	.word	0x2000008c

08003150 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <pxCurrentTCBConst2>)
 8003152:	6819      	ldr	r1, [r3, #0]
 8003154:	6808      	ldr	r0, [r1, #0]
 8003156:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800315a:	f380 8809 	msr	PSP, r0
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f04f 0000 	mov.w	r0, #0
 8003166:	f380 8811 	msr	BASEPRI, r0
 800316a:	f04e 0e0d 	orr.w	lr, lr, #13
 800316e:	4770      	bx	lr

08003170 <pxCurrentTCBConst2>:
 8003170:	200022ac 	.word	0x200022ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop

08003178 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003178:	4806      	ldr	r0, [pc, #24]	; (8003194 <prvPortStartFirstTask+0x1c>)
 800317a:	6800      	ldr	r0, [r0, #0]
 800317c:	6800      	ldr	r0, [r0, #0]
 800317e:	f380 8808 	msr	MSP, r0
 8003182:	b662      	cpsie	i
 8003184:	b661      	cpsie	f
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	df00      	svc	0
 8003190:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003192:	bf00      	nop
 8003194:	e000ed08 	.word	0xe000ed08

08003198 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800319e:	4b28      	ldr	r3, [pc, #160]	; (8003240 <xPortStartScheduler+0xa8>)
 80031a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	22ff      	movs	r2, #255	; 0xff
 80031ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <xPortStartScheduler+0xac>)
 80031c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <xPortStartScheduler+0xb0>)
 80031c8:	2207      	movs	r2, #7
 80031ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031cc:	e009      	b.n	80031e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80031ce:	4b1e      	ldr	r3, [pc, #120]	; (8003248 <xPortStartScheduler+0xb0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <xPortStartScheduler+0xb0>)
 80031d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ea:	2b80      	cmp	r3, #128	; 0x80
 80031ec:	d0ef      	beq.n	80031ce <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <xPortStartScheduler+0xb0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	4a14      	ldr	r2, [pc, #80]	; (8003248 <xPortStartScheduler+0xb0>)
 80031f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031f8:	4b13      	ldr	r3, [pc, #76]	; (8003248 <xPortStartScheduler+0xb0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003200:	4a11      	ldr	r2, [pc, #68]	; (8003248 <xPortStartScheduler+0xb0>)
 8003202:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	b2da      	uxtb	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800320c:	4a0f      	ldr	r2, [pc, #60]	; (800324c <xPortStartScheduler+0xb4>)
 800320e:	4b0f      	ldr	r3, [pc, #60]	; (800324c <xPortStartScheduler+0xb4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003216:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003218:	4a0c      	ldr	r2, [pc, #48]	; (800324c <xPortStartScheduler+0xb4>)
 800321a:	4b0c      	ldr	r3, [pc, #48]	; (800324c <xPortStartScheduler+0xb4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003222:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003224:	f000 f8b0 	bl	8003388 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <xPortStartScheduler+0xb8>)
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800322e:	f7ff ffa3 	bl	8003178 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8003232:	f7ff ff6f 	bl	8003114 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	e000e400 	.word	0xe000e400
 8003244:	2000028e 	.word	0x2000028e
 8003248:	20000290 	.word	0x20000290
 800324c:	e000ed20 	.word	0xe000ed20
 8003250:	2000008c 	.word	0x2000008c

08003254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <vPortEnterCritical+0x54>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3301      	adds	r3, #1
 8003272:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <vPortEnterCritical+0x54>)
 8003274:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <vPortEnterCritical+0x54>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d10e      	bne.n	800329c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <vPortEnterCritical+0x58>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <vPortEnterCritical+0x48>
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	603b      	str	r3, [r7, #0]
 800329a:	e7fe      	b.n	800329a <vPortEnterCritical+0x46>
	}
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	2000008c 	.word	0x2000008c
 80032ac:	e000ed04 	.word	0xe000ed04

080032b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <vPortExitCritical+0x48>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <vPortExitCritical+0x22>
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	e7fe      	b.n	80032d0 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <vPortExitCritical+0x48>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	4a07      	ldr	r2, [pc, #28]	; (80032f8 <vPortExitCritical+0x48>)
 80032da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <vPortExitCritical+0x48>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <vPortExitCritical+0x3e>
 80032e4:	2300      	movs	r3, #0
 80032e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	2000008c 	.word	0x2000008c
 80032fc:	00000000 	.word	0x00000000

08003300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003300:	f3ef 8009 	mrs	r0, PSP
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <pxCurrentTCBConst>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003310:	6010      	str	r0, [r2, #0]
 8003312:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003316:	f04f 0050 	mov.w	r0, #80	; 0x50
 800331a:	f380 8811 	msr	BASEPRI, r0
 800331e:	f001 f951 	bl	80045c4 <vTaskSwitchContext>
 8003322:	f04f 0000 	mov.w	r0, #0
 8003326:	f380 8811 	msr	BASEPRI, r0
 800332a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	6808      	ldr	r0, [r1, #0]
 8003332:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003336:	f380 8809 	msr	PSP, r0
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	4770      	bx	lr

08003340 <pxCurrentTCBConst>:
 8003340:	200022ac 	.word	0x200022ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop

08003348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
	__asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003360:	f001 f874 	bl	800444c <xTaskIncrementTick>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <SysTick_Handler+0x3c>)
 800336c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	2300      	movs	r3, #0
 8003374:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	e000ed04 	.word	0xe000ed04

08003388 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800338c:	4a07      	ldr	r2, [pc, #28]	; (80033ac <vPortSetupTimerInterrupt+0x24>)
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <vPortSetupTimerInterrupt+0x28>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4908      	ldr	r1, [pc, #32]	; (80033b4 <vPortSetupTimerInterrupt+0x2c>)
 8003394:	fba1 1303 	umull	r1, r3, r1, r3
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	3b01      	subs	r3, #1
 800339c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <vPortSetupTimerInterrupt+0x30>)
 80033a0:	2207      	movs	r2, #7
 80033a2:	601a      	str	r2, [r3, #0]
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	e000e014 	.word	0xe000e014
 80033b0:	20000094 	.word	0x20000094
 80033b4:	10624dd3 	.word	0x10624dd3
 80033b8:	e000e010 	.word	0xe000e010

080033bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	; 0x28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80033c8:	f000 ff96 	bl	80042f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80033cc:	4b57      	ldr	r3, [pc, #348]	; (800352c <pvPortMalloc+0x170>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80033d4:	f000 f90c 	bl	80035f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80033d8:	4b55      	ldr	r3, [pc, #340]	; (8003530 <pvPortMalloc+0x174>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 808c 	bne.w	80034fe <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01c      	beq.n	8003426 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80033ec:	2208      	movs	r2, #8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d013      	beq.n	8003426 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f023 0307 	bic.w	r3, r3, #7
 8003404:	3308      	adds	r3, #8
 8003406:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <pvPortMalloc+0x6a>
	__asm volatile
 8003412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	e7fe      	b.n	8003424 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d068      	beq.n	80034fe <pvPortMalloc+0x142>
 800342c:	4b41      	ldr	r3, [pc, #260]	; (8003534 <pvPortMalloc+0x178>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	429a      	cmp	r2, r3
 8003434:	d863      	bhi.n	80034fe <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003436:	4b40      	ldr	r3, [pc, #256]	; (8003538 <pvPortMalloc+0x17c>)
 8003438:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800343a:	4b3f      	ldr	r3, [pc, #252]	; (8003538 <pvPortMalloc+0x17c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003440:	e004      	b.n	800344c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	429a      	cmp	r2, r3
 8003454:	d203      	bcs.n	800345e <pvPortMalloc+0xa2>
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f1      	bne.n	8003442 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800345e:	4b33      	ldr	r3, [pc, #204]	; (800352c <pvPortMalloc+0x170>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003464:	429a      	cmp	r2, r3
 8003466:	d04a      	beq.n	80034fe <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2208      	movs	r2, #8
 800346e:	4413      	add	r3, r2
 8003470:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	1ad2      	subs	r2, r2, r3
 8003482:	2308      	movs	r3, #8
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	429a      	cmp	r2, r3
 8003488:	d91e      	bls.n	80034c8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800348a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4413      	add	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	2b00      	cmp	r3, #0
 800349a:	d009      	beq.n	80034b0 <pvPortMalloc+0xf4>
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	e7fe      	b.n	80034ae <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	1ad2      	subs	r2, r2, r3
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80034c2:	69b8      	ldr	r0, [r7, #24]
 80034c4:	f000 f8f6 	bl	80036b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <pvPortMalloc+0x178>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	4a18      	ldr	r2, [pc, #96]	; (8003534 <pvPortMalloc+0x178>)
 80034d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80034d6:	4b17      	ldr	r3, [pc, #92]	; (8003534 <pvPortMalloc+0x178>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4b18      	ldr	r3, [pc, #96]	; (800353c <pvPortMalloc+0x180>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d203      	bcs.n	80034ea <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80034e2:	4b14      	ldr	r3, [pc, #80]	; (8003534 <pvPortMalloc+0x178>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a15      	ldr	r2, [pc, #84]	; (800353c <pvPortMalloc+0x180>)
 80034e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	4b10      	ldr	r3, [pc, #64]	; (8003530 <pvPortMalloc+0x174>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80034fe:	f000 ff09 	bl	8004314 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	2b00      	cmp	r3, #0
 800350a:	d009      	beq.n	8003520 <pvPortMalloc+0x164>
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	e7fe      	b.n	800351e <pvPortMalloc+0x162>
	return pvReturn;
 8003520:	69fb      	ldr	r3, [r7, #28]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3728      	adds	r7, #40	; 0x28
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	2000229c 	.word	0x2000229c
 8003530:	200022a8 	.word	0x200022a8
 8003534:	200022a0 	.word	0x200022a0
 8003538:	20002294 	.word	0x20002294
 800353c:	200022a4 	.word	0x200022a4

08003540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d046      	beq.n	80035e0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003552:	2308      	movs	r3, #8
 8003554:	425b      	negs	r3, r3
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4413      	add	r3, r2
 800355a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <vPortFree+0xa8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <vPortFree+0x42>
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e7fe      	b.n	8003580 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d009      	beq.n	800359e <vPortFree+0x5e>
 800358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	e7fe      	b.n	800359c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <vPortFree+0xa8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d019      	beq.n	80035e0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d115      	bne.n	80035e0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <vPortFree+0xa8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	43db      	mvns	r3, r3
 80035be:	401a      	ands	r2, r3
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80035c4:	f000 fe98 	bl	80042f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	4b07      	ldr	r3, [pc, #28]	; (80035ec <vPortFree+0xac>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4413      	add	r3, r2
 80035d2:	4a06      	ldr	r2, [pc, #24]	; (80035ec <vPortFree+0xac>)
 80035d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80035d6:	6938      	ldr	r0, [r7, #16]
 80035d8:	f000 f86c 	bl	80036b4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80035dc:	f000 fe9a 	bl	8004314 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80035e0:	bf00      	nop
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200022a8 	.word	0x200022a8
 80035ec:	200022a0 	.word	0x200022a0

080035f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80035f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80035fc:	4b27      	ldr	r3, [pc, #156]	; (800369c <prvHeapInit+0xac>)
 80035fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00c      	beq.n	8003624 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3307      	adds	r3, #7
 800360e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0307 	bic.w	r3, r3, #7
 8003616:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	4a1f      	ldr	r2, [pc, #124]	; (800369c <prvHeapInit+0xac>)
 8003620:	4413      	add	r3, r2
 8003622:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003628:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <prvHeapInit+0xb0>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800362e:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <prvHeapInit+0xb0>)
 8003630:	2200      	movs	r2, #0
 8003632:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4413      	add	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800363c:	2208      	movs	r2, #8
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0307 	bic.w	r3, r3, #7
 800364a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4a15      	ldr	r2, [pc, #84]	; (80036a4 <prvHeapInit+0xb4>)
 8003650:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003652:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <prvHeapInit+0xb4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2200      	movs	r2, #0
 8003658:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800365a:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <prvHeapInit+0xb4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	1ad2      	subs	r2, r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <prvHeapInit+0xb4>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <prvHeapInit+0xb8>)
 800367e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4a09      	ldr	r2, [pc, #36]	; (80036ac <prvHeapInit+0xbc>)
 8003686:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <prvHeapInit+0xc0>)
 800368a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800368e:	601a      	str	r2, [r3, #0]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000294 	.word	0x20000294
 80036a0:	20002294 	.word	0x20002294
 80036a4:	2000229c 	.word	0x2000229c
 80036a8:	200022a4 	.word	0x200022a4
 80036ac:	200022a0 	.word	0x200022a0
 80036b0:	200022a8 	.word	0x200022a8

080036b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80036bc:	4b27      	ldr	r3, [pc, #156]	; (800375c <prvInsertBlockIntoFreeList+0xa8>)
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e002      	b.n	80036c8 <prvInsertBlockIntoFreeList+0x14>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d3f7      	bcc.n	80036c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	441a      	add	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d108      	bne.n	80036f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	441a      	add	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	441a      	add	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d118      	bne.n	800373c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4b14      	ldr	r3, [pc, #80]	; (8003760 <prvInsertBlockIntoFreeList+0xac>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d00d      	beq.n	8003732 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	441a      	add	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e008      	b.n	8003744 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <prvInsertBlockIntoFreeList+0xac>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e003      	b.n	8003744 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	429a      	cmp	r2, r3
 800374a:	d002      	beq.n	8003752 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003752:	bf00      	nop
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	20002294 	.word	0x20002294
 8003760:	2000229c 	.word	0x2000229c

08003764 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d109      	bne.n	800378c <xQueueGenericReset+0x28>
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	e7fe      	b.n	800378a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800378c:	f7ff fd62 	bl	8003254 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003798:	68f9      	ldr	r1, [r7, #12]
 800379a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	441a      	add	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	3b01      	subs	r3, #1
 80037be:	68f9      	ldr	r1, [r7, #12]
 80037c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	441a      	add	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	22ff      	movs	r2, #255	; 0xff
 80037d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	22ff      	movs	r2, #255	; 0xff
 80037d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d114      	bne.n	800380c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01a      	beq.n	8003820 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3310      	adds	r3, #16
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 ff76 	bl	80046e0 <xTaskRemoveFromEventList>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d012      	beq.n	8003820 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80037fa:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <xQueueGenericReset+0xcc>)
 80037fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	e009      	b.n	8003820 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	3310      	adds	r3, #16
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fba4 	bl	8002f5e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	3324      	adds	r3, #36	; 0x24
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fb9f 	bl	8002f5e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003820:	f7ff fd46 	bl	80032b0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003824:	2301      	movs	r3, #1
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	e000ed04 	.word	0xe000ed04

08003834 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	; 0x28
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	4613      	mov	r3, r2
 8003840:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d109      	bne.n	800385c <xQueueGenericCreate+0x28>
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	e7fe      	b.n	800385a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d102      	bne.n	8003868 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	e004      	b.n	8003872 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	fb02 f303 	mul.w	r3, r2, r3
 8003870:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3348      	adds	r3, #72	; 0x48
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fda0 	bl	80033bc <pvPortMalloc>
 800387c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00b      	beq.n	800389c <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	3348      	adds	r3, #72	; 0x48
 8003888:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800388a:	79fa      	ldrb	r2, [r7, #7]
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f805 	bl	80038a6 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800389c:	69bb      	ldr	r3, [r7, #24]
	}
 800389e:	4618      	mov	r0, r3
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d103      	bne.n	80038c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	e002      	b.n	80038c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038d4:	2101      	movs	r1, #1
 80038d6:	69b8      	ldr	r0, [r7, #24]
 80038d8:	f7ff ff44 	bl	8003764 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08e      	sub	sp, #56	; 0x38
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038f2:	2300      	movs	r3, #0
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d109      	bne.n	8003914 <xQueueGenericSend+0x30>
 8003900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
 8003912:	e7fe      	b.n	8003912 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d103      	bne.n	8003922 <xQueueGenericSend+0x3e>
 800391a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <xQueueGenericSend+0x42>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <xQueueGenericSend+0x44>
 8003926:	2300      	movs	r3, #0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <xQueueGenericSend+0x5c>
 800392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
 800393e:	e7fe      	b.n	800393e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d103      	bne.n	800394e <xQueueGenericSend+0x6a>
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <xQueueGenericSend+0x6e>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <xQueueGenericSend+0x70>
 8003952:	2300      	movs	r3, #0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d109      	bne.n	800396c <xQueueGenericSend+0x88>
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	623b      	str	r3, [r7, #32]
 800396a:	e7fe      	b.n	800396a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800396c:	f001 f86e 	bl	8004a4c <xTaskGetSchedulerState>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d102      	bne.n	800397c <xQueueGenericSend+0x98>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <xQueueGenericSend+0x9c>
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <xQueueGenericSend+0x9e>
 8003980:	2300      	movs	r3, #0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <xQueueGenericSend+0xb6>
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	61fb      	str	r3, [r7, #28]
 8003998:	e7fe      	b.n	8003998 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800399a:	f7ff fc5b 	bl	8003254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d302      	bcc.n	80039b0 <xQueueGenericSend+0xcc>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d129      	bne.n	8003a04 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039b6:	f000 f9be 	bl	8003d36 <prvCopyDataToQueue>
 80039ba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d010      	beq.n	80039e6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	3324      	adds	r3, #36	; 0x24
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fe89 	bl	80046e0 <xTaskRemoveFromEventList>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d013      	beq.n	80039fc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039d4:	4b3f      	ldr	r3, [pc, #252]	; (8003ad4 <xQueueGenericSend+0x1f0>)
 80039d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	e00a      	b.n	80039fc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d007      	beq.n	80039fc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039ec:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <xQueueGenericSend+0x1f0>)
 80039ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039fc:	f7ff fc58 	bl	80032b0 <vPortExitCritical>
				return pdPASS;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e063      	b.n	8003acc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d103      	bne.n	8003a12 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a0a:	f7ff fc51 	bl	80032b0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e05c      	b.n	8003acc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fec1 	bl	80047a4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a22:	2301      	movs	r3, #1
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a26:	f7ff fc43 	bl	80032b0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a2a:	f000 fc65 	bl	80042f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a2e:	f7ff fc11 	bl	8003254 <vPortEnterCritical>
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a38:	b25b      	sxtb	r3, r3
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3e:	d103      	bne.n	8003a48 <xQueueGenericSend+0x164>
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a4e:	b25b      	sxtb	r3, r3
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d103      	bne.n	8003a5e <xQueueGenericSend+0x17a>
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a5e:	f7ff fc27 	bl	80032b0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a62:	1d3a      	adds	r2, r7, #4
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	4611      	mov	r1, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 febc 	bl	80047e8 <xTaskCheckForTimeOut>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d124      	bne.n	8003ac0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a78:	f000 fa55 	bl	8003f26 <prvIsQueueFull>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d018      	beq.n	8003ab4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	3310      	adds	r3, #16
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4611      	mov	r1, r2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fe04 	bl	8004698 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a92:	f000 f9e0 	bl	8003e56 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a96:	f000 fc3d 	bl	8004314 <xTaskResumeAll>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f47f af7c 	bne.w	800399a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003aa2:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <xQueueGenericSend+0x1f0>)
 8003aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	e772      	b.n	800399a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ab6:	f000 f9ce 	bl	8003e56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003aba:	f000 fc2b 	bl	8004314 <xTaskResumeAll>
 8003abe:	e76c      	b.n	800399a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ac2:	f000 f9c8 	bl	8003e56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ac6:	f000 fc25 	bl	8004314 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003aca:	2300      	movs	r3, #0
		}
	}
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3738      	adds	r7, #56	; 0x38
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	e000ed04 	.word	0xe000ed04

08003ad8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08e      	sub	sp, #56	; 0x38
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <xQueueGenericReceive+0x30>
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
 8003b06:	e7fe      	b.n	8003b06 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <xQueueGenericReceive+0x3e>
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <xQueueGenericReceive+0x42>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <xQueueGenericReceive+0x44>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d109      	bne.n	8003b34 <xQueueGenericReceive+0x5c>
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	623b      	str	r3, [r7, #32]
 8003b32:	e7fe      	b.n	8003b32 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b34:	f000 ff8a 	bl	8004a4c <xTaskGetSchedulerState>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <xQueueGenericReceive+0x6c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <xQueueGenericReceive+0x70>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <xQueueGenericReceive+0x72>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d109      	bne.n	8003b62 <xQueueGenericReceive+0x8a>
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	e7fe      	b.n	8003b60 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b62:	f7ff fb77 	bl	8003254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d046      	beq.n	8003c00 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b7c:	f000 f945 	bl	8003e0a <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d121      	bne.n	8003bca <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	1e5a      	subs	r2, r3, #1
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d104      	bne.n	8003ba0 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003b96:	f001 f871 	bl	8004c7c <pvTaskIncrementMutexHeldCount>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d027      	beq.n	8003bf8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	3310      	adds	r3, #16
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fd97 	bl	80046e0 <xTaskRemoveFromEventList>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d01f      	beq.n	8003bf8 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8003bb8:	4b4f      	ldr	r3, [pc, #316]	; (8003cf8 <xQueueGenericReceive+0x220>)
 8003bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	e016      	b.n	8003bf8 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bce:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00f      	beq.n	8003bf8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	3324      	adds	r3, #36	; 0x24
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fd7f 	bl	80046e0 <xTaskRemoveFromEventList>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8003be8:	4b43      	ldr	r3, [pc, #268]	; (8003cf8 <xQueueGenericReceive+0x220>)
 8003bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8003bf8:	f7ff fb5a 	bl	80032b0 <vPortExitCritical>
				return pdPASS;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e077      	b.n	8003cf0 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d103      	bne.n	8003c0e <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c06:	f7ff fb53 	bl	80032b0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e070      	b.n	8003cf0 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003c14:	f107 0314 	add.w	r3, r7, #20
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fdc3 	bl	80047a4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c22:	f7ff fb45 	bl	80032b0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c26:	f000 fb67 	bl	80042f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c2a:	f7ff fb13 	bl	8003254 <vPortEnterCritical>
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c34:	b25b      	sxtb	r3, r3
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3a:	d103      	bne.n	8003c44 <xQueueGenericReceive+0x16c>
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c4a:	b25b      	sxtb	r3, r3
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d103      	bne.n	8003c5a <xQueueGenericReceive+0x182>
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c5a:	f7ff fb29 	bl	80032b0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c5e:	1d3a      	adds	r2, r7, #4
 8003c60:	f107 0314 	add.w	r3, r7, #20
 8003c64:	4611      	mov	r1, r2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fdbe 	bl	80047e8 <xTaskCheckForTimeOut>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d131      	bne.n	8003cd6 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c74:	f000 f941 	bl	8003efa <prvIsQueueEmpty>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d025      	beq.n	8003cca <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d108      	bne.n	8003c98 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8003c86:	f7ff fae5 	bl	8003254 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fefa 	bl	8004a88 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8003c94:	f7ff fb0c 	bl	80032b0 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	3324      	adds	r3, #36	; 0x24
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fcf9 	bl	8004698 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ca8:	f000 f8d5 	bl	8003e56 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cac:	f000 fb32 	bl	8004314 <xTaskResumeAll>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f47f af55 	bne.w	8003b62 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <xQueueGenericReceive+0x220>)
 8003cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	e74b      	b.n	8003b62 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ccc:	f000 f8c3 	bl	8003e56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cd0:	f000 fb20 	bl	8004314 <xTaskResumeAll>
 8003cd4:	e745      	b.n	8003b62 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8003cd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cd8:	f000 f8bd 	bl	8003e56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cdc:	f000 fb1a 	bl	8004314 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ce2:	f000 f90a 	bl	8003efa <prvIsQueueEmpty>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f43f af3a 	beq.w	8003b62 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003cee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3738      	adds	r7, #56	; 0x38
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	e000ed04 	.word	0xe000ed04

08003cfc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <uxQueueMessagesWaiting+0x22>
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	e7fe      	b.n	8003d1c <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8003d1e:	f7ff fa99 	bl	8003254 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003d28:	f7ff fac2 	bl	80032b0 <vPortExitCritical>

	return uxReturn;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b086      	sub	sp, #24
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10d      	bne.n	8003d70 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d14d      	bne.n	8003df8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 ff07 	bl	8004b74 <xTaskPriorityDisinherit>
 8003d66:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	e043      	b.n	8003df8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d119      	bne.n	8003daa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6898      	ldr	r0, [r3, #8]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	f003 fb75 	bl	8007470 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	441a      	add	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d32b      	bcc.n	8003df8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	e026      	b.n	8003df8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	68d8      	ldr	r0, [r3, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	461a      	mov	r2, r3
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	f003 fb5b 	bl	8007470 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	425b      	negs	r3, r3
 8003dc4:	441a      	add	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d207      	bcs.n	8003de6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	425b      	negs	r3, r3
 8003de0:	441a      	add	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d105      	bne.n	8003df8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e00:	697b      	ldr	r3, [r7, #20]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d018      	beq.n	8003e4e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	441a      	add	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d303      	bcc.n	8003e3e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68d9      	ldr	r1, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	461a      	mov	r2, r3
 8003e48:	6838      	ldr	r0, [r7, #0]
 8003e4a:	f003 fb11 	bl	8007470 <memcpy>
	}
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e5e:	f7ff f9f9 	bl	8003254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e68:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e6a:	e011      	b.n	8003e90 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d012      	beq.n	8003e9a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3324      	adds	r3, #36	; 0x24
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fc31 	bl	80046e0 <xTaskRemoveFromEventList>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e84:	f000 fd0e 	bl	80048a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	dce9      	bgt.n	8003e6c <prvUnlockQueue+0x16>
 8003e98:	e000      	b.n	8003e9c <prvUnlockQueue+0x46>
					break;
 8003e9a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	22ff      	movs	r2, #255	; 0xff
 8003ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ea4:	f7ff fa04 	bl	80032b0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ea8:	f7ff f9d4 	bl	8003254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eb2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eb4:	e011      	b.n	8003eda <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d012      	beq.n	8003ee4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3310      	adds	r3, #16
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fc0c 	bl	80046e0 <xTaskRemoveFromEventList>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ece:	f000 fce9 	bl	80048a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ed2:	7bbb      	ldrb	r3, [r7, #14]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	dce9      	bgt.n	8003eb6 <prvUnlockQueue+0x60>
 8003ee2:	e000      	b.n	8003ee6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ee4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	22ff      	movs	r2, #255	; 0xff
 8003eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003eee:	f7ff f9df 	bl	80032b0 <vPortExitCritical>
}
 8003ef2:	bf00      	nop
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f02:	f7ff f9a7 	bl	8003254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	e001      	b.n	8003f18 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f18:	f7ff f9ca 	bl	80032b0 <vPortExitCritical>

	return xReturn;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b084      	sub	sp, #16
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f2e:	f7ff f991 	bl	8003254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d102      	bne.n	8003f44 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	e001      	b.n	8003f48 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f48:	f7ff f9b2 	bl	80032b0 <vPortExitCritical>

	return xReturn;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	405a      	eors	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	60da      	str	r2, [r3, #12]
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
	...

08003f7c <vApplicationStackOverflowHook>:

#pragma GCC push_options
#pragma GCC optimize ("O0") //__attribute__((optimize("O0")))

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
//
//	int free_heap = xPortGetFreeHeapSize();

	while(1)
	{
		LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_13);
 8003f86:	4904      	ldr	r1, [pc, #16]	; (8003f98 <vApplicationStackOverflowHook+0x1c>)
 8003f88:	4804      	ldr	r0, [pc, #16]	; (8003f9c <vApplicationStackOverflowHook+0x20>)
 8003f8a:	f7ff ffe4 	bl	8003f56 <LL_GPIO_TogglePin>
		delay(200);
 8003f8e:	20c8      	movs	r0, #200	; 0xc8
 8003f90:	f000 ff5e 	bl	8004e50 <delay>
		LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_13);
 8003f94:	e7f7      	b.n	8003f86 <vApplicationStackOverflowHook+0xa>
 8003f96:	bf00      	nop
 8003f98:	04200020 	.word	0x04200020
 8003f9c:	40010c00 	.word	0x40010c00

08003fa0 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08c      	sub	sp, #48	; 0x30
 8003fa4:	af04      	add	r7, sp, #16
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	4613      	mov	r3, r2
 8003fae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fa01 	bl	80033bc <pvPortMalloc>
 8003fba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00e      	beq.n	8003fe0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003fc2:	2054      	movs	r0, #84	; 0x54
 8003fc4:	f7ff f9fa 	bl	80033bc <pvPortMalloc>
 8003fc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8003fd6:	e005      	b.n	8003fe4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fd8:	6978      	ldr	r0, [r7, #20]
 8003fda:	f7ff fab1 	bl	8003540 <vPortFree>
 8003fde:	e001      	b.n	8003fe4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d013      	beq.n	8004012 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	2300      	movs	r3, #0
 8003fee:	9303      	str	r3, [sp, #12]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	9302      	str	r3, [sp, #8]
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f80e 	bl	8004022 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004006:	69f8      	ldr	r0, [r7, #28]
 8004008:	f000 f892 	bl	8004130 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800400c:	2301      	movs	r3, #1
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	e002      	b.n	8004018 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004012:	f04f 33ff 	mov.w	r3, #4294967295
 8004016:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004018:	69bb      	ldr	r3, [r7, #24]
	}
 800401a:	4618      	mov	r0, r3
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b088      	sub	sp, #32
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	607a      	str	r2, [r7, #4]
 800402e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	461a      	mov	r2, r3
 800403a:	21a5      	movs	r1, #165	; 0xa5
 800403c:	f003 fa23 	bl	8007486 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800404a:	3b01      	subs	r3, #1
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	f023 0307 	bic.w	r3, r3, #7
 8004058:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	2b00      	cmp	r3, #0
 8004062:	d009      	beq.n	8004078 <prvInitialiseNewTask+0x56>
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e7fe      	b.n	8004076 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	e012      	b.n	80040a4 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	4413      	add	r3, r2
 8004084:	7819      	ldrb	r1, [r3, #0]
 8004086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	4413      	add	r3, r2
 800408c:	3334      	adds	r3, #52	; 0x34
 800408e:	460a      	mov	r2, r1
 8004090:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d006      	beq.n	80040ac <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	3301      	adds	r3, #1
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	2b0f      	cmp	r3, #15
 80040a8:	d9e9      	bls.n	800407e <prvInitialiseNewTask+0x5c>
 80040aa:	e000      	b.n	80040ae <prvInitialiseNewTask+0x8c>
		{
			break;
 80040ac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b8:	2b06      	cmp	r3, #6
 80040ba:	d901      	bls.n	80040c0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040bc:	2306      	movs	r3, #6
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	2200      	movs	r2, #0
 80040d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	3304      	adds	r3, #4
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe ff60 	bl	8002f9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	3318      	adds	r3, #24
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fe ff5b 	bl	8002f9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ee:	f1c3 0207 	rsb	r2, r3, #7
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	2200      	movs	r2, #0
 8004100:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	68f9      	ldr	r1, [r7, #12]
 800410e:	69b8      	ldr	r0, [r7, #24]
 8004110:	f7fe ffd4 	bl	80030bc <pxPortInitialiseStack>
 8004114:	4602      	mov	r2, r0
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004126:	bf00      	nop
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004138:	f7ff f88c 	bl	8003254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800413c:	4b2a      	ldr	r3, [pc, #168]	; (80041e8 <prvAddNewTaskToReadyList+0xb8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3301      	adds	r3, #1
 8004142:	4a29      	ldr	r2, [pc, #164]	; (80041e8 <prvAddNewTaskToReadyList+0xb8>)
 8004144:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004146:	4b29      	ldr	r3, [pc, #164]	; (80041ec <prvAddNewTaskToReadyList+0xbc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800414e:	4a27      	ldr	r2, [pc, #156]	; (80041ec <prvAddNewTaskToReadyList+0xbc>)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004154:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <prvAddNewTaskToReadyList+0xb8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d110      	bne.n	800417e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800415c:	f000 fbc6 	bl	80048ec <prvInitialiseTaskLists>
 8004160:	e00d      	b.n	800417e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004162:	4b23      	ldr	r3, [pc, #140]	; (80041f0 <prvAddNewTaskToReadyList+0xc0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800416a:	4b20      	ldr	r3, [pc, #128]	; (80041ec <prvAddNewTaskToReadyList+0xbc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	429a      	cmp	r2, r3
 8004176:	d802      	bhi.n	800417e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004178:	4a1c      	ldr	r2, [pc, #112]	; (80041ec <prvAddNewTaskToReadyList+0xbc>)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800417e:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <prvAddNewTaskToReadyList+0xc4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3301      	adds	r3, #1
 8004184:	4a1b      	ldr	r2, [pc, #108]	; (80041f4 <prvAddNewTaskToReadyList+0xc4>)
 8004186:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	2201      	movs	r2, #1
 800418e:	409a      	lsls	r2, r3
 8004190:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <prvAddNewTaskToReadyList+0xc8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4313      	orrs	r3, r2
 8004196:	4a18      	ldr	r2, [pc, #96]	; (80041f8 <prvAddNewTaskToReadyList+0xc8>)
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4a15      	ldr	r2, [pc, #84]	; (80041fc <prvAddNewTaskToReadyList+0xcc>)
 80041a8:	441a      	add	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3304      	adds	r3, #4
 80041ae:	4619      	mov	r1, r3
 80041b0:	4610      	mov	r0, r2
 80041b2:	f7fe feff 	bl	8002fb4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041b6:	f7ff f87b 	bl	80032b0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041ba:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <prvAddNewTaskToReadyList+0xc0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00e      	beq.n	80041e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041c2:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <prvAddNewTaskToReadyList+0xbc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d207      	bcs.n	80041e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <prvAddNewTaskToReadyList+0xd0>)
 80041d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	200023ac 	.word	0x200023ac
 80041ec:	200022ac 	.word	0x200022ac
 80041f0:	200023b8 	.word	0x200023b8
 80041f4:	200023c8 	.word	0x200023c8
 80041f8:	200023b4 	.word	0x200023b4
 80041fc:	200022b0 	.word	0x200022b0
 8004200:	e000ed04 	.word	0xe000ed04

08004204 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d016      	beq.n	8004244 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004216:	4b13      	ldr	r3, [pc, #76]	; (8004264 <vTaskDelay+0x60>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <vTaskDelay+0x2e>
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	e7fe      	b.n	8004230 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004232:	f000 f861 	bl	80042f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004236:	2100      	movs	r1, #0
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fd33 	bl	8004ca4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800423e:	f000 f869 	bl	8004314 <xTaskResumeAll>
 8004242:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d107      	bne.n	800425a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <vTaskDelay+0x64>)
 800424c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	200023d4 	.word	0x200023d4
 8004268:	e000ed04 	.word	0xe000ed04

0800426c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004272:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <vTaskStartScheduler+0x74>)
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	2300      	movs	r3, #0
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	2300      	movs	r3, #0
 800427c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004280:	4918      	ldr	r1, [pc, #96]	; (80042e4 <vTaskStartScheduler+0x78>)
 8004282:	4819      	ldr	r0, [pc, #100]	; (80042e8 <vTaskStartScheduler+0x7c>)
 8004284:	f7ff fe8c 	bl	8003fa0 <xTaskCreate>
 8004288:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d115      	bne.n	80042bc <vTaskStartScheduler+0x50>
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042a2:	4b12      	ldr	r3, [pc, #72]	; (80042ec <vTaskStartScheduler+0x80>)
 80042a4:	f04f 32ff 	mov.w	r2, #4294967295
 80042a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <vTaskStartScheduler+0x84>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80042b0:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <vTaskStartScheduler+0x88>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042b6:	f7fe ff6f 	bl	8003198 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042ba:	e00d      	b.n	80042d8 <vTaskStartScheduler+0x6c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c2:	d109      	bne.n	80042d8 <vTaskStartScheduler+0x6c>
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	607b      	str	r3, [r7, #4]
 80042d6:	e7fe      	b.n	80042d6 <vTaskStartScheduler+0x6a>
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	200023d0 	.word	0x200023d0
 80042e4:	0800802c 	.word	0x0800802c
 80042e8:	080048bd 	.word	0x080048bd
 80042ec:	200023cc 	.word	0x200023cc
 80042f0:	200023b8 	.word	0x200023b8
 80042f4:	200023b0 	.word	0x200023b0

080042f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80042fc:	4b04      	ldr	r3, [pc, #16]	; (8004310 <vTaskSuspendAll+0x18>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	4a03      	ldr	r2, [pc, #12]	; (8004310 <vTaskSuspendAll+0x18>)
 8004304:	6013      	str	r3, [r2, #0]
}
 8004306:	bf00      	nop
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	200023d4 	.word	0x200023d4

08004314 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800431e:	2300      	movs	r3, #0
 8004320:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004322:	4b41      	ldr	r3, [pc, #260]	; (8004428 <xTaskResumeAll+0x114>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <xTaskResumeAll+0x2a>
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	e7fe      	b.n	800433c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800433e:	f7fe ff89 	bl	8003254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004342:	4b39      	ldr	r3, [pc, #228]	; (8004428 <xTaskResumeAll+0x114>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3b01      	subs	r3, #1
 8004348:	4a37      	ldr	r2, [pc, #220]	; (8004428 <xTaskResumeAll+0x114>)
 800434a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800434c:	4b36      	ldr	r3, [pc, #216]	; (8004428 <xTaskResumeAll+0x114>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d161      	bne.n	8004418 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004354:	4b35      	ldr	r3, [pc, #212]	; (800442c <xTaskResumeAll+0x118>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d05d      	beq.n	8004418 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800435c:	e02e      	b.n	80043bc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800435e:	4b34      	ldr	r3, [pc, #208]	; (8004430 <xTaskResumeAll+0x11c>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3318      	adds	r3, #24
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe fe7d 	bl	800306a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3304      	adds	r3, #4
 8004374:	4618      	mov	r0, r3
 8004376:	f7fe fe78 	bl	800306a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	2201      	movs	r2, #1
 8004380:	409a      	lsls	r2, r3
 8004382:	4b2c      	ldr	r3, [pc, #176]	; (8004434 <xTaskResumeAll+0x120>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4313      	orrs	r3, r2
 8004388:	4a2a      	ldr	r2, [pc, #168]	; (8004434 <xTaskResumeAll+0x120>)
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4a27      	ldr	r2, [pc, #156]	; (8004438 <xTaskResumeAll+0x124>)
 800439a:	441a      	add	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3304      	adds	r3, #4
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f7fe fe06 	bl	8002fb4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	4b23      	ldr	r3, [pc, #140]	; (800443c <xTaskResumeAll+0x128>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80043b6:	4b22      	ldr	r3, [pc, #136]	; (8004440 <xTaskResumeAll+0x12c>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043bc:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <xTaskResumeAll+0x11c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1cc      	bne.n	800435e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043ca:	f000 fb1b 	bl	8004a04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80043ce:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <xTaskResumeAll+0x130>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d010      	beq.n	80043fc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043da:	f000 f837 	bl	800444c <xTaskIncrementTick>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80043e4:	4b16      	ldr	r3, [pc, #88]	; (8004440 <xTaskResumeAll+0x12c>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f1      	bne.n	80043da <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80043f6:	4b13      	ldr	r3, [pc, #76]	; (8004444 <xTaskResumeAll+0x130>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043fc:	4b10      	ldr	r3, [pc, #64]	; (8004440 <xTaskResumeAll+0x12c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004404:	2301      	movs	r3, #1
 8004406:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <xTaskResumeAll+0x134>)
 800440a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004418:	f7fe ff4a 	bl	80032b0 <vPortExitCritical>

	return xAlreadyYielded;
 800441c:	68bb      	ldr	r3, [r7, #8]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	200023d4 	.word	0x200023d4
 800442c:	200023ac 	.word	0x200023ac
 8004430:	2000236c 	.word	0x2000236c
 8004434:	200023b4 	.word	0x200023b4
 8004438:	200022b0 	.word	0x200022b0
 800443c:	200022ac 	.word	0x200022ac
 8004440:	200023c0 	.word	0x200023c0
 8004444:	200023bc 	.word	0x200023bc
 8004448:	e000ed04 	.word	0xe000ed04

0800444c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004456:	4b50      	ldr	r3, [pc, #320]	; (8004598 <xTaskIncrementTick+0x14c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f040 808c 	bne.w	8004578 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8004460:	4b4e      	ldr	r3, [pc, #312]	; (800459c <xTaskIncrementTick+0x150>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004468:	4a4c      	ldr	r2, [pc, #304]	; (800459c <xTaskIncrementTick+0x150>)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d11f      	bne.n	80044b4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004474:	4b4a      	ldr	r3, [pc, #296]	; (80045a0 <xTaskIncrementTick+0x154>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <xTaskIncrementTick+0x46>
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	e7fe      	b.n	8004490 <xTaskIncrementTick+0x44>
 8004492:	4b43      	ldr	r3, [pc, #268]	; (80045a0 <xTaskIncrementTick+0x154>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	4b42      	ldr	r3, [pc, #264]	; (80045a4 <xTaskIncrementTick+0x158>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a40      	ldr	r2, [pc, #256]	; (80045a0 <xTaskIncrementTick+0x154>)
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	4a40      	ldr	r2, [pc, #256]	; (80045a4 <xTaskIncrementTick+0x158>)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b40      	ldr	r3, [pc, #256]	; (80045a8 <xTaskIncrementTick+0x15c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3301      	adds	r3, #1
 80044ac:	4a3e      	ldr	r2, [pc, #248]	; (80045a8 <xTaskIncrementTick+0x15c>)
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	f000 faa8 	bl	8004a04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044b4:	4b3d      	ldr	r3, [pc, #244]	; (80045ac <xTaskIncrementTick+0x160>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d34d      	bcc.n	800455a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044be:	4b38      	ldr	r3, [pc, #224]	; (80045a0 <xTaskIncrementTick+0x154>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <xTaskIncrementTick+0x80>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <xTaskIncrementTick+0x82>
 80044cc:	2300      	movs	r3, #0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d004      	beq.n	80044dc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d2:	4b36      	ldr	r3, [pc, #216]	; (80045ac <xTaskIncrementTick+0x160>)
 80044d4:	f04f 32ff 	mov.w	r2, #4294967295
 80044d8:	601a      	str	r2, [r3, #0]
					break;
 80044da:	e03e      	b.n	800455a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80044dc:	4b30      	ldr	r3, [pc, #192]	; (80045a0 <xTaskIncrementTick+0x154>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d203      	bcs.n	80044fc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044f4:	4a2d      	ldr	r2, [pc, #180]	; (80045ac <xTaskIncrementTick+0x160>)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6013      	str	r3, [r2, #0]
						break;
 80044fa:	e02e      	b.n	800455a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	3304      	adds	r3, #4
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe fdb2 	bl	800306a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	2b00      	cmp	r3, #0
 800450c:	d004      	beq.n	8004518 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	3318      	adds	r3, #24
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe fda9 	bl	800306a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	2201      	movs	r2, #1
 800451e:	409a      	lsls	r2, r3
 8004520:	4b23      	ldr	r3, [pc, #140]	; (80045b0 <xTaskIncrementTick+0x164>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4313      	orrs	r3, r2
 8004526:	4a22      	ldr	r2, [pc, #136]	; (80045b0 <xTaskIncrementTick+0x164>)
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4a1f      	ldr	r2, [pc, #124]	; (80045b4 <xTaskIncrementTick+0x168>)
 8004538:	441a      	add	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	3304      	adds	r3, #4
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f7fe fd37 	bl	8002fb4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454a:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <xTaskIncrementTick+0x16c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	429a      	cmp	r2, r3
 8004552:	d3b4      	bcc.n	80044be <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004554:	2301      	movs	r3, #1
 8004556:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004558:	e7b1      	b.n	80044be <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800455a:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <xTaskIncrementTick+0x16c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004560:	4914      	ldr	r1, [pc, #80]	; (80045b4 <xTaskIncrementTick+0x168>)
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d907      	bls.n	8004582 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004572:	2301      	movs	r3, #1
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	e004      	b.n	8004582 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004578:	4b10      	ldr	r3, [pc, #64]	; (80045bc <xTaskIncrementTick+0x170>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3301      	adds	r3, #1
 800457e:	4a0f      	ldr	r2, [pc, #60]	; (80045bc <xTaskIncrementTick+0x170>)
 8004580:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004582:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <xTaskIncrementTick+0x174>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800458a:	2301      	movs	r3, #1
 800458c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800458e:	697b      	ldr	r3, [r7, #20]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	200023d4 	.word	0x200023d4
 800459c:	200023b0 	.word	0x200023b0
 80045a0:	20002364 	.word	0x20002364
 80045a4:	20002368 	.word	0x20002368
 80045a8:	200023c4 	.word	0x200023c4
 80045ac:	200023cc 	.word	0x200023cc
 80045b0:	200023b4 	.word	0x200023b4
 80045b4:	200022b0 	.word	0x200022b0
 80045b8:	200022ac 	.word	0x200022ac
 80045bc:	200023bc 	.word	0x200023bc
 80045c0:	200023c0 	.word	0x200023c0

080045c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045ca:	4b2e      	ldr	r3, [pc, #184]	; (8004684 <vTaskSwitchContext+0xc0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045d2:	4b2d      	ldr	r3, [pc, #180]	; (8004688 <vTaskSwitchContext+0xc4>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045d8:	e04f      	b.n	800467a <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 80045da:	4b2b      	ldr	r3, [pc, #172]	; (8004688 <vTaskSwitchContext+0xc4>)
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80045e0:	4b2a      	ldr	r3, [pc, #168]	; (800468c <vTaskSwitchContext+0xc8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b29      	ldr	r3, [pc, #164]	; (800468c <vTaskSwitchContext+0xc8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d808      	bhi.n	8004602 <vTaskSwitchContext+0x3e>
 80045f0:	4b26      	ldr	r3, [pc, #152]	; (800468c <vTaskSwitchContext+0xc8>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b25      	ldr	r3, [pc, #148]	; (800468c <vTaskSwitchContext+0xc8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3334      	adds	r3, #52	; 0x34
 80045fa:	4619      	mov	r1, r3
 80045fc:	4610      	mov	r0, r2
 80045fe:	f7ff fcbd 	bl	8003f7c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004602:	4b23      	ldr	r3, [pc, #140]	; (8004690 <vTaskSwitchContext+0xcc>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	fab3 f383 	clz	r3, r3
 800460e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004610:	7afb      	ldrb	r3, [r7, #11]
 8004612:	f1c3 031f 	rsb	r3, r3, #31
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	491e      	ldr	r1, [pc, #120]	; (8004694 <vTaskSwitchContext+0xd0>)
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <vTaskSwitchContext+0x7c>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	e7fe      	b.n	800463e <vTaskSwitchContext+0x7a>
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4a12      	ldr	r2, [pc, #72]	; (8004694 <vTaskSwitchContext+0xd0>)
 800464c:	4413      	add	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	605a      	str	r2, [r3, #4]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3308      	adds	r3, #8
 8004662:	429a      	cmp	r2, r3
 8004664:	d104      	bne.n	8004670 <vTaskSwitchContext+0xac>
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	605a      	str	r2, [r3, #4]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	4a05      	ldr	r2, [pc, #20]	; (800468c <vTaskSwitchContext+0xc8>)
 8004678:	6013      	str	r3, [r2, #0]
}
 800467a:	bf00      	nop
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	200023d4 	.word	0x200023d4
 8004688:	200023c0 	.word	0x200023c0
 800468c:	200022ac 	.word	0x200022ac
 8004690:	200023b4 	.word	0x200023b4
 8004694:	200022b0 	.word	0x200022b0

08004698 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <vTaskPlaceOnEventList+0x24>
 80046a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	e7fe      	b.n	80046ba <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046bc:	4b07      	ldr	r3, [pc, #28]	; (80046dc <vTaskPlaceOnEventList+0x44>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3318      	adds	r3, #24
 80046c2:	4619      	mov	r1, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7fe fc98 	bl	8002ffa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046ca:	2101      	movs	r1, #1
 80046cc:	6838      	ldr	r0, [r7, #0]
 80046ce:	f000 fae9 	bl	8004ca4 <prvAddCurrentTaskToDelayedList>
}
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	200022ac 	.word	0x200022ac

080046e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d109      	bne.n	800470a <xTaskRemoveFromEventList+0x2a>
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e7fe      	b.n	8004708 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	3318      	adds	r3, #24
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe fcab 	bl	800306a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004714:	4b1d      	ldr	r3, [pc, #116]	; (800478c <xTaskRemoveFromEventList+0xac>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d11c      	bne.n	8004756 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	3304      	adds	r3, #4
 8004720:	4618      	mov	r0, r3
 8004722:	f7fe fca2 	bl	800306a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	2201      	movs	r2, #1
 800472c:	409a      	lsls	r2, r3
 800472e:	4b18      	ldr	r3, [pc, #96]	; (8004790 <xTaskRemoveFromEventList+0xb0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4313      	orrs	r3, r2
 8004734:	4a16      	ldr	r2, [pc, #88]	; (8004790 <xTaskRemoveFromEventList+0xb0>)
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4a13      	ldr	r2, [pc, #76]	; (8004794 <xTaskRemoveFromEventList+0xb4>)
 8004746:	441a      	add	r2, r3
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	3304      	adds	r3, #4
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f7fe fc30 	bl	8002fb4 <vListInsertEnd>
 8004754:	e005      	b.n	8004762 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	3318      	adds	r3, #24
 800475a:	4619      	mov	r1, r3
 800475c:	480e      	ldr	r0, [pc, #56]	; (8004798 <xTaskRemoveFromEventList+0xb8>)
 800475e:	f7fe fc29 	bl	8002fb4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004766:	4b0d      	ldr	r3, [pc, #52]	; (800479c <xTaskRemoveFromEventList+0xbc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	429a      	cmp	r2, r3
 800476e:	d905      	bls.n	800477c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004770:	2301      	movs	r3, #1
 8004772:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004774:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <xTaskRemoveFromEventList+0xc0>)
 8004776:	2201      	movs	r2, #1
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	e001      	b.n	8004780 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800477c:	2300      	movs	r3, #0
 800477e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004780:	697b      	ldr	r3, [r7, #20]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	200023d4 	.word	0x200023d4
 8004790:	200023b4 	.word	0x200023b4
 8004794:	200022b0 	.word	0x200022b0
 8004798:	2000236c 	.word	0x2000236c
 800479c:	200022ac 	.word	0x200022ac
 80047a0:	200023c0 	.word	0x200023c0

080047a4 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <vTaskSetTimeOutState+0x22>
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	e7fe      	b.n	80047c4 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <vTaskSetTimeOutState+0x3c>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <vTaskSetTimeOutState+0x40>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	605a      	str	r2, [r3, #4]
}
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr
 80047e0:	200023c4 	.word	0x200023c4
 80047e4:	200023b0 	.word	0x200023b0

080047e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <xTaskCheckForTimeOut+0x24>
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	e7fe      	b.n	800480a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <xTaskCheckForTimeOut+0x3e>
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	60bb      	str	r3, [r7, #8]
 8004824:	e7fe      	b.n	8004824 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004826:	f7fe fd15 	bl	8003254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800482a:	4b1c      	ldr	r3, [pc, #112]	; (800489c <xTaskCheckForTimeOut+0xb4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004838:	d102      	bne.n	8004840 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	e026      	b.n	800488e <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <xTaskCheckForTimeOut+0xb8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d007      	beq.n	800485c <xTaskCheckForTimeOut+0x74>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	429a      	cmp	r2, r3
 8004854:	d802      	bhi.n	800485c <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004856:	2301      	movs	r3, #1
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	e018      	b.n	800488e <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	1ad2      	subs	r2, r2, r3
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d20e      	bcs.n	800488a <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6859      	ldr	r1, [r3, #4]
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1acb      	subs	r3, r1, r3
 8004878:	441a      	add	r2, r3
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff ff90 	bl	80047a4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	e001      	b.n	800488e <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 800488a:	2301      	movs	r3, #1
 800488c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800488e:	f7fe fd0f 	bl	80032b0 <vPortExitCritical>

	return xReturn;
 8004892:	697b      	ldr	r3, [r7, #20]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	200023b0 	.word	0x200023b0
 80048a0:	200023c4 	.word	0x200023c4

080048a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048a8:	4b03      	ldr	r3, [pc, #12]	; (80048b8 <vTaskMissedYield+0x14>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
}
 80048ae:	bf00      	nop
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	200023c0 	.word	0x200023c0

080048bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048c4:	f000 f852 	bl	800496c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <prvIdleTask+0x28>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d9f9      	bls.n	80048c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <prvIdleTask+0x2c>)
 80048d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048e0:	e7f0      	b.n	80048c4 <prvIdleTask+0x8>
 80048e2:	bf00      	nop
 80048e4:	200022b0 	.word	0x200022b0
 80048e8:	e000ed04 	.word	0xe000ed04

080048ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048f2:	2300      	movs	r3, #0
 80048f4:	607b      	str	r3, [r7, #4]
 80048f6:	e00c      	b.n	8004912 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4a12      	ldr	r2, [pc, #72]	; (800494c <prvInitialiseTaskLists+0x60>)
 8004904:	4413      	add	r3, r2
 8004906:	4618      	mov	r0, r3
 8004908:	f7fe fb29 	bl	8002f5e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3301      	adds	r3, #1
 8004910:	607b      	str	r3, [r7, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b06      	cmp	r3, #6
 8004916:	d9ef      	bls.n	80048f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004918:	480d      	ldr	r0, [pc, #52]	; (8004950 <prvInitialiseTaskLists+0x64>)
 800491a:	f7fe fb20 	bl	8002f5e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800491e:	480d      	ldr	r0, [pc, #52]	; (8004954 <prvInitialiseTaskLists+0x68>)
 8004920:	f7fe fb1d 	bl	8002f5e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004924:	480c      	ldr	r0, [pc, #48]	; (8004958 <prvInitialiseTaskLists+0x6c>)
 8004926:	f7fe fb1a 	bl	8002f5e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800492a:	480c      	ldr	r0, [pc, #48]	; (800495c <prvInitialiseTaskLists+0x70>)
 800492c:	f7fe fb17 	bl	8002f5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004930:	480b      	ldr	r0, [pc, #44]	; (8004960 <prvInitialiseTaskLists+0x74>)
 8004932:	f7fe fb14 	bl	8002f5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004936:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <prvInitialiseTaskLists+0x78>)
 8004938:	4a05      	ldr	r2, [pc, #20]	; (8004950 <prvInitialiseTaskLists+0x64>)
 800493a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <prvInitialiseTaskLists+0x7c>)
 800493e:	4a05      	ldr	r2, [pc, #20]	; (8004954 <prvInitialiseTaskLists+0x68>)
 8004940:	601a      	str	r2, [r3, #0]
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	200022b0 	.word	0x200022b0
 8004950:	2000233c 	.word	0x2000233c
 8004954:	20002350 	.word	0x20002350
 8004958:	2000236c 	.word	0x2000236c
 800495c:	20002380 	.word	0x20002380
 8004960:	20002398 	.word	0x20002398
 8004964:	20002364 	.word	0x20002364
 8004968:	20002368 	.word	0x20002368

0800496c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004972:	e028      	b.n	80049c6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8004974:	f7ff fcc0 	bl	80042f8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004978:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <prvCheckTasksWaitingTermination+0x6c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	bf0c      	ite	eq
 8004980:	2301      	moveq	r3, #1
 8004982:	2300      	movne	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8004988:	f7ff fcc4 	bl	8004314 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d119      	bne.n	80049c6 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8004992:	f7fe fc5f 	bl	8003254 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <prvCheckTasksWaitingTermination+0x6c>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	3304      	adds	r3, #4
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fe fb61 	bl	800306a <uxListRemove>
					--uxCurrentNumberOfTasks;
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <prvCheckTasksWaitingTermination+0x70>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	4a0b      	ldr	r2, [pc, #44]	; (80049dc <prvCheckTasksWaitingTermination+0x70>)
 80049b0:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <prvCheckTasksWaitingTermination+0x74>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	4a09      	ldr	r2, [pc, #36]	; (80049e0 <prvCheckTasksWaitingTermination+0x74>)
 80049ba:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80049bc:	f7fe fc78 	bl	80032b0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80049c0:	6838      	ldr	r0, [r7, #0]
 80049c2:	f000 f80f 	bl	80049e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049c6:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <prvCheckTasksWaitingTermination+0x74>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1d2      	bne.n	8004974 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20002380 	.word	0x20002380
 80049dc:	200023ac 	.word	0x200023ac
 80049e0:	20002394 	.word	0x20002394

080049e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe fda5 	bl	8003540 <vPortFree>
			vPortFree( pxTCB );
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fe fda2 	bl	8003540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049fc:	bf00      	nop
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <prvResetNextTaskUnblockTime+0x40>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <prvResetNextTaskUnblockTime+0x14>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <prvResetNextTaskUnblockTime+0x16>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d004      	beq.n	8004a28 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a1e:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <prvResetNextTaskUnblockTime+0x44>)
 8004a20:	f04f 32ff 	mov.w	r2, #4294967295
 8004a24:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a26:	e008      	b.n	8004a3a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a28:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <prvResetNextTaskUnblockTime+0x40>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	4a04      	ldr	r2, [pc, #16]	; (8004a48 <prvResetNextTaskUnblockTime+0x44>)
 8004a38:	6013      	str	r3, [r2, #0]
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr
 8004a44:	20002364 	.word	0x20002364
 8004a48:	200023cc 	.word	0x200023cc

08004a4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a52:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <xTaskGetSchedulerState+0x34>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	e008      	b.n	8004a72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a60:	4b08      	ldr	r3, [pc, #32]	; (8004a84 <xTaskGetSchedulerState+0x38>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d102      	bne.n	8004a6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	e001      	b.n	8004a72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a72:	687b      	ldr	r3, [r7, #4]
	}
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	200023b8 	.word	0x200023b8
 8004a84:	200023d4 	.word	0x200023d4

08004a88 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d062      	beq.n	8004b60 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9e:	4b32      	ldr	r3, [pc, #200]	; (8004b68 <vTaskPriorityInherit+0xe0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d25b      	bcs.n	8004b60 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	db06      	blt.n	8004abe <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ab0:	4b2d      	ldr	r3, [pc, #180]	; (8004b68 <vTaskPriorityInherit+0xe0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	f1c3 0207 	rsb	r2, r3, #7
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6959      	ldr	r1, [r3, #20]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4a27      	ldr	r2, [pc, #156]	; (8004b6c <vTaskPriorityInherit+0xe4>)
 8004ad0:	4413      	add	r3, r2
 8004ad2:	4299      	cmp	r1, r3
 8004ad4:	d101      	bne.n	8004ada <vTaskPriorityInherit+0x52>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <vTaskPriorityInherit+0x54>
 8004ada:	2300      	movs	r3, #0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d03a      	beq.n	8004b56 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fe fac0 	bl	800306a <uxListRemove>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d115      	bne.n	8004b1c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af4:	491d      	ldr	r1, [pc, #116]	; (8004b6c <vTaskPriorityInherit+0xe4>)
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	440b      	add	r3, r1
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <vTaskPriorityInherit+0x94>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	43da      	mvns	r2, r3
 8004b12:	4b17      	ldr	r3, [pc, #92]	; (8004b70 <vTaskPriorityInherit+0xe8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4013      	ands	r3, r2
 8004b18:	4a15      	ldr	r2, [pc, #84]	; (8004b70 <vTaskPriorityInherit+0xe8>)
 8004b1a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b1c:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <vTaskPriorityInherit+0xe0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	409a      	lsls	r2, r3
 8004b2e:	4b10      	ldr	r3, [pc, #64]	; (8004b70 <vTaskPriorityInherit+0xe8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	4a0e      	ldr	r2, [pc, #56]	; (8004b70 <vTaskPriorityInherit+0xe8>)
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4a09      	ldr	r2, [pc, #36]	; (8004b6c <vTaskPriorityInherit+0xe4>)
 8004b46:	441a      	add	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f7fe fa30 	bl	8002fb4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b54:	e004      	b.n	8004b60 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b56:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <vTaskPriorityInherit+0xe0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8004b60:	bf00      	nop
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	200022ac 	.word	0x200022ac
 8004b6c:	200022b0 	.word	0x200022b0
 8004b70:	200023b4 	.word	0x200023b4

08004b74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d06c      	beq.n	8004c64 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b8a:	4b39      	ldr	r3, [pc, #228]	; (8004c70 <xTaskPriorityDisinherit+0xfc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d009      	beq.n	8004ba8 <xTaskPriorityDisinherit+0x34>
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	e7fe      	b.n	8004ba6 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d109      	bne.n	8004bc4 <xTaskPriorityDisinherit+0x50>
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	e7fe      	b.n	8004bc2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc8:	1e5a      	subs	r2, r3, #1
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d044      	beq.n	8004c64 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d140      	bne.n	8004c64 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	3304      	adds	r3, #4
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe fa3f 	bl	800306a <uxListRemove>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d115      	bne.n	8004c1e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf6:	491f      	ldr	r1, [pc, #124]	; (8004c74 <xTaskPriorityDisinherit+0x100>)
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <xTaskPriorityDisinherit+0xaa>
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43da      	mvns	r2, r3
 8004c14:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <xTaskPriorityDisinherit+0x104>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <xTaskPriorityDisinherit+0x104>)
 8004c1c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	f1c3 0207 	rsb	r2, r3, #7
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	2201      	movs	r2, #1
 8004c38:	409a      	lsls	r2, r3
 8004c3a:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <xTaskPriorityDisinherit+0x104>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	4a0d      	ldr	r2, [pc, #52]	; (8004c78 <xTaskPriorityDisinherit+0x104>)
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4a08      	ldr	r2, [pc, #32]	; (8004c74 <xTaskPriorityDisinherit+0x100>)
 8004c52:	441a      	add	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	3304      	adds	r3, #4
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	f7fe f9aa 	bl	8002fb4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c64:	697b      	ldr	r3, [r7, #20]
	}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	200022ac 	.word	0x200022ac
 8004c74:	200022b0 	.word	0x200022b0
 8004c78:	200023b4 	.word	0x200023b4

08004c7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d004      	beq.n	8004c92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c8e:	3201      	adds	r2, #1
 8004c90:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004c92:	4b03      	ldr	r3, [pc, #12]	; (8004ca0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c94:	681b      	ldr	r3, [r3, #0]
	}
 8004c96:	4618      	mov	r0, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	200022ac 	.word	0x200022ac

08004ca4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cae:	4b29      	ldr	r3, [pc, #164]	; (8004d54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cb4:	4b28      	ldr	r3, [pc, #160]	; (8004d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe f9d5 	bl	800306a <uxListRemove>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10b      	bne.n	8004cde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004cc6:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	2201      	movs	r2, #1
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	43da      	mvns	r2, r3
 8004cd4:	4b21      	ldr	r3, [pc, #132]	; (8004d5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	4a20      	ldr	r2, [pc, #128]	; (8004d5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d10a      	bne.n	8004cfc <prvAddCurrentTaskToDelayedList+0x58>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cec:	4b1a      	ldr	r3, [pc, #104]	; (8004d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	481a      	ldr	r0, [pc, #104]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004cf6:	f7fe f95d 	bl	8002fb4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cfa:	e026      	b.n	8004d4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4413      	add	r3, r2
 8004d02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d04:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d209      	bcs.n	8004d28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4610      	mov	r0, r2
 8004d22:	f7fe f96a 	bl	8002ffa <vListInsert>
}
 8004d26:	e010      	b.n	8004d4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d28:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f7fe f960 	bl	8002ffa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d3a:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d202      	bcs.n	8004d4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d44:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	6013      	str	r3, [r2, #0]
}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	200023b0 	.word	0x200023b0
 8004d58:	200022ac 	.word	0x200022ac
 8004d5c:	200023b4 	.word	0x200023b4
 8004d60:	20002398 	.word	0x20002398
 8004d64:	20002368 	.word	0x20002368
 8004d68:	20002364 	.word	0x20002364
 8004d6c:	200023cc 	.word	0x200023cc

08004d70 <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  WRITE_REG(CRCx->CR, CRC_CR_RESET);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	609a      	str	r2, [r3, #8]
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	601a      	str	r2, [r3, #0]
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr

08004da2 <LL_CRC_ReadData32>:
  * @rmtoll DR           DR            LL_CRC_ReadData32
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (32 bits).
  */
__STATIC_INLINE uint32_t LL_CRC_ReadData32(CRC_TypeDef *CRCx)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(CRCx->DR));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr

08004db8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8004dc0:	4908      	ldr	r1, [pc, #32]	; (8004de4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004dc4:	695a      	ldr	r2, [r3, #20]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004dce:	695a      	ldr	r2, [r3, #20]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
}
 8004dd8:	bf00      	nop
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40021000 	.word	0x40021000

08004de8 <MX_CRC_Init>:
#include "crc.h"
#include "main.h"

void MX_CRC_Init(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8004dec:	2040      	movs	r0, #64	; 0x40
 8004dee:	f7ff ffe3 	bl	8004db8 <LL_AHB1_GRP1_EnableClock>
}
 8004df2:	bf00      	nop
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <CRC_calc>:

uint32_t CRC_calc(uint32_t * data, uint32_t data_length)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
	LL_CRC_ResetCRCCalculationUnit(CRC);
 8004e02:	4812      	ldr	r0, [pc, #72]	; (8004e4c <CRC_calc+0x54>)
 8004e04:	f7ff ffb4 	bl	8004d70 <LL_CRC_ResetCRCCalculationUnit>

	for(uint32_t i = 0; i < data_length; i++)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	e00e      	b.n	8004e2c <CRC_calc+0x34>
	{
		LL_CRC_FeedData32(CRC, __REV(data[i]));
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	4413      	add	r3, r2
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	613b      	str	r3, [r7, #16]
  return __builtin_bswap32(value);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	ba1b      	rev	r3, r3
 8004e1e:	4619      	mov	r1, r3
 8004e20:	480a      	ldr	r0, [pc, #40]	; (8004e4c <CRC_calc+0x54>)
 8004e22:	f7ff ffb1 	bl	8004d88 <LL_CRC_FeedData32>
	for(uint32_t i = 0; i < data_length; i++)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d3ec      	bcc.n	8004e0e <CRC_calc+0x16>
	}

	return __REV(LL_CRC_ReadData32(CRC))^0xFFFFFFFF;
 8004e34:	4805      	ldr	r0, [pc, #20]	; (8004e4c <CRC_calc+0x54>)
 8004e36:	f7ff ffb4 	bl	8004da2 <LL_CRC_ReadData32>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	ba1b      	rev	r3, r3
 8004e42:	43db      	mvns	r3, r3
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40023000 	.word	0x40023000

08004e50 <delay>:
#include "delay.h"

void delay(uint16_t value)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4603      	mov	r3, r0
 8004e58:	80fb      	strh	r3, [r7, #6]
	LL_mDelay(value);
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fd fff3 	bl	8002e48 <LL_mDelay>
}
 8004e62:	bf00      	nop
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <getSysTick>:

uint32_t getSysTick(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
	return SysTick->VAL;
 8004e70:	4b02      	ldr	r3, [pc, #8]	; (8004e7c <getSysTick+0x10>)
 8004e72:	689b      	ldr	r3, [r3, #8]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr
 8004e7c:	e000e010 	.word	0xe000e010

08004e80 <NVIC_GetPriorityGrouping>:
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e84:	4b04      	ldr	r3, [pc, #16]	; (8004e98 <NVIC_GetPriorityGrouping+0x18>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	0a1b      	lsrs	r3, r3, #8
 8004e8a:	f003 0307 	and.w	r3, r3, #7
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	e000ed00 	.word	0xe000ed00

08004e9c <NVIC_EnableIRQ>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004ea6:	4908      	ldr	r1, [pc, #32]	; (8004ec8 <NVIC_EnableIRQ+0x2c>)
 8004ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	79fa      	ldrb	r2, [r7, #7]
 8004eb0:	f002 021f 	and.w	r2, r2, #31
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr
 8004ec8:	e000e100 	.word	0xe000e100

08004ecc <NVIC_SetPriority>:
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	6039      	str	r1, [r7, #0]
 8004ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8004ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	da0b      	bge.n	8004ef8 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ee0:	490d      	ldr	r1, [pc, #52]	; (8004f18 <NVIC_SetPriority+0x4c>)
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	3b04      	subs	r3, #4
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	0112      	lsls	r2, r2, #4
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	761a      	strb	r2, [r3, #24]
}
 8004ef6:	e009      	b.n	8004f0c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef8:	4908      	ldr	r1, [pc, #32]	; (8004f1c <NVIC_SetPriority+0x50>)
 8004efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	0112      	lsls	r2, r2, #4
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	440b      	add	r3, r1
 8004f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bc80      	pop	{r7}
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	e000ed00 	.word	0xe000ed00
 8004f1c:	e000e100 	.word	0xe000e100

08004f20 <NVIC_EncodePriority>:
{
 8004f20:	b480      	push	{r7}
 8004f22:	b089      	sub	sp, #36	; 0x24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	f1c3 0307 	rsb	r3, r3, #7
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	bf28      	it	cs
 8004f3e:	2304      	movcs	r3, #4
 8004f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	3304      	adds	r3, #4
 8004f46:	2b06      	cmp	r3, #6
 8004f48:	d902      	bls.n	8004f50 <NVIC_EncodePriority+0x30>
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3b03      	subs	r3, #3
 8004f4e:	e000      	b.n	8004f52 <NVIC_EncodePriority+0x32>
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f54:	2201      	movs	r2, #1
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	1e5a      	subs	r2, r3, #1
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	401a      	ands	r2, r3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f66:	2101      	movs	r1, #1
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6e:	1e59      	subs	r1, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f74:	4313      	orrs	r3, r2
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3724      	adds	r7, #36	; 0x24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8004f88:	4a03      	ldr	r2, [pc, #12]	; (8004f98 <LL_EXTI_ClearFlag_0_31+0x18>)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6153      	str	r3, [r2, #20]
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr
 8004f98:	40010400 	.word	0x40010400

08004f9c <LL_GPIO_ReadInputPort>:
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  return (READ_REG(GPIOx->IDR));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr
	...

08004fb4 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8004fb4:	b490      	push	{r4, r7}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8004fbe:	4c11      	ldr	r4, [pc, #68]	; (8005004 <LL_GPIO_AF_SetEXTISource+0x50>)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	490f      	ldr	r1, [pc, #60]	; (8005004 <LL_GPIO_AF_SetEXTISource+0x50>)
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	3202      	adds	r2, #2
 8004fcc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	0c12      	lsrs	r2, r2, #16
 8004fd4:	43d2      	mvns	r2, r2
 8004fd6:	4011      	ands	r1, r2
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	0c12      	lsrs	r2, r2, #16
 8004fdc:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	fa92 f2a2 	rbit	r2, r2
 8004fe4:	60ba      	str	r2, [r7, #8]
  return(result);
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	fab2 f282 	clz	r2, r2
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	fa00 f202 	lsl.w	r2, r0, r2
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc90      	pop	{r4, r7}
 8005002:	4770      	bx	lr
 8005004:	40010000 	.word	0x40010000

08005008 <GPIO_Init>:
#include "encoder_driver.h"

static bool button_status = false, rotate_status = false, rotate_pin_A, rotate_pin_B;

void GPIO_Init()
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
    LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800500e:	f107 0318 	add.w	r3, r7, #24
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	605a      	str	r2, [r3, #4]

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8005018:	2302      	movs	r3, #2
 800501a:	61bb      	str	r3, [r7, #24]
    EXTI_InitStruct.LineCommand = ENABLE;
 800501c:	2301      	movs	r3, #1
 800501e:	773b      	strb	r3, [r7, #28]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8005020:	2300      	movs	r3, #0
 8005022:	777b      	strb	r3, [r7, #29]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8005024:	2301      	movs	r3, #1
 8005026:	77bb      	strb	r3, [r7, #30]
    LL_EXTI_Init(&EXTI_InitStruct);
 8005028:	f107 0318 	add.w	r3, r7, #24
 800502c:	4618      	mov	r0, r3
 800502e:	f7fc ff25 	bl	8001e7c <LL_EXTI_Init>

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8005032:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005036:	61bb      	str	r3, [r7, #24]
    EXTI_InitStruct.LineCommand = ENABLE;
 8005038:	2301      	movs	r3, #1
 800503a:	773b      	strb	r3, [r7, #28]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800503c:	2300      	movs	r3, #0
 800503e:	777b      	strb	r3, [r7, #29]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8005040:	2302      	movs	r3, #2
 8005042:	77bb      	strb	r3, [r7, #30]
    LL_EXTI_Init(&EXTI_InitStruct);
 8005044:	f107 0318 	add.w	r3, r7, #24
 8005048:	4618      	mov	r0, r3
 800504a:	f7fc ff17 	bl	8001e7c <LL_EXTI_Init>

    LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE1);
 800504e:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8005052:	2001      	movs	r0, #1
 8005054:	f7ff ffae 	bl	8004fb4 <LL_GPIO_AF_SetEXTISource>
    LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE14);
 8005058:	491d      	ldr	r1, [pc, #116]	; (80050d0 <GPIO_Init+0xc8>)
 800505a:	2001      	movs	r0, #1
 800505c:	f7ff ffaa 	bl	8004fb4 <LL_GPIO_AF_SetEXTISource>


	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005060:	1d3b      	adds	r3, r7, #4
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	605a      	str	r2, [r3, #4]
 8005068:	609a      	str	r2, [r3, #8]
 800506a:	60da      	str	r2, [r3, #12]
 800506c:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = LL_GPIO_PIN_1 | LL_GPIO_PIN_14 | LL_GPIO_PIN_15;
 800506e:	4b19      	ldr	r3, [pc, #100]	; (80050d4 <GPIO_Init+0xcc>)
 8005070:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8005072:	2308      	movs	r3, #8
 8005074:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005076:	2303      	movs	r3, #3
 8005078:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800507a:	2300      	movs	r3, #0
 800507c:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800507e:	1d3b      	adds	r3, r7, #4
 8005080:	4619      	mov	r1, r3
 8005082:	4815      	ldr	r0, [pc, #84]	; (80050d8 <GPIO_Init+0xd0>)
 8005084:	f7fd f825 	bl	80020d2 <LL_GPIO_Init>

    NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),8, 0));
 8005088:	f7ff fefa 	bl	8004e80 <NVIC_GetPriorityGrouping>
 800508c:	4603      	mov	r3, r0
 800508e:	2200      	movs	r2, #0
 8005090:	2108      	movs	r1, #8
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff ff44 	bl	8004f20 <NVIC_EncodePriority>
 8005098:	4603      	mov	r3, r0
 800509a:	4619      	mov	r1, r3
 800509c:	2007      	movs	r0, #7
 800509e:	f7ff ff15 	bl	8004ecc <NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI1_IRQn);
 80050a2:	2007      	movs	r0, #7
 80050a4:	f7ff fefa 	bl	8004e9c <NVIC_EnableIRQ>


    NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),8, 0));
 80050a8:	f7ff feea 	bl	8004e80 <NVIC_GetPriorityGrouping>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2200      	movs	r2, #0
 80050b0:	2108      	movs	r1, #8
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff ff34 	bl	8004f20 <NVIC_EncodePriority>
 80050b8:	4603      	mov	r3, r0
 80050ba:	4619      	mov	r1, r3
 80050bc:	2028      	movs	r0, #40	; 0x28
 80050be:	f7ff ff05 	bl	8004ecc <NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80050c2:	2028      	movs	r0, #40	; 0x28
 80050c4:	f7ff feea 	bl	8004e9c <NVIC_EnableIRQ>
}
 80050c8:	bf00      	nop
 80050ca:	3720      	adds	r7, #32
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	0f000003 	.word	0x0f000003
 80050d4:	04c002c2 	.word	0x04c002c2
 80050d8:	40010c00 	.word	0x40010c00

080050dc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80050e0:	2002      	movs	r0, #2
 80050e2:	f7ff ff4d 	bl	8004f80 <LL_EXTI_ClearFlag_0_31>

	button_status = true;
 80050e6:	4b02      	ldr	r3, [pc, #8]	; (80050f0 <EXTI1_IRQHandler+0x14>)
 80050e8:	2201      	movs	r2, #1
 80050ea:	701a      	strb	r2, [r3, #0]
}
 80050ec:	bf00      	nop
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	200023d8 	.word	0x200023d8

080050f4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 80050f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80050fc:	f7ff ff40 	bl	8004f80 <LL_EXTI_ClearFlag_0_31>

	rotate_status = true;
 8005100:	4b0d      	ldr	r3, [pc, #52]	; (8005138 <EXTI15_10_IRQHandler+0x44>)
 8005102:	2201      	movs	r2, #1
 8005104:	701a      	strb	r2, [r3, #0]
	rotate_pin_A = GPIO_Read_Pin(14);
 8005106:	200e      	movs	r0, #14
 8005108:	f000 f85c 	bl	80051c4 <GPIO_Read_Pin>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	bf14      	ite	ne
 8005112:	2301      	movne	r3, #1
 8005114:	2300      	moveq	r3, #0
 8005116:	b2da      	uxtb	r2, r3
 8005118:	4b08      	ldr	r3, [pc, #32]	; (800513c <EXTI15_10_IRQHandler+0x48>)
 800511a:	701a      	strb	r2, [r3, #0]
	rotate_pin_B = GPIO_Read_Pin(15);
 800511c:	200f      	movs	r0, #15
 800511e:	f000 f851 	bl	80051c4 <GPIO_Read_Pin>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	bf14      	ite	ne
 8005128:	2301      	movne	r3, #1
 800512a:	2300      	moveq	r3, #0
 800512c:	b2da      	uxtb	r2, r3
 800512e:	4b04      	ldr	r3, [pc, #16]	; (8005140 <EXTI15_10_IRQHandler+0x4c>)
 8005130:	701a      	strb	r2, [r3, #0]
}
 8005132:	bf00      	nop
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	200023d9 	.word	0x200023d9
 800513c:	200023da 	.word	0x200023da
 8005140:	200023db 	.word	0x200023db

08005144 <GetButton>:

bool GetButton(void)
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
	return button_status;
 8005148:	4b02      	ldr	r3, [pc, #8]	; (8005154 <GetButton+0x10>)
 800514a:	781b      	ldrb	r3, [r3, #0]
}
 800514c:	4618      	mov	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	bc80      	pop	{r7}
 8005152:	4770      	bx	lr
 8005154:	200023d8 	.word	0x200023d8

08005158 <ClearButton>:

void ClearButton()
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
    button_status = false;
 800515c:	4b03      	ldr	r3, [pc, #12]	; (800516c <ClearButton+0x14>)
 800515e:	2200      	movs	r2, #0
 8005160:	701a      	strb	r2, [r3, #0]
}
 8005162:	bf00      	nop
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	200023d8 	.word	0x200023d8

08005170 <GetRotateStatus>:

bool GetRotateStatus(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
	return rotate_status;
 8005174:	4b02      	ldr	r3, [pc, #8]	; (8005180 <GetRotateStatus+0x10>)
 8005176:	781b      	ldrb	r3, [r3, #0]
}
 8005178:	4618      	mov	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr
 8005180:	200023d9 	.word	0x200023d9

08005184 <ClearRotateStatus>:

void ClearRotateStatus()
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
    rotate_status = false;
 8005188:	4b03      	ldr	r3, [pc, #12]	; (8005198 <ClearRotateStatus+0x14>)
 800518a:	2200      	movs	r2, #0
 800518c:	701a      	strb	r2, [r3, #0]
}
 800518e:	bf00      	nop
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	200023d9 	.word	0x200023d9

0800519c <GetRotatePinB>:

bool GetRotatePinB()
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
	return rotate_pin_A;
 80051a0:	4b02      	ldr	r3, [pc, #8]	; (80051ac <GetRotatePinB+0x10>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr
 80051ac:	200023da 	.word	0x200023da

080051b0 <GetRotatePinA>:

bool GetRotatePinA()
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
	return rotate_pin_B;
 80051b4:	4b02      	ldr	r3, [pc, #8]	; (80051c0 <GetRotatePinA+0x10>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr
 80051c0:	200023db 	.word	0x200023db

080051c4 <GPIO_Read_Pin>:

uint8_t GPIO_Read_Pin(uint8_t mask)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	71fb      	strb	r3, [r7, #7]
	uint16_t port_bits = LL_GPIO_ReadInputPort(GPIOB);
 80051ce:	480a      	ldr	r0, [pc, #40]	; (80051f8 <GPIO_Read_Pin+0x34>)
 80051d0:	f7ff fee4 	bl	8004f9c <LL_GPIO_ReadInputPort>
 80051d4:	4603      	mov	r3, r0
 80051d6:	81fb      	strh	r3, [r7, #14]
	return ((port_bits & (1 << mask)) != 0);
 80051d8:	89fa      	ldrh	r2, [r7, #14]
 80051da:	79fb      	ldrb	r3, [r7, #7]
 80051dc:	fa42 f303 	asr.w	r3, r2, r3
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	bf14      	ite	ne
 80051e8:	2301      	movne	r3, #1
 80051ea:	2300      	moveq	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40010c00 	.word	0x40010c00

080051fc <EncoderQueueInit>:

xQueueHandle encoder_queue;
EncoderRotateInfo xEncoder_info;

void EncoderQueueInit(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
	encoder_queue = xQueueCreate( 2, sizeof(EncoderRotateInfo));
 8005200:	2200      	movs	r2, #0
 8005202:	2104      	movs	r1, #4
 8005204:	2002      	movs	r0, #2
 8005206:	f7fe fb15 	bl	8003834 <xQueueGenericCreate>
 800520a:	4602      	mov	r2, r0
 800520c:	4b01      	ldr	r3, [pc, #4]	; (8005214 <EncoderQueueInit+0x18>)
 800520e:	601a      	str	r2, [r3, #0]
}
 8005210:	bf00      	nop
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20003050 	.word	0x20003050

08005218 <EncoderQueue_Send>:

void EncoderQueue_Send(uint16_t value, uint8_t button)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	460a      	mov	r2, r1
 8005222:	80fb      	strh	r3, [r7, #6]
 8005224:	4613      	mov	r3, r2
 8005226:	717b      	strb	r3, [r7, #5]
	const portTickType xTicksToWait = 100 / portTICK_RATE_MS;
 8005228:	2364      	movs	r3, #100	; 0x64
 800522a:	60fb      	str	r3, [r7, #12]
	xEncoder_info.button = button;
 800522c:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8005230:	4b08      	ldr	r3, [pc, #32]	; (8005254 <EncoderQueue_Send+0x3c>)
 8005232:	709a      	strb	r2, [r3, #2]
	xEncoder_info.state = value;
 8005234:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005238:	4b06      	ldr	r3, [pc, #24]	; (8005254 <EncoderQueue_Send+0x3c>)
 800523a:	801a      	strh	r2, [r3, #0]
	xQueueSendToBack(encoder_queue, &xEncoder_info, xTicksToWait);
 800523c:	4b06      	ldr	r3, [pc, #24]	; (8005258 <EncoderQueue_Send+0x40>)
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	2300      	movs	r3, #0
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4903      	ldr	r1, [pc, #12]	; (8005254 <EncoderQueue_Send+0x3c>)
 8005246:	f7fe fb4d 	bl	80038e4 <xQueueGenericSend>
}
 800524a:	bf00      	nop
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20003054 	.word	0x20003054
 8005258:	20003050 	.word	0x20003050

0800525c <EncoderQueue_Receive>:

void EncoderQueue_Receive(EncoderRotateInfo * value)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
	xQueueReceive(encoder_queue, &value, 100);
 8005264:	4b05      	ldr	r3, [pc, #20]	; (800527c <EncoderQueue_Receive+0x20>)
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	1d39      	adds	r1, r7, #4
 800526a:	2300      	movs	r3, #0
 800526c:	2264      	movs	r2, #100	; 0x64
 800526e:	f7fe fc33 	bl	8003ad8 <xQueueGenericReceive>
}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20003050 	.word	0x20003050

08005280 <EncoderQueue_IsElements>:

bool EncoderQueue_IsElements(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
	if(uxQueueMessagesWaiting(encoder_queue) > 0)
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <EncoderQueue_IsElements+0x20>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f7fe fd37 	bl	8003cfc <uxQueueMessagesWaiting>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <EncoderQueue_IsElements+0x18>
	{
		return true;
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <EncoderQueue_IsElements+0x1a>
	}
	return false;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20003050 	.word	0x20003050

080052a4 <pxEncoder>:
#include "encoder_queue.h"
#include "encoder.h"
#include "cmsis_os.h"

static void pxEncoder(void * arg)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	EncoderInit();
 80052ac:	f7fb fcd0 	bl	8000c50 <EncoderInit>
	static uint8_t encoder_button_step = 0;

	while(1)
	{
		switch(Encoder_State())
 80052b0:	f7fb fcd4 	bl	8000c5c <Encoder_State>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d827      	bhi.n	800530a <pxEncoder+0x66>
 80052ba:	a201      	add	r2, pc, #4	; (adr r2, 80052c0 <pxEncoder+0x1c>)
 80052bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c0:	0800530b 	.word	0x0800530b
 80052c4:	080052ed 	.word	0x080052ed
 80052c8:	080052fd 	.word	0x080052fd
 80052cc:	080052d1 	.word	0x080052d1
		{
			case eNone: break;
			case eButton:
			{
				encoder_button_step++;
 80052d0:	4b11      	ldr	r3, [pc, #68]	; (8005318 <pxEncoder+0x74>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	3301      	adds	r3, #1
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <pxEncoder+0x74>)
 80052da:	701a      	strb	r2, [r3, #0]
				if(encoder_button_step > 4)
 80052dc:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <pxEncoder+0x74>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d914      	bls.n	800530e <pxEncoder+0x6a>
				{
					encoder_button_step = 0;
 80052e4:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <pxEncoder+0x74>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	701a      	strb	r2, [r3, #0]
				}
				break;
 80052ea:	e010      	b.n	800530e <pxEncoder+0x6a>
			}
			case eLeft:
			{
				EncoderQueue_Send(-100, encoder_button_step);
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <pxEncoder+0x74>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	4619      	mov	r1, r3
 80052f2:	f64f 709c 	movw	r0, #65436	; 0xff9c
 80052f6:	f7ff ff8f 	bl	8005218 <EncoderQueue_Send>
				break;
 80052fa:	e009      	b.n	8005310 <pxEncoder+0x6c>
			}
			case eRight:
			{
				EncoderQueue_Send(100, encoder_button_step);
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <pxEncoder+0x74>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	4619      	mov	r1, r3
 8005302:	2064      	movs	r0, #100	; 0x64
 8005304:	f7ff ff88 	bl	8005218 <EncoderQueue_Send>
				break;
 8005308:	e002      	b.n	8005310 <pxEncoder+0x6c>
			}
			default: break;
 800530a:	bf00      	nop
 800530c:	e000      	b.n	8005310 <pxEncoder+0x6c>
				break;
 800530e:	bf00      	nop
		}
		osDelay(5);
 8005310:	2005      	movs	r0, #5
 8005312:	f7fd fe10 	bl	8002f36 <osDelay>
		switch(Encoder_State())
 8005316:	e7cb      	b.n	80052b0 <pxEncoder+0xc>
 8005318:	200023dc 	.word	0x200023dc

0800531c <EncoderTaskInit>:
	}
}

void EncoderTaskInit(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af02      	add	r7, sp, #8
	xTaskCreate(pxEncoder, "Encoder", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 8005322:	2300      	movs	r3, #0
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	2300      	movs	r3, #0
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	2300      	movs	r3, #0
 800532c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005330:	4903      	ldr	r1, [pc, #12]	; (8005340 <EncoderTaskInit+0x24>)
 8005332:	4804      	ldr	r0, [pc, #16]	; (8005344 <EncoderTaskInit+0x28>)
 8005334:	f7fe fe34 	bl	8003fa0 <xTaskCreate>
}
 8005338:	bf00      	nop
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	08008034 	.word	0x08008034
 8005344:	080052a5 	.word	0x080052a5

08005348 <espStart>:
#include <stdbool.h>

static uint8_t gMissConnection = 0;

static uint8_t espStart(int fails)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b092      	sub	sp, #72	; 0x48
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	if(GPIO_Read_Pin(1) == 0) //if encoder button pushed turn softAP
 8005350:	2001      	movs	r0, #1
 8005352:	f7ff ff37 	bl	80051c4 <GPIO_Read_Pin>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d123      	bne.n	80053a4 <espStart+0x5c>
	{
		while(ESP_SetModeSoftAP()==0 || ESP_SetParamsSoftAP("ESP", "12345678")==0 || ESP_StartTCPServer(80)==0)
 800535c:	e00f      	b.n	800537e <espStart+0x36>
		{
			gMissConnection++;
 800535e:	4b32      	ldr	r3, [pc, #200]	; (8005428 <espStart+0xe0>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	3301      	adds	r3, #1
 8005364:	b2da      	uxtb	r2, r3
 8005366:	4b30      	ldr	r3, [pc, #192]	; (8005428 <espStart+0xe0>)
 8005368:	701a      	strb	r2, [r3, #0]
			ESP_Resset();
 800536a:	f7fa ff29 	bl	80001c0 <ESP_Resset>
			if(gMissConnection >= fails)
 800536e:	4b2e      	ldr	r3, [pc, #184]	; (8005428 <espStart+0xe0>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	429a      	cmp	r2, r3
 8005378:	db01      	blt.n	800537e <espStart+0x36>
			{
				return 0;
 800537a:	2300      	movs	r3, #0
 800537c:	e04f      	b.n	800541e <espStart+0xd6>
		while(ESP_SetModeSoftAP()==0 || ESP_SetParamsSoftAP("ESP", "12345678")==0 || ESP_StartTCPServer(80)==0)
 800537e:	f7fa ff93 	bl	80002a8 <ESP_SetModeSoftAP>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0ea      	beq.n	800535e <espStart+0x16>
 8005388:	4928      	ldr	r1, [pc, #160]	; (800542c <espStart+0xe4>)
 800538a:	4829      	ldr	r0, [pc, #164]	; (8005430 <espStart+0xe8>)
 800538c:	f7fa ff9c 	bl	80002c8 <ESP_SetParamsSoftAP>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0e3      	beq.n	800535e <espStart+0x16>
 8005396:	2050      	movs	r0, #80	; 0x50
 8005398:	f7fb f80a 	bl	80003b0 <ESP_StartTCPServer>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0dd      	beq.n	800535e <espStart+0x16>
 80053a2:	e03b      	b.n	800541c <espStart+0xd4>
	}
	else //else read ssid and passwd from EEPROM and connect to wifi
	{
		char ssid[32], paswd[32];

		WifiFromEEPROM((uint8_t *)ssid, (uint8_t *)paswd);
 80053a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80053a8:	f107 0308 	add.w	r3, r7, #8
 80053ac:	4611      	mov	r1, r2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fb fd24 	bl	8000dfc <WifiFromEEPROM>

		while(strlen(ssid)==0 || ESP_SetModeStation()==0 || ESP_SetParamsStation(ssid, paswd)==0 || ESP_StartTCPServer(80)==0)
 80053b4:	e017      	b.n	80053e6 <espStart+0x9e>
		{
			WifiFromEEPROM((uint8_t *)ssid, (uint8_t *)paswd);
 80053b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80053ba:	f107 0308 	add.w	r3, r7, #8
 80053be:	4611      	mov	r1, r2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fb fd1b 	bl	8000dfc <WifiFromEEPROM>

			gMissConnection++;
 80053c6:	4b18      	ldr	r3, [pc, #96]	; (8005428 <espStart+0xe0>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	3301      	adds	r3, #1
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	4b16      	ldr	r3, [pc, #88]	; (8005428 <espStart+0xe0>)
 80053d0:	701a      	strb	r2, [r3, #0]
			ESP_Resset();
 80053d2:	f7fa fef5 	bl	80001c0 <ESP_Resset>
			if(gMissConnection >= fails)
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <espStart+0xe0>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	429a      	cmp	r2, r3
 80053e0:	db01      	blt.n	80053e6 <espStart+0x9e>
			{
				return 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e01b      	b.n	800541e <espStart+0xd6>
		while(strlen(ssid)==0 || ESP_SetModeStation()==0 || ESP_SetParamsStation(ssid, paswd)==0 || ESP_StartTCPServer(80)==0)
 80053e6:	f107 0308 	add.w	r3, r7, #8
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0e2      	beq.n	80053b6 <espStart+0x6e>
 80053f0:	f7fa ff52 	bl	8000298 <ESP_SetModeStation>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0dd      	beq.n	80053b6 <espStart+0x6e>
 80053fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80053fe:	f107 0308 	add.w	r3, r7, #8
 8005402:	4611      	mov	r1, r2
 8005404:	4618      	mov	r0, r3
 8005406:	f7fa ffa1 	bl	800034c <ESP_SetParamsStation>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0d2      	beq.n	80053b6 <espStart+0x6e>
 8005410:	2050      	movs	r0, #80	; 0x50
 8005412:	f7fa ffcd 	bl	80003b0 <ESP_StartTCPServer>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0cc      	beq.n	80053b6 <espStart+0x6e>
			}
		}
	}

	return 1;
 800541c:	2301      	movs	r3, #1
}
 800541e:	4618      	mov	r0, r3
 8005420:	3748      	adds	r7, #72	; 0x48
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	200023dd 	.word	0x200023dd
 800542c:	0800803c 	.word	0x0800803c
 8005430:	08008048 	.word	0x08008048

08005434 <pxESP>:

static void pxESP(void * arg)
{
 8005434:	b590      	push	{r4, r7, lr}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	uint8_t config_flag = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	73fb      	strb	r3, [r7, #15]
	StatusLedInit();
 8005440:	f001 faca 	bl	80069d8 <StatusLedInit>
	ESPInit();
 8005444:	f7fa feb4 	bl	80001b0 <ESPInit>

	if(!espStart(5))
 8005448:	2005      	movs	r0, #5
 800544a:	f7ff ff7d 	bl	8005348 <espStart>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <pxESP+0x24>
	{
		StatusLedON();
 8005454:	f001 fae8 	bl	8006a28 <StatusLedON>
	}

	while(1)
	{
		if(strlen(GetSSID()) > 1 && config_flag == 0) // check if change wifi settings
 8005458:	f7fb f934 	bl	80006c4 <GetSSID>
 800545c:	4603      	mov	r3, r0
 800545e:	4618      	mov	r0, r3
 8005460:	f7fa fe76 	bl	8000150 <strlen>
 8005464:	4603      	mov	r3, r0
 8005466:	2b01      	cmp	r3, #1
 8005468:	d923      	bls.n	80054b2 <pxESP+0x7e>
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d120      	bne.n	80054b2 <pxESP+0x7e>
		{
			ESP_StopTCPServer(80); //dummy for reset tcp server flag
 8005470:	2050      	movs	r0, #80	; 0x50
 8005472:	f7fa ffe3 	bl	800043c <ESP_StopTCPServer>
			config_flag = 1;
 8005476:	2301      	movs	r3, #1
 8005478:	73fb      	strb	r3, [r7, #15]

			if(ESP_SetModeBoth()==0 || ESP_SetParamsStation(GetSSID(), GetPasw())==0 || ESP_StartTCPServer(80)==0)
 800547a:	f7fa ff1d 	bl	80002b8 <ESP_SetModeBoth>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d012      	beq.n	80054aa <pxESP+0x76>
 8005484:	f7fb f91e 	bl	80006c4 <GetSSID>
 8005488:	4604      	mov	r4, r0
 800548a:	f7fb f943 	bl	8000714 <GetPasw>
 800548e:	4603      	mov	r3, r0
 8005490:	4619      	mov	r1, r3
 8005492:	4620      	mov	r0, r4
 8005494:	f7fa ff5a 	bl	800034c <ESP_SetParamsStation>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <pxESP+0x76>
 800549e:	2050      	movs	r0, #80	; 0x50
 80054a0:	f7fa ff86 	bl	80003b0 <ESP_StartTCPServer>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <pxESP+0x7a>
			{
				config_flag = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	73fb      	strb	r3, [r7, #15]
			}
			//APModeBlink();
			WifiToEEPROM();
 80054ae:	f7fb fc6c 	bl	8000d8a <WifiToEEPROM>
		}

		ESP_Request(PAGES, FUNCTIONS, 4); // process requests
 80054b2:	2204      	movs	r2, #4
 80054b4:	4903      	ldr	r1, [pc, #12]	; (80054c4 <pxESP+0x90>)
 80054b6:	4804      	ldr	r0, [pc, #16]	; (80054c8 <pxESP+0x94>)
 80054b8:	f7fb ff8c 	bl	80013d4 <ESP_Request>
		osDelay(10);
 80054bc:	200a      	movs	r0, #10
 80054be:	f7fd fd3a 	bl	8002f36 <osDelay>
		if(strlen(GetSSID()) > 1 && config_flag == 0) // check if change wifi settings
 80054c2:	e7c9      	b.n	8005458 <pxESP+0x24>
 80054c4:	08008074 	.word	0x08008074
 80054c8:	20000078 	.word	0x20000078

080054cc <ESPTaskInit>:
	}
}


void ESPTaskInit(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af02      	add	r7, sp, #8
	xTaskCreate(pxESP, "ESP", configMINIMAL_STACK_SIZE, NULL, osPriorityAboveNormal, NULL);
 80054d2:	2300      	movs	r3, #0
 80054d4:	9301      	str	r3, [sp, #4]
 80054d6:	2301      	movs	r3, #1
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	2300      	movs	r3, #0
 80054dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054e0:	4903      	ldr	r1, [pc, #12]	; (80054f0 <ESPTaskInit+0x24>)
 80054e2:	4804      	ldr	r0, [pc, #16]	; (80054f4 <ESPTaskInit+0x28>)
 80054e4:	f7fe fd5c 	bl	8003fa0 <xTaskCreate>
}
 80054e8:	bf00      	nop
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	08008048 	.word	0x08008048
 80054f4:	08005435 	.word	0x08005435

080054f8 <LL_I2C_EnableClockStretching>:
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	601a      	str	r2, [r3, #0]
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr

08005516 <LL_I2C_DisableGeneralCall>:
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	601a      	str	r2, [r3, #0]
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <LL_I2C_SetOwnAddress2>:
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60da      	str	r2, [r3, #12]
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr

08005558 <LL_I2C_DisableOwnAddress2>:
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f023 0201 	bic.w	r2, r3, #1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	60da      	str	r2, [r3, #12]
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr

08005576 <LL_I2C_IsActiveFlag_TXE>:
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005586:	2b80      	cmp	r3, #128	; 0x80
 8005588:	bf0c      	ite	eq
 800558a:	2301      	moveq	r3, #1
 800558c:	2300      	movne	r3, #0
 800558e:	b2db      	uxtb	r3, r3
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr

0800559a <LL_I2C_IsActiveFlag_RXNE>:
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	bf0c      	ite	eq
 80055ae:	2301      	moveq	r3, #1
 80055b0:	2300      	movne	r3, #0
 80055b2:	b2db      	uxtb	r3, r3
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bc80      	pop	{r7}
 80055bc:	4770      	bx	lr

080055be <LL_I2C_IsActiveFlag_SB>:
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	bf0c      	ite	eq
 80055d2:	2301      	moveq	r3, #1
 80055d4:	2300      	movne	r3, #0
 80055d6:	b2db      	uxtb	r3, r3
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr

080055e2 <LL_I2C_IsActiveFlag_ADDR>:
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	bf0c      	ite	eq
 80055f6:	2301      	moveq	r3, #1
 80055f8:	2300      	movne	r3, #0
 80055fa:	b2db      	uxtb	r3, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr

08005606 <LL_I2C_ClearFlag_ADDR>:
{
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  tmpreg = I2Cx->SR1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8005614:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800561c:	68fb      	ldr	r3, [r7, #12]
}
 800561e:	bf00      	nop
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr

08005628 <LL_I2C_AcknowledgeNextData>:
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	601a      	str	r2, [r3, #0]
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr

0800564c <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	601a      	str	r2, [r3, #0]
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr

0800566a <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	601a      	str	r2, [r3, #0]
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr

08005688 <LL_I2C_DisableBitPOS>:
  * @rmtoll CR1          POS           LL_I2C_DisableBitPOS
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableBitPOS(I2C_TypeDef *I2Cx)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	601a      	str	r2, [r3, #0]
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr

080056a6 <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	b2db      	uxtb	r3, r3
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	460b      	mov	r3, r1
 80056c8:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	611a      	str	r2, [r3, #16]
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr

080056e4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80056ec:	4908      	ldr	r1, [pc, #32]	; (8005710 <LL_APB1_GRP1_EnableClock+0x2c>)
 80056ee:	4b08      	ldr	r3, [pc, #32]	; (8005710 <LL_APB1_GRP1_EnableClock+0x2c>)
 80056f0:	69da      	ldr	r2, [r3, #28]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80056f8:	4b05      	ldr	r3, [pc, #20]	; (8005710 <LL_APB1_GRP1_EnableClock+0x2c>)
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4013      	ands	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005702:	68fb      	ldr	r3, [r7, #12]
}
 8005704:	bf00      	nop
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40021000 	.word	0x40021000

08005714 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800571c:	4908      	ldr	r1, [pc, #32]	; (8005740 <LL_APB2_GRP1_EnableClock+0x2c>)
 800571e:	4b08      	ldr	r3, [pc, #32]	; (8005740 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4313      	orrs	r3, r2
 8005726:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <LL_APB2_GRP1_EnableClock+0x2c>)
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4013      	ands	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005732:	68fb      	ldr	r3, [r7, #12]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40021000 	.word	0x40021000

08005744 <MX_I2C2_Init>:
#define I2C_REQUEST_READ                        0x01
#define SLAVE_OWN_ADDRESS                       0xA0
#define TIMEOUT									100

void MX_I2C2_Init(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08c      	sub	sp, #48	; 0x30
 8005748:	af00      	add	r7, sp, #0
	LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800574a:	f107 0318 	add.w	r3, r7, #24
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	605a      	str	r2, [r3, #4]
 8005754:	609a      	str	r2, [r3, #8]
 8005756:	60da      	str	r2, [r3, #12]
 8005758:	611a      	str	r2, [r3, #16]
 800575a:	615a      	str	r2, [r3, #20]
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800575c:	1d3b      	adds	r3, r7, #4
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	605a      	str	r2, [r3, #4]
 8005764:	609a      	str	r2, [r3, #8]
 8005766:	60da      	str	r2, [r3, #12]
 8005768:	611a      	str	r2, [r3, #16]

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800576a:	2008      	movs	r0, #8
 800576c:	f7ff ffd2 	bl	8005714 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8005770:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8005774:	f7ff ffb6 	bl	80056e4 <LL_APB1_GRP1_EnableClock>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8005778:	4b18      	ldr	r3, [pc, #96]	; (80057dc <MX_I2C2_Init+0x98>)
 800577a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800577c:	2309      	movs	r3, #9
 800577e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005780:	2303      	movs	r3, #3
 8005782:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8005784:	2304      	movs	r3, #4
 8005786:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005788:	1d3b      	adds	r3, r7, #4
 800578a:	4619      	mov	r1, r3
 800578c:	4814      	ldr	r0, [pc, #80]	; (80057e0 <MX_I2C2_Init+0x9c>)
 800578e:	f7fc fca0 	bl	80020d2 <LL_GPIO_Init>

	LL_I2C_DisableOwnAddress2(I2C2);
 8005792:	4814      	ldr	r0, [pc, #80]	; (80057e4 <MX_I2C2_Init+0xa0>)
 8005794:	f7ff fee0 	bl	8005558 <LL_I2C_DisableOwnAddress2>
	LL_I2C_DisableGeneralCall(I2C2);
 8005798:	4812      	ldr	r0, [pc, #72]	; (80057e4 <MX_I2C2_Init+0xa0>)
 800579a:	f7ff febc 	bl	8005516 <LL_I2C_DisableGeneralCall>
	LL_I2C_EnableClockStretching(I2C2);
 800579e:	4811      	ldr	r0, [pc, #68]	; (80057e4 <MX_I2C2_Init+0xa0>)
 80057a0:	f7ff feaa 	bl	80054f8 <LL_I2C_EnableClockStretching>
	I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61bb      	str	r3, [r7, #24]
	I2C_InitStruct.ClockSpeed = 100000;
 80057a8:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <MX_I2C2_Init+0xa4>)
 80057aa:	61fb      	str	r3, [r7, #28]
	I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80057ac:	2300      	movs	r3, #0
 80057ae:	623b      	str	r3, [r7, #32]
	I2C_InitStruct.OwnAddress1 = 0;
 80057b0:	2300      	movs	r3, #0
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80057b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057b8:	62bb      	str	r3, [r7, #40]	; 0x28
	I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80057ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057be:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_I2C_Init(I2C2, &I2C_InitStruct);
 80057c0:	f107 0318 	add.w	r3, r7, #24
 80057c4:	4619      	mov	r1, r3
 80057c6:	4807      	ldr	r0, [pc, #28]	; (80057e4 <MX_I2C2_Init+0xa0>)
 80057c8:	f7fc fdce 	bl	8002368 <LL_I2C_Init>
	LL_I2C_SetOwnAddress2(I2C2, 0);
 80057cc:	2100      	movs	r1, #0
 80057ce:	4805      	ldr	r0, [pc, #20]	; (80057e4 <MX_I2C2_Init+0xa0>)
 80057d0:	f7ff feb0 	bl	8005534 <LL_I2C_SetOwnAddress2>
}
 80057d4:	bf00      	nop
 80057d6:	3730      	adds	r7, #48	; 0x30
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	040c000c 	.word	0x040c000c
 80057e0:	40010c00 	.word	0x40010c00
 80057e4:	40005800 	.word	0x40005800
 80057e8:	000186a0 	.word	0x000186a0

080057ec <I2C2_SendData>:

bool I2C2_SendData(uint16_t addr, uint8_t * data, uint32_t data_length)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	81fb      	strh	r3, [r7, #14]
	//LL_I2C_Enable(I2C2);
	LL_I2C_DisableBitPOS(I2C2);
 80057fa:	482f      	ldr	r0, [pc, #188]	; (80058b8 <I2C2_SendData+0xcc>)
 80057fc:	f7ff ff44 	bl	8005688 <LL_I2C_DisableBitPOS>
	LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_ACK);
 8005800:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005804:	482c      	ldr	r0, [pc, #176]	; (80058b8 <I2C2_SendData+0xcc>)
 8005806:	f7ff ff0f 	bl	8005628 <LL_I2C_AcknowledgeNextData>
	LL_I2C_GenerateStartCondition(I2C2);
 800580a:	482b      	ldr	r0, [pc, #172]	; (80058b8 <I2C2_SendData+0xcc>)
 800580c:	f7ff ff1e 	bl	800564c <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C2));
 8005810:	bf00      	nop
 8005812:	4829      	ldr	r0, [pc, #164]	; (80058b8 <I2C2_SendData+0xcc>)
 8005814:	f7ff fed3 	bl	80055be <LL_I2C_IsActiveFlag_SB>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0f9      	beq.n	8005812 <I2C2_SendData+0x26>

	(void) I2C2->SR1;
 800581e:	4b26      	ldr	r3, [pc, #152]	; (80058b8 <I2C2_SendData+0xcc>)
 8005820:	695b      	ldr	r3, [r3, #20]
	LL_I2C_TransmitData8(I2C2, SLAVE_OWN_ADDRESS | I2C_REQUEST_WRITE);
 8005822:	21a0      	movs	r1, #160	; 0xa0
 8005824:	4824      	ldr	r0, [pc, #144]	; (80058b8 <I2C2_SendData+0xcc>)
 8005826:	f7ff ff4a 	bl	80056be <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C2));
 800582a:	bf00      	nop
 800582c:	4822      	ldr	r0, [pc, #136]	; (80058b8 <I2C2_SendData+0xcc>)
 800582e:	f7ff fed8 	bl	80055e2 <LL_I2C_IsActiveFlag_ADDR>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f9      	beq.n	800582c <I2C2_SendData+0x40>

	LL_I2C_ClearFlag_ADDR(I2C2);
 8005838:	481f      	ldr	r0, [pc, #124]	; (80058b8 <I2C2_SendData+0xcc>)
 800583a:	f7ff fee4 	bl	8005606 <LL_I2C_ClearFlag_ADDR>

	LL_I2C_TransmitData8(I2C2, (uint8_t) (addr>>8));
 800583e:	89fb      	ldrh	r3, [r7, #14]
 8005840:	0a1b      	lsrs	r3, r3, #8
 8005842:	b29b      	uxth	r3, r3
 8005844:	b2db      	uxtb	r3, r3
 8005846:	4619      	mov	r1, r3
 8005848:	481b      	ldr	r0, [pc, #108]	; (80058b8 <I2C2_SendData+0xcc>)
 800584a:	f7ff ff38 	bl	80056be <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C2));
 800584e:	bf00      	nop
 8005850:	4819      	ldr	r0, [pc, #100]	; (80058b8 <I2C2_SendData+0xcc>)
 8005852:	f7ff fe90 	bl	8005576 <LL_I2C_IsActiveFlag_TXE>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0f9      	beq.n	8005850 <I2C2_SendData+0x64>

	LL_I2C_TransmitData8(I2C2, (uint8_t) addr);
 800585c:	89fb      	ldrh	r3, [r7, #14]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	4619      	mov	r1, r3
 8005862:	4815      	ldr	r0, [pc, #84]	; (80058b8 <I2C2_SendData+0xcc>)
 8005864:	f7ff ff2b 	bl	80056be <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C2));
 8005868:	bf00      	nop
 800586a:	4813      	ldr	r0, [pc, #76]	; (80058b8 <I2C2_SendData+0xcc>)
 800586c:	f7ff fe83 	bl	8005576 <LL_I2C_IsActiveFlag_TXE>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f9      	beq.n	800586a <I2C2_SendData+0x7e>

	for(int i = 0; i < data_length; i++)
 8005876:	2300      	movs	r3, #0
 8005878:	617b      	str	r3, [r7, #20]
 800587a:	e011      	b.n	80058a0 <I2C2_SendData+0xb4>
	{
		LL_I2C_TransmitData8(I2C2, data[i]);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	4413      	add	r3, r2
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	4619      	mov	r1, r3
 8005886:	480c      	ldr	r0, [pc, #48]	; (80058b8 <I2C2_SendData+0xcc>)
 8005888:	f7ff ff19 	bl	80056be <LL_I2C_TransmitData8>
		while(!LL_I2C_IsActiveFlag_TXE(I2C2));
 800588c:	bf00      	nop
 800588e:	480a      	ldr	r0, [pc, #40]	; (80058b8 <I2C2_SendData+0xcc>)
 8005890:	f7ff fe71 	bl	8005576 <LL_I2C_IsActiveFlag_TXE>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0f9      	beq.n	800588e <I2C2_SendData+0xa2>
	for(int i = 0; i < data_length; i++)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	3301      	adds	r3, #1
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d3e9      	bcc.n	800587c <I2C2_SendData+0x90>
	}
	LL_I2C_GenerateStopCondition(I2C2);
 80058a8:	4803      	ldr	r0, [pc, #12]	; (80058b8 <I2C2_SendData+0xcc>)
 80058aa:	f7ff fede 	bl	800566a <LL_I2C_GenerateStopCondition>
	//LL_I2C_Disable(I2C2);
	return 1;
 80058ae:	2301      	movs	r3, #1
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40005800 	.word	0x40005800

080058bc <I2C2_ReadData>:

bool I2C2_ReadData(uint16_t addr, uint8_t * data, uint32_t data_length)
{
 80058bc:	b590      	push	{r4, r7, lr}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4603      	mov	r3, r0
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	81fb      	strh	r3, [r7, #14]
	//LL_I2C_Enable(I2C2);
	LL_I2C_DisableBitPOS(I2C2);
 80058ca:	4849      	ldr	r0, [pc, #292]	; (80059f0 <I2C2_ReadData+0x134>)
 80058cc:	f7ff fedc 	bl	8005688 <LL_I2C_DisableBitPOS>
	LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_ACK);
 80058d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058d4:	4846      	ldr	r0, [pc, #280]	; (80059f0 <I2C2_ReadData+0x134>)
 80058d6:	f7ff fea7 	bl	8005628 <LL_I2C_AcknowledgeNextData>
	LL_I2C_GenerateStartCondition(I2C2);
 80058da:	4845      	ldr	r0, [pc, #276]	; (80059f0 <I2C2_ReadData+0x134>)
 80058dc:	f7ff feb6 	bl	800564c <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C2));
 80058e0:	bf00      	nop
 80058e2:	4843      	ldr	r0, [pc, #268]	; (80059f0 <I2C2_ReadData+0x134>)
 80058e4:	f7ff fe6b 	bl	80055be <LL_I2C_IsActiveFlag_SB>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f9      	beq.n	80058e2 <I2C2_ReadData+0x26>

	(void) I2C2->SR1;
 80058ee:	4b40      	ldr	r3, [pc, #256]	; (80059f0 <I2C2_ReadData+0x134>)
 80058f0:	695b      	ldr	r3, [r3, #20]
	LL_I2C_TransmitData8(I2C2, SLAVE_OWN_ADDRESS | I2C_REQUEST_WRITE);
 80058f2:	21a0      	movs	r1, #160	; 0xa0
 80058f4:	483e      	ldr	r0, [pc, #248]	; (80059f0 <I2C2_ReadData+0x134>)
 80058f6:	f7ff fee2 	bl	80056be <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C2));
 80058fa:	bf00      	nop
 80058fc:	483c      	ldr	r0, [pc, #240]	; (80059f0 <I2C2_ReadData+0x134>)
 80058fe:	f7ff fe70 	bl	80055e2 <LL_I2C_IsActiveFlag_ADDR>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d0f9      	beq.n	80058fc <I2C2_ReadData+0x40>

	LL_I2C_ClearFlag_ADDR(I2C2);
 8005908:	4839      	ldr	r0, [pc, #228]	; (80059f0 <I2C2_ReadData+0x134>)
 800590a:	f7ff fe7c 	bl	8005606 <LL_I2C_ClearFlag_ADDR>
	LL_I2C_TransmitData8(I2C2, (uint8_t) (addr>>8));
 800590e:	89fb      	ldrh	r3, [r7, #14]
 8005910:	0a1b      	lsrs	r3, r3, #8
 8005912:	b29b      	uxth	r3, r3
 8005914:	b2db      	uxtb	r3, r3
 8005916:	4619      	mov	r1, r3
 8005918:	4835      	ldr	r0, [pc, #212]	; (80059f0 <I2C2_ReadData+0x134>)
 800591a:	f7ff fed0 	bl	80056be <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C2));
 800591e:	bf00      	nop
 8005920:	4833      	ldr	r0, [pc, #204]	; (80059f0 <I2C2_ReadData+0x134>)
 8005922:	f7ff fe28 	bl	8005576 <LL_I2C_IsActiveFlag_TXE>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0f9      	beq.n	8005920 <I2C2_ReadData+0x64>

	LL_I2C_TransmitData8(I2C2, (uint8_t) addr);
 800592c:	89fb      	ldrh	r3, [r7, #14]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	4619      	mov	r1, r3
 8005932:	482f      	ldr	r0, [pc, #188]	; (80059f0 <I2C2_ReadData+0x134>)
 8005934:	f7ff fec3 	bl	80056be <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C2));
 8005938:	bf00      	nop
 800593a:	482d      	ldr	r0, [pc, #180]	; (80059f0 <I2C2_ReadData+0x134>)
 800593c:	f7ff fe1b 	bl	8005576 <LL_I2C_IsActiveFlag_TXE>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0f9      	beq.n	800593a <I2C2_ReadData+0x7e>

	LL_I2C_GenerateStartCondition(I2C2);
 8005946:	482a      	ldr	r0, [pc, #168]	; (80059f0 <I2C2_ReadData+0x134>)
 8005948:	f7ff fe80 	bl	800564c <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C2));
 800594c:	bf00      	nop
 800594e:	4828      	ldr	r0, [pc, #160]	; (80059f0 <I2C2_ReadData+0x134>)
 8005950:	f7ff fe35 	bl	80055be <LL_I2C_IsActiveFlag_SB>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0f9      	beq.n	800594e <I2C2_ReadData+0x92>
	(void) I2C2->SR1;
 800595a:	4b25      	ldr	r3, [pc, #148]	; (80059f0 <I2C2_ReadData+0x134>)
 800595c:	695b      	ldr	r3, [r3, #20]
	LL_I2C_TransmitData8(I2C2, SLAVE_OWN_ADDRESS | I2C_REQUEST_READ);
 800595e:	21a1      	movs	r1, #161	; 0xa1
 8005960:	4823      	ldr	r0, [pc, #140]	; (80059f0 <I2C2_ReadData+0x134>)
 8005962:	f7ff feac 	bl	80056be <LL_I2C_TransmitData8>
	while (!LL_I2C_IsActiveFlag_ADDR(I2C2));
 8005966:	bf00      	nop
 8005968:	4821      	ldr	r0, [pc, #132]	; (80059f0 <I2C2_ReadData+0x134>)
 800596a:	f7ff fe3a 	bl	80055e2 <LL_I2C_IsActiveFlag_ADDR>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0f9      	beq.n	8005968 <I2C2_ReadData+0xac>
	LL_I2C_ClearFlag_ADDR(I2C2);
 8005974:	481e      	ldr	r0, [pc, #120]	; (80059f0 <I2C2_ReadData+0x134>)
 8005976:	f7ff fe46 	bl	8005606 <LL_I2C_ClearFlag_ADDR>
	for(int i = 0; i < data_length; i++)
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	e02d      	b.n	80059dc <I2C2_ReadData+0x120>
	{
		if(i < (data_length-1))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	1e5a      	subs	r2, r3, #1
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	429a      	cmp	r2, r3
 8005988:	d90f      	bls.n	80059aa <I2C2_ReadData+0xee>
		{
			while(!LL_I2C_IsActiveFlag_RXNE(I2C2));
 800598a:	bf00      	nop
 800598c:	4818      	ldr	r0, [pc, #96]	; (80059f0 <I2C2_ReadData+0x134>)
 800598e:	f7ff fe04 	bl	800559a <LL_I2C_IsActiveFlag_RXNE>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f9      	beq.n	800598c <I2C2_ReadData+0xd0>
			data[i] = LL_I2C_ReceiveData8(I2C2);
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	18d4      	adds	r4, r2, r3
 800599e:	4814      	ldr	r0, [pc, #80]	; (80059f0 <I2C2_ReadData+0x134>)
 80059a0:	f7ff fe81 	bl	80056a6 <LL_I2C_ReceiveData8>
 80059a4:	4603      	mov	r3, r0
 80059a6:	7023      	strb	r3, [r4, #0]
 80059a8:	e015      	b.n	80059d6 <I2C2_ReadData+0x11a>
		}
		else
		{
			LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_NACK);
 80059aa:	2100      	movs	r1, #0
 80059ac:	4810      	ldr	r0, [pc, #64]	; (80059f0 <I2C2_ReadData+0x134>)
 80059ae:	f7ff fe3b 	bl	8005628 <LL_I2C_AcknowledgeNextData>
			LL_I2C_GenerateStopCondition(I2C2);
 80059b2:	480f      	ldr	r0, [pc, #60]	; (80059f0 <I2C2_ReadData+0x134>)
 80059b4:	f7ff fe59 	bl	800566a <LL_I2C_GenerateStopCondition>
			while(!LL_I2C_IsActiveFlag_RXNE(I2C2));
 80059b8:	bf00      	nop
 80059ba:	480d      	ldr	r0, [pc, #52]	; (80059f0 <I2C2_ReadData+0x134>)
 80059bc:	f7ff fded 	bl	800559a <LL_I2C_IsActiveFlag_RXNE>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f9      	beq.n	80059ba <I2C2_ReadData+0xfe>
			data[i] = LL_I2C_ReceiveData8(I2C2);
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	18d4      	adds	r4, r2, r3
 80059cc:	4808      	ldr	r0, [pc, #32]	; (80059f0 <I2C2_ReadData+0x134>)
 80059ce:	f7ff fe6a 	bl	80056a6 <LL_I2C_ReceiveData8>
 80059d2:	4603      	mov	r3, r0
 80059d4:	7023      	strb	r3, [r4, #0]
	for(int i = 0; i < data_length; i++)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	3301      	adds	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d3cd      	bcc.n	8005980 <I2C2_ReadData+0xc4>
		}
	}
	//LL_I2C_Disable(I2C2);
	return 1;
 80059e4:	2301      	movs	r3, #1
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd90      	pop	{r4, r7, pc}
 80059ee:	bf00      	nop
 80059f0:	40005800 	.word	0x40005800

080059f4 <NVIC_GetPriorityGrouping>:
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059f8:	4b04      	ldr	r3, [pc, #16]	; (8005a0c <NVIC_GetPriorityGrouping+0x18>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	0a1b      	lsrs	r3, r3, #8
 80059fe:	f003 0307 	and.w	r3, r3, #7
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	e000ed00 	.word	0xe000ed00

08005a10 <NVIC_EnableIRQ>:
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	4603      	mov	r3, r0
 8005a18:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005a1a:	4908      	ldr	r1, [pc, #32]	; (8005a3c <NVIC_EnableIRQ+0x2c>)
 8005a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a20:	095b      	lsrs	r3, r3, #5
 8005a22:	79fa      	ldrb	r2, [r7, #7]
 8005a24:	f002 021f 	and.w	r2, r2, #31
 8005a28:	2001      	movs	r0, #1
 8005a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr
 8005a3c:	e000e100 	.word	0xe000e100

08005a40 <NVIC_SetPriority>:
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	6039      	str	r1, [r7, #0]
 8005a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8005a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	da0b      	bge.n	8005a6c <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a54:	490d      	ldr	r1, [pc, #52]	; (8005a8c <NVIC_SetPriority+0x4c>)
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	f003 030f 	and.w	r3, r3, #15
 8005a5c:	3b04      	subs	r3, #4
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	0112      	lsls	r2, r2, #4
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	440b      	add	r3, r1
 8005a68:	761a      	strb	r2, [r3, #24]
}
 8005a6a:	e009      	b.n	8005a80 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a6c:	4908      	ldr	r1, [pc, #32]	; (8005a90 <NVIC_SetPriority+0x50>)
 8005a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	0112      	lsls	r2, r2, #4
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	440b      	add	r3, r1
 8005a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bc80      	pop	{r7}
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	e000ed00 	.word	0xe000ed00
 8005a90:	e000e100 	.word	0xe000e100

08005a94 <NVIC_EncodePriority>:
{
 8005a94:	b480      	push	{r7}
 8005a96:	b089      	sub	sp, #36	; 0x24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f1c3 0307 	rsb	r3, r3, #7
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	bf28      	it	cs
 8005ab2:	2304      	movcs	r3, #4
 8005ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	2b06      	cmp	r3, #6
 8005abc:	d902      	bls.n	8005ac4 <NVIC_EncodePriority+0x30>
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	3b03      	subs	r3, #3
 8005ac2:	e000      	b.n	8005ac6 <NVIC_EncodePriority+0x32>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ac8:	2201      	movs	r2, #1
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	1e5a      	subs	r2, r3, #1
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	401a      	ands	r2, r3
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ada:	2101      	movs	r1, #1
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae2:	1e59      	subs	r1, r3, #1
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ae8:	4313      	orrs	r3, r2
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3724      	adds	r7, #36	; 0x24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr

08005af4 <LL_ADC_REG_SetSequencerRanks>:
{
 8005af4:	b490      	push	{r4, r7}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	332c      	adds	r3, #44	; 0x2c
 8005b04:	4619      	mov	r1, r3
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005b0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	fa93 f3a3 	rbit	r3, r3
 8005b18:	613b      	str	r3, [r7, #16]
  return(result);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	fab3 f383 	clz	r3, r3
 8005b20:	fa22 f303 	lsr.w	r3, r2, r3
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	440b      	add	r3, r1
 8005b28:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8005b2a:	6822      	ldr	r2, [r4, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f003 031f 	and.w	r3, r3, #31
 8005b32:	211f      	movs	r1, #31
 8005b34:	fa01 f303 	lsl.w	r3, r1, r3
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	401a      	ands	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f003 011f 	and.w	r1, r3, #31
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f003 031f 	and.w	r3, r3, #31
 8005b48:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	6023      	str	r3, [r4, #0]
}
 8005b50:	bf00      	nop
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bc90      	pop	{r4, r7}
 8005b58:	4770      	bx	lr

08005b5a <LL_ADC_SetChannelSamplingTime>:
{
 8005b5a:	b490      	push	{r4, r7}
 8005b5c:	b08a      	sub	sp, #40	; 0x28
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	607a      	str	r2, [r7, #4]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	330c      	adds	r3, #12
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8005b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	fa93 f3a3 	rbit	r3, r3
 8005b7e:	613b      	str	r3, [r7, #16]
  return(result);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	fab3 f383 	clz	r3, r3
 8005b86:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8005b90:	6822      	ldr	r2, [r4, #0]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8005b98:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8005b9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	fa93 f3a3 	rbit	r3, r3
 8005ba4:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	fab3 f383 	clz	r3, r3
 8005bac:	fa21 f303 	lsr.w	r3, r1, r3
 8005bb0:	2107      	movs	r1, #7
 8005bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	401a      	ands	r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8005bc0:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	fa93 f3a3 	rbit	r3, r3
 8005bcc:	623b      	str	r3, [r7, #32]
  return(result);
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	fab3 f383 	clz	r3, r3
 8005bd4:	fa21 f303 	lsr.w	r3, r1, r3
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	4313      	orrs	r3, r2
 8005be0:	6023      	str	r3, [r4, #0]
}
 8005be2:	bf00      	nop
 8005be4:	3728      	adds	r7, #40	; 0x28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc90      	pop	{r4, r7}
 8005bea:	4770      	bx	lr

08005bec <LL_ADC_Enable>:
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f043 0201 	orr.w	r2, r3, #1
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	609a      	str	r2, [r3, #8]
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr

08005c0a <LL_ADC_IsEnabled>:
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	bf0c      	ite	eq
 8005c1e:	2301      	moveq	r3, #1
 8005c20:	2300      	movne	r3, #0
 8005c22:	b2db      	uxtb	r3, r3
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr

08005c2e <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f043 0204 	orr.w	r2, r3, #4
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	609a      	str	r2, [r3, #8]
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bc80      	pop	{r7}
 8005c4a:	4770      	bx	lr

08005c4c <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	bf0c      	ite	eq
 8005c60:	2301      	moveq	r3, #1
 8005c62:	2300      	movne	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr

08005c70 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7c:	b29b      	uxth	r3, r3
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bc80      	pop	{r7}
 8005c86:	4770      	bx	lr

08005c88 <LL_ADC_IsActiveFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2301      	moveq	r3, #1
 8005c9e:	2300      	movne	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr

08005cac <LL_ADC_ClearFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f06f 0202 	mvn.w	r2, #2
 8005cba:	601a      	str	r2, [r3, #0]
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bc80      	pop	{r7}
 8005cc4:	4770      	bx	lr

08005cc6 <LL_ADC_EnableIT_EOS>:
  * @rmtoll CR1      EOCIE          LL_ADC_EnableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOS(ADC_TypeDef *ADCx)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  SET_BIT(ADCx->CR1, ADC_CR1_EOCIE);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f043 0220 	orr.w	r2, r3, #32
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	605a      	str	r2, [r3, #4]
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bc80      	pop	{r7}
 8005ce2:	4770      	bx	lr

08005ce4 <LL_APB2_GRP1_EnableClock>:
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005cec:	4908      	ldr	r1, [pc, #32]	; (8005d10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005cee:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005cf0:	699a      	ldr	r2, [r3, #24]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005cfa:	699a      	ldr	r2, [r3, #24]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005d02:	68fb      	ldr	r3, [r7, #12]
}
 8005d04:	bf00      	nop
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40021000 	.word	0x40021000

08005d14 <MX_ADC1_Init>:
#include "ldr_driver.h"

uint16_t ADC1_value = 0;

void MX_ADC1_Init(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08e      	sub	sp, #56	; 0x38
 8005d18:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8005d1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8005d24:	2300      	movs	r3, #0
 8005d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8005d28:	f107 0318 	add.w	r3, r7, #24
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	609a      	str	r2, [r3, #8]
 8005d34:	60da      	str	r2, [r3, #12]
 8005d36:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d38:	1d3b      	adds	r3, r7, #4
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	605a      	str	r2, [r3, #4]
 8005d40:	609a      	str	r2, [r3, #8]
 8005d42:	60da      	str	r2, [r3, #12]
 8005d44:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8005d46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005d4a:	f7ff ffcb 	bl	8005ce4 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8005d4e:	2004      	movs	r0, #4
 8005d50:	f7ff ffc8 	bl	8005ce4 <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA4   ------> ADC1_IN4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8005d54:	f241 0310 	movw	r3, #4112	; 0x1010
 8005d58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d5e:	1d3b      	adds	r3, r7, #4
 8005d60:	4619      	mov	r1, r3
 8005d62:	4828      	ldr	r0, [pc, #160]	; (8005e04 <MX_ADC1_Init+0xf0>)
 8005d64:	f7fc f9b5 	bl	80020d2 <LL_GPIO_Init>

  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8005d70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d74:	4619      	mov	r1, r3
 8005d76:	4824      	ldr	r0, [pc, #144]	; (8005e08 <MX_ADC1_Init+0xf4>)
 8005d78:	f7fb ff82 	bl	8001c80 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8005d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d84:	4619      	mov	r1, r3
 8005d86:	4820      	ldr	r0, [pc, #128]	; (8005e08 <MX_ADC1_Init+0xf4>)
 8005d88:	f7fb ff48 	bl	8001c1c <LL_ADC_CommonInit>

  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8005d8c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8005d90:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8005d92:	2300      	movs	r3, #0
 8005d94:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8005da2:	f107 0318 	add.w	r3, r7, #24
 8005da6:	4619      	mov	r1, r3
 8005da8:	4817      	ldr	r0, [pc, #92]	; (8005e08 <MX_ADC1_Init+0xf4>)
 8005daa:	f7fb ff90 	bl	8001cce <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8005dae:	4a17      	ldr	r2, [pc, #92]	; (8005e0c <MX_ADC1_Init+0xf8>)
 8005db0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005db4:	4814      	ldr	r0, [pc, #80]	; (8005e08 <MX_ADC1_Init+0xf4>)
 8005db6:	f7ff fe9d 	bl	8005af4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8005dba:	2200      	movs	r2, #0
 8005dbc:	4913      	ldr	r1, [pc, #76]	; (8005e0c <MX_ADC1_Init+0xf8>)
 8005dbe:	4812      	ldr	r0, [pc, #72]	; (8005e08 <MX_ADC1_Init+0xf4>)
 8005dc0:	f7ff fecb 	bl	8005b5a <LL_ADC_SetChannelSamplingTime>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005dc4:	f7ff fe16 	bl	80059f4 <NVIC_GetPriorityGrouping>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2100      	movs	r1, #0
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff fe60 	bl	8005a94 <NVIC_EncodePriority>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	2012      	movs	r0, #18
 8005dda:	f7ff fe31 	bl	8005a40 <NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_2_IRQn);
 8005dde:	2012      	movs	r0, #18
 8005de0:	f7ff fe16 	bl	8005a10 <NVIC_EnableIRQ>
  LL_ADC_EnableIT_EOS(ADC1);
 8005de4:	4808      	ldr	r0, [pc, #32]	; (8005e08 <MX_ADC1_Init+0xf4>)
 8005de6:	f7ff ff6e 	bl	8005cc6 <LL_ADC_EnableIT_EOS>

  if (LL_ADC_IsEnabled(ADC1) == 0)
 8005dea:	4807      	ldr	r0, [pc, #28]	; (8005e08 <MX_ADC1_Init+0xf4>)
 8005dec:	f7ff ff0d 	bl	8005c0a <LL_ADC_IsEnabled>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d102      	bne.n	8005dfc <MX_ADC1_Init+0xe8>
  {
	  LL_ADC_Enable(ADC1);
 8005df6:	4804      	ldr	r0, [pc, #16]	; (8005e08 <MX_ADC1_Init+0xf4>)
 8005df8:	f7ff fef8 	bl	8005bec <LL_ADC_Enable>
  }
}
 8005dfc:	bf00      	nop
 8005dfe:	3738      	adds	r7, #56	; 0x38
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40010800 	.word	0x40010800
 8005e08:	40012400 	.word	0x40012400
 8005e0c:	02c00004 	.word	0x02c00004

08005e10 <ADC1_Activate>:

void ADC1_Activate(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
	if (LL_ADC_IsEnabled(ADC1) == 1)
 8005e14:	480e      	ldr	r0, [pc, #56]	; (8005e50 <ADC1_Activate+0x40>)
 8005e16:	f7ff fef8 	bl	8005c0a <LL_ADC_IsEnabled>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d114      	bne.n	8005e4a <ADC1_Activate+0x3a>
	{
		LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8005e20:	2200      	movs	r2, #0
 8005e22:	490c      	ldr	r1, [pc, #48]	; (8005e54 <ADC1_Activate+0x44>)
 8005e24:	480a      	ldr	r0, [pc, #40]	; (8005e50 <ADC1_Activate+0x40>)
 8005e26:	f7ff fe98 	bl	8005b5a <LL_ADC_SetChannelSamplingTime>
		LL_ADC_Enable(ADC1);
 8005e2a:	4809      	ldr	r0, [pc, #36]	; (8005e50 <ADC1_Activate+0x40>)
 8005e2c:	f7ff fede 	bl	8005bec <LL_ADC_Enable>
		LL_mDelay(1);
 8005e30:	2001      	movs	r0, #1
 8005e32:	f7fd f809 	bl	8002e48 <LL_mDelay>

	    LL_ADC_StartCalibration(ADC1);
 8005e36:	4806      	ldr	r0, [pc, #24]	; (8005e50 <ADC1_Activate+0x40>)
 8005e38:	f7ff fef9 	bl	8005c2e <LL_ADC_StartCalibration>
	    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0);
 8005e3c:	bf00      	nop
 8005e3e:	4804      	ldr	r0, [pc, #16]	; (8005e50 <ADC1_Activate+0x40>)
 8005e40:	f7ff ff04 	bl	8005c4c <LL_ADC_IsCalibrationOnGoing>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1f9      	bne.n	8005e3e <ADC1_Activate+0x2e>
	}
}
 8005e4a:	bf00      	nop
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40012400 	.word	0x40012400
 8005e54:	02c00004 	.word	0x02c00004

08005e58 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
  if(LL_ADC_IsActiveFlag_EOS(ADC1) != 0)
 8005e5c:	4808      	ldr	r0, [pc, #32]	; (8005e80 <ADC1_2_IRQHandler+0x28>)
 8005e5e:	f7ff ff13 	bl	8005c88 <LL_ADC_IsActiveFlag_EOS>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d009      	beq.n	8005e7c <ADC1_2_IRQHandler+0x24>
  {
    LL_ADC_ClearFlag_EOS(ADC1);
 8005e68:	4805      	ldr	r0, [pc, #20]	; (8005e80 <ADC1_2_IRQHandler+0x28>)
 8005e6a:	f7ff ff1f 	bl	8005cac <LL_ADC_ClearFlag_EOS>

    ADC1_value = LL_ADC_REG_ReadConversionData12(ADC1);
 8005e6e:	4804      	ldr	r0, [pc, #16]	; (8005e80 <ADC1_2_IRQHandler+0x28>)
 8005e70:	f7ff fefe 	bl	8005c70 <LL_ADC_REG_ReadConversionData12>
 8005e74:	4603      	mov	r3, r0
 8005e76:	461a      	mov	r2, r3
 8005e78:	4b02      	ldr	r3, [pc, #8]	; (8005e84 <ADC1_2_IRQHandler+0x2c>)
 8005e7a:	801a      	strh	r2, [r3, #0]
  }
}
 8005e7c:	bf00      	nop
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	40012400 	.word	0x40012400
 8005e84:	200023de 	.word	0x200023de

08005e88 <ADC1_Get>:

uint16_t ADC1_Get()
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
	return ADC1_value;
 8005e8c:	4b02      	ldr	r3, [pc, #8]	; (8005e98 <ADC1_Get+0x10>)
 8005e8e:	881b      	ldrh	r3, [r3, #0]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr
 8005e98:	200023de 	.word	0x200023de

08005e9c <LDRQueueInit>:
#include "cmsis_os.h"

xQueueHandle ldr_queue;

void LDRQueueInit(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
	  ldr_queue = xQueueCreate(2, sizeof(uint16_t));
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2102      	movs	r1, #2
 8005ea4:	2002      	movs	r0, #2
 8005ea6:	f7fd fcc5 	bl	8003834 <xQueueGenericCreate>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	4b01      	ldr	r3, [pc, #4]	; (8005eb4 <LDRQueueInit+0x18>)
 8005eae:	601a      	str	r2, [r3, #0]
}
 8005eb0:	bf00      	nop
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20003058 	.word	0x20003058

08005eb8 <LDRQueue_Send>:

void LDRQueue_Send(uint16_t value)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	80fb      	strh	r3, [r7, #6]
	const portTickType xTicksToWait = 100 / portTICK_RATE_MS;
 8005ec2:	2364      	movs	r3, #100	; 0x64
 8005ec4:	60fb      	str	r3, [r7, #12]
	xQueueSendToBack(ldr_queue, &value, xTicksToWait);
 8005ec6:	4b05      	ldr	r3, [pc, #20]	; (8005edc <LDRQueue_Send+0x24>)
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	1db9      	adds	r1, r7, #6
 8005ecc:	2300      	movs	r3, #0
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	f7fd fd08 	bl	80038e4 <xQueueGenericSend>
}
 8005ed4:	bf00      	nop
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20003058 	.word	0x20003058

08005ee0 <LDRQueue_Receive>:

uint16_t LDRQueue_Receive(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
	uint16_t value;
	xQueueReceive(ldr_queue, &value, 0);
 8005ee6:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <LDRQueue_Receive+0x20>)
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	1db9      	adds	r1, r7, #6
 8005eec:	2300      	movs	r3, #0
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f7fd fdf2 	bl	8003ad8 <xQueueGenericReceive>
	return value;
 8005ef4:	88fb      	ldrh	r3, [r7, #6]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20003058 	.word	0x20003058

08005f04 <LDRQueue_IsElements>:

bool LDRQueue_IsElements(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
	if(uxQueueMessagesWaiting(ldr_queue) > 0)
 8005f08:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <LDRQueue_IsElements+0x20>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fd fef5 	bl	8003cfc <uxQueueMessagesWaiting>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <LDRQueue_IsElements+0x18>
	{
		return true;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e000      	b.n	8005f1e <LDRQueue_IsElements+0x1a>
	}
	return false;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20003058 	.word	0x20003058

08005f28 <pxLDR>:
#include "ldr.h"
#include "ldr_queue.h"
#include "cmsis_os.h"

static void pxLDR(void * arg)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
	LDRInit();
 8005f30:	f7fa ff9f 	bl	8000e72 <LDRInit>
	while(1)
	{
		uint16_t adc_value = LDR_Get();
 8005f34:	f7fa ffa4 	bl	8000e80 <LDR_Get>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	81fb      	strh	r3, [r7, #14]
		LDRQueue_Send(adc_value);
 8005f3c:	89fb      	ldrh	r3, [r7, #14]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff ffba 	bl	8005eb8 <LDRQueue_Send>
		osDelay(100);
 8005f44:	2064      	movs	r0, #100	; 0x64
 8005f46:	f7fc fff6 	bl	8002f36 <osDelay>
	{
 8005f4a:	e7f3      	b.n	8005f34 <pxLDR+0xc>

08005f4c <LDRTaskInit>:
	}
}

void LDRTaskInit(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af02      	add	r7, sp, #8
	xTaskCreate(pxLDR, "LDR", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 8005f52:	2300      	movs	r3, #0
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	2300      	movs	r3, #0
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f60:	4903      	ldr	r1, [pc, #12]	; (8005f70 <LDRTaskInit+0x24>)
 8005f62:	4804      	ldr	r0, [pc, #16]	; (8005f74 <LDRTaskInit+0x28>)
 8005f64:	f7fe f81c 	bl	8003fa0 <xTaskCreate>
}
 8005f68:	bf00      	nop
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	0800804c 	.word	0x0800804c
 8005f74:	08005f29 	.word	0x08005f29

08005f78 <LL_APB1_GRP1_EnableClock>:
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8005f80:	4908      	ldr	r1, [pc, #32]	; (8005fa4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005f82:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005f84:	69da      	ldr	r2, [r3, #28]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005f8c:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005f8e:	69da      	ldr	r2, [r3, #28]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4013      	ands	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005f96:	68fb      	ldr	r3, [r7, #12]
}
 8005f98:	bf00      	nop
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	40021000 	.word	0x40021000

08005fa8 <LL_APB2_GRP1_EnableClock>:
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005fb0:	4908      	ldr	r1, [pc, #32]	; (8005fd4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005fb2:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005fbc:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005fbe:	699a      	ldr	r2, [r3, #24]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
}
 8005fc8:	bf00      	nop
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bc80      	pop	{r7}
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	40021000 	.word	0x40021000

08005fd8 <LL_TIM_EnableCounter>:
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f043 0201 	orr.w	r2, r3, #1
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	601a      	str	r2, [r3, #0]
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bc80      	pop	{r7}
 8005ff4:	4770      	bx	lr

08005ff6 <LL_TIM_EnableARRPreload>:
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	601a      	str	r2, [r3, #0]
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr

08006014 <LL_TIM_GetAutoReload>:
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr

0800602a <LL_TIM_CC_EnableChannel>:
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1a      	ldr	r2, [r3, #32]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	621a      	str	r2, [r3, #32]
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	bc80      	pop	{r7}
 8006048:	4770      	bx	lr
	...

0800604c <LL_TIM_OC_DisableFast>:
{
 800604c:	b4b0      	push	{r4, r5, r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d01c      	beq.n	8006096 <LL_TIM_OC_DisableFast+0x4a>
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b04      	cmp	r3, #4
 8006060:	d017      	beq.n	8006092 <LL_TIM_OC_DisableFast+0x46>
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b10      	cmp	r3, #16
 8006066:	d012      	beq.n	800608e <LL_TIM_OC_DisableFast+0x42>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d00d      	beq.n	800608a <LL_TIM_OC_DisableFast+0x3e>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006074:	d007      	beq.n	8006086 <LL_TIM_OC_DisableFast+0x3a>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800607c:	d101      	bne.n	8006082 <LL_TIM_OC_DisableFast+0x36>
 800607e:	2305      	movs	r3, #5
 8006080:	e00a      	b.n	8006098 <LL_TIM_OC_DisableFast+0x4c>
 8006082:	2306      	movs	r3, #6
 8006084:	e008      	b.n	8006098 <LL_TIM_OC_DisableFast+0x4c>
 8006086:	2304      	movs	r3, #4
 8006088:	e006      	b.n	8006098 <LL_TIM_OC_DisableFast+0x4c>
 800608a:	2303      	movs	r3, #3
 800608c:	e004      	b.n	8006098 <LL_TIM_OC_DisableFast+0x4c>
 800608e:	2302      	movs	r3, #2
 8006090:	e002      	b.n	8006098 <LL_TIM_OC_DisableFast+0x4c>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <LL_TIM_OC_DisableFast+0x4c>
 8006096:	2300      	movs	r3, #0
 8006098:	461d      	mov	r5, r3
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3318      	adds	r3, #24
 800609e:	461a      	mov	r2, r3
 80060a0:	4629      	mov	r1, r5
 80060a2:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <LL_TIM_OC_DisableFast+0x7c>)
 80060a4:	5c5b      	ldrb	r3, [r3, r1]
 80060a6:	4413      	add	r3, r2
 80060a8:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80060aa:	6822      	ldr	r2, [r4, #0]
 80060ac:	4629      	mov	r1, r5
 80060ae:	4b07      	ldr	r3, [pc, #28]	; (80060cc <LL_TIM_OC_DisableFast+0x80>)
 80060b0:	5c5b      	ldrb	r3, [r3, r1]
 80060b2:	4619      	mov	r1, r3
 80060b4:	2304      	movs	r3, #4
 80060b6:	408b      	lsls	r3, r1
 80060b8:	43db      	mvns	r3, r3
 80060ba:	4013      	ands	r3, r2
 80060bc:	6023      	str	r3, [r4, #0]
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bcb0      	pop	{r4, r5, r7}
 80060c6:	4770      	bx	lr
 80060c8:	080085ac 	.word	0x080085ac
 80060cc:	080085b4 	.word	0x080085b4

080060d0 <LL_TIM_OC_SetCompareCH1>:
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bc80      	pop	{r7}
 80060e8:	4770      	bx	lr

080060ea <LL_TIM_OC_SetCompareCH2>:
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr

08006104 <LL_TIM_OC_SetCompareCH3>:
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr

0800611e <LL_TIM_SetTriggerOutput>:
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	605a      	str	r2, [r3, #4]
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	bc80      	pop	{r7}
 8006140:	4770      	bx	lr

08006142 <LL_TIM_DisableMasterSlaveMode>:
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	609a      	str	r2, [r3, #8]
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	bc80      	pop	{r7}
 800615e:	4770      	bx	lr

08006160 <LL_TIM_GenerateEvent_UPDATE>:
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	f043 0201 	orr.w	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	615a      	str	r2, [r3, #20]
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	bc80      	pop	{r7}
 800617c:	4770      	bx	lr
	...

08006180 <MX_TIM4_Init>:
#include "led_driver.h"

void MX_TIM4_Init(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b092      	sub	sp, #72	; 0x48
 8006184:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8006186:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	605a      	str	r2, [r3, #4]
 8006190:	609a      	str	r2, [r3, #8]
 8006192:	60da      	str	r2, [r3, #12]
 8006194:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8006196:	f107 0314 	add.w	r3, r7, #20
 800619a:	2220      	movs	r2, #32
 800619c:	2100      	movs	r1, #0
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 f971 	bl	8007486 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061a4:	463b      	mov	r3, r7
 80061a6:	2200      	movs	r2, #0
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	605a      	str	r2, [r3, #4]
 80061ac:	609a      	str	r2, [r3, #8]
 80061ae:	60da      	str	r2, [r3, #12]
 80061b0:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80061b2:	2004      	movs	r0, #4
 80061b4:	f7ff fee0 	bl	8005f78 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80061bc:	2300      	movs	r3, #0
 80061be:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 4096;
 80061c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80061c6:	2300      	movs	r3, #0
 80061c8:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80061ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80061ce:	4619      	mov	r1, r3
 80061d0:	483a      	ldr	r0, [pc, #232]	; (80062bc <MX_TIM4_Init+0x13c>)
 80061d2:	f7fc fadf 	bl	8002794 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM4);
 80061d6:	4839      	ldr	r0, [pc, #228]	; (80062bc <MX_TIM4_Init+0x13c>)
 80061d8:	f7ff ff0d 	bl	8005ff6 <LL_TIM_EnableARRPreload>

  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80061dc:	2360      	movs	r3, #96	; 0x60
 80061de:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80061e4:	2300      	movs	r3, #0
 80061e6:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = LL_TIM_GetAutoReload(TIM4);
 80061e8:	4834      	ldr	r0, [pc, #208]	; (80062bc <MX_TIM4_Init+0x13c>)
 80061ea:	f7ff ff13 	bl	8006014 <LL_TIM_GetAutoReload>
 80061ee:	4603      	mov	r3, r0
 80061f0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80061f2:	2300      	movs	r3, #0
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 80061f6:	2300      	movs	r3, #0
 80061f8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
 80061fa:	2300      	movs	r3, #0
 80061fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80061fe:	2300      	movs	r3, #0
 8006200:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8006202:	f107 0314 	add.w	r3, r7, #20
 8006206:	461a      	mov	r2, r3
 8006208:	2101      	movs	r1, #1
 800620a:	482c      	ldr	r0, [pc, #176]	; (80062bc <MX_TIM4_Init+0x13c>)
 800620c:	f7fc fb22 	bl	8002854 <LL_TIM_OC_Init>

  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 8006210:	2101      	movs	r1, #1
 8006212:	482a      	ldr	r0, [pc, #168]	; (80062bc <MX_TIM4_Init+0x13c>)
 8006214:	f7ff ff1a 	bl	800604c <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8006218:	2300      	movs	r3, #0
 800621a:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800621c:	2300      	movs	r3, #0
 800621e:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8006220:	f107 0314 	add.w	r3, r7, #20
 8006224:	461a      	mov	r2, r3
 8006226:	2110      	movs	r1, #16
 8006228:	4824      	ldr	r0, [pc, #144]	; (80062bc <MX_TIM4_Init+0x13c>)
 800622a:	f7fc fb13 	bl	8002854 <LL_TIM_OC_Init>

  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 800622e:	2110      	movs	r1, #16
 8006230:	4822      	ldr	r0, [pc, #136]	; (80062bc <MX_TIM4_Init+0x13c>)
 8006232:	f7ff ff0b 	bl	800604c <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8006236:	2300      	movs	r3, #0
 8006238:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800623a:	2300      	movs	r3, #0
 800623c:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800623e:	f107 0314 	add.w	r3, r7, #20
 8006242:	461a      	mov	r2, r3
 8006244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006248:	481c      	ldr	r0, [pc, #112]	; (80062bc <MX_TIM4_Init+0x13c>)
 800624a:	f7fc fb03 	bl	8002854 <LL_TIM_OC_Init>

  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 800624e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006252:	481a      	ldr	r0, [pc, #104]	; (80062bc <MX_TIM4_Init+0x13c>)
 8006254:	f7ff fefa 	bl	800604c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8006258:	2100      	movs	r1, #0
 800625a:	4818      	ldr	r0, [pc, #96]	; (80062bc <MX_TIM4_Init+0x13c>)
 800625c:	f7ff ff5f 	bl	800611e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8006260:	4816      	ldr	r0, [pc, #88]	; (80062bc <MX_TIM4_Init+0x13c>)
 8006262:	f7ff ff6e 	bl	8006142 <LL_TIM_DisableMasterSlaveMode>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8006266:	2008      	movs	r0, #8
 8006268:	f7ff fe9e 	bl	8005fa8 <LL_APB2_GRP1_EnableClock>
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 800626c:	4b14      	ldr	r3, [pc, #80]	; (80062c0 <MX_TIM4_Init+0x140>)
 800626e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006270:	2309      	movs	r3, #9
 8006272:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8006274:	2303      	movs	r3, #3
 8006276:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800627c:	463b      	mov	r3, r7
 800627e:	4619      	mov	r1, r3
 8006280:	4810      	ldr	r0, [pc, #64]	; (80062c4 <MX_TIM4_Init+0x144>)
 8006282:	f7fb ff26 	bl	80020d2 <LL_GPIO_Init>

  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH3);
 8006286:	f240 1111 	movw	r1, #273	; 0x111
 800628a:	480c      	ldr	r0, [pc, #48]	; (80062bc <MX_TIM4_Init+0x13c>)
 800628c:	f7ff fecd 	bl	800602a <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM4);
 8006290:	480a      	ldr	r0, [pc, #40]	; (80062bc <MX_TIM4_Init+0x13c>)
 8006292:	f7ff fea1 	bl	8005fd8 <LL_TIM_EnableCounter>

  LL_TIM_GenerateEvent_UPDATE(TIM4);
 8006296:	4809      	ldr	r0, [pc, #36]	; (80062bc <MX_TIM4_Init+0x13c>)
 8006298:	f7ff ff62 	bl	8006160 <LL_TIM_GenerateEvent_UPDATE>

  LL_TIM_OC_SetCompareCH1(TIM4, 0);
 800629c:	2100      	movs	r1, #0
 800629e:	4807      	ldr	r0, [pc, #28]	; (80062bc <MX_TIM4_Init+0x13c>)
 80062a0:	f7ff ff16 	bl	80060d0 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIM4, 0);
 80062a4:	2100      	movs	r1, #0
 80062a6:	4805      	ldr	r0, [pc, #20]	; (80062bc <MX_TIM4_Init+0x13c>)
 80062a8:	f7ff ff1f 	bl	80060ea <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIM4, 0);
 80062ac:	2100      	movs	r1, #0
 80062ae:	4803      	ldr	r0, [pc, #12]	; (80062bc <MX_TIM4_Init+0x13c>)
 80062b0:	f7ff ff28 	bl	8006104 <LL_TIM_OC_SetCompareCH3>
}
 80062b4:	bf00      	nop
 80062b6:	3748      	adds	r7, #72	; 0x48
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	40000800 	.word	0x40000800
 80062c0:	0401c0c1 	.word	0x0401c0c1
 80062c4:	40010c00 	.word	0x40010c00

080062c8 <TIM4_SET_CH1>:

inline void TIM4_SET_CH1(uint16_t duty_cycle)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	4603      	mov	r3, r0
 80062d0:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH1(TIM4, duty_cycle);
 80062d2:	88fb      	ldrh	r3, [r7, #6]
 80062d4:	4619      	mov	r1, r3
 80062d6:	4803      	ldr	r0, [pc, #12]	; (80062e4 <TIM4_SET_CH1+0x1c>)
 80062d8:	f7ff fefa 	bl	80060d0 <LL_TIM_OC_SetCompareCH1>
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40000800 	.word	0x40000800

080062e8 <TIM4_SET_CH2>:

inline void TIM4_SET_CH2(uint16_t duty_cycle)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH2(TIM4, duty_cycle);
 80062f2:	88fb      	ldrh	r3, [r7, #6]
 80062f4:	4619      	mov	r1, r3
 80062f6:	4803      	ldr	r0, [pc, #12]	; (8006304 <TIM4_SET_CH2+0x1c>)
 80062f8:	f7ff fef7 	bl	80060ea <LL_TIM_OC_SetCompareCH2>
}
 80062fc:	bf00      	nop
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	40000800 	.word	0x40000800

08006308 <TIM4_SET_CH3>:

inline void TIM4_SET_CH3(uint16_t duty_cycle)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	4603      	mov	r3, r0
 8006310:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH3(TIM4, duty_cycle);
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	4619      	mov	r1, r3
 8006316:	4803      	ldr	r0, [pc, #12]	; (8006324 <TIM4_SET_CH3+0x1c>)
 8006318:	f7ff fef4 	bl	8006104 <LL_TIM_OC_SetCompareCH3>
}
 800631c:	bf00      	nop
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40000800 	.word	0x40000800

08006328 <constrain>:
#include "ESP8266.h"
#include "cmsis_os.h"
#include <string.h>

static uint16_t constrain(int32_t value)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	if(value > 4096) value = 4096;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006336:	dd02      	ble.n	800633e <constrain+0x16>
 8006338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800633c:	607b      	str	r3, [r7, #4]
	if(value < 0) value = 0;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	da01      	bge.n	8006348 <constrain+0x20>
 8006344:	2300      	movs	r3, #0
 8006346:	607b      	str	r3, [r7, #4]
	return value;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	b29b      	uxth	r3, r3
}
 800634c:	4618      	mov	r0, r3
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	bc80      	pop	{r7}
 8006354:	4770      	bx	lr
	...

08006358 <pxLed>:

static void pxLed(void * arg)
{
 8006358:	b5b0      	push	{r4, r5, r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
	LedInit();
 8006360:	f7fa fdbe 	bl	8000ee0 <LedInit>
	I2C_Init();
 8006364:	f7fa fca4 	bl	8000cb0 <I2C_Init>
	ColorFromEEPROM(); // load led from EEPROM
 8006368:	f7fa fcdd 	bl	8000d26 <ColorFromEEPROM>

	Display_Init();
 800636c:	f7fa fa42 	bl	80007f4 <Display_Init>
	Display_ON();
 8006370:	f7fa fa92 	bl	8000898 <Display_ON>
	display(); // refresh display
 8006374:	f7fa fb3e 	bl	80009f4 <display>

	uint16_t ldr_value = 4096, ldr_value_old = 4096;
 8006378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800637c:	82fb      	strh	r3, [r7, #22]
 800637e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006382:	82bb      	strh	r3, [r7, #20]
	EncoderRotateInfo xEncoder_info;

	while(1)
	{
		if(EncoderQueue_IsElements()) // get data from encoder
 8006384:	f7fe ff7c 	bl	8005280 <EncoderQueue_IsElements>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d07a      	beq.n	8006484 <pxLed+0x12c>
		{
			EncoderQueue_Receive(&xEncoder_info);
 800638e:	f107 0308 	add.w	r3, r7, #8
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe ff62 	bl	800525c <EncoderQueue_Receive>
			int16_t red = Led_Get_Color(eRed), green = Led_Get_Color(eGreen), blue = Led_Get_Color(eBlue);
 8006398:	2000      	movs	r0, #0
 800639a:	f7fa fdfd 	bl	8000f98 <Led_Get_Color>
 800639e:	4603      	mov	r3, r0
 80063a0:	827b      	strh	r3, [r7, #18]
 80063a2:	2001      	movs	r0, #1
 80063a4:	f7fa fdf8 	bl	8000f98 <Led_Get_Color>
 80063a8:	4603      	mov	r3, r0
 80063aa:	823b      	strh	r3, [r7, #16]
 80063ac:	2002      	movs	r0, #2
 80063ae:	f7fa fdf3 	bl	8000f98 <Led_Get_Color>
 80063b2:	4603      	mov	r3, r0
 80063b4:	81fb      	strh	r3, [r7, #14]

			switch(xEncoder_info.button) // refresh led and display
 80063b6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d861      	bhi.n	8006482 <pxLed+0x12a>
 80063be:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <pxLed+0x6c>)
 80063c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c4:	08006483 	.word	0x08006483
 80063c8:	080063d9 	.word	0x080063d9
 80063cc:	080063f9 	.word	0x080063f9
 80063d0:	08006419 	.word	0x08006419
 80063d4:	08006439 	.word	0x08006439
			{
				case 0: break;
				case 1:
					{
						Led_Set_Color(eRed, constrain(red + xEncoder_info.state));
 80063d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063dc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80063e0:	4413      	add	r3, r2
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff ffa0 	bl	8006328 <constrain>
 80063e8:	4603      	mov	r3, r0
 80063ea:	4619      	mov	r1, r3
 80063ec:	2000      	movs	r0, #0
 80063ee:	f7fa fdb7 	bl	8000f60 <Led_Set_Color>
						display();
 80063f2:	f7fa faff 	bl	80009f4 <display>
						break;
 80063f6:	e045      	b.n	8006484 <pxLed+0x12c>
					}
				case 2:
					{
						Led_Set_Color(eGreen, constrain(green + xEncoder_info.state));
 80063f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80063fc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006400:	4413      	add	r3, r2
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff ff90 	bl	8006328 <constrain>
 8006408:	4603      	mov	r3, r0
 800640a:	4619      	mov	r1, r3
 800640c:	2001      	movs	r0, #1
 800640e:	f7fa fda7 	bl	8000f60 <Led_Set_Color>
						display();
 8006412:	f7fa faef 	bl	80009f4 <display>
						break;
 8006416:	e035      	b.n	8006484 <pxLed+0x12c>
					}
				case 3:
					{
						Led_Set_Color(eBlue, constrain(blue + xEncoder_info.state));
 8006418:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800641c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006420:	4413      	add	r3, r2
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff ff80 	bl	8006328 <constrain>
 8006428:	4603      	mov	r3, r0
 800642a:	4619      	mov	r1, r3
 800642c:	2002      	movs	r0, #2
 800642e:	f7fa fd97 	bl	8000f60 <Led_Set_Color>
						display();
 8006432:	f7fa fadf 	bl	80009f4 <display>
						break;
 8006436:	e025      	b.n	8006484 <pxLed+0x12c>
					}
				case 4:
					{
						Led_Set(constrain(red + xEncoder_info.state), constrain(green + xEncoder_info.state), constrain(blue + xEncoder_info.state));
 8006438:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800643c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006440:	4413      	add	r3, r2
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff ff70 	bl	8006328 <constrain>
 8006448:	4603      	mov	r3, r0
 800644a:	461c      	mov	r4, r3
 800644c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006450:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006454:	4413      	add	r3, r2
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff ff66 	bl	8006328 <constrain>
 800645c:	4603      	mov	r3, r0
 800645e:	461d      	mov	r5, r3
 8006460:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006464:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006468:	4413      	add	r3, r2
 800646a:	4618      	mov	r0, r3
 800646c:	f7ff ff5c 	bl	8006328 <constrain>
 8006470:	4603      	mov	r3, r0
 8006472:	461a      	mov	r2, r3
 8006474:	4629      	mov	r1, r5
 8006476:	4620      	mov	r0, r4
 8006478:	f7fa fd4a 	bl	8000f10 <Led_Set>
						display();
 800647c:	f7fa faba 	bl	80009f4 <display>
						break;
 8006480:	e000      	b.n	8006484 <pxLed+0x12c>
					}
				default: break;
 8006482:	bf00      	nop
			}
		}
		if(LDRQueue_IsElements())
 8006484:	f7ff fd3e 	bl	8005f04 <LDRQueue_IsElements>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d018      	beq.n	80064c0 <pxLed+0x168>
		{
			 ldr_value = LDRQueue_Receive(); // get ldr value
 800648e:	f7ff fd27 	bl	8005ee0 <LDRQueue_Receive>
 8006492:	4603      	mov	r3, r0
 8006494:	82fb      	strh	r3, [r7, #22]
		}

		while(!(ldr_value_old == ldr_value))
 8006496:	e013      	b.n	80064c0 <pxLed+0x168>
		{
			if(ldr_value_old > ldr_value)
 8006498:	8aba      	ldrh	r2, [r7, #20]
 800649a:	8afb      	ldrh	r3, [r7, #22]
 800649c:	429a      	cmp	r2, r3
 800649e:	d906      	bls.n	80064ae <pxLed+0x156>
			{
				Led_Refresh(ldr_value_old--);
 80064a0:	8abb      	ldrh	r3, [r7, #20]
 80064a2:	1e5a      	subs	r2, r3, #1
 80064a4:	82ba      	strh	r2, [r7, #20]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fa fda8 	bl	8000ffc <Led_Refresh>
 80064ac:	e005      	b.n	80064ba <pxLed+0x162>
			}
			else Led_Refresh(ldr_value_old++);
 80064ae:	8abb      	ldrh	r3, [r7, #20]
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	82ba      	strh	r2, [r7, #20]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fa fda1 	bl	8000ffc <Led_Refresh>

			osDelay(1);
 80064ba:	2001      	movs	r0, #1
 80064bc:	f7fc fd3b 	bl	8002f36 <osDelay>
		while(!(ldr_value_old == ldr_value))
 80064c0:	8aba      	ldrh	r2, [r7, #20]
 80064c2:	8afb      	ldrh	r3, [r7, #22]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d1e7      	bne.n	8006498 <pxLed+0x140>
		}

		static uint16_t update_display = 1000;
		if(update_display == 0) // delay to refresh display
 80064c8:	4b0b      	ldr	r3, [pc, #44]	; (80064f8 <pxLed+0x1a0>)
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d108      	bne.n	80064e2 <pxLed+0x18a>
		{
			GetStationIP();
 80064d0:	f7fa f92a 	bl	8000728 <GetStationIP>
			update_display = 1000;
 80064d4:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <pxLed+0x1a0>)
 80064d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064da:	801a      	strh	r2, [r3, #0]
			display();
 80064dc:	f7fa fa8a 	bl	80009f4 <display>
 80064e0:	e005      	b.n	80064ee <pxLed+0x196>
		}
		else update_display--;
 80064e2:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <pxLed+0x1a0>)
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	4b03      	ldr	r3, [pc, #12]	; (80064f8 <pxLed+0x1a0>)
 80064ec:	801a      	strh	r2, [r3, #0]

		osDelay(10);
 80064ee:	200a      	movs	r0, #10
 80064f0:	f7fc fd21 	bl	8002f36 <osDelay>
	{
 80064f4:	e746      	b.n	8006384 <pxLed+0x2c>
 80064f6:	bf00      	nop
 80064f8:	20000090 	.word	0x20000090

080064fc <LedTaskInit>:
	}
}

void LedTaskInit(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af02      	add	r7, sp, #8
	xTaskCreate(pxLed, "Led", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 8006502:	2300      	movs	r3, #0
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	2300      	movs	r3, #0
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	2300      	movs	r3, #0
 800650c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006510:	4903      	ldr	r1, [pc, #12]	; (8006520 <LedTaskInit+0x24>)
 8006512:	4804      	ldr	r0, [pc, #16]	; (8006524 <LedTaskInit+0x28>)
 8006514:	f7fd fd44 	bl	8003fa0 <xTaskCreate>
}
 8006518:	bf00      	nop
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	08008050 	.word	0x08008050
 8006524:	08006359 	.word	0x08006359

08006528 <NVIC_GetPriorityGrouping>:
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800652c:	4b04      	ldr	r3, [pc, #16]	; (8006540 <NVIC_GetPriorityGrouping+0x18>)
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	0a1b      	lsrs	r3, r3, #8
 8006532:	f003 0307 	and.w	r3, r3, #7
}
 8006536:	4618      	mov	r0, r3
 8006538:	46bd      	mov	sp, r7
 800653a:	bc80      	pop	{r7}
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	e000ed00 	.word	0xe000ed00

08006544 <NVIC_EnableIRQ>:
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	4603      	mov	r3, r0
 800654c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800654e:	4908      	ldr	r1, [pc, #32]	; (8006570 <NVIC_EnableIRQ+0x2c>)
 8006550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006554:	095b      	lsrs	r3, r3, #5
 8006556:	79fa      	ldrb	r2, [r7, #7]
 8006558:	f002 021f 	and.w	r2, r2, #31
 800655c:	2001      	movs	r0, #1
 800655e:	fa00 f202 	lsl.w	r2, r0, r2
 8006562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr
 8006570:	e000e100 	.word	0xe000e100

08006574 <NVIC_SetPriority>:
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	6039      	str	r1, [r7, #0]
 800657e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8006580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006584:	2b00      	cmp	r3, #0
 8006586:	da0b      	bge.n	80065a0 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006588:	490d      	ldr	r1, [pc, #52]	; (80065c0 <NVIC_SetPriority+0x4c>)
 800658a:	79fb      	ldrb	r3, [r7, #7]
 800658c:	f003 030f 	and.w	r3, r3, #15
 8006590:	3b04      	subs	r3, #4
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	0112      	lsls	r2, r2, #4
 8006598:	b2d2      	uxtb	r2, r2
 800659a:	440b      	add	r3, r1
 800659c:	761a      	strb	r2, [r3, #24]
}
 800659e:	e009      	b.n	80065b4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065a0:	4908      	ldr	r1, [pc, #32]	; (80065c4 <NVIC_SetPriority+0x50>)
 80065a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	0112      	lsls	r2, r2, #4
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	440b      	add	r3, r1
 80065b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bc80      	pop	{r7}
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	e000ed00 	.word	0xe000ed00
 80065c4:	e000e100 	.word	0xe000e100

080065c8 <NVIC_EncodePriority>:
{
 80065c8:	b480      	push	{r7}
 80065ca:	b089      	sub	sp, #36	; 0x24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f1c3 0307 	rsb	r3, r3, #7
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	bf28      	it	cs
 80065e6:	2304      	movcs	r3, #4
 80065e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	3304      	adds	r3, #4
 80065ee:	2b06      	cmp	r3, #6
 80065f0:	d902      	bls.n	80065f8 <NVIC_EncodePriority+0x30>
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	3b03      	subs	r3, #3
 80065f6:	e000      	b.n	80065fa <NVIC_EncodePriority+0x32>
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065fc:	2201      	movs	r2, #1
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	1e5a      	subs	r2, r3, #1
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	401a      	ands	r2, r3
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800660e:	2101      	movs	r1, #1
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	fa01 f303 	lsl.w	r3, r1, r3
 8006616:	1e59      	subs	r1, r3, #1
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800661c:	4313      	orrs	r3, r2
}
 800661e:	4618      	mov	r0, r3
 8006620:	3724      	adds	r7, #36	; 0x24
 8006622:	46bd      	mov	sp, r7
 8006624:	bc80      	pop	{r7}
 8006626:	4770      	bx	lr

08006628 <LL_EXTI_ClearFlag_0_31>:
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8006630:	4a03      	ldr	r2, [pc, #12]	; (8006640 <LL_EXTI_ClearFlag_0_31+0x18>)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6153      	str	r3, [r2, #20]
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	bc80      	pop	{r7}
 800663e:	4770      	bx	lr
 8006640:	40010400 	.word	0x40010400

08006644 <LL_GPIO_AF_SetEXTISource>:
{
 8006644:	b490      	push	{r4, r7}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800664e:	4c11      	ldr	r4, [pc, #68]	; (8006694 <LL_GPIO_AF_SetEXTISource+0x50>)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	b2db      	uxtb	r3, r3
 8006654:	490f      	ldr	r1, [pc, #60]	; (8006694 <LL_GPIO_AF_SetEXTISource+0x50>)
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	3202      	adds	r2, #2
 800665c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	0c12      	lsrs	r2, r2, #16
 8006664:	43d2      	mvns	r2, r2
 8006666:	4011      	ands	r1, r2
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	0c12      	lsrs	r2, r2, #16
 800666c:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	fa92 f2a2 	rbit	r2, r2
 8006674:	60ba      	str	r2, [r7, #8]
  return(result);
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	fab2 f282 	clz	r2, r2
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	fa00 f202 	lsl.w	r2, r0, r2
 8006682:	430a      	orrs	r2, r1
 8006684:	3302      	adds	r3, #2
 8006686:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 800668a:	bf00      	nop
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bc90      	pop	{r4, r7}
 8006692:	4770      	bx	lr
 8006694:	40010000 	.word	0x40010000

08006698 <PowerDropInterruptInit>:
#include "delay.h"
#include "i2c_data.h"
#include "cmsis_os.h"

void PowerDropInterruptInit(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af00      	add	r7, sp, #0
	LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800669e:	f107 0318 	add.w	r3, r7, #24
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	605a      	str	r2, [r3, #4]

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80066a8:	2301      	movs	r3, #1
 80066aa:	61bb      	str	r3, [r7, #24]
    EXTI_InitStruct.LineCommand = ENABLE;
 80066ac:	2301      	movs	r3, #1
 80066ae:	773b      	strb	r3, [r7, #28]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80066b0:	2300      	movs	r3, #0
 80066b2:	777b      	strb	r3, [r7, #29]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80066b4:	2302      	movs	r3, #2
 80066b6:	77bb      	strb	r3, [r7, #30]
    LL_EXTI_Init(&EXTI_InitStruct);
 80066b8:	f107 0318 	add.w	r3, r7, #24
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fb fbdd 	bl	8001e7c <LL_EXTI_Init>

    LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE0);
 80066c2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80066c6:	2000      	movs	r0, #0
 80066c8:	f7ff ffbc 	bl	8006644 <LL_GPIO_AF_SetEXTISource>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066cc:	1d3b      	adds	r3, r7, #4
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	605a      	str	r2, [r3, #4]
 80066d4:	609a      	str	r2, [r3, #8]
 80066d6:	60da      	str	r2, [r3, #12]
 80066d8:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80066da:	f240 1301 	movw	r3, #257	; 0x101
 80066de:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80066e0:	2308      	movs	r3, #8
 80066e2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80066e4:	2303      	movs	r3, #3
 80066e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80066e8:	2301      	movs	r3, #1
 80066ea:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066ec:	1d3b      	adds	r3, r7, #4
 80066ee:	4619      	mov	r1, r3
 80066f0:	480b      	ldr	r0, [pc, #44]	; (8006720 <PowerDropInterruptInit+0x88>)
 80066f2:	f7fb fcee 	bl	80020d2 <LL_GPIO_Init>

    NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 8, 0));
 80066f6:	f7ff ff17 	bl	8006528 <NVIC_GetPriorityGrouping>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2200      	movs	r2, #0
 80066fe:	2108      	movs	r1, #8
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff ff61 	bl	80065c8 <NVIC_EncodePriority>
 8006706:	4603      	mov	r3, r0
 8006708:	4619      	mov	r1, r3
 800670a:	2006      	movs	r0, #6
 800670c:	f7ff ff32 	bl	8006574 <NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 8006710:	2006      	movs	r0, #6
 8006712:	f7ff ff17 	bl	8006544 <NVIC_EnableIRQ>
}
 8006716:	bf00      	nop
 8006718:	3720      	adds	r7, #32
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	40010800 	.word	0x40010800

08006724 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8006728:	2001      	movs	r0, #1
 800672a:	f7ff ff7d 	bl	8006628 <LL_EXTI_ClearFlag_0_31>

	ColorToEEPROM();
 800672e:	f7fa fac7 	bl	8000cc0 <ColorToEEPROM>
}
 8006732:	bf00      	nop
 8006734:	bd80      	pop	{r7, pc}

08006736 <LL_SPI_Enable>:
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	601a      	str	r2, [r3, #0]
}
 800674a:	bf00      	nop
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	bc80      	pop	{r7}
 8006752:	4770      	bx	lr

08006754 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b02      	cmp	r3, #2
 8006766:	bf0c      	ite	eq
 8006768:	2301      	moveq	r3, #1
 800676a:	2300      	movne	r3, #0
 800676c:	b2db      	uxtb	r3, r3
}
 800676e:	4618      	mov	r0, r3
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr

08006778 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006788:	2b80      	cmp	r3, #128	; 0x80
 800678a:	bf0c      	ite	eq
 800678c:	2301      	moveq	r3, #1
 800678e:	2300      	movne	r3, #0
 8006790:	b2db      	uxtb	r3, r3
}
 8006792:	4618      	mov	r0, r3
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	bc80      	pop	{r7}
 800679a:	4770      	bx	lr

0800679c <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  SPIx->DR = TxData;
 80067a8:	78fa      	ldrb	r2, [r7, #3]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60da      	str	r2, [r3, #12]
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr

080067b8 <LL_APB2_GRP1_EnableClock>:
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80067c0:	4908      	ldr	r1, [pc, #32]	; (80067e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80067c2:	4b08      	ldr	r3, [pc, #32]	; (80067e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80067cc:	4b05      	ldr	r3, [pc, #20]	; (80067e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80067ce:	699a      	ldr	r2, [r3, #24]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4013      	ands	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80067d6:	68fb      	ldr	r3, [r7, #12]
}
 80067d8:	bf00      	nop
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40021000 	.word	0x40021000

080067e8 <LL_GPIO_SetOutputPin>:
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	0a1b      	lsrs	r3, r3, #8
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	611a      	str	r2, [r3, #16]
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr

08006806 <LL_GPIO_ResetOutputPin>:
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	0a1b      	lsrs	r3, r3, #8
 8006814:	b29a      	uxth	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	615a      	str	r2, [r3, #20]
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr

08006824 <MX_SPI1_Init>:
#include "spi.h"
#include "delay.h"
#include "main.h"

void MX_SPI1_Init(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b090      	sub	sp, #64	; 0x40
 8006828:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800682a:	f107 0318 	add.w	r3, r7, #24
 800682e:	2228      	movs	r2, #40	; 0x28
 8006830:	2100      	movs	r1, #0
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fe27 	bl	8007486 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006838:	1d3b      	adds	r3, r7, #4
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	605a      	str	r2, [r3, #4]
 8006840:	609a      	str	r2, [r3, #8]
 8006842:	60da      	str	r2, [r3, #12]
 8006844:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8006846:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800684a:	f7ff ffb5 	bl	80067b8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800684e:	2004      	movs	r0, #4
 8006850:	f7ff ffb2 	bl	80067b8 <LL_APB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 8006854:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 8006858:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800685a:	2309      	movs	r3, #9
 800685c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800685e:	2303      	movs	r3, #3
 8006860:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006862:	2300      	movs	r3, #0
 8006864:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006866:	1d3b      	adds	r3, r7, #4
 8006868:	4619      	mov	r1, r3
 800686a:	4820      	ldr	r0, [pc, #128]	; (80068ec <MX_SPI1_Init+0xc8>)
 800686c:	f7fb fc31 	bl	80020d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8006870:	f640 430c 	movw	r3, #3084	; 0xc0c
 8006874:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006876:	2301      	movs	r3, #1
 8006878:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800687a:	2303      	movs	r3, #3
 800687c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800687e:	2300      	movs	r3, #0
 8006880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_PULL_UP;
 8006882:	2301      	movs	r3, #1
 8006884:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006886:	1d3b      	adds	r3, r7, #4
 8006888:	4619      	mov	r1, r3
 800688a:	4818      	ldr	r0, [pc, #96]	; (80068ec <MX_SPI1_Init+0xc8>)
 800688c:	f7fb fc21 	bl	80020d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8006890:	f244 0340 	movw	r3, #16448	; 0x4040
 8006894:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8006896:	2304      	movs	r3, #4
 8006898:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800689a:	1d3b      	adds	r3, r7, #4
 800689c:	4619      	mov	r1, r3
 800689e:	4813      	ldr	r0, [pc, #76]	; (80068ec <MX_SPI1_Init+0xc8>)
 80068a0:	f7fb fc17 	bl	80020d2 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80068a8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80068ac:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80068ae:	2300      	movs	r3, #0
 80068b0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80068b2:	2300      	movs	r3, #0
 80068b4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80068b6:	2300      	movs	r3, #0
 80068b8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80068ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068be:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80068c0:	2300      	movs	r3, #0
 80068c2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80068c4:	2300      	movs	r3, #0
 80068c6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80068c8:	2300      	movs	r3, #0
 80068ca:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80068cc:	230a      	movs	r3, #10
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80068d0:	f107 0318 	add.w	r3, r7, #24
 80068d4:	4619      	mov	r1, r3
 80068d6:	4806      	ldr	r0, [pc, #24]	; (80068f0 <MX_SPI1_Init+0xcc>)
 80068d8:	f7fb fea5 	bl	8002626 <LL_SPI_Init>
  LL_SPI_Enable(SPI1);
 80068dc:	4804      	ldr	r0, [pc, #16]	; (80068f0 <MX_SPI1_Init+0xcc>)
 80068de:	f7ff ff2a 	bl	8006736 <LL_SPI_Enable>
}
 80068e2:	bf00      	nop
 80068e4:	3740      	adds	r7, #64	; 0x40
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	40010800 	.word	0x40010800
 80068f0:	40013000 	.word	0x40013000

080068f4 <SPI1_SendByte>:
	}
	while(LL_SPI_IsActiveFlag_BSY(SPI1));
}

void SPI1_SendByte(uint8_t data)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	71fb      	strb	r3, [r7, #7]
	while(!LL_SPI_IsActiveFlag_TXE(SPI1));
 80068fe:	bf00      	nop
 8006900:	480a      	ldr	r0, [pc, #40]	; (800692c <SPI1_SendByte+0x38>)
 8006902:	f7ff ff27 	bl	8006754 <LL_SPI_IsActiveFlag_TXE>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d0f9      	beq.n	8006900 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(SPI1, data);
 800690c:	79fb      	ldrb	r3, [r7, #7]
 800690e:	4619      	mov	r1, r3
 8006910:	4806      	ldr	r0, [pc, #24]	; (800692c <SPI1_SendByte+0x38>)
 8006912:	f7ff ff43 	bl	800679c <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_BSY(SPI1));
 8006916:	bf00      	nop
 8006918:	4804      	ldr	r0, [pc, #16]	; (800692c <SPI1_SendByte+0x38>)
 800691a:	f7ff ff2d 	bl	8006778 <LL_SPI_IsActiveFlag_BSY>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1f9      	bne.n	8006918 <SPI1_SendByte+0x24>
}
 8006924:	bf00      	nop
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	40013000 	.word	0x40013000

08006930 <SetDC>:

void SetDC(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8006934:	f240 4104 	movw	r1, #1028	; 0x404
 8006938:	4802      	ldr	r0, [pc, #8]	; (8006944 <SetDC+0x14>)
 800693a:	f7ff ff55 	bl	80067e8 <LL_GPIO_SetOutputPin>
}
 800693e:	bf00      	nop
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	40010800 	.word	0x40010800

08006948 <ClearDC>:

void ClearDC(void)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 800694c:	f240 4104 	movw	r1, #1028	; 0x404
 8006950:	4802      	ldr	r0, [pc, #8]	; (800695c <ClearDC+0x14>)
 8006952:	f7ff ff58 	bl	8006806 <LL_GPIO_ResetOutputPin>
}
 8006956:	bf00      	nop
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	40010800 	.word	0x40010800

08006960 <Reset>:

void Reset(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8006964:	f640 0108 	movw	r1, #2056	; 0x808
 8006968:	4806      	ldr	r0, [pc, #24]	; (8006984 <Reset+0x24>)
 800696a:	f7ff ff4c 	bl	8006806 <LL_GPIO_ResetOutputPin>
	delay(10);
 800696e:	200a      	movs	r0, #10
 8006970:	f7fe fa6e 	bl	8004e50 <delay>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8006974:	f640 0108 	movw	r1, #2056	; 0x808
 8006978:	4802      	ldr	r0, [pc, #8]	; (8006984 <Reset+0x24>)
 800697a:	f7ff ff35 	bl	80067e8 <LL_GPIO_SetOutputPin>
}
 800697e:	bf00      	nop
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40010800 	.word	0x40010800

08006988 <LL_APB2_GRP1_EnableClock>:
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006990:	4908      	ldr	r1, [pc, #32]	; (80069b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006992:	4b08      	ldr	r3, [pc, #32]	; (80069b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006994:	699a      	ldr	r2, [r3, #24]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4313      	orrs	r3, r2
 800699a:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800699c:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800699e:	699a      	ldr	r2, [r3, #24]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4013      	ands	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80069a6:	68fb      	ldr	r3, [r7, #12]
}
 80069a8:	bf00      	nop
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc80      	pop	{r7}
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	40021000 	.word	0x40021000

080069b8 <LL_GPIO_SetOutputPin>:
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	0a1b      	lsrs	r3, r3, #8
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	611a      	str	r2, [r3, #16]
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bc80      	pop	{r7}
 80069d4:	4770      	bx	lr
	...

080069d8 <StatusLedInit>:
#include "delay.h"
#include "cmsis_os.h"


void StatusLedInit(void)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80069de:	2004      	movs	r0, #4
 80069e0:	f7ff ffd2 	bl	8006988 <LL_APB2_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80069e4:	2008      	movs	r0, #8
 80069e6:	f7ff ffcf 	bl	8006988 <LL_APB2_GRP1_EnableClock>

  	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069ea:	1d3b      	adds	r3, r7, #4
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	605a      	str	r2, [r3, #4]
 80069f2:	609a      	str	r2, [r3, #8]
 80069f4:	60da      	str	r2, [r3, #12]
 80069f6:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80069f8:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <StatusLedInit+0x48>)
 80069fa:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80069fc:	2301      	movs	r3, #1
 80069fe:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8006a00:	2303      	movs	r3, #3
 8006a02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006a04:	2300      	movs	r3, #0
 8006a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a0c:	1d3b      	adds	r3, r7, #4
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4804      	ldr	r0, [pc, #16]	; (8006a24 <StatusLedInit+0x4c>)
 8006a12:	f7fb fb5e 	bl	80020d2 <LL_GPIO_Init>
}
 8006a16:	bf00      	nop
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	04200020 	.word	0x04200020
 8006a24:	40010c00 	.word	0x40010c00

08006a28 <StatusLedON>:

void StatusLedON()
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_13);
 8006a2c:	4902      	ldr	r1, [pc, #8]	; (8006a38 <StatusLedON+0x10>)
 8006a2e:	4803      	ldr	r0, [pc, #12]	; (8006a3c <StatusLedON+0x14>)
 8006a30:	f7ff ffc2 	bl	80069b8 <LL_GPIO_SetOutputPin>
}
 8006a34:	bf00      	nop
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	04200020 	.word	0x04200020
 8006a3c:	40010c00 	.word	0x40010c00

08006a40 <NVIC_GetPriorityGrouping>:
{
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a44:	4b04      	ldr	r3, [pc, #16]	; (8006a58 <NVIC_GetPriorityGrouping+0x18>)
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	0a1b      	lsrs	r3, r3, #8
 8006a4a:	f003 0307 	and.w	r3, r3, #7
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	e000ed00 	.word	0xe000ed00

08006a5c <NVIC_EnableIRQ>:
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006a66:	4908      	ldr	r1, [pc, #32]	; (8006a88 <NVIC_EnableIRQ+0x2c>)
 8006a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a6c:	095b      	lsrs	r3, r3, #5
 8006a6e:	79fa      	ldrb	r2, [r7, #7]
 8006a70:	f002 021f 	and.w	r2, r2, #31
 8006a74:	2001      	movs	r0, #1
 8006a76:	fa00 f202 	lsl.w	r2, r0, r2
 8006a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr
 8006a88:	e000e100 	.word	0xe000e100

08006a8c <NVIC_DisableIRQ>:
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	4603      	mov	r3, r0
 8006a94:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006a96:	4909      	ldr	r1, [pc, #36]	; (8006abc <NVIC_DisableIRQ+0x30>)
 8006a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a9c:	095b      	lsrs	r3, r3, #5
 8006a9e:	79fa      	ldrb	r2, [r7, #7]
 8006aa0:	f002 021f 	and.w	r2, r2, #31
 8006aa4:	2001      	movs	r0, #1
 8006aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8006aaa:	3320      	adds	r3, #32
 8006aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc80      	pop	{r7}
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	e000e100 	.word	0xe000e100

08006ac0 <NVIC_SetPriority>:
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	6039      	str	r1, [r7, #0]
 8006aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8006acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	da0b      	bge.n	8006aec <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ad4:	490d      	ldr	r1, [pc, #52]	; (8006b0c <NVIC_SetPriority+0x4c>)
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	f003 030f 	and.w	r3, r3, #15
 8006adc:	3b04      	subs	r3, #4
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	0112      	lsls	r2, r2, #4
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	440b      	add	r3, r1
 8006ae8:	761a      	strb	r2, [r3, #24]
}
 8006aea:	e009      	b.n	8006b00 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006aec:	4908      	ldr	r1, [pc, #32]	; (8006b10 <NVIC_SetPriority+0x50>)
 8006aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	0112      	lsls	r2, r2, #4
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	440b      	add	r3, r1
 8006afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bc80      	pop	{r7}
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	e000ed00 	.word	0xe000ed00
 8006b10:	e000e100 	.word	0xe000e100

08006b14 <NVIC_EncodePriority>:
{
 8006b14:	b480      	push	{r7}
 8006b16:	b089      	sub	sp, #36	; 0x24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	f1c3 0307 	rsb	r3, r3, #7
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	bf28      	it	cs
 8006b32:	2304      	movcs	r3, #4
 8006b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	2b06      	cmp	r3, #6
 8006b3c:	d902      	bls.n	8006b44 <NVIC_EncodePriority+0x30>
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	3b03      	subs	r3, #3
 8006b42:	e000      	b.n	8006b46 <NVIC_EncodePriority+0x32>
 8006b44:	2300      	movs	r3, #0
 8006b46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b48:	2201      	movs	r2, #1
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	1e5a      	subs	r2, r3, #1
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	401a      	ands	r2, r3
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b62:	1e59      	subs	r1, r3, #1
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b68:	4313      	orrs	r3, r2
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3724      	adds	r7, #36	; 0x24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr

08006b74 <LL_APB2_GRP1_EnableClock>:
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006b7c:	4908      	ldr	r1, [pc, #32]	; (8006ba0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006b7e:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006b80:	699a      	ldr	r2, [r3, #24]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006b88:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006b8a:	699a      	ldr	r2, [r3, #24]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006b92:	68fb      	ldr	r3, [r7, #12]
}
 8006b94:	bf00      	nop
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bc80      	pop	{r7}
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40021000 	.word	0x40021000

08006ba4 <LL_USART_Enable>:
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	60da      	str	r2, [r3, #12]
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bc80      	pop	{r7}
 8006bc0:	4770      	bx	lr

08006bc2 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	615a      	str	r2, [r3, #20]
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bc80      	pop	{r7}
 8006bea:	4770      	bx	lr

08006bec <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0320 	and.w	r3, r3, #32
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	bf0c      	ite	eq
 8006c00:	2301      	moveq	r3, #1
 8006c02:	2300      	movne	r3, #0
 8006c04:	b2db      	uxtb	r3, r3
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bc80      	pop	{r7}
 8006c0e:	4770      	bx	lr

08006c10 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c20:	2b40      	cmp	r3, #64	; 0x40
 8006c22:	bf0c      	ite	eq
 8006c24:	2301      	moveq	r3, #1
 8006c26:	2300      	movne	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bc80      	pop	{r7}
 8006c32:	4770      	bx	lr

08006c34 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f043 0220 	orr.w	r2, r3, #32
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	60da      	str	r2, [r3, #12]
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bc80      	pop	{r7}
 8006c50:	4770      	bx	lr

08006c52 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	f043 0201 	orr.w	r2, r3, #1
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	615a      	str	r2, [r3, #20]
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bc80      	pop	{r7}
 8006c6e:	4770      	bx	lr

08006c70 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f003 0320 	and.w	r3, r3, #32
 8006c80:	2b20      	cmp	r3, #32
 8006c82:	bf0c      	ite	eq
 8006c84:	2301      	moveq	r3, #1
 8006c86:	2300      	movne	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bc80      	pop	{r7}
 8006c92:	4770      	bx	lr

08006c94 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	b2db      	uxtb	r3, r3
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr

08006cac <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8006cb8:	78fa      	ldrb	r2, [r7, #3]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	605a      	str	r2, [r3, #4]
}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bc80      	pop	{r7}
 8006cc6:	4770      	bx	lr

08006cc8 <LL_GPIO_SetOutputPin>:
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	0a1b      	lsrs	r3, r3, #8
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	611a      	str	r2, [r3, #16]
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr

08006ce6 <LL_GPIO_ResetOutputPin>:
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	0a1b      	lsrs	r3, r3, #8
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	615a      	str	r2, [r3, #20]
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bc80      	pop	{r7}
 8006d02:	4770      	bx	lr

08006d04 <USART_SendData_byte>:
#include "ring_buffer.h"

//char uart_rx_buffer[512];

void USART_SendData_byte(char data)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART1, data);
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	4619      	mov	r1, r3
 8006d12:	4807      	ldr	r0, [pc, #28]	; (8006d30 <USART_SendData_byte+0x2c>)
 8006d14:	f7ff ffca 	bl	8006cac <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TC(USART1));
 8006d18:	bf00      	nop
 8006d1a:	4805      	ldr	r0, [pc, #20]	; (8006d30 <USART_SendData_byte+0x2c>)
 8006d1c:	f7ff ff78 	bl	8006c10 <LL_USART_IsActiveFlag_TC>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0f9      	beq.n	8006d1a <USART_SendData_byte+0x16>
}
 8006d26:	bf00      	nop
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	40013800 	.word	0x40013800

08006d34 <USART_SendData>:

void USART_SendData(char * data, uint32_t data_length)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < data_length; i++)
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	e014      	b.n	8006d6e <USART_SendData+0x3a>
	{
		LL_USART_TransmitData8(USART1, data[i]);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	4413      	add	r3, r2
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	480c      	ldr	r0, [pc, #48]	; (8006d80 <USART_SendData+0x4c>)
 8006d50:	f7ff ffac 	bl	8006cac <LL_USART_TransmitData8>
		LL_mDelay(2);
 8006d54:	2002      	movs	r0, #2
 8006d56:	f7fc f877 	bl	8002e48 <LL_mDelay>
		while (!LL_USART_IsActiveFlag_TC(USART1));
 8006d5a:	bf00      	nop
 8006d5c:	4808      	ldr	r0, [pc, #32]	; (8006d80 <USART_SendData+0x4c>)
 8006d5e:	f7ff ff57 	bl	8006c10 <LL_USART_IsActiveFlag_TC>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0f9      	beq.n	8006d5c <USART_SendData+0x28>
	for(int i = 0; i < data_length; i++)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d3e6      	bcc.n	8006d44 <USART_SendData+0x10>
	}
}
 8006d76:	bf00      	nop
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	40013800 	.word	0x40013800

08006d84 <USART_CharReception_Callback>:

void USART_CharReception_Callback(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
	__IO uint32_t received_char;
	received_char = LL_USART_ReceiveData8(USART1);
 8006d8a:	4807      	ldr	r0, [pc, #28]	; (8006da8 <USART_CharReception_Callback+0x24>)
 8006d8c:	f7ff ff82 	bl	8006c94 <LL_USART_ReceiveData8>
 8006d90:	4603      	mov	r3, r0
 8006d92:	607b      	str	r3, [r7, #4]

	RingBuff_Push(received_char);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fa fb75 	bl	8001488 <RingBuff_Push>
  //LL_USART_TransmitData8(USART1, received_char);
}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	40013800 	.word	0x40013800

08006dac <Error_Callback>:

void Error_Callback(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
  __IO uint32_t sr_reg;

  NVIC_DisableIRQ(USART1_IRQn);
 8006db2:	2025      	movs	r0, #37	; 0x25
 8006db4:	f7ff fe6a 	bl	8006a8c <NVIC_DisableIRQ>

  sr_reg = LL_USART_ReadReg(USART1, SR);
 8006db8:	4b03      	ldr	r3, [pc, #12]	; (8006dc8 <Error_Callback+0x1c>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	607b      	str	r3, [r7, #4]
  if (sr_reg & LL_USART_SR_NE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
  {

  }
}
 8006dc0:	bf00      	nop
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	40013800 	.word	0x40013800

08006dcc <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
  if(LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
 8006dd0:	4809      	ldr	r0, [pc, #36]	; (8006df8 <USART1_IRQHandler+0x2c>)
 8006dd2:	f7ff ff0b 	bl	8006bec <LL_USART_IsActiveFlag_RXNE>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d008      	beq.n	8006dee <USART1_IRQHandler+0x22>
 8006ddc:	4806      	ldr	r0, [pc, #24]	; (8006df8 <USART1_IRQHandler+0x2c>)
 8006dde:	f7ff ff47 	bl	8006c70 <LL_USART_IsEnabledIT_RXNE>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <USART1_IRQHandler+0x22>
  {
    USART_CharReception_Callback();
 8006de8:	f7ff ffcc 	bl	8006d84 <USART_CharReception_Callback>
 8006dec:	e001      	b.n	8006df2 <USART1_IRQHandler+0x26>
  }
  else
  {
    Error_Callback();
 8006dee:	f7ff ffdd 	bl	8006dac <Error_Callback>
  }
}
 8006df2:	bf00      	nop
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	40013800 	.word	0x40013800

08006dfc <USART1_Device_Reset>:

void USART1_Device_Reset(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8006e00:	4906      	ldr	r1, [pc, #24]	; (8006e1c <USART1_Device_Reset+0x20>)
 8006e02:	4807      	ldr	r0, [pc, #28]	; (8006e20 <USART1_Device_Reset+0x24>)
 8006e04:	f7ff ff6f 	bl	8006ce6 <LL_GPIO_ResetOutputPin>
	LL_mDelay(100);
 8006e08:	2064      	movs	r0, #100	; 0x64
 8006e0a:	f7fc f81d 	bl	8002e48 <LL_mDelay>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8006e0e:	4903      	ldr	r1, [pc, #12]	; (8006e1c <USART1_Device_Reset+0x20>)
 8006e10:	4803      	ldr	r0, [pc, #12]	; (8006e20 <USART1_Device_Reset+0x24>)
 8006e12:	f7ff ff59 	bl	8006cc8 <LL_GPIO_SetOutputPin>
}
 8006e16:	bf00      	nop
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	04010001 	.word	0x04010001
 8006e20:	40010800 	.word	0x40010800

08006e24 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b08c      	sub	sp, #48	; 0x30
 8006e28:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8006e2a:	f107 0318 	add.w	r3, r7, #24
 8006e2e:	2200      	movs	r2, #0
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	605a      	str	r2, [r3, #4]
 8006e34:	609a      	str	r2, [r3, #8]
 8006e36:	60da      	str	r2, [r3, #12]
 8006e38:	611a      	str	r2, [r3, #16]
 8006e3a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e3c:	1d3b      	adds	r3, r7, #4
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	605a      	str	r2, [r3, #4]
 8006e44:	609a      	str	r2, [r3, #8]
 8006e46:	60da      	str	r2, [r3, #12]
 8006e48:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8006e4a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006e4e:	f7ff fe91 	bl	8006b74 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8006e52:	2004      	movs	r0, #4
 8006e54:	f7ff fe8e 	bl	8006b74 <LL_APB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8006e58:	4b30      	ldr	r3, [pc, #192]	; (8006f1c <MX_USART1_UART_Init+0xf8>)
 8006e5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006e5c:	2309      	movs	r3, #9
 8006e5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8006e60:	2303      	movs	r3, #3
 8006e62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e6c:	1d3b      	adds	r3, r7, #4
 8006e6e:	4619      	mov	r1, r3
 8006e70:	482b      	ldr	r0, [pc, #172]	; (8006f20 <MX_USART1_UART_Init+0xfc>)
 8006e72:	f7fb f92e 	bl	80020d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8006e76:	4b2b      	ldr	r3, [pc, #172]	; (8006f24 <MX_USART1_UART_Init+0x100>)
 8006e78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8006e7a:	2304      	movs	r3, #4
 8006e7c:	60bb      	str	r3, [r7, #8]

  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006e82:	2301      	movs	r3, #1
 8006e84:	617b      	str	r3, [r7, #20]

  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e86:	1d3b      	adds	r3, r7, #4
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4825      	ldr	r0, [pc, #148]	; (8006f20 <MX_USART1_UART_Init+0xfc>)
 8006e8c:	f7fb f921 	bl	80020d2 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006e90:	f7ff fdd6 	bl	8006a40 <NVIC_GetPriorityGrouping>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2200      	movs	r2, #0
 8006e98:	2100      	movs	r1, #0
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff fe3a 	bl	8006b14 <NVIC_EncodePriority>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	2025      	movs	r0, #37	; 0x25
 8006ea6:	f7ff fe0b 	bl	8006ac0 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8006eaa:	2025      	movs	r0, #37	; 0x25
 8006eac:	f7ff fdd6 	bl	8006a5c <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8006eb0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8006eb4:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	62fb      	str	r3, [r7, #44]	; 0x2c

  LL_USART_Init(USART1, &USART_InitStruct);
 8006eca:	f107 0318 	add.w	r3, r7, #24
 8006ece:	4619      	mov	r1, r3
 8006ed0:	4815      	ldr	r0, [pc, #84]	; (8006f28 <MX_USART1_UART_Init+0x104>)
 8006ed2:	f7fb ff31 	bl	8002d38 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8006ed6:	4814      	ldr	r0, [pc, #80]	; (8006f28 <MX_USART1_UART_Init+0x104>)
 8006ed8:	f7ff fe73 	bl	8006bc2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8006edc:	4812      	ldr	r0, [pc, #72]	; (8006f28 <MX_USART1_UART_Init+0x104>)
 8006ede:	f7ff fe61 	bl	8006ba4 <LL_USART_Enable>

  LL_USART_EnableIT_RXNE(USART1);
 8006ee2:	4811      	ldr	r0, [pc, #68]	; (8006f28 <MX_USART1_UART_Init+0x104>)
 8006ee4:	f7ff fea6 	bl	8006c34 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_ERROR(USART1);
 8006ee8:	480f      	ldr	r0, [pc, #60]	; (8006f28 <MX_USART1_UART_Init+0x104>)
 8006eea:	f7ff feb2 	bl	8006c52 <LL_USART_EnableIT_ERROR>

  //Reset gpio
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8006eee:	4b0f      	ldr	r3, [pc, #60]	; (8006f2c <MX_USART1_UART_Init+0x108>)
 8006ef0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006efe:	2301      	movs	r3, #1
 8006f00:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f02:	1d3b      	adds	r3, r7, #4
 8006f04:	4619      	mov	r1, r3
 8006f06:	4806      	ldr	r0, [pc, #24]	; (8006f20 <MX_USART1_UART_Init+0xfc>)
 8006f08:	f7fb f8e3 	bl	80020d2 <LL_GPIO_Init>

  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8006f0c:	4907      	ldr	r1, [pc, #28]	; (8006f2c <MX_USART1_UART_Init+0x108>)
 8006f0e:	4804      	ldr	r0, [pc, #16]	; (8006f20 <MX_USART1_UART_Init+0xfc>)
 8006f10:	f7ff feda 	bl	8006cc8 <LL_GPIO_SetOutputPin>
}
 8006f14:	bf00      	nop
 8006f16:	3730      	adds	r7, #48	; 0x30
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	04020002 	.word	0x04020002
 8006f20:	40010800 	.word	0x40010800
 8006f24:	04040004 	.word	0x04040004
 8006f28:	40013800 	.word	0x40013800
 8006f2c:	04010001 	.word	0x04010001

08006f30 <MX_FREERTOS_Init>:
//
//	int free_heap = xPortGetFreeHeapSize();
//}
//#pragma GCC pop_options

void __attribute__((optimize("O0"))) MX_FREERTOS_Init(void) {
 8006f30:	b5b0      	push	{r4, r5, r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0

  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8006f36:	4b0f      	ldr	r3, [pc, #60]	; (8006f74 <MX_FREERTOS_Init+0x44>)
 8006f38:	1d3c      	adds	r4, r7, #4
 8006f3a:	461d      	mov	r5, r3
 8006f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006f44:	1d3b      	adds	r3, r7, #4
 8006f46:	2100      	movs	r1, #0
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fb ffcd 	bl	8002ee8 <osThreadCreate>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <MX_FREERTOS_Init+0x48>)
 8006f52:	601a      	str	r2, [r3, #0]

  EncoderQueueInit();
 8006f54:	f7fe f952 	bl	80051fc <EncoderQueueInit>
  LDRQueueInit();
 8006f58:	f7fe ffa0 	bl	8005e9c <LDRQueueInit>

  LedTaskInit();
 8006f5c:	f7ff face 	bl	80064fc <LedTaskInit>
  LDRTaskInit();
 8006f60:	f7fe fff4 	bl	8005f4c <LDRTaskInit>
  EncoderTaskInit();
 8006f64:	f7fe f9da 	bl	800531c <EncoderTaskInit>
  ESPTaskInit();
 8006f68:	f7fe fab0 	bl	80054cc <ESPTaskInit>
}
 8006f6c:	bf00      	nop
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bdb0      	pop	{r4, r5, r7, pc}
 8006f74:	08008060 	.word	0x08008060
 8006f78:	2000305c 	.word	0x2000305c

08006f7c <StartDefaultTask>:

void StartDefaultTask(void const * argument)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006f84:	2001      	movs	r0, #1
 8006f86:	f7fb ffd6 	bl	8002f36 <osDelay>
 8006f8a:	e7fb      	b.n	8006f84 <StartDefaultTask+0x8>

08006f8c <LL_RCC_HSE_Enable>:
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006f90:	4a04      	ldr	r2, [pc, #16]	; (8006fa4 <LL_RCC_HSE_Enable+0x18>)
 8006f92:	4b04      	ldr	r3, [pc, #16]	; (8006fa4 <LL_RCC_HSE_Enable+0x18>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f9a:	6013      	str	r3, [r2, #0]
}
 8006f9c:	bf00      	nop
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bc80      	pop	{r7}
 8006fa2:	4770      	bx	lr
 8006fa4:	40021000 	.word	0x40021000

08006fa8 <LL_RCC_HSE_IsReady>:
{
 8006fa8:	b480      	push	{r7}
 8006faa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8006fac:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <LL_RCC_HSE_IsReady+0x20>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fb8:	bf0c      	ite	eq
 8006fba:	2301      	moveq	r3, #1
 8006fbc:	2300      	movne	r3, #0
 8006fbe:	b2db      	uxtb	r3, r3
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr
 8006fc8:	40021000 	.word	0x40021000

08006fcc <LL_RCC_SetSysClkSource>:
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006fd4:	4906      	ldr	r1, [pc, #24]	; (8006ff0 <LL_RCC_SetSysClkSource+0x24>)
 8006fd6:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <LL_RCC_SetSysClkSource+0x24>)
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f023 0203 	bic.w	r2, r3, #3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	604b      	str	r3, [r1, #4]
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bc80      	pop	{r7}
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	40021000 	.word	0x40021000

08006ff4 <LL_RCC_GetSysClkSource>:
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006ff8:	4b03      	ldr	r3, [pc, #12]	; (8007008 <LL_RCC_GetSysClkSource+0x14>)
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f003 030c 	and.w	r3, r3, #12
}
 8007000:	4618      	mov	r0, r3
 8007002:	46bd      	mov	sp, r7
 8007004:	bc80      	pop	{r7}
 8007006:	4770      	bx	lr
 8007008:	40021000 	.word	0x40021000

0800700c <LL_RCC_SetAHBPrescaler>:
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007014:	4906      	ldr	r1, [pc, #24]	; (8007030 <LL_RCC_SetAHBPrescaler+0x24>)
 8007016:	4b06      	ldr	r3, [pc, #24]	; (8007030 <LL_RCC_SetAHBPrescaler+0x24>)
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4313      	orrs	r3, r2
 8007022:	604b      	str	r3, [r1, #4]
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	bc80      	pop	{r7}
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	40021000 	.word	0x40021000

08007034 <LL_RCC_SetAPB1Prescaler>:
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800703c:	4906      	ldr	r1, [pc, #24]	; (8007058 <LL_RCC_SetAPB1Prescaler+0x24>)
 800703e:	4b06      	ldr	r3, [pc, #24]	; (8007058 <LL_RCC_SetAPB1Prescaler+0x24>)
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4313      	orrs	r3, r2
 800704a:	604b      	str	r3, [r1, #4]
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	bc80      	pop	{r7}
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	40021000 	.word	0x40021000

0800705c <LL_RCC_SetAPB2Prescaler>:
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007064:	4906      	ldr	r1, [pc, #24]	; (8007080 <LL_RCC_SetAPB2Prescaler+0x24>)
 8007066:	4b06      	ldr	r3, [pc, #24]	; (8007080 <LL_RCC_SetAPB2Prescaler+0x24>)
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4313      	orrs	r3, r2
 8007072:	604b      	str	r3, [r1, #4]
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	bc80      	pop	{r7}
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40021000 	.word	0x40021000

08007084 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800708c:	4906      	ldr	r1, [pc, #24]	; (80070a8 <LL_FLASH_SetLatency+0x24>)
 800708e:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <LL_FLASH_SetLatency+0x24>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f023 0207 	bic.w	r2, r3, #7
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4313      	orrs	r3, r2
 800709a:	600b      	str	r3, [r1, #0]
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bc80      	pop	{r7}
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	40022000 	.word	0x40022000

080070ac <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80070b0:	4b03      	ldr	r3, [pc, #12]	; (80070c0 <LL_FLASH_GetLatency+0x14>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0307 	and.w	r3, r3, #7
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bc80      	pop	{r7}
 80070be:	4770      	bx	lr
 80070c0:	40022000 	.word	0x40022000

080070c4 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d106      	bne.n	80070e0 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80070d2:	4a09      	ldr	r2, [pc, #36]	; (80070f8 <LL_SYSTICK_SetClkSource+0x34>)
 80070d4:	4b08      	ldr	r3, [pc, #32]	; (80070f8 <LL_SYSTICK_SetClkSource+0x34>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f043 0304 	orr.w	r3, r3, #4
 80070dc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80070de:	e005      	b.n	80070ec <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80070e0:	4a05      	ldr	r2, [pc, #20]	; (80070f8 <LL_SYSTICK_SetClkSource+0x34>)
 80070e2:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <LL_SYSTICK_SetClkSource+0x34>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f023 0304 	bic.w	r3, r3, #4
 80070ea:	6013      	str	r3, [r2, #0]
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bc80      	pop	{r7}
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	e000e010 	.word	0xe000e010

080070fc <main>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);

int main(void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
  HAL_Init();
 8007100:	f7fa fa26 	bl	8001550 <HAL_Init>
  SystemClock_Config();
 8007104:	f000 f808 	bl	8007118 <SystemClock_Config>
  MX_FREERTOS_Init();
 8007108:	f7ff ff12 	bl	8006f30 <MX_FREERTOS_Init>

  PowerDropInterruptInit(); // config irq for checking dropped power
 800710c:	f7ff fac4 	bl	8006698 <PowerDropInterruptInit>

  osKernelStart();
 8007110:	f7fb fee3 	bl	8002eda <osKernelStart>

  while (1)
 8007114:	e7fe      	b.n	8007114 <main+0x18>
	...

08007118 <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800711c:	2000      	movs	r0, #0
 800711e:	f7ff ffb1 	bl	8007084 <LL_FLASH_SetLatency>

    if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8007122:	f7ff ffc3 	bl	80070ac <LL_FLASH_GetLatency>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <SystemClock_Config+0x18>
    {
      Error_Handler();
 800712c:	f000 f83a 	bl	80071a4 <Error_Handler>
    }
    LL_RCC_HSE_Enable();
 8007130:	f7ff ff2c 	bl	8006f8c <LL_RCC_HSE_Enable>

    while(LL_RCC_HSE_IsReady() != 1)
 8007134:	bf00      	nop
 8007136:	f7ff ff37 	bl	8006fa8 <LL_RCC_HSE_IsReady>
 800713a:	4603      	mov	r3, r0
 800713c:	2b01      	cmp	r3, #1
 800713e:	d1fa      	bne.n	8007136 <SystemClock_Config+0x1e>
    {

    }
    LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8007140:	2000      	movs	r0, #0
 8007142:	f7ff ff63 	bl	800700c <LL_RCC_SetAHBPrescaler>
    LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8007146:	2000      	movs	r0, #0
 8007148:	f7ff ff74 	bl	8007034 <LL_RCC_SetAPB1Prescaler>
    LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800714c:	2000      	movs	r0, #0
 800714e:	f7ff ff85 	bl	800705c <LL_RCC_SetAPB2Prescaler>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8007152:	2001      	movs	r0, #1
 8007154:	f7ff ff3a 	bl	8006fcc <LL_RCC_SetSysClkSource>

    while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)
 8007158:	bf00      	nop
 800715a:	f7ff ff4b 	bl	8006ff4 <LL_RCC_GetSysClkSource>
 800715e:	4603      	mov	r3, r0
 8007160:	2b04      	cmp	r3, #4
 8007162:	d1fa      	bne.n	800715a <SystemClock_Config+0x42>
    {
    
    }
    LL_Init1msTick(8000000);
 8007164:	4805      	ldr	r0, [pc, #20]	; (800717c <SystemClock_Config+0x64>)
 8007166:	f7fb fe61 	bl	8002e2c <LL_Init1msTick>
    LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 800716a:	2004      	movs	r0, #4
 800716c:	f7ff ffaa 	bl	80070c4 <LL_SYSTICK_SetClkSource>
    LL_SetSystemCoreClock(8000000);
 8007170:	4802      	ldr	r0, [pc, #8]	; (800717c <SystemClock_Config+0x64>)
 8007172:	f7fb fe8d 	bl	8002e90 <LL_SetSystemCoreClock>
}
 8007176:	bf00      	nop
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	007a1200 	.word	0x007a1200

08007180 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a04      	ldr	r2, [pc, #16]	; (80071a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d101      	bne.n	8007196 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007192:	f7fa f9f3 	bl	800157c <HAL_IncTick>
  }
}
 8007196:	bf00      	nop
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	40012c00 	.word	0x40012c00

080071a4 <Error_Handler>:

void Error_Handler(void)
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0

}
 80071a8:	bf00      	nop
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bc80      	pop	{r7}
 80071ae:	4770      	bx	lr

080071b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80071b6:	4a18      	ldr	r2, [pc, #96]	; (8007218 <HAL_MspInit+0x68>)
 80071b8:	4b17      	ldr	r3, [pc, #92]	; (8007218 <HAL_MspInit+0x68>)
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	f043 0301 	orr.w	r3, r3, #1
 80071c0:	6193      	str	r3, [r2, #24]
 80071c2:	4b15      	ldr	r3, [pc, #84]	; (8007218 <HAL_MspInit+0x68>)
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	60bb      	str	r3, [r7, #8]
 80071cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80071ce:	4a12      	ldr	r2, [pc, #72]	; (8007218 <HAL_MspInit+0x68>)
 80071d0:	4b11      	ldr	r3, [pc, #68]	; (8007218 <HAL_MspInit+0x68>)
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d8:	61d3      	str	r3, [r2, #28]
 80071da:	4b0f      	ldr	r3, [pc, #60]	; (8007218 <HAL_MspInit+0x68>)
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071e2:	607b      	str	r3, [r7, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80071e6:	2200      	movs	r2, #0
 80071e8:	210f      	movs	r1, #15
 80071ea:	f06f 0001 	mvn.w	r0, #1
 80071ee:	f7fa fa86 	bl	80016fe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80071f2:	4b0a      	ldr	r3, [pc, #40]	; (800721c <HAL_MspInit+0x6c>)
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	4a04      	ldr	r2, [pc, #16]	; (800721c <HAL_MspInit+0x6c>)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800720e:	bf00      	nop
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	40021000 	.word	0x40021000
 800721c:	40010000 	.word	0x40010000

08007220 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08c      	sub	sp, #48	; 0x30
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007228:	2300      	movs	r3, #0
 800722a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800722c:	2300      	movs	r3, #0
 800722e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8007230:	2200      	movs	r2, #0
 8007232:	6879      	ldr	r1, [r7, #4]
 8007234:	2019      	movs	r0, #25
 8007236:	f7fa fa62 	bl	80016fe <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 800723a:	2019      	movs	r0, #25
 800723c:	f7fa fa7b 	bl	8001736 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007240:	4a1e      	ldr	r2, [pc, #120]	; (80072bc <HAL_InitTick+0x9c>)
 8007242:	4b1e      	ldr	r3, [pc, #120]	; (80072bc <HAL_InitTick+0x9c>)
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800724a:	6193      	str	r3, [r2, #24]
 800724c:	4b1b      	ldr	r3, [pc, #108]	; (80072bc <HAL_InitTick+0x9c>)
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007258:	f107 0210 	add.w	r2, r7, #16
 800725c:	f107 0314 	add.w	r3, r7, #20
 8007260:	4611      	mov	r1, r2
 8007262:	4618      	mov	r0, r3
 8007264:	f7fa fa94 	bl	8001790 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007268:	f7fa fa7e 	bl	8001768 <HAL_RCC_GetPCLK2Freq>
 800726c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007270:	4a13      	ldr	r2, [pc, #76]	; (80072c0 <HAL_InitTick+0xa0>)
 8007272:	fba2 2303 	umull	r2, r3, r2, r3
 8007276:	0c9b      	lsrs	r3, r3, #18
 8007278:	3b01      	subs	r3, #1
 800727a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800727c:	4b11      	ldr	r3, [pc, #68]	; (80072c4 <HAL_InitTick+0xa4>)
 800727e:	4a12      	ldr	r2, [pc, #72]	; (80072c8 <HAL_InitTick+0xa8>)
 8007280:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8007282:	4b10      	ldr	r3, [pc, #64]	; (80072c4 <HAL_InitTick+0xa4>)
 8007284:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007288:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800728a:	4a0e      	ldr	r2, [pc, #56]	; (80072c4 <HAL_InitTick+0xa4>)
 800728c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007290:	4b0c      	ldr	r3, [pc, #48]	; (80072c4 <HAL_InitTick+0xa4>)
 8007292:	2200      	movs	r2, #0
 8007294:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007296:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <HAL_InitTick+0xa4>)
 8007298:	2200      	movs	r2, #0
 800729a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800729c:	4809      	ldr	r0, [pc, #36]	; (80072c4 <HAL_InitTick+0xa4>)
 800729e:	f7fa faa7 	bl	80017f0 <HAL_TIM_Base_Init>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d104      	bne.n	80072b2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80072a8:	4806      	ldr	r0, [pc, #24]	; (80072c4 <HAL_InitTick+0xa4>)
 80072aa:	f7fa fad5 	bl	8001858 <HAL_TIM_Base_Start_IT>
 80072ae:	4603      	mov	r3, r0
 80072b0:	e000      	b.n	80072b4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3730      	adds	r7, #48	; 0x30
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	40021000 	.word	0x40021000
 80072c0:	431bde83 	.word	0x431bde83
 80072c4:	20003060 	.word	0x20003060
 80072c8:	40012c00 	.word	0x40012c00

080072cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072cc:	b480      	push	{r7}
 80072ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80072d0:	bf00      	nop
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bc80      	pop	{r7}
 80072d6:	4770      	bx	lr

080072d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072d8:	b480      	push	{r7}
 80072da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072dc:	e7fe      	b.n	80072dc <HardFault_Handler+0x4>

080072de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80072de:	b480      	push	{r7}
 80072e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80072e2:	e7fe      	b.n	80072e2 <MemManage_Handler+0x4>

080072e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072e4:	b480      	push	{r7}
 80072e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072e8:	e7fe      	b.n	80072e8 <BusFault_Handler+0x4>

080072ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072ea:	b480      	push	{r7}
 80072ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072ee:	e7fe      	b.n	80072ee <UsageFault_Handler+0x4>

080072f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072f0:	b480      	push	{r7}
 80072f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072f4:	bf00      	nop
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bc80      	pop	{r7}
 80072fa:	4770      	bx	lr

080072fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007300:	4802      	ldr	r0, [pc, #8]	; (800730c <TIM1_UP_IRQHandler+0x10>)
 8007302:	f7fa fac3 	bl	800188c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8007306:	bf00      	nop
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20003060 	.word	0x20003060

08007310 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007318:	4b11      	ldr	r3, [pc, #68]	; (8007360 <_sbrk+0x50>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d102      	bne.n	8007326 <_sbrk+0x16>
		heap_end = &end;
 8007320:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <_sbrk+0x50>)
 8007322:	4a10      	ldr	r2, [pc, #64]	; (8007364 <_sbrk+0x54>)
 8007324:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007326:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <_sbrk+0x50>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800732c:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <_sbrk+0x50>)
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4413      	add	r3, r2
 8007334:	466a      	mov	r2, sp
 8007336:	4293      	cmp	r3, r2
 8007338:	d907      	bls.n	800734a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800733a:	f000 f86f 	bl	800741c <__errno>
 800733e:	4602      	mov	r2, r0
 8007340:	230c      	movs	r3, #12
 8007342:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007344:	f04f 33ff 	mov.w	r3, #4294967295
 8007348:	e006      	b.n	8007358 <_sbrk+0x48>
	}

	heap_end += incr;
 800734a:	4b05      	ldr	r3, [pc, #20]	; (8007360 <_sbrk+0x50>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4413      	add	r3, r2
 8007352:	4a03      	ldr	r2, [pc, #12]	; (8007360 <_sbrk+0x50>)
 8007354:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007356:	68fb      	ldr	r3, [r7, #12]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	200023e0 	.word	0x200023e0
 8007364:	200030a4 	.word	0x200030a4

08007368 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800736c:	4a15      	ldr	r2, [pc, #84]	; (80073c4 <SystemInit+0x5c>)
 800736e:	4b15      	ldr	r3, [pc, #84]	; (80073c4 <SystemInit+0x5c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f043 0301 	orr.w	r3, r3, #1
 8007376:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8007378:	4912      	ldr	r1, [pc, #72]	; (80073c4 <SystemInit+0x5c>)
 800737a:	4b12      	ldr	r3, [pc, #72]	; (80073c4 <SystemInit+0x5c>)
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <SystemInit+0x60>)
 8007380:	4013      	ands	r3, r2
 8007382:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8007384:	4a0f      	ldr	r2, [pc, #60]	; (80073c4 <SystemInit+0x5c>)
 8007386:	4b0f      	ldr	r3, [pc, #60]	; (80073c4 <SystemInit+0x5c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800738e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007392:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007394:	4a0b      	ldr	r2, [pc, #44]	; (80073c4 <SystemInit+0x5c>)
 8007396:	4b0b      	ldr	r3, [pc, #44]	; (80073c4 <SystemInit+0x5c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800739e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80073a0:	4a08      	ldr	r2, [pc, #32]	; (80073c4 <SystemInit+0x5c>)
 80073a2:	4b08      	ldr	r3, [pc, #32]	; (80073c4 <SystemInit+0x5c>)
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80073aa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80073ac:	4b05      	ldr	r3, [pc, #20]	; (80073c4 <SystemInit+0x5c>)
 80073ae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80073b2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80073b4:	4b05      	ldr	r3, [pc, #20]	; (80073cc <SystemInit+0x64>)
 80073b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80073ba:	609a      	str	r2, [r3, #8]
#endif 
}
 80073bc:	bf00      	nop
 80073be:	46bd      	mov	sp, r7
 80073c0:	bc80      	pop	{r7}
 80073c2:	4770      	bx	lr
 80073c4:	40021000 	.word	0x40021000
 80073c8:	f8ff0000 	.word	0xf8ff0000
 80073cc:	e000ed00 	.word	0xe000ed00

080073d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80073d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80073d2:	e003      	b.n	80073dc <LoopCopyDataInit>

080073d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80073d4:	4b0b      	ldr	r3, [pc, #44]	; (8007404 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80073d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80073d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80073da:	3104      	adds	r1, #4

080073dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80073dc:	480a      	ldr	r0, [pc, #40]	; (8007408 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80073de:	4b0b      	ldr	r3, [pc, #44]	; (800740c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80073e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80073e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80073e4:	d3f6      	bcc.n	80073d4 <CopyDataInit>
  ldr r2, =_sbss
 80073e6:	4a0a      	ldr	r2, [pc, #40]	; (8007410 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80073e8:	e002      	b.n	80073f0 <LoopFillZerobss>

080073ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80073ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80073ec:	f842 3b04 	str.w	r3, [r2], #4

080073f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80073f0:	4b08      	ldr	r3, [pc, #32]	; (8007414 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80073f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80073f4:	d3f9      	bcc.n	80073ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80073f6:	f7ff ffb7 	bl	8007368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80073fa:	f000 f815 	bl	8007428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80073fe:	f7ff fe7d 	bl	80070fc <main>
  bx lr
 8007402:	4770      	bx	lr
  ldr r3, =_sidata
 8007404:	0800871c 	.word	0x0800871c
  ldr r0, =_sdata
 8007408:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800740c:	20000268 	.word	0x20000268
  ldr r2, =_sbss
 8007410:	20000268 	.word	0x20000268
  ldr r3, = _ebss
 8007414:	200030a4 	.word	0x200030a4

08007418 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007418:	e7fe      	b.n	8007418 <CAN1_RX1_IRQHandler>
	...

0800741c <__errno>:
 800741c:	4b01      	ldr	r3, [pc, #4]	; (8007424 <__errno+0x8>)
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20000098 	.word	0x20000098

08007428 <__libc_init_array>:
 8007428:	b570      	push	{r4, r5, r6, lr}
 800742a:	2500      	movs	r5, #0
 800742c:	4e0c      	ldr	r6, [pc, #48]	; (8007460 <__libc_init_array+0x38>)
 800742e:	4c0d      	ldr	r4, [pc, #52]	; (8007464 <__libc_init_array+0x3c>)
 8007430:	1ba4      	subs	r4, r4, r6
 8007432:	10a4      	asrs	r4, r4, #2
 8007434:	42a5      	cmp	r5, r4
 8007436:	d109      	bne.n	800744c <__libc_init_array+0x24>
 8007438:	f000 fd22 	bl	8007e80 <_init>
 800743c:	2500      	movs	r5, #0
 800743e:	4e0a      	ldr	r6, [pc, #40]	; (8007468 <__libc_init_array+0x40>)
 8007440:	4c0a      	ldr	r4, [pc, #40]	; (800746c <__libc_init_array+0x44>)
 8007442:	1ba4      	subs	r4, r4, r6
 8007444:	10a4      	asrs	r4, r4, #2
 8007446:	42a5      	cmp	r5, r4
 8007448:	d105      	bne.n	8007456 <__libc_init_array+0x2e>
 800744a:	bd70      	pop	{r4, r5, r6, pc}
 800744c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007450:	4798      	blx	r3
 8007452:	3501      	adds	r5, #1
 8007454:	e7ee      	b.n	8007434 <__libc_init_array+0xc>
 8007456:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800745a:	4798      	blx	r3
 800745c:	3501      	adds	r5, #1
 800745e:	e7f2      	b.n	8007446 <__libc_init_array+0x1e>
 8007460:	08008714 	.word	0x08008714
 8007464:	08008714 	.word	0x08008714
 8007468:	08008714 	.word	0x08008714
 800746c:	08008718 	.word	0x08008718

08007470 <memcpy>:
 8007470:	b510      	push	{r4, lr}
 8007472:	1e43      	subs	r3, r0, #1
 8007474:	440a      	add	r2, r1
 8007476:	4291      	cmp	r1, r2
 8007478:	d100      	bne.n	800747c <memcpy+0xc>
 800747a:	bd10      	pop	{r4, pc}
 800747c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007480:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007484:	e7f7      	b.n	8007476 <memcpy+0x6>

08007486 <memset>:
 8007486:	4603      	mov	r3, r0
 8007488:	4402      	add	r2, r0
 800748a:	4293      	cmp	r3, r2
 800748c:	d100      	bne.n	8007490 <memset+0xa>
 800748e:	4770      	bx	lr
 8007490:	f803 1b01 	strb.w	r1, [r3], #1
 8007494:	e7f9      	b.n	800748a <memset+0x4>
	...

08007498 <siprintf>:
 8007498:	b40e      	push	{r1, r2, r3}
 800749a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800749e:	b500      	push	{lr}
 80074a0:	b09c      	sub	sp, #112	; 0x70
 80074a2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80074a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074aa:	9104      	str	r1, [sp, #16]
 80074ac:	9107      	str	r1, [sp, #28]
 80074ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80074b2:	ab1d      	add	r3, sp, #116	; 0x74
 80074b4:	9002      	str	r0, [sp, #8]
 80074b6:	9006      	str	r0, [sp, #24]
 80074b8:	4808      	ldr	r0, [pc, #32]	; (80074dc <siprintf+0x44>)
 80074ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80074be:	f8ad 1016 	strh.w	r1, [sp, #22]
 80074c2:	6800      	ldr	r0, [r0, #0]
 80074c4:	a902      	add	r1, sp, #8
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	f000 f92c 	bl	8007724 <_svfiprintf_r>
 80074cc:	2200      	movs	r2, #0
 80074ce:	9b02      	ldr	r3, [sp, #8]
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	b01c      	add	sp, #112	; 0x70
 80074d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80074d8:	b003      	add	sp, #12
 80074da:	4770      	bx	lr
 80074dc:	20000098 	.word	0x20000098

080074e0 <strstr>:
 80074e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074e2:	7803      	ldrb	r3, [r0, #0]
 80074e4:	b133      	cbz	r3, 80074f4 <strstr+0x14>
 80074e6:	4603      	mov	r3, r0
 80074e8:	4618      	mov	r0, r3
 80074ea:	1c5e      	adds	r6, r3, #1
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	b933      	cbnz	r3, 80074fe <strstr+0x1e>
 80074f0:	4618      	mov	r0, r3
 80074f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074f4:	780b      	ldrb	r3, [r1, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bf18      	it	ne
 80074fa:	2000      	movne	r0, #0
 80074fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074fe:	1e4d      	subs	r5, r1, #1
 8007500:	1e44      	subs	r4, r0, #1
 8007502:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8007506:	2a00      	cmp	r2, #0
 8007508:	d0f3      	beq.n	80074f2 <strstr+0x12>
 800750a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800750e:	4633      	mov	r3, r6
 8007510:	4297      	cmp	r7, r2
 8007512:	d0f6      	beq.n	8007502 <strstr+0x22>
 8007514:	e7e8      	b.n	80074e8 <strstr+0x8>

08007516 <_strtol_l.isra.0>:
 8007516:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751a:	4680      	mov	r8, r0
 800751c:	4689      	mov	r9, r1
 800751e:	4692      	mov	sl, r2
 8007520:	461f      	mov	r7, r3
 8007522:	468b      	mov	fp, r1
 8007524:	465d      	mov	r5, fp
 8007526:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007528:	f815 4b01 	ldrb.w	r4, [r5], #1
 800752c:	f000 f88a 	bl	8007644 <__locale_ctype_ptr_l>
 8007530:	4420      	add	r0, r4
 8007532:	7846      	ldrb	r6, [r0, #1]
 8007534:	f016 0608 	ands.w	r6, r6, #8
 8007538:	d10b      	bne.n	8007552 <_strtol_l.isra.0+0x3c>
 800753a:	2c2d      	cmp	r4, #45	; 0x2d
 800753c:	d10b      	bne.n	8007556 <_strtol_l.isra.0+0x40>
 800753e:	2601      	movs	r6, #1
 8007540:	782c      	ldrb	r4, [r5, #0]
 8007542:	f10b 0502 	add.w	r5, fp, #2
 8007546:	b167      	cbz	r7, 8007562 <_strtol_l.isra.0+0x4c>
 8007548:	2f10      	cmp	r7, #16
 800754a:	d114      	bne.n	8007576 <_strtol_l.isra.0+0x60>
 800754c:	2c30      	cmp	r4, #48	; 0x30
 800754e:	d00a      	beq.n	8007566 <_strtol_l.isra.0+0x50>
 8007550:	e011      	b.n	8007576 <_strtol_l.isra.0+0x60>
 8007552:	46ab      	mov	fp, r5
 8007554:	e7e6      	b.n	8007524 <_strtol_l.isra.0+0xe>
 8007556:	2c2b      	cmp	r4, #43	; 0x2b
 8007558:	bf04      	itt	eq
 800755a:	782c      	ldrbeq	r4, [r5, #0]
 800755c:	f10b 0502 	addeq.w	r5, fp, #2
 8007560:	e7f1      	b.n	8007546 <_strtol_l.isra.0+0x30>
 8007562:	2c30      	cmp	r4, #48	; 0x30
 8007564:	d127      	bne.n	80075b6 <_strtol_l.isra.0+0xa0>
 8007566:	782b      	ldrb	r3, [r5, #0]
 8007568:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800756c:	2b58      	cmp	r3, #88	; 0x58
 800756e:	d14b      	bne.n	8007608 <_strtol_l.isra.0+0xf2>
 8007570:	2710      	movs	r7, #16
 8007572:	786c      	ldrb	r4, [r5, #1]
 8007574:	3502      	adds	r5, #2
 8007576:	2e00      	cmp	r6, #0
 8007578:	bf0c      	ite	eq
 800757a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800757e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007582:	2200      	movs	r2, #0
 8007584:	fbb1 fef7 	udiv	lr, r1, r7
 8007588:	4610      	mov	r0, r2
 800758a:	fb07 1c1e 	mls	ip, r7, lr, r1
 800758e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007592:	2b09      	cmp	r3, #9
 8007594:	d811      	bhi.n	80075ba <_strtol_l.isra.0+0xa4>
 8007596:	461c      	mov	r4, r3
 8007598:	42a7      	cmp	r7, r4
 800759a:	dd1d      	ble.n	80075d8 <_strtol_l.isra.0+0xc2>
 800759c:	1c53      	adds	r3, r2, #1
 800759e:	d007      	beq.n	80075b0 <_strtol_l.isra.0+0x9a>
 80075a0:	4586      	cmp	lr, r0
 80075a2:	d316      	bcc.n	80075d2 <_strtol_l.isra.0+0xbc>
 80075a4:	d101      	bne.n	80075aa <_strtol_l.isra.0+0x94>
 80075a6:	45a4      	cmp	ip, r4
 80075a8:	db13      	blt.n	80075d2 <_strtol_l.isra.0+0xbc>
 80075aa:	2201      	movs	r2, #1
 80075ac:	fb00 4007 	mla	r0, r0, r7, r4
 80075b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075b4:	e7eb      	b.n	800758e <_strtol_l.isra.0+0x78>
 80075b6:	270a      	movs	r7, #10
 80075b8:	e7dd      	b.n	8007576 <_strtol_l.isra.0+0x60>
 80075ba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80075be:	2b19      	cmp	r3, #25
 80075c0:	d801      	bhi.n	80075c6 <_strtol_l.isra.0+0xb0>
 80075c2:	3c37      	subs	r4, #55	; 0x37
 80075c4:	e7e8      	b.n	8007598 <_strtol_l.isra.0+0x82>
 80075c6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80075ca:	2b19      	cmp	r3, #25
 80075cc:	d804      	bhi.n	80075d8 <_strtol_l.isra.0+0xc2>
 80075ce:	3c57      	subs	r4, #87	; 0x57
 80075d0:	e7e2      	b.n	8007598 <_strtol_l.isra.0+0x82>
 80075d2:	f04f 32ff 	mov.w	r2, #4294967295
 80075d6:	e7eb      	b.n	80075b0 <_strtol_l.isra.0+0x9a>
 80075d8:	1c53      	adds	r3, r2, #1
 80075da:	d108      	bne.n	80075ee <_strtol_l.isra.0+0xd8>
 80075dc:	2322      	movs	r3, #34	; 0x22
 80075de:	4608      	mov	r0, r1
 80075e0:	f8c8 3000 	str.w	r3, [r8]
 80075e4:	f1ba 0f00 	cmp.w	sl, #0
 80075e8:	d107      	bne.n	80075fa <_strtol_l.isra.0+0xe4>
 80075ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ee:	b106      	cbz	r6, 80075f2 <_strtol_l.isra.0+0xdc>
 80075f0:	4240      	negs	r0, r0
 80075f2:	f1ba 0f00 	cmp.w	sl, #0
 80075f6:	d00c      	beq.n	8007612 <_strtol_l.isra.0+0xfc>
 80075f8:	b122      	cbz	r2, 8007604 <_strtol_l.isra.0+0xee>
 80075fa:	3d01      	subs	r5, #1
 80075fc:	f8ca 5000 	str.w	r5, [sl]
 8007600:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007604:	464d      	mov	r5, r9
 8007606:	e7f9      	b.n	80075fc <_strtol_l.isra.0+0xe6>
 8007608:	2430      	movs	r4, #48	; 0x30
 800760a:	2f00      	cmp	r7, #0
 800760c:	d1b3      	bne.n	8007576 <_strtol_l.isra.0+0x60>
 800760e:	2708      	movs	r7, #8
 8007610:	e7b1      	b.n	8007576 <_strtol_l.isra.0+0x60>
 8007612:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007618 <strtol>:
 8007618:	4b08      	ldr	r3, [pc, #32]	; (800763c <strtol+0x24>)
 800761a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800761c:	681c      	ldr	r4, [r3, #0]
 800761e:	4d08      	ldr	r5, [pc, #32]	; (8007640 <strtol+0x28>)
 8007620:	6a23      	ldr	r3, [r4, #32]
 8007622:	2b00      	cmp	r3, #0
 8007624:	bf08      	it	eq
 8007626:	462b      	moveq	r3, r5
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	4613      	mov	r3, r2
 800762c:	460a      	mov	r2, r1
 800762e:	4601      	mov	r1, r0
 8007630:	4620      	mov	r0, r4
 8007632:	f7ff ff70 	bl	8007516 <_strtol_l.isra.0>
 8007636:	b003      	add	sp, #12
 8007638:	bd30      	pop	{r4, r5, pc}
 800763a:	bf00      	nop
 800763c:	20000098 	.word	0x20000098
 8007640:	200000fc 	.word	0x200000fc

08007644 <__locale_ctype_ptr_l>:
 8007644:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007648:	4770      	bx	lr

0800764a <__ascii_mbtowc>:
 800764a:	b082      	sub	sp, #8
 800764c:	b901      	cbnz	r1, 8007650 <__ascii_mbtowc+0x6>
 800764e:	a901      	add	r1, sp, #4
 8007650:	b142      	cbz	r2, 8007664 <__ascii_mbtowc+0x1a>
 8007652:	b14b      	cbz	r3, 8007668 <__ascii_mbtowc+0x1e>
 8007654:	7813      	ldrb	r3, [r2, #0]
 8007656:	600b      	str	r3, [r1, #0]
 8007658:	7812      	ldrb	r2, [r2, #0]
 800765a:	1c10      	adds	r0, r2, #0
 800765c:	bf18      	it	ne
 800765e:	2001      	movne	r0, #1
 8007660:	b002      	add	sp, #8
 8007662:	4770      	bx	lr
 8007664:	4610      	mov	r0, r2
 8007666:	e7fb      	b.n	8007660 <__ascii_mbtowc+0x16>
 8007668:	f06f 0001 	mvn.w	r0, #1
 800766c:	e7f8      	b.n	8007660 <__ascii_mbtowc+0x16>

0800766e <__ssputs_r>:
 800766e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007672:	688e      	ldr	r6, [r1, #8]
 8007674:	4682      	mov	sl, r0
 8007676:	429e      	cmp	r6, r3
 8007678:	460c      	mov	r4, r1
 800767a:	4691      	mov	r9, r2
 800767c:	4698      	mov	r8, r3
 800767e:	d835      	bhi.n	80076ec <__ssputs_r+0x7e>
 8007680:	898a      	ldrh	r2, [r1, #12]
 8007682:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007686:	d031      	beq.n	80076ec <__ssputs_r+0x7e>
 8007688:	2302      	movs	r3, #2
 800768a:	6825      	ldr	r5, [r4, #0]
 800768c:	6909      	ldr	r1, [r1, #16]
 800768e:	1a6f      	subs	r7, r5, r1
 8007690:	6965      	ldr	r5, [r4, #20]
 8007692:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007696:	fb95 f5f3 	sdiv	r5, r5, r3
 800769a:	f108 0301 	add.w	r3, r8, #1
 800769e:	443b      	add	r3, r7
 80076a0:	429d      	cmp	r5, r3
 80076a2:	bf38      	it	cc
 80076a4:	461d      	movcc	r5, r3
 80076a6:	0553      	lsls	r3, r2, #21
 80076a8:	d531      	bpl.n	800770e <__ssputs_r+0xa0>
 80076aa:	4629      	mov	r1, r5
 80076ac:	f000 fb48 	bl	8007d40 <_malloc_r>
 80076b0:	4606      	mov	r6, r0
 80076b2:	b950      	cbnz	r0, 80076ca <__ssputs_r+0x5c>
 80076b4:	230c      	movs	r3, #12
 80076b6:	f8ca 3000 	str.w	r3, [sl]
 80076ba:	89a3      	ldrh	r3, [r4, #12]
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295
 80076c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c4:	81a3      	strh	r3, [r4, #12]
 80076c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ca:	463a      	mov	r2, r7
 80076cc:	6921      	ldr	r1, [r4, #16]
 80076ce:	f7ff fecf 	bl	8007470 <memcpy>
 80076d2:	89a3      	ldrh	r3, [r4, #12]
 80076d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076dc:	81a3      	strh	r3, [r4, #12]
 80076de:	6126      	str	r6, [r4, #16]
 80076e0:	443e      	add	r6, r7
 80076e2:	6026      	str	r6, [r4, #0]
 80076e4:	4646      	mov	r6, r8
 80076e6:	6165      	str	r5, [r4, #20]
 80076e8:	1bed      	subs	r5, r5, r7
 80076ea:	60a5      	str	r5, [r4, #8]
 80076ec:	4546      	cmp	r6, r8
 80076ee:	bf28      	it	cs
 80076f0:	4646      	movcs	r6, r8
 80076f2:	4649      	mov	r1, r9
 80076f4:	4632      	mov	r2, r6
 80076f6:	6820      	ldr	r0, [r4, #0]
 80076f8:	f000 fabb 	bl	8007c72 <memmove>
 80076fc:	68a3      	ldr	r3, [r4, #8]
 80076fe:	2000      	movs	r0, #0
 8007700:	1b9b      	subs	r3, r3, r6
 8007702:	60a3      	str	r3, [r4, #8]
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	441e      	add	r6, r3
 8007708:	6026      	str	r6, [r4, #0]
 800770a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770e:	462a      	mov	r2, r5
 8007710:	f000 fb74 	bl	8007dfc <_realloc_r>
 8007714:	4606      	mov	r6, r0
 8007716:	2800      	cmp	r0, #0
 8007718:	d1e1      	bne.n	80076de <__ssputs_r+0x70>
 800771a:	6921      	ldr	r1, [r4, #16]
 800771c:	4650      	mov	r0, sl
 800771e:	f000 fac3 	bl	8007ca8 <_free_r>
 8007722:	e7c7      	b.n	80076b4 <__ssputs_r+0x46>

08007724 <_svfiprintf_r>:
 8007724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007728:	b09d      	sub	sp, #116	; 0x74
 800772a:	9303      	str	r3, [sp, #12]
 800772c:	898b      	ldrh	r3, [r1, #12]
 800772e:	4680      	mov	r8, r0
 8007730:	061c      	lsls	r4, r3, #24
 8007732:	460d      	mov	r5, r1
 8007734:	4616      	mov	r6, r2
 8007736:	d50f      	bpl.n	8007758 <_svfiprintf_r+0x34>
 8007738:	690b      	ldr	r3, [r1, #16]
 800773a:	b96b      	cbnz	r3, 8007758 <_svfiprintf_r+0x34>
 800773c:	2140      	movs	r1, #64	; 0x40
 800773e:	f000 faff 	bl	8007d40 <_malloc_r>
 8007742:	6028      	str	r0, [r5, #0]
 8007744:	6128      	str	r0, [r5, #16]
 8007746:	b928      	cbnz	r0, 8007754 <_svfiprintf_r+0x30>
 8007748:	230c      	movs	r3, #12
 800774a:	f8c8 3000 	str.w	r3, [r8]
 800774e:	f04f 30ff 	mov.w	r0, #4294967295
 8007752:	e0c4      	b.n	80078de <_svfiprintf_r+0x1ba>
 8007754:	2340      	movs	r3, #64	; 0x40
 8007756:	616b      	str	r3, [r5, #20]
 8007758:	2300      	movs	r3, #0
 800775a:	9309      	str	r3, [sp, #36]	; 0x24
 800775c:	2320      	movs	r3, #32
 800775e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007762:	2330      	movs	r3, #48	; 0x30
 8007764:	f04f 0b01 	mov.w	fp, #1
 8007768:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800776c:	4637      	mov	r7, r6
 800776e:	463c      	mov	r4, r7
 8007770:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d13c      	bne.n	80077f2 <_svfiprintf_r+0xce>
 8007778:	ebb7 0a06 	subs.w	sl, r7, r6
 800777c:	d00b      	beq.n	8007796 <_svfiprintf_r+0x72>
 800777e:	4653      	mov	r3, sl
 8007780:	4632      	mov	r2, r6
 8007782:	4629      	mov	r1, r5
 8007784:	4640      	mov	r0, r8
 8007786:	f7ff ff72 	bl	800766e <__ssputs_r>
 800778a:	3001      	adds	r0, #1
 800778c:	f000 80a2 	beq.w	80078d4 <_svfiprintf_r+0x1b0>
 8007790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007792:	4453      	add	r3, sl
 8007794:	9309      	str	r3, [sp, #36]	; 0x24
 8007796:	783b      	ldrb	r3, [r7, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 809b 	beq.w	80078d4 <_svfiprintf_r+0x1b0>
 800779e:	2300      	movs	r3, #0
 80077a0:	f04f 32ff 	mov.w	r2, #4294967295
 80077a4:	9304      	str	r3, [sp, #16]
 80077a6:	9307      	str	r3, [sp, #28]
 80077a8:	9205      	str	r2, [sp, #20]
 80077aa:	9306      	str	r3, [sp, #24]
 80077ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077b0:	931a      	str	r3, [sp, #104]	; 0x68
 80077b2:	2205      	movs	r2, #5
 80077b4:	7821      	ldrb	r1, [r4, #0]
 80077b6:	4850      	ldr	r0, [pc, #320]	; (80078f8 <_svfiprintf_r+0x1d4>)
 80077b8:	f000 fa4d 	bl	8007c56 <memchr>
 80077bc:	1c67      	adds	r7, r4, #1
 80077be:	9b04      	ldr	r3, [sp, #16]
 80077c0:	b9d8      	cbnz	r0, 80077fa <_svfiprintf_r+0xd6>
 80077c2:	06d9      	lsls	r1, r3, #27
 80077c4:	bf44      	itt	mi
 80077c6:	2220      	movmi	r2, #32
 80077c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077cc:	071a      	lsls	r2, r3, #28
 80077ce:	bf44      	itt	mi
 80077d0:	222b      	movmi	r2, #43	; 0x2b
 80077d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077d6:	7822      	ldrb	r2, [r4, #0]
 80077d8:	2a2a      	cmp	r2, #42	; 0x2a
 80077da:	d016      	beq.n	800780a <_svfiprintf_r+0xe6>
 80077dc:	2100      	movs	r1, #0
 80077de:	200a      	movs	r0, #10
 80077e0:	9a07      	ldr	r2, [sp, #28]
 80077e2:	4627      	mov	r7, r4
 80077e4:	783b      	ldrb	r3, [r7, #0]
 80077e6:	3401      	adds	r4, #1
 80077e8:	3b30      	subs	r3, #48	; 0x30
 80077ea:	2b09      	cmp	r3, #9
 80077ec:	d950      	bls.n	8007890 <_svfiprintf_r+0x16c>
 80077ee:	b1c9      	cbz	r1, 8007824 <_svfiprintf_r+0x100>
 80077f0:	e011      	b.n	8007816 <_svfiprintf_r+0xf2>
 80077f2:	2b25      	cmp	r3, #37	; 0x25
 80077f4:	d0c0      	beq.n	8007778 <_svfiprintf_r+0x54>
 80077f6:	4627      	mov	r7, r4
 80077f8:	e7b9      	b.n	800776e <_svfiprintf_r+0x4a>
 80077fa:	4a3f      	ldr	r2, [pc, #252]	; (80078f8 <_svfiprintf_r+0x1d4>)
 80077fc:	463c      	mov	r4, r7
 80077fe:	1a80      	subs	r0, r0, r2
 8007800:	fa0b f000 	lsl.w	r0, fp, r0
 8007804:	4318      	orrs	r0, r3
 8007806:	9004      	str	r0, [sp, #16]
 8007808:	e7d3      	b.n	80077b2 <_svfiprintf_r+0x8e>
 800780a:	9a03      	ldr	r2, [sp, #12]
 800780c:	1d11      	adds	r1, r2, #4
 800780e:	6812      	ldr	r2, [r2, #0]
 8007810:	9103      	str	r1, [sp, #12]
 8007812:	2a00      	cmp	r2, #0
 8007814:	db01      	blt.n	800781a <_svfiprintf_r+0xf6>
 8007816:	9207      	str	r2, [sp, #28]
 8007818:	e004      	b.n	8007824 <_svfiprintf_r+0x100>
 800781a:	4252      	negs	r2, r2
 800781c:	f043 0302 	orr.w	r3, r3, #2
 8007820:	9207      	str	r2, [sp, #28]
 8007822:	9304      	str	r3, [sp, #16]
 8007824:	783b      	ldrb	r3, [r7, #0]
 8007826:	2b2e      	cmp	r3, #46	; 0x2e
 8007828:	d10d      	bne.n	8007846 <_svfiprintf_r+0x122>
 800782a:	787b      	ldrb	r3, [r7, #1]
 800782c:	1c79      	adds	r1, r7, #1
 800782e:	2b2a      	cmp	r3, #42	; 0x2a
 8007830:	d132      	bne.n	8007898 <_svfiprintf_r+0x174>
 8007832:	9b03      	ldr	r3, [sp, #12]
 8007834:	3702      	adds	r7, #2
 8007836:	1d1a      	adds	r2, r3, #4
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	9203      	str	r2, [sp, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	bfb8      	it	lt
 8007840:	f04f 33ff 	movlt.w	r3, #4294967295
 8007844:	9305      	str	r3, [sp, #20]
 8007846:	4c2d      	ldr	r4, [pc, #180]	; (80078fc <_svfiprintf_r+0x1d8>)
 8007848:	2203      	movs	r2, #3
 800784a:	7839      	ldrb	r1, [r7, #0]
 800784c:	4620      	mov	r0, r4
 800784e:	f000 fa02 	bl	8007c56 <memchr>
 8007852:	b138      	cbz	r0, 8007864 <_svfiprintf_r+0x140>
 8007854:	2340      	movs	r3, #64	; 0x40
 8007856:	1b00      	subs	r0, r0, r4
 8007858:	fa03 f000 	lsl.w	r0, r3, r0
 800785c:	9b04      	ldr	r3, [sp, #16]
 800785e:	3701      	adds	r7, #1
 8007860:	4303      	orrs	r3, r0
 8007862:	9304      	str	r3, [sp, #16]
 8007864:	7839      	ldrb	r1, [r7, #0]
 8007866:	2206      	movs	r2, #6
 8007868:	4825      	ldr	r0, [pc, #148]	; (8007900 <_svfiprintf_r+0x1dc>)
 800786a:	1c7e      	adds	r6, r7, #1
 800786c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007870:	f000 f9f1 	bl	8007c56 <memchr>
 8007874:	2800      	cmp	r0, #0
 8007876:	d035      	beq.n	80078e4 <_svfiprintf_r+0x1c0>
 8007878:	4b22      	ldr	r3, [pc, #136]	; (8007904 <_svfiprintf_r+0x1e0>)
 800787a:	b9fb      	cbnz	r3, 80078bc <_svfiprintf_r+0x198>
 800787c:	9b03      	ldr	r3, [sp, #12]
 800787e:	3307      	adds	r3, #7
 8007880:	f023 0307 	bic.w	r3, r3, #7
 8007884:	3308      	adds	r3, #8
 8007886:	9303      	str	r3, [sp, #12]
 8007888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800788a:	444b      	add	r3, r9
 800788c:	9309      	str	r3, [sp, #36]	; 0x24
 800788e:	e76d      	b.n	800776c <_svfiprintf_r+0x48>
 8007890:	fb00 3202 	mla	r2, r0, r2, r3
 8007894:	2101      	movs	r1, #1
 8007896:	e7a4      	b.n	80077e2 <_svfiprintf_r+0xbe>
 8007898:	2300      	movs	r3, #0
 800789a:	240a      	movs	r4, #10
 800789c:	4618      	mov	r0, r3
 800789e:	9305      	str	r3, [sp, #20]
 80078a0:	460f      	mov	r7, r1
 80078a2:	783a      	ldrb	r2, [r7, #0]
 80078a4:	3101      	adds	r1, #1
 80078a6:	3a30      	subs	r2, #48	; 0x30
 80078a8:	2a09      	cmp	r2, #9
 80078aa:	d903      	bls.n	80078b4 <_svfiprintf_r+0x190>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0ca      	beq.n	8007846 <_svfiprintf_r+0x122>
 80078b0:	9005      	str	r0, [sp, #20]
 80078b2:	e7c8      	b.n	8007846 <_svfiprintf_r+0x122>
 80078b4:	fb04 2000 	mla	r0, r4, r0, r2
 80078b8:	2301      	movs	r3, #1
 80078ba:	e7f1      	b.n	80078a0 <_svfiprintf_r+0x17c>
 80078bc:	ab03      	add	r3, sp, #12
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	462a      	mov	r2, r5
 80078c2:	4b11      	ldr	r3, [pc, #68]	; (8007908 <_svfiprintf_r+0x1e4>)
 80078c4:	a904      	add	r1, sp, #16
 80078c6:	4640      	mov	r0, r8
 80078c8:	f3af 8000 	nop.w
 80078cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80078d0:	4681      	mov	r9, r0
 80078d2:	d1d9      	bne.n	8007888 <_svfiprintf_r+0x164>
 80078d4:	89ab      	ldrh	r3, [r5, #12]
 80078d6:	065b      	lsls	r3, r3, #25
 80078d8:	f53f af39 	bmi.w	800774e <_svfiprintf_r+0x2a>
 80078dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078de:	b01d      	add	sp, #116	; 0x74
 80078e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e4:	ab03      	add	r3, sp, #12
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	462a      	mov	r2, r5
 80078ea:	4b07      	ldr	r3, [pc, #28]	; (8007908 <_svfiprintf_r+0x1e4>)
 80078ec:	a904      	add	r1, sp, #16
 80078ee:	4640      	mov	r0, r8
 80078f0:	f000 f884 	bl	80079fc <_printf_i>
 80078f4:	e7ea      	b.n	80078cc <_svfiprintf_r+0x1a8>
 80078f6:	bf00      	nop
 80078f8:	080085de 	.word	0x080085de
 80078fc:	080085e4 	.word	0x080085e4
 8007900:	080085e8 	.word	0x080085e8
 8007904:	00000000 	.word	0x00000000
 8007908:	0800766f 	.word	0x0800766f

0800790c <_printf_common>:
 800790c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007910:	4691      	mov	r9, r2
 8007912:	461f      	mov	r7, r3
 8007914:	688a      	ldr	r2, [r1, #8]
 8007916:	690b      	ldr	r3, [r1, #16]
 8007918:	4606      	mov	r6, r0
 800791a:	4293      	cmp	r3, r2
 800791c:	bfb8      	it	lt
 800791e:	4613      	movlt	r3, r2
 8007920:	f8c9 3000 	str.w	r3, [r9]
 8007924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007928:	460c      	mov	r4, r1
 800792a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800792e:	b112      	cbz	r2, 8007936 <_printf_common+0x2a>
 8007930:	3301      	adds	r3, #1
 8007932:	f8c9 3000 	str.w	r3, [r9]
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	0699      	lsls	r1, r3, #26
 800793a:	bf42      	ittt	mi
 800793c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007940:	3302      	addmi	r3, #2
 8007942:	f8c9 3000 	strmi.w	r3, [r9]
 8007946:	6825      	ldr	r5, [r4, #0]
 8007948:	f015 0506 	ands.w	r5, r5, #6
 800794c:	d107      	bne.n	800795e <_printf_common+0x52>
 800794e:	f104 0a19 	add.w	sl, r4, #25
 8007952:	68e3      	ldr	r3, [r4, #12]
 8007954:	f8d9 2000 	ldr.w	r2, [r9]
 8007958:	1a9b      	subs	r3, r3, r2
 800795a:	429d      	cmp	r5, r3
 800795c:	db2a      	blt.n	80079b4 <_printf_common+0xa8>
 800795e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007962:	6822      	ldr	r2, [r4, #0]
 8007964:	3300      	adds	r3, #0
 8007966:	bf18      	it	ne
 8007968:	2301      	movne	r3, #1
 800796a:	0692      	lsls	r2, r2, #26
 800796c:	d42f      	bmi.n	80079ce <_printf_common+0xc2>
 800796e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007972:	4639      	mov	r1, r7
 8007974:	4630      	mov	r0, r6
 8007976:	47c0      	blx	r8
 8007978:	3001      	adds	r0, #1
 800797a:	d022      	beq.n	80079c2 <_printf_common+0xb6>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	68e5      	ldr	r5, [r4, #12]
 8007980:	f003 0306 	and.w	r3, r3, #6
 8007984:	2b04      	cmp	r3, #4
 8007986:	bf18      	it	ne
 8007988:	2500      	movne	r5, #0
 800798a:	f8d9 2000 	ldr.w	r2, [r9]
 800798e:	f04f 0900 	mov.w	r9, #0
 8007992:	bf08      	it	eq
 8007994:	1aad      	subeq	r5, r5, r2
 8007996:	68a3      	ldr	r3, [r4, #8]
 8007998:	6922      	ldr	r2, [r4, #16]
 800799a:	bf08      	it	eq
 800799c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079a0:	4293      	cmp	r3, r2
 80079a2:	bfc4      	itt	gt
 80079a4:	1a9b      	subgt	r3, r3, r2
 80079a6:	18ed      	addgt	r5, r5, r3
 80079a8:	341a      	adds	r4, #26
 80079aa:	454d      	cmp	r5, r9
 80079ac:	d11b      	bne.n	80079e6 <_printf_common+0xda>
 80079ae:	2000      	movs	r0, #0
 80079b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b4:	2301      	movs	r3, #1
 80079b6:	4652      	mov	r2, sl
 80079b8:	4639      	mov	r1, r7
 80079ba:	4630      	mov	r0, r6
 80079bc:	47c0      	blx	r8
 80079be:	3001      	adds	r0, #1
 80079c0:	d103      	bne.n	80079ca <_printf_common+0xbe>
 80079c2:	f04f 30ff 	mov.w	r0, #4294967295
 80079c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ca:	3501      	adds	r5, #1
 80079cc:	e7c1      	b.n	8007952 <_printf_common+0x46>
 80079ce:	2030      	movs	r0, #48	; 0x30
 80079d0:	18e1      	adds	r1, r4, r3
 80079d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079d6:	1c5a      	adds	r2, r3, #1
 80079d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079dc:	4422      	add	r2, r4
 80079de:	3302      	adds	r3, #2
 80079e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079e4:	e7c3      	b.n	800796e <_printf_common+0x62>
 80079e6:	2301      	movs	r3, #1
 80079e8:	4622      	mov	r2, r4
 80079ea:	4639      	mov	r1, r7
 80079ec:	4630      	mov	r0, r6
 80079ee:	47c0      	blx	r8
 80079f0:	3001      	adds	r0, #1
 80079f2:	d0e6      	beq.n	80079c2 <_printf_common+0xb6>
 80079f4:	f109 0901 	add.w	r9, r9, #1
 80079f8:	e7d7      	b.n	80079aa <_printf_common+0x9e>
	...

080079fc <_printf_i>:
 80079fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a00:	4617      	mov	r7, r2
 8007a02:	7e0a      	ldrb	r2, [r1, #24]
 8007a04:	b085      	sub	sp, #20
 8007a06:	2a6e      	cmp	r2, #110	; 0x6e
 8007a08:	4698      	mov	r8, r3
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a10:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007a14:	f000 80bc 	beq.w	8007b90 <_printf_i+0x194>
 8007a18:	d81a      	bhi.n	8007a50 <_printf_i+0x54>
 8007a1a:	2a63      	cmp	r2, #99	; 0x63
 8007a1c:	d02e      	beq.n	8007a7c <_printf_i+0x80>
 8007a1e:	d80a      	bhi.n	8007a36 <_printf_i+0x3a>
 8007a20:	2a00      	cmp	r2, #0
 8007a22:	f000 80c8 	beq.w	8007bb6 <_printf_i+0x1ba>
 8007a26:	2a58      	cmp	r2, #88	; 0x58
 8007a28:	f000 808a 	beq.w	8007b40 <_printf_i+0x144>
 8007a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a30:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007a34:	e02a      	b.n	8007a8c <_printf_i+0x90>
 8007a36:	2a64      	cmp	r2, #100	; 0x64
 8007a38:	d001      	beq.n	8007a3e <_printf_i+0x42>
 8007a3a:	2a69      	cmp	r2, #105	; 0x69
 8007a3c:	d1f6      	bne.n	8007a2c <_printf_i+0x30>
 8007a3e:	6821      	ldr	r1, [r4, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007a46:	d023      	beq.n	8007a90 <_printf_i+0x94>
 8007a48:	1d11      	adds	r1, r2, #4
 8007a4a:	6019      	str	r1, [r3, #0]
 8007a4c:	6813      	ldr	r3, [r2, #0]
 8007a4e:	e027      	b.n	8007aa0 <_printf_i+0xa4>
 8007a50:	2a73      	cmp	r2, #115	; 0x73
 8007a52:	f000 80b4 	beq.w	8007bbe <_printf_i+0x1c2>
 8007a56:	d808      	bhi.n	8007a6a <_printf_i+0x6e>
 8007a58:	2a6f      	cmp	r2, #111	; 0x6f
 8007a5a:	d02a      	beq.n	8007ab2 <_printf_i+0xb6>
 8007a5c:	2a70      	cmp	r2, #112	; 0x70
 8007a5e:	d1e5      	bne.n	8007a2c <_printf_i+0x30>
 8007a60:	680a      	ldr	r2, [r1, #0]
 8007a62:	f042 0220 	orr.w	r2, r2, #32
 8007a66:	600a      	str	r2, [r1, #0]
 8007a68:	e003      	b.n	8007a72 <_printf_i+0x76>
 8007a6a:	2a75      	cmp	r2, #117	; 0x75
 8007a6c:	d021      	beq.n	8007ab2 <_printf_i+0xb6>
 8007a6e:	2a78      	cmp	r2, #120	; 0x78
 8007a70:	d1dc      	bne.n	8007a2c <_printf_i+0x30>
 8007a72:	2278      	movs	r2, #120	; 0x78
 8007a74:	496f      	ldr	r1, [pc, #444]	; (8007c34 <_printf_i+0x238>)
 8007a76:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007a7a:	e064      	b.n	8007b46 <_printf_i+0x14a>
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8007a82:	1d11      	adds	r1, r2, #4
 8007a84:	6019      	str	r1, [r3, #0]
 8007a86:	6813      	ldr	r3, [r2, #0]
 8007a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e0a3      	b.n	8007bd8 <_printf_i+0x1dc>
 8007a90:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007a94:	f102 0104 	add.w	r1, r2, #4
 8007a98:	6019      	str	r1, [r3, #0]
 8007a9a:	d0d7      	beq.n	8007a4c <_printf_i+0x50>
 8007a9c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	da03      	bge.n	8007aac <_printf_i+0xb0>
 8007aa4:	222d      	movs	r2, #45	; 0x2d
 8007aa6:	425b      	negs	r3, r3
 8007aa8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007aac:	4962      	ldr	r1, [pc, #392]	; (8007c38 <_printf_i+0x23c>)
 8007aae:	220a      	movs	r2, #10
 8007ab0:	e017      	b.n	8007ae2 <_printf_i+0xe6>
 8007ab2:	6820      	ldr	r0, [r4, #0]
 8007ab4:	6819      	ldr	r1, [r3, #0]
 8007ab6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007aba:	d003      	beq.n	8007ac4 <_printf_i+0xc8>
 8007abc:	1d08      	adds	r0, r1, #4
 8007abe:	6018      	str	r0, [r3, #0]
 8007ac0:	680b      	ldr	r3, [r1, #0]
 8007ac2:	e006      	b.n	8007ad2 <_printf_i+0xd6>
 8007ac4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ac8:	f101 0004 	add.w	r0, r1, #4
 8007acc:	6018      	str	r0, [r3, #0]
 8007ace:	d0f7      	beq.n	8007ac0 <_printf_i+0xc4>
 8007ad0:	880b      	ldrh	r3, [r1, #0]
 8007ad2:	2a6f      	cmp	r2, #111	; 0x6f
 8007ad4:	bf14      	ite	ne
 8007ad6:	220a      	movne	r2, #10
 8007ad8:	2208      	moveq	r2, #8
 8007ada:	4957      	ldr	r1, [pc, #348]	; (8007c38 <_printf_i+0x23c>)
 8007adc:	2000      	movs	r0, #0
 8007ade:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8007ae2:	6865      	ldr	r5, [r4, #4]
 8007ae4:	2d00      	cmp	r5, #0
 8007ae6:	60a5      	str	r5, [r4, #8]
 8007ae8:	f2c0 809c 	blt.w	8007c24 <_printf_i+0x228>
 8007aec:	6820      	ldr	r0, [r4, #0]
 8007aee:	f020 0004 	bic.w	r0, r0, #4
 8007af2:	6020      	str	r0, [r4, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d13f      	bne.n	8007b78 <_printf_i+0x17c>
 8007af8:	2d00      	cmp	r5, #0
 8007afa:	f040 8095 	bne.w	8007c28 <_printf_i+0x22c>
 8007afe:	4675      	mov	r5, lr
 8007b00:	2a08      	cmp	r2, #8
 8007b02:	d10b      	bne.n	8007b1c <_printf_i+0x120>
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	07da      	lsls	r2, r3, #31
 8007b08:	d508      	bpl.n	8007b1c <_printf_i+0x120>
 8007b0a:	6923      	ldr	r3, [r4, #16]
 8007b0c:	6862      	ldr	r2, [r4, #4]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	bfde      	ittt	le
 8007b12:	2330      	movle	r3, #48	; 0x30
 8007b14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b1c:	ebae 0305 	sub.w	r3, lr, r5
 8007b20:	6123      	str	r3, [r4, #16]
 8007b22:	f8cd 8000 	str.w	r8, [sp]
 8007b26:	463b      	mov	r3, r7
 8007b28:	aa03      	add	r2, sp, #12
 8007b2a:	4621      	mov	r1, r4
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f7ff feed 	bl	800790c <_printf_common>
 8007b32:	3001      	adds	r0, #1
 8007b34:	d155      	bne.n	8007be2 <_printf_i+0x1e6>
 8007b36:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3a:	b005      	add	sp, #20
 8007b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b40:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8007b44:	493c      	ldr	r1, [pc, #240]	; (8007c38 <_printf_i+0x23c>)
 8007b46:	6822      	ldr	r2, [r4, #0]
 8007b48:	6818      	ldr	r0, [r3, #0]
 8007b4a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007b4e:	f100 0504 	add.w	r5, r0, #4
 8007b52:	601d      	str	r5, [r3, #0]
 8007b54:	d001      	beq.n	8007b5a <_printf_i+0x15e>
 8007b56:	6803      	ldr	r3, [r0, #0]
 8007b58:	e002      	b.n	8007b60 <_printf_i+0x164>
 8007b5a:	0655      	lsls	r5, r2, #25
 8007b5c:	d5fb      	bpl.n	8007b56 <_printf_i+0x15a>
 8007b5e:	8803      	ldrh	r3, [r0, #0]
 8007b60:	07d0      	lsls	r0, r2, #31
 8007b62:	bf44      	itt	mi
 8007b64:	f042 0220 	orrmi.w	r2, r2, #32
 8007b68:	6022      	strmi	r2, [r4, #0]
 8007b6a:	b91b      	cbnz	r3, 8007b74 <_printf_i+0x178>
 8007b6c:	6822      	ldr	r2, [r4, #0]
 8007b6e:	f022 0220 	bic.w	r2, r2, #32
 8007b72:	6022      	str	r2, [r4, #0]
 8007b74:	2210      	movs	r2, #16
 8007b76:	e7b1      	b.n	8007adc <_printf_i+0xe0>
 8007b78:	4675      	mov	r5, lr
 8007b7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b7e:	fb02 3310 	mls	r3, r2, r0, r3
 8007b82:	5ccb      	ldrb	r3, [r1, r3]
 8007b84:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d1f5      	bne.n	8007b7a <_printf_i+0x17e>
 8007b8e:	e7b7      	b.n	8007b00 <_printf_i+0x104>
 8007b90:	6808      	ldr	r0, [r1, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007b98:	6949      	ldr	r1, [r1, #20]
 8007b9a:	d004      	beq.n	8007ba6 <_printf_i+0x1aa>
 8007b9c:	1d10      	adds	r0, r2, #4
 8007b9e:	6018      	str	r0, [r3, #0]
 8007ba0:	6813      	ldr	r3, [r2, #0]
 8007ba2:	6019      	str	r1, [r3, #0]
 8007ba4:	e007      	b.n	8007bb6 <_printf_i+0x1ba>
 8007ba6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007baa:	f102 0004 	add.w	r0, r2, #4
 8007bae:	6018      	str	r0, [r3, #0]
 8007bb0:	6813      	ldr	r3, [r2, #0]
 8007bb2:	d0f6      	beq.n	8007ba2 <_printf_i+0x1a6>
 8007bb4:	8019      	strh	r1, [r3, #0]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	4675      	mov	r5, lr
 8007bba:	6123      	str	r3, [r4, #16]
 8007bbc:	e7b1      	b.n	8007b22 <_printf_i+0x126>
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	1d11      	adds	r1, r2, #4
 8007bc2:	6019      	str	r1, [r3, #0]
 8007bc4:	6815      	ldr	r5, [r2, #0]
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	6862      	ldr	r2, [r4, #4]
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f000 f843 	bl	8007c56 <memchr>
 8007bd0:	b108      	cbz	r0, 8007bd6 <_printf_i+0x1da>
 8007bd2:	1b40      	subs	r0, r0, r5
 8007bd4:	6060      	str	r0, [r4, #4]
 8007bd6:	6863      	ldr	r3, [r4, #4]
 8007bd8:	6123      	str	r3, [r4, #16]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007be0:	e79f      	b.n	8007b22 <_printf_i+0x126>
 8007be2:	6923      	ldr	r3, [r4, #16]
 8007be4:	462a      	mov	r2, r5
 8007be6:	4639      	mov	r1, r7
 8007be8:	4630      	mov	r0, r6
 8007bea:	47c0      	blx	r8
 8007bec:	3001      	adds	r0, #1
 8007bee:	d0a2      	beq.n	8007b36 <_printf_i+0x13a>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	079b      	lsls	r3, r3, #30
 8007bf4:	d507      	bpl.n	8007c06 <_printf_i+0x20a>
 8007bf6:	2500      	movs	r5, #0
 8007bf8:	f104 0919 	add.w	r9, r4, #25
 8007bfc:	68e3      	ldr	r3, [r4, #12]
 8007bfe:	9a03      	ldr	r2, [sp, #12]
 8007c00:	1a9b      	subs	r3, r3, r2
 8007c02:	429d      	cmp	r5, r3
 8007c04:	db05      	blt.n	8007c12 <_printf_i+0x216>
 8007c06:	68e0      	ldr	r0, [r4, #12]
 8007c08:	9b03      	ldr	r3, [sp, #12]
 8007c0a:	4298      	cmp	r0, r3
 8007c0c:	bfb8      	it	lt
 8007c0e:	4618      	movlt	r0, r3
 8007c10:	e793      	b.n	8007b3a <_printf_i+0x13e>
 8007c12:	2301      	movs	r3, #1
 8007c14:	464a      	mov	r2, r9
 8007c16:	4639      	mov	r1, r7
 8007c18:	4630      	mov	r0, r6
 8007c1a:	47c0      	blx	r8
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	d08a      	beq.n	8007b36 <_printf_i+0x13a>
 8007c20:	3501      	adds	r5, #1
 8007c22:	e7eb      	b.n	8007bfc <_printf_i+0x200>
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1a7      	bne.n	8007b78 <_printf_i+0x17c>
 8007c28:	780b      	ldrb	r3, [r1, #0]
 8007c2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c32:	e765      	b.n	8007b00 <_printf_i+0x104>
 8007c34:	08008600 	.word	0x08008600
 8007c38:	080085ef 	.word	0x080085ef

08007c3c <__ascii_wctomb>:
 8007c3c:	b149      	cbz	r1, 8007c52 <__ascii_wctomb+0x16>
 8007c3e:	2aff      	cmp	r2, #255	; 0xff
 8007c40:	bf8b      	itete	hi
 8007c42:	238a      	movhi	r3, #138	; 0x8a
 8007c44:	700a      	strbls	r2, [r1, #0]
 8007c46:	6003      	strhi	r3, [r0, #0]
 8007c48:	2001      	movls	r0, #1
 8007c4a:	bf88      	it	hi
 8007c4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c50:	4770      	bx	lr
 8007c52:	4608      	mov	r0, r1
 8007c54:	4770      	bx	lr

08007c56 <memchr>:
 8007c56:	b510      	push	{r4, lr}
 8007c58:	b2c9      	uxtb	r1, r1
 8007c5a:	4402      	add	r2, r0
 8007c5c:	4290      	cmp	r0, r2
 8007c5e:	4603      	mov	r3, r0
 8007c60:	d101      	bne.n	8007c66 <memchr+0x10>
 8007c62:	2000      	movs	r0, #0
 8007c64:	bd10      	pop	{r4, pc}
 8007c66:	781c      	ldrb	r4, [r3, #0]
 8007c68:	3001      	adds	r0, #1
 8007c6a:	428c      	cmp	r4, r1
 8007c6c:	d1f6      	bne.n	8007c5c <memchr+0x6>
 8007c6e:	4618      	mov	r0, r3
 8007c70:	bd10      	pop	{r4, pc}

08007c72 <memmove>:
 8007c72:	4288      	cmp	r0, r1
 8007c74:	b510      	push	{r4, lr}
 8007c76:	eb01 0302 	add.w	r3, r1, r2
 8007c7a:	d803      	bhi.n	8007c84 <memmove+0x12>
 8007c7c:	1e42      	subs	r2, r0, #1
 8007c7e:	4299      	cmp	r1, r3
 8007c80:	d10c      	bne.n	8007c9c <memmove+0x2a>
 8007c82:	bd10      	pop	{r4, pc}
 8007c84:	4298      	cmp	r0, r3
 8007c86:	d2f9      	bcs.n	8007c7c <memmove+0xa>
 8007c88:	1881      	adds	r1, r0, r2
 8007c8a:	1ad2      	subs	r2, r2, r3
 8007c8c:	42d3      	cmn	r3, r2
 8007c8e:	d100      	bne.n	8007c92 <memmove+0x20>
 8007c90:	bd10      	pop	{r4, pc}
 8007c92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c96:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007c9a:	e7f7      	b.n	8007c8c <memmove+0x1a>
 8007c9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ca0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007ca4:	e7eb      	b.n	8007c7e <memmove+0xc>
	...

08007ca8 <_free_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4605      	mov	r5, r0
 8007cac:	2900      	cmp	r1, #0
 8007cae:	d043      	beq.n	8007d38 <_free_r+0x90>
 8007cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cb4:	1f0c      	subs	r4, r1, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bfb8      	it	lt
 8007cba:	18e4      	addlt	r4, r4, r3
 8007cbc:	f000 f8d4 	bl	8007e68 <__malloc_lock>
 8007cc0:	4a1e      	ldr	r2, [pc, #120]	; (8007d3c <_free_r+0x94>)
 8007cc2:	6813      	ldr	r3, [r2, #0]
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	b933      	cbnz	r3, 8007cd6 <_free_r+0x2e>
 8007cc8:	6063      	str	r3, [r4, #4]
 8007cca:	6014      	str	r4, [r2, #0]
 8007ccc:	4628      	mov	r0, r5
 8007cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cd2:	f000 b8ca 	b.w	8007e6a <__malloc_unlock>
 8007cd6:	42a3      	cmp	r3, r4
 8007cd8:	d90b      	bls.n	8007cf2 <_free_r+0x4a>
 8007cda:	6821      	ldr	r1, [r4, #0]
 8007cdc:	1862      	adds	r2, r4, r1
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	bf01      	itttt	eq
 8007ce2:	681a      	ldreq	r2, [r3, #0]
 8007ce4:	685b      	ldreq	r3, [r3, #4]
 8007ce6:	1852      	addeq	r2, r2, r1
 8007ce8:	6022      	streq	r2, [r4, #0]
 8007cea:	6063      	str	r3, [r4, #4]
 8007cec:	6004      	str	r4, [r0, #0]
 8007cee:	e7ed      	b.n	8007ccc <_free_r+0x24>
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	b10a      	cbz	r2, 8007cfa <_free_r+0x52>
 8007cf6:	42a2      	cmp	r2, r4
 8007cf8:	d9fa      	bls.n	8007cf0 <_free_r+0x48>
 8007cfa:	6819      	ldr	r1, [r3, #0]
 8007cfc:	1858      	adds	r0, r3, r1
 8007cfe:	42a0      	cmp	r0, r4
 8007d00:	d10b      	bne.n	8007d1a <_free_r+0x72>
 8007d02:	6820      	ldr	r0, [r4, #0]
 8007d04:	4401      	add	r1, r0
 8007d06:	1858      	adds	r0, r3, r1
 8007d08:	4282      	cmp	r2, r0
 8007d0a:	6019      	str	r1, [r3, #0]
 8007d0c:	d1de      	bne.n	8007ccc <_free_r+0x24>
 8007d0e:	6810      	ldr	r0, [r2, #0]
 8007d10:	6852      	ldr	r2, [r2, #4]
 8007d12:	4401      	add	r1, r0
 8007d14:	6019      	str	r1, [r3, #0]
 8007d16:	605a      	str	r2, [r3, #4]
 8007d18:	e7d8      	b.n	8007ccc <_free_r+0x24>
 8007d1a:	d902      	bls.n	8007d22 <_free_r+0x7a>
 8007d1c:	230c      	movs	r3, #12
 8007d1e:	602b      	str	r3, [r5, #0]
 8007d20:	e7d4      	b.n	8007ccc <_free_r+0x24>
 8007d22:	6820      	ldr	r0, [r4, #0]
 8007d24:	1821      	adds	r1, r4, r0
 8007d26:	428a      	cmp	r2, r1
 8007d28:	bf01      	itttt	eq
 8007d2a:	6811      	ldreq	r1, [r2, #0]
 8007d2c:	6852      	ldreq	r2, [r2, #4]
 8007d2e:	1809      	addeq	r1, r1, r0
 8007d30:	6021      	streq	r1, [r4, #0]
 8007d32:	6062      	str	r2, [r4, #4]
 8007d34:	605c      	str	r4, [r3, #4]
 8007d36:	e7c9      	b.n	8007ccc <_free_r+0x24>
 8007d38:	bd38      	pop	{r3, r4, r5, pc}
 8007d3a:	bf00      	nop
 8007d3c:	200023e4 	.word	0x200023e4

08007d40 <_malloc_r>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	1ccd      	adds	r5, r1, #3
 8007d44:	f025 0503 	bic.w	r5, r5, #3
 8007d48:	3508      	adds	r5, #8
 8007d4a:	2d0c      	cmp	r5, #12
 8007d4c:	bf38      	it	cc
 8007d4e:	250c      	movcc	r5, #12
 8007d50:	2d00      	cmp	r5, #0
 8007d52:	4606      	mov	r6, r0
 8007d54:	db01      	blt.n	8007d5a <_malloc_r+0x1a>
 8007d56:	42a9      	cmp	r1, r5
 8007d58:	d903      	bls.n	8007d62 <_malloc_r+0x22>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	6033      	str	r3, [r6, #0]
 8007d5e:	2000      	movs	r0, #0
 8007d60:	bd70      	pop	{r4, r5, r6, pc}
 8007d62:	f000 f881 	bl	8007e68 <__malloc_lock>
 8007d66:	4a23      	ldr	r2, [pc, #140]	; (8007df4 <_malloc_r+0xb4>)
 8007d68:	6814      	ldr	r4, [r2, #0]
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	b991      	cbnz	r1, 8007d94 <_malloc_r+0x54>
 8007d6e:	4c22      	ldr	r4, [pc, #136]	; (8007df8 <_malloc_r+0xb8>)
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	b91b      	cbnz	r3, 8007d7c <_malloc_r+0x3c>
 8007d74:	4630      	mov	r0, r6
 8007d76:	f000 f867 	bl	8007e48 <_sbrk_r>
 8007d7a:	6020      	str	r0, [r4, #0]
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	4630      	mov	r0, r6
 8007d80:	f000 f862 	bl	8007e48 <_sbrk_r>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d126      	bne.n	8007dd6 <_malloc_r+0x96>
 8007d88:	230c      	movs	r3, #12
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	6033      	str	r3, [r6, #0]
 8007d8e:	f000 f86c 	bl	8007e6a <__malloc_unlock>
 8007d92:	e7e4      	b.n	8007d5e <_malloc_r+0x1e>
 8007d94:	680b      	ldr	r3, [r1, #0]
 8007d96:	1b5b      	subs	r3, r3, r5
 8007d98:	d41a      	bmi.n	8007dd0 <_malloc_r+0x90>
 8007d9a:	2b0b      	cmp	r3, #11
 8007d9c:	d90f      	bls.n	8007dbe <_malloc_r+0x7e>
 8007d9e:	600b      	str	r3, [r1, #0]
 8007da0:	18cc      	adds	r4, r1, r3
 8007da2:	50cd      	str	r5, [r1, r3]
 8007da4:	4630      	mov	r0, r6
 8007da6:	f000 f860 	bl	8007e6a <__malloc_unlock>
 8007daa:	f104 000b 	add.w	r0, r4, #11
 8007dae:	1d23      	adds	r3, r4, #4
 8007db0:	f020 0007 	bic.w	r0, r0, #7
 8007db4:	1ac3      	subs	r3, r0, r3
 8007db6:	d01b      	beq.n	8007df0 <_malloc_r+0xb0>
 8007db8:	425a      	negs	r2, r3
 8007dba:	50e2      	str	r2, [r4, r3]
 8007dbc:	bd70      	pop	{r4, r5, r6, pc}
 8007dbe:	428c      	cmp	r4, r1
 8007dc0:	bf0b      	itete	eq
 8007dc2:	6863      	ldreq	r3, [r4, #4]
 8007dc4:	684b      	ldrne	r3, [r1, #4]
 8007dc6:	6013      	streq	r3, [r2, #0]
 8007dc8:	6063      	strne	r3, [r4, #4]
 8007dca:	bf18      	it	ne
 8007dcc:	460c      	movne	r4, r1
 8007dce:	e7e9      	b.n	8007da4 <_malloc_r+0x64>
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	6849      	ldr	r1, [r1, #4]
 8007dd4:	e7ca      	b.n	8007d6c <_malloc_r+0x2c>
 8007dd6:	1cc4      	adds	r4, r0, #3
 8007dd8:	f024 0403 	bic.w	r4, r4, #3
 8007ddc:	42a0      	cmp	r0, r4
 8007dde:	d005      	beq.n	8007dec <_malloc_r+0xac>
 8007de0:	1a21      	subs	r1, r4, r0
 8007de2:	4630      	mov	r0, r6
 8007de4:	f000 f830 	bl	8007e48 <_sbrk_r>
 8007de8:	3001      	adds	r0, #1
 8007dea:	d0cd      	beq.n	8007d88 <_malloc_r+0x48>
 8007dec:	6025      	str	r5, [r4, #0]
 8007dee:	e7d9      	b.n	8007da4 <_malloc_r+0x64>
 8007df0:	bd70      	pop	{r4, r5, r6, pc}
 8007df2:	bf00      	nop
 8007df4:	200023e4 	.word	0x200023e4
 8007df8:	200023e8 	.word	0x200023e8

08007dfc <_realloc_r>:
 8007dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfe:	4607      	mov	r7, r0
 8007e00:	4614      	mov	r4, r2
 8007e02:	460e      	mov	r6, r1
 8007e04:	b921      	cbnz	r1, 8007e10 <_realloc_r+0x14>
 8007e06:	4611      	mov	r1, r2
 8007e08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e0c:	f7ff bf98 	b.w	8007d40 <_malloc_r>
 8007e10:	b922      	cbnz	r2, 8007e1c <_realloc_r+0x20>
 8007e12:	f7ff ff49 	bl	8007ca8 <_free_r>
 8007e16:	4625      	mov	r5, r4
 8007e18:	4628      	mov	r0, r5
 8007e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e1c:	f000 f826 	bl	8007e6c <_malloc_usable_size_r>
 8007e20:	4284      	cmp	r4, r0
 8007e22:	d90f      	bls.n	8007e44 <_realloc_r+0x48>
 8007e24:	4621      	mov	r1, r4
 8007e26:	4638      	mov	r0, r7
 8007e28:	f7ff ff8a 	bl	8007d40 <_malloc_r>
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d0f2      	beq.n	8007e18 <_realloc_r+0x1c>
 8007e32:	4631      	mov	r1, r6
 8007e34:	4622      	mov	r2, r4
 8007e36:	f7ff fb1b 	bl	8007470 <memcpy>
 8007e3a:	4631      	mov	r1, r6
 8007e3c:	4638      	mov	r0, r7
 8007e3e:	f7ff ff33 	bl	8007ca8 <_free_r>
 8007e42:	e7e9      	b.n	8007e18 <_realloc_r+0x1c>
 8007e44:	4635      	mov	r5, r6
 8007e46:	e7e7      	b.n	8007e18 <_realloc_r+0x1c>

08007e48 <_sbrk_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	4c05      	ldr	r4, [pc, #20]	; (8007e64 <_sbrk_r+0x1c>)
 8007e4e:	4605      	mov	r5, r0
 8007e50:	4608      	mov	r0, r1
 8007e52:	6023      	str	r3, [r4, #0]
 8007e54:	f7ff fa5c 	bl	8007310 <_sbrk>
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	d102      	bne.n	8007e62 <_sbrk_r+0x1a>
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	b103      	cbz	r3, 8007e62 <_sbrk_r+0x1a>
 8007e60:	602b      	str	r3, [r5, #0]
 8007e62:	bd38      	pop	{r3, r4, r5, pc}
 8007e64:	200030a0 	.word	0x200030a0

08007e68 <__malloc_lock>:
 8007e68:	4770      	bx	lr

08007e6a <__malloc_unlock>:
 8007e6a:	4770      	bx	lr

08007e6c <_malloc_usable_size_r>:
 8007e6c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007e70:	2800      	cmp	r0, #0
 8007e72:	f1a0 0004 	sub.w	r0, r0, #4
 8007e76:	bfbc      	itt	lt
 8007e78:	580b      	ldrlt	r3, [r1, r0]
 8007e7a:	18c0      	addlt	r0, r0, r3
 8007e7c:	4770      	bx	lr
	...

08007e80 <_init>:
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	bf00      	nop
 8007e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e86:	bc08      	pop	{r3}
 8007e88:	469e      	mov	lr, r3
 8007e8a:	4770      	bx	lr

08007e8c <_fini>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	bf00      	nop
 8007e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e92:	bc08      	pop	{r3}
 8007e94:	469e      	mov	lr, r3
 8007e96:	4770      	bx	lr
