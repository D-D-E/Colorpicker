
rtos_usart_ll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b64  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000734  08006c74  08006c74  00016c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080073a8  080073a8  000173a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080073ac  080073ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  20000000  080073b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002e7c  200001ec  0800759c  000201ec  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003068  0800759c  00023068  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
  9 .debug_info   00027224  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000600a  00000000  00000000  00047439  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001a40  00000000  00000000  0004d448  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001788  00000000  00000000  0004ee88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000cadf  00000000  00000000  00050610  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006874  00000000  00000000  0005d0ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00063963  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00006cdc  00000000  00000000  000639e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c5c 	.word	0x08006c5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08006c5c 	.word	0x08006c5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <waitCallBack>:

uint8_t linkID;
uint8_t TCPServerFlag = 0;

static bool waitCallBack(char * aim, uint16_t ms)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
 8000168:	460b      	mov	r3, r1
 800016a:	807b      	strh	r3, [r7, #2]
	uint32_t time_end = get_sys_tick() + ms;
 800016c:	f004 fa44 	bl	80045f8 <get_sys_tick>
 8000170:	4602      	mov	r2, r0
 8000172:	887b      	ldrh	r3, [r7, #2]
 8000174:	4413      	add	r3, r2
 8000176:	60bb      	str	r3, [r7, #8]
	uint32_t time = get_sys_tick();
 8000178:	f004 fa3e 	bl	80045f8 <get_sys_tick>
 800017c:	60f8      	str	r0, [r7, #12]
	while(time_end > time)
 800017e:	e00e      	b.n	800019e <waitCallBack+0x3e>
	{
		time++;
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	3301      	adds	r3, #1
 8000184:	60fb      	str	r3, [r7, #12]
		if(charCallBack(aim))
 8000186:	6878      	ldr	r0, [r7, #4]
 8000188:	f000 f998 	bl	80004bc <charCallBack>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	d001      	beq.n	8000196 <waitCallBack+0x36>
		{
			return 1;
 8000192:	2301      	movs	r3, #1
 8000194:	e008      	b.n	80001a8 <waitCallBack+0x48>
		}
		else asm("NOP");
 8000196:	bf00      	nop

		osDelay(1);
 8000198:	2001      	movs	r0, #1
 800019a:	f002 f9aa 	bl	80024f2 <osDelay>
	while(time_end > time)
 800019e:	68ba      	ldr	r2, [r7, #8]
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	429a      	cmp	r2, r3
 80001a4:	d8ec      	bhi.n	8000180 <waitCallBack+0x20>
	}
	return 0;
 80001a6:	2300      	movs	r3, #0
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	3710      	adds	r7, #16
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}

080001b0 <ESPInit>:

void ESPInit()
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
	 MX_USART1_UART_Init();
 80001b4:	f005 fd1e 	bl	8005bf4 <MX_USART1_UART_Init>
	 RingBuff_Init();
 80001b8:	f000 fdbc 	bl	8000d34 <RingBuff_Init>
}
 80001bc:	bf00      	nop
 80001be:	bd80      	pop	{r7, pc}

080001c0 <ESP_Resset>:

void ESP_Resset()
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	USART1_Device_Reset();
 80001c4:	f005 fd02 	bl	8005bcc <USART1_Device_Reset>
	if(waitCallBack("ready", 2000))
 80001c8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80001cc:	4802      	ldr	r0, [pc, #8]	; (80001d8 <ESP_Resset+0x18>)
 80001ce:	f7ff ffc7 	bl	8000160 <waitCallBack>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
	{
		return;
	}
}
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	08006c74 	.word	0x08006c74

080001dc <requestFlush>:

static void requestFlush()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	memset(request, 0, sizeof(request));
 80001e0:	f240 4201 	movw	r2, #1025	; 0x401
 80001e4:	2100      	movs	r1, #0
 80001e6:	4802      	ldr	r0, [pc, #8]	; (80001f0 <requestFlush+0x14>)
 80001e8:	f006 f833 	bl	8006252 <memset>
	//request[1023] = 0;
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20002400 	.word	0x20002400

080001f4 <answerFlush>:

static void answerFlush()
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	memset(answer, 0, sizeof(answer));
 80001f8:	f240 4201 	movw	r2, #1025	; 0x401
 80001fc:	2100      	movs	r1, #0
 80001fe:	4802      	ldr	r0, [pc, #8]	; (8000208 <answerFlush+0x14>)
 8000200:	f006 f827 	bl	8006252 <memset>
	//answer[1023] = 0;
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}
 8000208:	20002804 	.word	0x20002804

0800020c <ESP_SetMode>:

uint8_t ESP_SetMode(int mode)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	requestFlush();
 8000214:	f7ff ffe2 	bl	80001dc <requestFlush>

	if(mode == 1 || mode == 3)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2b01      	cmp	r3, #1
 800021c:	d002      	beq.n	8000224 <ESP_SetMode+0x18>
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2b03      	cmp	r3, #3
 8000222:	d10d      	bne.n	8000240 <ESP_SetMode+0x34>
	{
		memset(ssid, 0, 64);
 8000224:	2240      	movs	r2, #64	; 0x40
 8000226:	2100      	movs	r1, #0
 8000228:	481a      	ldr	r0, [pc, #104]	; (8000294 <ESP_SetMode+0x88>)
 800022a:	f006 f812 	bl	8006252 <memset>
		memset(paswd, 0, 64);
 800022e:	2240      	movs	r2, #64	; 0x40
 8000230:	2100      	movs	r1, #0
 8000232:	4819      	ldr	r0, [pc, #100]	; (8000298 <ESP_SetMode+0x8c>)
 8000234:	f006 f80d 	bl	8006252 <memset>
		USART_SendData("AT+SLEEP=0\r\n", 12);
 8000238:	210c      	movs	r1, #12
 800023a:	4818      	ldr	r0, [pc, #96]	; (800029c <ESP_SetMode+0x90>)
 800023c:	f005 fc62 	bl	8005b04 <USART_SendData>
	}

	sprintf(request, "AT+CWMODE=%d\r\n", mode);
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <ESP_SetMode+0x94>)
 8000244:	4817      	ldr	r0, [pc, #92]	; (80002a4 <ESP_SetMode+0x98>)
 8000246:	f006 f80d 	bl	8006264 <siprintf>
	RingBuff_Clear();
 800024a:	f000 fdd7 	bl	8000dfc <RingBuff_Clear>
	USART_SendData(request, strlen(request));
 800024e:	4815      	ldr	r0, [pc, #84]	; (80002a4 <ESP_SetMode+0x98>)
 8000250:	f7ff ff7e 	bl	8000150 <strlen>
 8000254:	4603      	mov	r3, r0
 8000256:	4619      	mov	r1, r3
 8000258:	4812      	ldr	r0, [pc, #72]	; (80002a4 <ESP_SetMode+0x98>)
 800025a:	f005 fc53 	bl	8005b04 <USART_SendData>

	if(waitCallBack("OK", 20))
 800025e:	2114      	movs	r1, #20
 8000260:	4811      	ldr	r0, [pc, #68]	; (80002a8 <ESP_SetMode+0x9c>)
 8000262:	f7ff ff7d 	bl	8000160 <waitCallBack>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00e      	beq.n	800028a <ESP_SetMode+0x7e>
	{
		USART_SendData("AT+RST\r\n", 8); //restart to apply settings
 800026c:	2108      	movs	r1, #8
 800026e:	480f      	ldr	r0, [pc, #60]	; (80002ac <ESP_SetMode+0xa0>)
 8000270:	f005 fc48 	bl	8005b04 <USART_SendData>
		//delay(1000);

		if(waitCallBack("ready", 2000))
 8000274:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <ESP_SetMode+0xa4>)
 800027a:	f7ff ff71 	bl	8000160 <waitCallBack>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <ESP_SetMode+0x7c>
		{
			return 1;
 8000284:	2301      	movs	r3, #1
 8000286:	e001      	b.n	800028c <ESP_SetMode+0x80>
		}
		else asm("NOP");
 8000288:	bf00      	nop
	}

	return 0;
 800028a:	2300      	movs	r3, #0
}
 800028c:	4618      	mov	r0, r3
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20002370 	.word	0x20002370
 8000298:	200023c0 	.word	0x200023c0
 800029c:	08006c7c 	.word	0x08006c7c
 80002a0:	08006c8c 	.word	0x08006c8c
 80002a4:	20002400 	.word	0x20002400
 80002a8:	08006c9c 	.word	0x08006c9c
 80002ac:	08006ca0 	.word	0x08006ca0
 80002b0:	08006c74 	.word	0x08006c74

080002b4 <ESP_SetModeSoftAP>:
{
	return ESP_SetMode(1);
}

uint8_t ESP_SetModeSoftAP()
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	return ESP_SetMode(2);
 80002b8:	2002      	movs	r0, #2
 80002ba:	f7ff ffa7 	bl	800020c <ESP_SetMode>
 80002be:	4603      	mov	r3, r0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <ESP_SetModeBoth>:

uint8_t ESP_SetModeBoth()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	return ESP_SetMode(3);
 80002c8:	2003      	movs	r0, #3
 80002ca:	f7ff ff9f 	bl	800020c <ESP_SetMode>
 80002ce:	4603      	mov	r3, r0
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <ESP_SetParamsSoftAP>:

uint8_t ESP_SetParamsSoftAP(char * ssid, char * password)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
	if(ssid != NULL && password != NULL)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d02a      	beq.n	800033a <ESP_SetParamsSoftAP+0x66>
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d027      	beq.n	800033a <ESP_SetParamsSoftAP+0x66>
	{
		requestFlush();
 80002ea:	f7ff ff77 	bl	80001dc <requestFlush>
		sprintf(request, "AT+CWSAP=\"%s\",\"%s\",5,3\r\n", ssid, password);
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	4914      	ldr	r1, [pc, #80]	; (8000344 <ESP_SetParamsSoftAP+0x70>)
 80002f4:	4814      	ldr	r0, [pc, #80]	; (8000348 <ESP_SetParamsSoftAP+0x74>)
 80002f6:	f005 ffb5 	bl	8006264 <siprintf>
		RingBuff_Clear();
 80002fa:	f000 fd7f 	bl	8000dfc <RingBuff_Clear>
		USART_SendData(request, strlen(request));
 80002fe:	4812      	ldr	r0, [pc, #72]	; (8000348 <ESP_SetParamsSoftAP+0x74>)
 8000300:	f7ff ff26 	bl	8000150 <strlen>
 8000304:	4603      	mov	r3, r0
 8000306:	4619      	mov	r1, r3
 8000308:	480f      	ldr	r0, [pc, #60]	; (8000348 <ESP_SetParamsSoftAP+0x74>)
 800030a:	f005 fbfb 	bl	8005b04 <USART_SendData>

		if(waitCallBack("OK", 20))
 800030e:	2114      	movs	r1, #20
 8000310:	480e      	ldr	r0, [pc, #56]	; (800034c <ESP_SetParamsSoftAP+0x78>)
 8000312:	f7ff ff25 	bl	8000160 <waitCallBack>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d00e      	beq.n	800033a <ESP_SetParamsSoftAP+0x66>
		{
			USART_SendData("AT+RST\r\n", 8); //restart to apply settings
 800031c:	2108      	movs	r1, #8
 800031e:	480c      	ldr	r0, [pc, #48]	; (8000350 <ESP_SetParamsSoftAP+0x7c>)
 8000320:	f005 fbf0 	bl	8005b04 <USART_SendData>

			if(waitCallBack("ready", 2000))
 8000324:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000328:	480a      	ldr	r0, [pc, #40]	; (8000354 <ESP_SetParamsSoftAP+0x80>)
 800032a:	f7ff ff19 	bl	8000160 <waitCallBack>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <ESP_SetParamsSoftAP+0x64>
			{
				return 1;
 8000334:	2301      	movs	r3, #1
 8000336:	e001      	b.n	800033c <ESP_SetParamsSoftAP+0x68>
			}
			else asm("NOP");
 8000338:	bf00      	nop
		}
	}

	return 0;
 800033a:	2300      	movs	r3, #0
}
 800033c:	4618      	mov	r0, r3
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	08006cac 	.word	0x08006cac
 8000348:	20002400 	.word	0x20002400
 800034c:	08006c9c 	.word	0x08006c9c
 8000350:	08006ca0 	.word	0x08006ca0
 8000354:	08006c74 	.word	0x08006c74

08000358 <ESP_SetParamsStation>:

uint8_t ESP_SetParamsStation(char * ssid, char * password)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
	if(ssid != NULL && password != NULL)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d01e      	beq.n	80003a6 <ESP_SetParamsStation+0x4e>
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d01b      	beq.n	80003a6 <ESP_SetParamsStation+0x4e>
	{
		requestFlush();
 800036e:	f7ff ff35 	bl	80001dc <requestFlush>
		sprintf(request, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	490e      	ldr	r1, [pc, #56]	; (80003b0 <ESP_SetParamsStation+0x58>)
 8000378:	480e      	ldr	r0, [pc, #56]	; (80003b4 <ESP_SetParamsStation+0x5c>)
 800037a:	f005 ff73 	bl	8006264 <siprintf>
		RingBuff_Clear();
 800037e:	f000 fd3d 	bl	8000dfc <RingBuff_Clear>
		//charCallBack("");   //clear ring buffer after restart
		USART_SendData(request, strlen(request));
 8000382:	480c      	ldr	r0, [pc, #48]	; (80003b4 <ESP_SetParamsStation+0x5c>)
 8000384:	f7ff fee4 	bl	8000150 <strlen>
 8000388:	4603      	mov	r3, r0
 800038a:	4619      	mov	r1, r3
 800038c:	4809      	ldr	r0, [pc, #36]	; (80003b4 <ESP_SetParamsStation+0x5c>)
 800038e:	f005 fbb9 	bl	8005b04 <USART_SendData>

		if(waitCallBack("OK", 10000))
 8000392:	f242 7110 	movw	r1, #10000	; 0x2710
 8000396:	4808      	ldr	r0, [pc, #32]	; (80003b8 <ESP_SetParamsStation+0x60>)
 8000398:	f7ff fee2 	bl	8000160 <waitCallBack>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <ESP_SetParamsStation+0x4e>
		{
			return 1;
 80003a2:	2301      	movs	r3, #1
 80003a4:	e000      	b.n	80003a8 <ESP_SetParamsStation+0x50>
		}
	}

	return 0;
 80003a6:	2300      	movs	r3, #0
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	08006cc8 	.word	0x08006cc8
 80003b4:	20002400 	.word	0x20002400
 80003b8:	08006c9c 	.word	0x08006c9c

080003bc <ESP_StartTCPServer>:

	return 0;
}

uint8_t ESP_StartTCPServer(uint16_t port)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	80fb      	strh	r3, [r7, #6]
    if(!TCPServerFlag)
 80003c6:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <ESP_StartTCPServer+0x78>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d12d      	bne.n	800042a <ESP_StartTCPServer+0x6e>
    {
        USART_SendData("AT+CIPMUX=1\r\n", 13);
 80003ce:	210d      	movs	r1, #13
 80003d0:	4819      	ldr	r0, [pc, #100]	; (8000438 <ESP_StartTCPServer+0x7c>)
 80003d2:	f005 fb97 	bl	8005b04 <USART_SendData>
        if(!waitCallBack("OK", 100))
 80003d6:	2164      	movs	r1, #100	; 0x64
 80003d8:	4818      	ldr	r0, [pc, #96]	; (800043c <ESP_StartTCPServer+0x80>)
 80003da:	f7ff fec1 	bl	8000160 <waitCallBack>
 80003de:	4603      	mov	r3, r0
 80003e0:	f083 0301 	eor.w	r3, r3, #1
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <ESP_StartTCPServer+0x32>
        {
        	return 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	e01e      	b.n	800042c <ESP_StartTCPServer+0x70>
        }

        requestFlush();
 80003ee:	f7ff fef5 	bl	80001dc <requestFlush>
        sprintf(request, "AT+CIPSERVER=1,%d\r\n", port);
 80003f2:	88fb      	ldrh	r3, [r7, #6]
 80003f4:	461a      	mov	r2, r3
 80003f6:	4912      	ldr	r1, [pc, #72]	; (8000440 <ESP_StartTCPServer+0x84>)
 80003f8:	4812      	ldr	r0, [pc, #72]	; (8000444 <ESP_StartTCPServer+0x88>)
 80003fa:	f005 ff33 	bl	8006264 <siprintf>

        RingBuff_Clear();
 80003fe:	f000 fcfd 	bl	8000dfc <RingBuff_Clear>
        USART_SendData(request, strlen(request));
 8000402:	4810      	ldr	r0, [pc, #64]	; (8000444 <ESP_StartTCPServer+0x88>)
 8000404:	f7ff fea4 	bl	8000150 <strlen>
 8000408:	4603      	mov	r3, r0
 800040a:	4619      	mov	r1, r3
 800040c:	480d      	ldr	r0, [pc, #52]	; (8000444 <ESP_StartTCPServer+0x88>)
 800040e:	f005 fb79 	bl	8005b04 <USART_SendData>
		//USART_SendData("AT+MDNS=1,\"espressif\",\"iot\",80\r\n", 32);
        if(waitCallBack("OK", 20))
 8000412:	2114      	movs	r1, #20
 8000414:	4809      	ldr	r0, [pc, #36]	; (800043c <ESP_StartTCPServer+0x80>)
 8000416:	f7ff fea3 	bl	8000160 <waitCallBack>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d004      	beq.n	800042a <ESP_StartTCPServer+0x6e>
        {
            TCPServerFlag = 1;
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <ESP_StartTCPServer+0x78>)
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]
            return 1;
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <ESP_StartTCPServer+0x70>
        }
    }

	return 0;
 800042a:	2300      	movs	r3, #0
}
 800042c:	4618      	mov	r0, r3
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000208 	.word	0x20000208
 8000438:	08006cf8 	.word	0x08006cf8
 800043c:	08006c9c 	.word	0x08006c9c
 8000440:	08006d08 	.word	0x08006d08
 8000444:	20002400 	.word	0x20002400

08000448 <requestRefresh>:
	}
	return 0;
}

uint8_t requestRefresh()
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
	answerFlush();
 800044e:	f7ff fed1 	bl	80001f4 <answerFlush>
	int i = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	60fb      	str	r3, [r7, #12]
	while(!(RingBuff_IsEmpty()) && i < 1024)
 8000456:	e00b      	b.n	8000470 <requestRefresh+0x28>
	{
		answer[i++] = RingBuff_Pop();
 8000458:	68fc      	ldr	r4, [r7, #12]
 800045a:	1c63      	adds	r3, r4, #1
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	f000 fc9b 	bl	8000d98 <RingBuff_Pop>
 8000462:	4603      	mov	r3, r0
 8000464:	461a      	mov	r2, r3
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <requestRefresh+0x6c>)
 8000468:	551a      	strb	r2, [r3, r4]
		osDelay(1);
 800046a:	2001      	movs	r0, #1
 800046c:	f002 f841 	bl	80024f2 <osDelay>
	while(!(RingBuff_IsEmpty()) && i < 1024)
 8000470:	f000 fcb0 	bl	8000dd4 <RingBuff_IsEmpty>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d103      	bne.n	8000482 <requestRefresh+0x3a>
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000480:	dbea      	blt.n	8000458 <requestRefresh+0x10>
	}

	char * search;
	search = strstr(answer, "+IPD,");
 8000482:	490d      	ldr	r1, [pc, #52]	; (80004b8 <requestRefresh+0x70>)
 8000484:	480b      	ldr	r0, [pc, #44]	; (80004b4 <requestRefresh+0x6c>)
 8000486:	f005 ff19 	bl	80062bc <strstr>
 800048a:	60b8      	str	r0, [r7, #8]
	if(search != NULL)
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d00b      	beq.n	80004aa <requestRefresh+0x62>
	{
		search+=5;
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	3305      	adds	r3, #5
 8000496:	60bb      	str	r3, [r7, #8]
		uint8_t ID = strtol(search, NULL, 10);
 8000498:	220a      	movs	r2, #10
 800049a:	2100      	movs	r1, #0
 800049c:	68b8      	ldr	r0, [r7, #8]
 800049e:	f005 ffa9 	bl	80063f4 <strtol>
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
		//search += 2;
		//answerLength = strtol(search, NULL, 10); // get answer length

		return ID;
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	e000      	b.n	80004ac <requestRefresh+0x64>
	}
	return 100;
 80004aa:	2364      	movs	r3, #100	; 0x64
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3714      	adds	r7, #20
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd90      	pop	{r4, r7, pc}
 80004b4:	20002804 	.word	0x20002804
 80004b8:	08006d30 	.word	0x08006d30

080004bc <charCallBack>:

uint16_t charCallBack(char * key)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	answerFlush();
 80004c4:	f7ff fe96 	bl	80001f4 <answerFlush>
	uint16_t i = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	81fb      	strh	r3, [r7, #14]
	while(!(RingBuff_IsEmpty()) && i < 1024)
 80004cc:	e012      	b.n	80004f4 <charCallBack+0x38>
	{
		answer[i] = RingBuff_Pop();
 80004ce:	89fc      	ldrh	r4, [r7, #14]
 80004d0:	f000 fc62 	bl	8000d98 <RingBuff_Pop>
 80004d4:	4603      	mov	r3, r0
 80004d6:	461a      	mov	r2, r3
 80004d8:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <charCallBack+0x88>)
 80004da:	551a      	strb	r2, [r3, r4]

		if(answer[i] == 0)
 80004dc:	89fb      	ldrh	r3, [r7, #14]
 80004de:	4a19      	ldr	r2, [pc, #100]	; (8000544 <charCallBack+0x88>)
 80004e0:	5cd3      	ldrb	r3, [r2, r3]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d103      	bne.n	80004ee <charCallBack+0x32>
		{
			answer[i] = '0';
 80004e6:	89fb      	ldrh	r3, [r7, #14]
 80004e8:	4a16      	ldr	r2, [pc, #88]	; (8000544 <charCallBack+0x88>)
 80004ea:	2130      	movs	r1, #48	; 0x30
 80004ec:	54d1      	strb	r1, [r2, r3]
		}
		i++;
 80004ee:	89fb      	ldrh	r3, [r7, #14]
 80004f0:	3301      	adds	r3, #1
 80004f2:	81fb      	strh	r3, [r7, #14]
	while(!(RingBuff_IsEmpty()) && i < 1024)
 80004f4:	f000 fc6e 	bl	8000dd4 <RingBuff_IsEmpty>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d103      	bne.n	8000506 <charCallBack+0x4a>
 80004fe:	89fb      	ldrh	r3, [r7, #14]
 8000500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000504:	d3e3      	bcc.n	80004ce <charCallBack+0x12>
	}
	answer[1024] = 0;
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <charCallBack+0x88>)
 8000508:	2200      	movs	r2, #0
 800050a:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	if(key != NULL && strlen(answer) >= strlen(key))
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d012      	beq.n	800053a <charCallBack+0x7e>
 8000514:	480b      	ldr	r0, [pc, #44]	; (8000544 <charCallBack+0x88>)
 8000516:	f7ff fe1b 	bl	8000150 <strlen>
 800051a:	4604      	mov	r4, r0
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff fe17 	bl	8000150 <strlen>
 8000522:	4603      	mov	r3, r0
 8000524:	429c      	cmp	r4, r3
 8000526:	d308      	bcc.n	800053a <charCallBack+0x7e>
	{
		if(strstr(answer, key) != NULL)
 8000528:	6879      	ldr	r1, [r7, #4]
 800052a:	4806      	ldr	r0, [pc, #24]	; (8000544 <charCallBack+0x88>)
 800052c:	f005 fec6 	bl	80062bc <strstr>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <charCallBack+0x7e>
		{
			return 1;
 8000536:	2301      	movs	r3, #1
 8000538:	e000      	b.n	800053c <charCallBack+0x80>
		}
	}

	return 0;
 800053a:	2300      	movs	r3, #0
}
 800053c:	4618      	mov	r0, r3
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}
 8000544:	20002804 	.word	0x20002804

08000548 <ESP_SendConstData>:

	return 0;
}

uint8_t ESP_SendConstData(const char *data, uint16_t dataLength, uint8_t flagRN)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	807b      	strh	r3, [r7, #2]
 8000554:	4613      	mov	r3, r2
 8000556:	707b      	strb	r3, [r7, #1]
	requestFlush();
 8000558:	f7ff fe40 	bl	80001dc <requestFlush>
	sprintf(request, "AT+CIPSEND=%d,%d\r\n", linkID, flagRN ? (dataLength + 2) : dataLength);
 800055c:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <ESP_SendConstData+0x9c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	787b      	ldrb	r3, [r7, #1]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d002      	beq.n	800056e <ESP_SendConstData+0x26>
 8000568:	887b      	ldrh	r3, [r7, #2]
 800056a:	3302      	adds	r3, #2
 800056c:	e000      	b.n	8000570 <ESP_SendConstData+0x28>
 800056e:	887b      	ldrh	r3, [r7, #2]
 8000570:	491d      	ldr	r1, [pc, #116]	; (80005e8 <ESP_SendConstData+0xa0>)
 8000572:	481e      	ldr	r0, [pc, #120]	; (80005ec <ESP_SendConstData+0xa4>)
 8000574:	f005 fe76 	bl	8006264 <siprintf>
	USART_SendData(request, strlen(request));
 8000578:	481c      	ldr	r0, [pc, #112]	; (80005ec <ESP_SendConstData+0xa4>)
 800057a:	f7ff fde9 	bl	8000150 <strlen>
 800057e:	4603      	mov	r3, r0
 8000580:	4619      	mov	r1, r3
 8000582:	481a      	ldr	r0, [pc, #104]	; (80005ec <ESP_SendConstData+0xa4>)
 8000584:	f005 fabe 	bl	8005b04 <USART_SendData>
	//delay(200);

	if(waitCallBack(">", 200) && data != NULL)
 8000588:	21c8      	movs	r1, #200	; 0xc8
 800058a:	4819      	ldr	r0, [pc, #100]	; (80005f0 <ESP_SendConstData+0xa8>)
 800058c:	f7ff fde8 	bl	8000160 <waitCallBack>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d01b      	beq.n	80005ce <ESP_SendConstData+0x86>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d018      	beq.n	80005ce <ESP_SendConstData+0x86>
	{
		for(int i = 0; i < dataLength; i++)
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	e009      	b.n	80005b6 <ESP_SendConstData+0x6e>
		{
			USART_SendData_byte(data[i]);
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4413      	add	r3, r2
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f005 fa92 	bl	8005ad4 <USART_SendData_byte>
		for(int i = 0; i < dataLength; i++)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	3301      	adds	r3, #1
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	887a      	ldrh	r2, [r7, #2]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	dcf1      	bgt.n	80005a2 <ESP_SendConstData+0x5a>
		}
		if(flagRN)
 80005be:	787b      	ldrb	r3, [r7, #1]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d006      	beq.n	80005d2 <ESP_SendConstData+0x8a>
		{
			USART_SendData("\r\n", 2);
 80005c4:	2102      	movs	r1, #2
 80005c6:	480b      	ldr	r0, [pc, #44]	; (80005f4 <ESP_SendConstData+0xac>)
 80005c8:	f005 fa9c 	bl	8005b04 <USART_SendData>
		if(flagRN)
 80005cc:	e001      	b.n	80005d2 <ESP_SendConstData+0x8a>
		}
	}
	else return 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	e003      	b.n	80005da <ESP_SendConstData+0x92>
	delay(100);
 80005d2:	2064      	movs	r0, #100	; 0x64
 80005d4:	f004 f802 	bl	80045dc <delay>
//	if(waitCallBack("SEND OK", 200))
//	{
//		return 1;
//	}

	return 0;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20002c05 	.word	0x20002c05
 80005e8:	08006d38 	.word	0x08006d38
 80005ec:	20002400 	.word	0x20002400
 80005f0:	08006d4c 	.word	0x08006d4c
 80005f4:	08006d50 	.word	0x08006d50

080005f8 <SetLinkID>:

void SetLinkID(uint8_t ID)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	linkID = ID;
 8000602:	4a04      	ldr	r2, [pc, #16]	; (8000614 <SetLinkID+0x1c>)
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	7013      	strb	r3, [r2, #0]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20002c05 	.word	0x20002c05

08000618 <ESP_GetAnswer>:
{
	return linkID;
}

char * ESP_GetAnswer(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
	return answer;
 800061c:	4b02      	ldr	r3, [pc, #8]	; (8000628 <ESP_GetAnswer+0x10>)
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20002804 	.word	0x20002804

0800062c <SetSSID>:

void SetSSID(char * name)
{
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	memcpy(ssid, name, 64);
 8000634:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <SetSSID+0x3c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4610      	mov	r0, r2
 800063a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800063e:	4602      	mov	r2, r0
 8000640:	4619      	mov	r1, r3
 8000642:	f8d1 e000 	ldr.w	lr, [r1]
 8000646:	684e      	ldr	r6, [r1, #4]
 8000648:	688d      	ldr	r5, [r1, #8]
 800064a:	68c9      	ldr	r1, [r1, #12]
 800064c:	f8c2 e000 	str.w	lr, [r2]
 8000650:	6056      	str	r6, [r2, #4]
 8000652:	6095      	str	r5, [r2, #8]
 8000654:	60d1      	str	r1, [r2, #12]
 8000656:	3310      	adds	r3, #16
 8000658:	3010      	adds	r0, #16
 800065a:	42a3      	cmp	r3, r4
 800065c:	d1ef      	bne.n	800063e <SetSSID+0x12>
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000666:	bf00      	nop
 8000668:	20002370 	.word	0x20002370

0800066c <GetSSID>:

char * GetSSID()
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	return ssid;
 8000670:	4b02      	ldr	r3, [pc, #8]	; (800067c <GetSSID+0x10>)
}
 8000672:	4618      	mov	r0, r3
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20002370 	.word	0x20002370

08000680 <SetPASWD>:

void SetPASWD(char * passwd)
{
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	memcpy(paswd, passwd, 64);
 8000688:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <SetPASWD+0x3c>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4610      	mov	r0, r2
 800068e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8000692:	4602      	mov	r2, r0
 8000694:	4619      	mov	r1, r3
 8000696:	f8d1 e000 	ldr.w	lr, [r1]
 800069a:	684e      	ldr	r6, [r1, #4]
 800069c:	688d      	ldr	r5, [r1, #8]
 800069e:	68c9      	ldr	r1, [r1, #12]
 80006a0:	f8c2 e000 	str.w	lr, [r2]
 80006a4:	6056      	str	r6, [r2, #4]
 80006a6:	6095      	str	r5, [r2, #8]
 80006a8:	60d1      	str	r1, [r2, #12]
 80006aa:	3310      	adds	r3, #16
 80006ac:	3010      	adds	r0, #16
 80006ae:	42a3      	cmp	r3, r4
 80006b0:	d1ef      	bne.n	8000692 <SetPASWD+0x12>
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200023c0 	.word	0x200023c0

080006c0 <GetPasw>:

char *  GetPasw()
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	return paswd;
 80006c4:	4b02      	ldr	r3, [pc, #8]	; (80006d0 <GetPasw+0x10>)
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	200023c0 	.word	0x200023c0

080006d4 <EncoderInit>:
#include "stdbool.h"
#include "stdint.h"
#include "encoder_driver.h"

void EncoderInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	GPIO_Init();
 80006d8:	f004 f85c 	bl	8004794 <GPIO_Init>
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <Encoder_State>:

eState Encoder_State(void)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
	eState res = eNone;
 80006e6:	2300      	movs	r3, #0
 80006e8:	71fb      	strb	r3, [r7, #7]
    if(GetButton())
 80006ea:	f004 f8f1 	bl	80048d0 <GetButton>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d005      	beq.n	8000700 <Encoder_State+0x20>
    {
      res = eButton;
 80006f4:	2303      	movs	r3, #3
 80006f6:	71fb      	strb	r3, [r7, #7]
      ClearButton();
 80006f8:	f004 f8f4 	bl	80048e4 <ClearButton>
      return res;
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	e015      	b.n	800072c <Encoder_State+0x4c>
    }
    if(GetRotateStatus())
 8000700:	f004 f8fc 	bl	80048fc <GetRotateStatus>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00d      	beq.n	8000726 <Encoder_State+0x46>
    {
		if(GetRotatePinA() == GetRotatePinB())
 800070a:	f004 f917 	bl	800493c <GetRotatePinA>
 800070e:	4603      	mov	r3, r0
 8000710:	461c      	mov	r4, r3
 8000712:	f004 f909 	bl	8004928 <GetRotatePinB>
 8000716:	4603      	mov	r3, r0
 8000718:	429c      	cmp	r4, r3
 800071a:	d102      	bne.n	8000722 <Encoder_State+0x42>
		{
			res = eRight;
 800071c:	2302      	movs	r3, #2
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	e001      	b.n	8000726 <Encoder_State+0x46>
		}
		else
		{
			res = eLeft;
 8000722:	2301      	movs	r3, #1
 8000724:	71fb      	strb	r3, [r7, #7]
		}
	}
	ClearRotateStatus();
 8000726:	f004 f8f3 	bl	8004910 <ClearRotateStatus>
    return res;
 800072a:	79fb      	ldrb	r3, [r7, #7]
}
 800072c:	4618      	mov	r0, r3
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bd90      	pop	{r4, r7, pc}

08000734 <LDRInit>:
#include "ldr.h"
#include "ldr_driver.h"
#define N 10

void LDRInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8000738:	f004 fc0a 	bl	8004f50 <MX_ADC1_Init>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <LDR_Get>:

uint16_t LDR_Get(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
	uint32_t adc = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
	uint16_t adc_value = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	817b      	strh	r3, [r7, #10]

	for(int i = 0; i < N; i++)
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	e015      	b.n	8000780 <LDR_Get+0x40>
	{
		ADC1_Activate();
 8000754:	f004 fc7a 	bl	800504c <ADC1_Activate>
		adc_value = ADC1_Get();
 8000758:	f004 fcb4 	bl	80050c4 <ADC1_Get>
 800075c:	4603      	mov	r3, r0
 800075e:	817b      	strh	r3, [r7, #10]

		if(adc_value > 4096) // additional overflow protection
 8000760:	897b      	ldrh	r3, [r7, #10]
 8000762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000766:	d902      	bls.n	800076e <LDR_Get+0x2e>
		    adc_value = 4096;
 8000768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076c:	817b      	strh	r3, [r7, #10]

		adc += (4096 - adc_value);
 800076e:	897b      	ldrh	r3, [r7, #10]
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000778:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < N; i++)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3301      	adds	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b09      	cmp	r3, #9
 8000784:	dde6      	ble.n	8000754 <LDR_Get+0x14>
	}
	adc_value = adc / N;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <LDR_Get+0x5c>)
 800078a:	fba2 2303 	umull	r2, r3, r2, r3
 800078e:	08db      	lsrs	r3, r3, #3
 8000790:	817b      	strh	r3, [r7, #10]

	return adc_value;
 8000792:	897b      	ldrh	r3, [r7, #10]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	cccccccd 	.word	0xcccccccd

080007a0 <LedInit>:
#include "led_driver.h"

uint16_t led[3] = {0, 0, 0};

void LedInit(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	MX_TIM4_Init();
 80007a4:	f004 fe0a 	bl	80053bc <MX_TIM4_Init>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <OverflowProtection>:

static uint16_t OverflowProtection(uint16_t value)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	80fb      	strh	r3, [r7, #6]
    if(value > 4096)
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007bc:	d902      	bls.n	80007c4 <OverflowProtection+0x18>
        return 4096;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	e000      	b.n	80007c6 <OverflowProtection+0x1a>
    return value;
 80007c4:	88fb      	ldrh	r3, [r7, #6]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <Led_Set>:

void Led_Set(uint16_t red, uint16_t green, uint16_t blue)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
 80007da:	460b      	mov	r3, r1
 80007dc:	80bb      	strh	r3, [r7, #4]
 80007de:	4613      	mov	r3, r2
 80007e0:	807b      	strh	r3, [r7, #2]
	led[0] = OverflowProtection(red);
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ffe1 	bl	80007ac <OverflowProtection>
 80007ea:	4603      	mov	r3, r0
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <Led_Set+0x4c>)
 80007f0:	801a      	strh	r2, [r3, #0]
	led[1] = OverflowProtection(green);
 80007f2:	88bb      	ldrh	r3, [r7, #4]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ffd9 	bl	80007ac <OverflowProtection>
 80007fa:	4603      	mov	r3, r0
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <Led_Set+0x4c>)
 8000800:	805a      	strh	r2, [r3, #2]
	led[2] = OverflowProtection(blue);
 8000802:	887b      	ldrh	r3, [r7, #2]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ffd1 	bl	80007ac <OverflowProtection>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	4b03      	ldr	r3, [pc, #12]	; (800081c <Led_Set+0x4c>)
 8000810:	809a      	strh	r2, [r3, #4]
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000020c 	.word	0x2000020c

08000820 <Led_Set_Color>:

void Led_Set_Color(color color, uint16_t value)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	460a      	mov	r2, r1
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	4613      	mov	r3, r2
 800082e:	80bb      	strh	r3, [r7, #4]
	switch(color)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d00d      	beq.n	8000852 <Led_Set_Color+0x32>
 8000836:	2b02      	cmp	r3, #2
 8000838:	d014      	beq.n	8000864 <Led_Set_Color+0x44>
 800083a:	2b00      	cmp	r3, #0
 800083c:	d000      	beq.n	8000840 <Led_Set_Color+0x20>
	{
		case eRed: led[0] = OverflowProtection(value); break;
		case eGreen: led[1] = OverflowProtection(value); break;
		case eBlue: led[2] = OverflowProtection(value); break;
		default: break;
 800083e:	e01a      	b.n	8000876 <Led_Set_Color+0x56>
		case eRed: led[0] = OverflowProtection(value); break;
 8000840:	88bb      	ldrh	r3, [r7, #4]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ffb2 	bl	80007ac <OverflowProtection>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <Led_Set_Color+0x60>)
 800084e:	801a      	strh	r2, [r3, #0]
 8000850:	e011      	b.n	8000876 <Led_Set_Color+0x56>
		case eGreen: led[1] = OverflowProtection(value); break;
 8000852:	88bb      	ldrh	r3, [r7, #4]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ffa9 	bl	80007ac <OverflowProtection>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <Led_Set_Color+0x60>)
 8000860:	805a      	strh	r2, [r3, #2]
 8000862:	e008      	b.n	8000876 <Led_Set_Color+0x56>
		case eBlue: led[2] = OverflowProtection(value); break;
 8000864:	88bb      	ldrh	r3, [r7, #4]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ffa0 	bl	80007ac <OverflowProtection>
 800086c:	4603      	mov	r3, r0
 800086e:	461a      	mov	r2, r3
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <Led_Set_Color+0x60>)
 8000872:	809a      	strh	r2, [r3, #4]
 8000874:	bf00      	nop
	}

}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000020c 	.word	0x2000020c

08000884 <Led_Get_Color>:

uint16_t Led_Get_Color(color color)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	switch(color)
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d009      	beq.n	80008a8 <Led_Get_Color+0x24>
 8000894:	2b02      	cmp	r3, #2
 8000896:	d00a      	beq.n	80008ae <Led_Get_Color+0x2a>
 8000898:	2b00      	cmp	r3, #0
 800089a:	d002      	beq.n	80008a2 <Led_Get_Color+0x1e>
	{
		case eRed: return led[0]; break;
		case eGreen: return led[1]; break;
		case eBlue: return led[2]; break;
		default: break;
 800089c:	bf00      	nop
	}
	return 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	e007      	b.n	80008b2 <Led_Get_Color+0x2e>
		case eRed: return led[0]; break;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <Led_Get_Color+0x38>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	e004      	b.n	80008b2 <Led_Get_Color+0x2e>
		case eGreen: return led[1]; break;
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <Led_Get_Color+0x38>)
 80008aa:	885b      	ldrh	r3, [r3, #2]
 80008ac:	e001      	b.n	80008b2 <Led_Get_Color+0x2e>
		case eBlue: return led[2]; break;
 80008ae:	4b03      	ldr	r3, [pc, #12]	; (80008bc <Led_Get_Color+0x38>)
 80008b0:	889b      	ldrh	r3, [r3, #4]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	2000020c 	.word	0x2000020c

080008c0 <map>:

static uint16_t map(uint16_t value, uint16_t max_value)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	80fb      	strh	r3, [r7, #6]
 80008cc:	4613      	mov	r3, r2
 80008ce:	80bb      	strh	r3, [r7, #4]
	uint16_t map_res = value * max_value / 4096;
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	88ba      	ldrh	r2, [r7, #4]
 80008d4:	fb02 f303 	mul.w	r3, r2, r3
 80008d8:	2b00      	cmp	r3, #0
 80008da:	da01      	bge.n	80008e0 <map+0x20>
 80008dc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80008e0:	131b      	asrs	r3, r3, #12
 80008e2:	81fb      	strh	r3, [r7, #14]

	return map_res;
 80008e4:	89fb      	ldrh	r3, [r7, #14]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <Led_Refresh>:

void Led_Refresh(uint16_t max_value)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	80fb      	strh	r3, [r7, #6]
	TIM4_SET_CH1(map(led[0], max_value));
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <Led_Refresh+0x54>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	88fa      	ldrh	r2, [r7, #6]
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ffdc 	bl	80008c0 <map>
 8000908:	4603      	mov	r3, r0
 800090a:	4618      	mov	r0, r3
 800090c:	f004 fdfa 	bl	8005504 <TIM4_SET_CH1>
	TIM4_SET_CH2(map(led[1], max_value));
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <Led_Refresh+0x54>)
 8000912:	885b      	ldrh	r3, [r3, #2]
 8000914:	88fa      	ldrh	r2, [r7, #6]
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ffd1 	bl	80008c0 <map>
 800091e:	4603      	mov	r3, r0
 8000920:	4618      	mov	r0, r3
 8000922:	f004 fdff 	bl	8005524 <TIM4_SET_CH2>
	TIM4_SET_CH3(map(led[2], max_value));
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <Led_Refresh+0x54>)
 8000928:	889b      	ldrh	r3, [r3, #4]
 800092a:	88fa      	ldrh	r2, [r7, #6]
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ffc6 	bl	80008c0 <map>
 8000934:	4603      	mov	r3, r0
 8000936:	4618      	mov	r0, r3
 8000938:	f004 fe04 	bl	8005544 <TIM4_SET_CH3>
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000020c 	.word	0x2000020c

08000948 <CONFIG>:
const char statusOK_CL0[] = {"HTTP/1.1 200 OK\r\nConnection: Keep-Alive\r\nContent-Type: text/html\r\nContent-Length: 0"};

const char statusNOTFOUND[] = {"HTTP/1.1 404 Not Found\r\n"};

void CONFIG()
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
	char ContentLength[23];
	ESP_SendConstData(statusOK, strlen(statusOK), 1);
 800094e:	2201      	movs	r2, #1
 8000950:	2140      	movs	r1, #64	; 0x40
 8000952:	480e      	ldr	r0, [pc, #56]	; (800098c <CONFIG+0x44>)
 8000954:	f7ff fdf8 	bl	8000548 <ESP_SendConstData>

	int length = strlen(htmlconfig);
 8000958:	f240 2316 	movw	r3, #534	; 0x216
 800095c:	61fb      	str	r3, [r7, #28]
	sprintf(ContentLength, "Content-Length: %04d\r\n", length);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	69fa      	ldr	r2, [r7, #28]
 8000962:	490b      	ldr	r1, [pc, #44]	; (8000990 <CONFIG+0x48>)
 8000964:	4618      	mov	r0, r3
 8000966:	f005 fc7d 	bl	8006264 <siprintf>
	ESP_SendConstData(ContentLength, 22, 1);
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2201      	movs	r2, #1
 800096e:	2116      	movs	r1, #22
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fde9 	bl	8000548 <ESP_SendConstData>

	ESP_SendConstData(htmlconfig, strlen(htmlconfig), 1);
 8000976:	2201      	movs	r2, #1
 8000978:	f240 2116 	movw	r1, #534	; 0x216
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <CONFIG+0x4c>)
 800097e:	f7ff fde3 	bl	8000548 <ESP_SendConstData>

}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	080071e0 	.word	0x080071e0
 8000990:	08006d9c 	.word	0x08006d9c
 8000994:	08006fc8 	.word	0x08006fc8

08000998 <CONFIG_parse>:

void CONFIG_parse()
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b0a4      	sub	sp, #144	; 0x90
 800099c:	af00      	add	r7, sp, #0
	char * search;
	char ssid_temp[64], paswd_temp[64];
	memset(ssid_temp, 0, 64);
 800099e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009a2:	2240      	movs	r2, #64	; 0x40
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f005 fc53 	bl	8006252 <memset>
	memset(paswd_temp, 0, 64);
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2240      	movs	r2, #64	; 0x40
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f005 fc4d 	bl	8006252 <memset>

	search = strstr(ESP_GetAnswer(), "ssid=");
 80009b8:	f7ff fe2e 	bl	8000618 <ESP_GetAnswer>
 80009bc:	4603      	mov	r3, r0
 80009be:	493b      	ldr	r1, [pc, #236]	; (8000aac <CONFIG_parse+0x114>)
 80009c0:	4618      	mov	r0, r3
 80009c2:	f005 fc7b 	bl	80062bc <strstr>
 80009c6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	if(search != NULL)
 80009ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d028      	beq.n	8000a24 <CONFIG_parse+0x8c>
	{
		search += 5;
 80009d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80009d6:	3305      	adds	r3, #5
 80009d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for(int i = 0; i < 64; i++)
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80009e2:	e019      	b.n	8000a18 <CONFIG_parse+0x80>
		{
			if(search[i] == '&')
 80009e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80009ec:	4413      	add	r3, r2
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b26      	cmp	r3, #38	; 0x26
 80009f2:	d016      	beq.n	8000a22 <CONFIG_parse+0x8a>
			{
				break;
			}

			ssid_temp[i] = search[i];
 80009f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80009fc:	4413      	add	r3, r2
 80009fe:	7819      	ldrb	r1, [r3, #0]
 8000a00:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a08:	4413      	add	r3, r2
 8000a0a:	460a      	mov	r2, r1
 8000a0c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 64; i++)
 8000a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a12:	3301      	adds	r3, #1
 8000a14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a1c:	2b3f      	cmp	r3, #63	; 0x3f
 8000a1e:	dde1      	ble.n	80009e4 <CONFIG_parse+0x4c>
 8000a20:	e000      	b.n	8000a24 <CONFIG_parse+0x8c>
				break;
 8000a22:	bf00      	nop
		}
	}
	SetSSID(ssid_temp);
 8000a24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fdff 	bl	800062c <SetSSID>

	search = strstr(ESP_GetAnswer(), "paswd=");
 8000a2e:	f7ff fdf3 	bl	8000618 <ESP_GetAnswer>
 8000a32:	4603      	mov	r3, r0
 8000a34:	491e      	ldr	r1, [pc, #120]	; (8000ab0 <CONFIG_parse+0x118>)
 8000a36:	4618      	mov	r0, r3
 8000a38:	f005 fc40 	bl	80062bc <strstr>
 8000a3c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	if(search != NULL)
 8000a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d02b      	beq.n	8000aa0 <CONFIG_parse+0x108>
	{
		search += 6;
 8000a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a4c:	3306      	adds	r3, #6
 8000a4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for(int i = 0; i < 64; i++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000a58:	e018      	b.n	8000a8c <CONFIG_parse+0xf4>
		{
			if(search[i] == '&')
 8000a5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a5e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b26      	cmp	r3, #38	; 0x26
 8000a68:	d015      	beq.n	8000a96 <CONFIG_parse+0xfe>
			{
				break;
			}

			paswd_temp[i] = search[i];
 8000a6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a6e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000a72:	4413      	add	r3, r2
 8000a74:	7819      	ldrb	r1, [r3, #0]
 8000a76:	1d3a      	adds	r2, r7, #4
 8000a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a7c:	4413      	add	r3, r2
 8000a7e:	460a      	mov	r2, r1
 8000a80:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 64; i++)
 8000a82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a86:	3301      	adds	r3, #1
 8000a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a90:	2b3f      	cmp	r3, #63	; 0x3f
 8000a92:	dde2      	ble.n	8000a5a <CONFIG_parse+0xc2>
 8000a94:	e000      	b.n	8000a98 <CONFIG_parse+0x100>
				break;
 8000a96:	bf00      	nop
		}
		SetPASWD(paswd_temp);
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fdf0 	bl	8000680 <SetPASWD>
	}
	CONFIG();
 8000aa0:	f7ff ff52 	bl	8000948 <CONFIG>
	//ESP_SendConstData(statusOK_CL0, strlen(statusOK_CL0), 1);
}
 8000aa4:	bf00      	nop
 8000aa6:	3790      	adds	r7, #144	; 0x90
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	08006db4 	.word	0x08006db4
 8000ab0:	08006dbc 	.word	0x08006dbc

08000ab4 <PICKER>:

void PICKER()
{
 8000ab4:	b5b0      	push	{r4, r5, r7, lr}
 8000ab6:	b08c      	sub	sp, #48	; 0x30
 8000ab8:	af02      	add	r7, sp, #8
	char hex[7], ContentLength[23];
	hex[6] = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	ESP_SendConstData(statusOK, strlen(statusOK), 1);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2140      	movs	r1, #64	; 0x40
 8000ac4:	482c      	ldr	r0, [pc, #176]	; (8000b78 <PICKER+0xc4>)
 8000ac6:	f7ff fd3f 	bl	8000548 <ESP_SendConstData>

	int length = strlen(htmlpicker1) + strlen(htmlpicker2) + 6;
 8000aca:	f240 137d 	movw	r3, #381	; 0x17d
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(ContentLength, "Content-Length: %04d\r\n", length);
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad4:	4929      	ldr	r1, [pc, #164]	; (8000b7c <PICKER+0xc8>)
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f005 fbc4 	bl	8006264 <siprintf>
	ESP_SendConstData(ContentLength, 22, 1);
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2116      	movs	r1, #22
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fd30 	bl	8000548 <ESP_SendConstData>

	sprintf(hex, "%02x%02x%02x", Led_Get_Color(eRed)*255/4096, Led_Get_Color(eGreen)*255/4096, Led_Get_Color(eBlue)*255/4096);
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f7ff fecb 	bl	8000884 <Led_Get_Color>
 8000aee:	4603      	mov	r3, r0
 8000af0:	461a      	mov	r2, r3
 8000af2:	4613      	mov	r3, r2
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	1a9b      	subs	r3, r3, r2
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	da01      	bge.n	8000b00 <PICKER+0x4c>
 8000afc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000b00:	131b      	asrs	r3, r3, #12
 8000b02:	461c      	mov	r4, r3
 8000b04:	2001      	movs	r0, #1
 8000b06:	f7ff febd 	bl	8000884 <Led_Get_Color>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4613      	mov	r3, r2
 8000b10:	021b      	lsls	r3, r3, #8
 8000b12:	1a9b      	subs	r3, r3, r2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	da01      	bge.n	8000b1c <PICKER+0x68>
 8000b18:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000b1c:	131b      	asrs	r3, r3, #12
 8000b1e:	461d      	mov	r5, r3
 8000b20:	2002      	movs	r0, #2
 8000b22:	f7ff feaf 	bl	8000884 <Led_Get_Color>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	1a9b      	subs	r3, r3, r2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	da01      	bge.n	8000b38 <PICKER+0x84>
 8000b34:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000b38:	131b      	asrs	r3, r3, #12
 8000b3a:	f107 001c 	add.w	r0, r7, #28
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	462b      	mov	r3, r5
 8000b42:	4622      	mov	r2, r4
 8000b44:	490e      	ldr	r1, [pc, #56]	; (8000b80 <PICKER+0xcc>)
 8000b46:	f005 fb8d 	bl	8006264 <siprintf>

	ESP_SendConstData(htmlpicker1, strlen(htmlpicker1), 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <PICKER+0xd0>)
 8000b52:	f7ff fcf9 	bl	8000548 <ESP_SendConstData>
	ESP_SendConstData(hex, 6, 0);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2106      	movs	r1, #6
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fcf2 	bl	8000548 <ESP_SendConstData>
	ESP_SendConstData(htmlpicker2, strlen(htmlpicker2), 1);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2167      	movs	r1, #103	; 0x67
 8000b68:	4807      	ldr	r0, [pc, #28]	; (8000b88 <PICKER+0xd4>)
 8000b6a:	f7ff fced 	bl	8000548 <ESP_SendConstData>
}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bdb0      	pop	{r4, r5, r7, pc}
 8000b76:	bf00      	nop
 8000b78:	080071e0 	.word	0x080071e0
 8000b7c:	08006d9c 	.word	0x08006d9c
 8000b80:	08006dc4 	.word	0x08006dc4
 8000b84:	08006e4c 	.word	0x08006e4c
 8000b88:	08006f60 	.word	0x08006f60

08000b8c <PickerParseLed>:

void PickerParseLed()
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
	char * search;
	search = strstr(ESP_GetAnswer(), "?picker=%");
 8000b92:	f7ff fd41 	bl	8000618 <ESP_GetAnswer>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4935      	ldr	r1, [pc, #212]	; (8000c70 <PickerParseLed+0xe4>)
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f005 fb8e 	bl	80062bc <strstr>
 8000ba0:	6178      	str	r0, [r7, #20]
	if(search != NULL)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d05f      	beq.n	8000c68 <PickerParseLed+0xdc>
	{
		char hex[3];
		hex[2] = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73bb      	strb	r3, [r7, #14]
		uint16_t colors[3] = {0, 0, 0};
 8000bac:	2300      	movs	r3, #0
 8000bae:	80bb      	strh	r3, [r7, #4]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	80fb      	strh	r3, [r7, #6]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	813b      	strh	r3, [r7, #8]
		for(int i = 0, l = 0; i < 6; i += 2, l++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	e02e      	b.n	8000c20 <PickerParseLed+0x94>
		{
			int position = search - ESP_GetAnswer() + 11 + i;
 8000bc2:	697c      	ldr	r4, [r7, #20]
 8000bc4:	f7ff fd28 	bl	8000618 <ESP_GetAnswer>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	1ae3      	subs	r3, r4, r3
 8000bcc:	f103 020b 	add.w	r2, r3, #11
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
			hex[0] = ESP_GetAnswer()[position];
 8000bd6:	f7ff fd1f 	bl	8000618 <ESP_GetAnswer>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4413      	add	r3, r2
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	733b      	strb	r3, [r7, #12]
			hex[1] = ESP_GetAnswer()[position + 1];
 8000be4:	f7ff fd18 	bl	8000618 <ESP_GetAnswer>
 8000be8:	4602      	mov	r2, r0
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	3301      	adds	r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	737b      	strb	r3, [r7, #13]
			colors[l] = strtol(hex, NULL, 16);
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2210      	movs	r2, #16
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f005 fbf9 	bl	80063f4 <strtol>
 8000c02:	4603      	mov	r3, r0
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	f107 0120 	add.w	r1, r7, #32
 8000c0e:	440b      	add	r3, r1
 8000c10:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for(int i = 0, l = 0; i < 6; i += 2, l++)
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	3302      	adds	r3, #2
 8000c18:	61fb      	str	r3, [r7, #28]
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	61bb      	str	r3, [r7, #24]
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	2b05      	cmp	r3, #5
 8000c24:	ddcd      	ble.n	8000bc2 <PickerParseLed+0x36>
		}
		Led_Set(colors[0]*4096/255, colors[1]*4096/255, colors[2]*4096/255);
 8000c26:	88bb      	ldrh	r3, [r7, #4]
 8000c28:	031b      	lsls	r3, r3, #12
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <PickerParseLed+0xe8>)
 8000c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c30:	441a      	add	r2, r3
 8000c32:	11d2      	asrs	r2, r2, #7
 8000c34:	17db      	asrs	r3, r3, #31
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	b298      	uxth	r0, r3
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	031b      	lsls	r3, r3, #12
 8000c3e:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <PickerParseLed+0xe8>)
 8000c40:	fb82 1203 	smull	r1, r2, r2, r3
 8000c44:	441a      	add	r2, r3
 8000c46:	11d2      	asrs	r2, r2, #7
 8000c48:	17db      	asrs	r3, r3, #31
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	b299      	uxth	r1, r3
 8000c4e:	893b      	ldrh	r3, [r7, #8]
 8000c50:	031b      	lsls	r3, r3, #12
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <PickerParseLed+0xe8>)
 8000c54:	fb82 4203 	smull	r4, r2, r2, r3
 8000c58:	441a      	add	r2, r3
 8000c5a:	11d2      	asrs	r2, r2, #7
 8000c5c:	17db      	asrs	r3, r3, #31
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	f7ff fdb4 	bl	80007d0 <Led_Set>
	}
}
 8000c68:	bf00      	nop
 8000c6a:	3724      	adds	r7, #36	; 0x24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd90      	pop	{r4, r7, pc}
 8000c70:	08006dd4 	.word	0x08006dd4
 8000c74:	80808081 	.word	0x80808081

08000c78 <PICKER_parse>:

void PICKER_parse()
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	PickerParseLed();
 8000c7c:	f7ff ff86 	bl	8000b8c <PickerParseLed>

	PICKER();
 8000c80:	f7ff ff18 	bl	8000ab4 <PICKER>
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <requestConstFind>:

uint8_t requestConstFind(const char * key)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	if(strstr(ESP_GetAnswer(), key) != NULL)
 8000c90:	f7ff fcc2 	bl	8000618 <ESP_GetAnswer>
 8000c94:	4603      	mov	r3, r0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f005 fb0f 	bl	80062bc <strstr>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <requestConstFind+0x20>
	{
		return 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e001      	b.n	8000cac <requestConstFind+0x24>
	}
	else asm("NOP");
 8000ca8:	bf00      	nop
	return 0;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <ESP_Request>:


void ESP_Request(const char ** pages, const function_pointer * functions, uint8_t number)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	71fb      	strb	r3, [r7, #7]
	uint8_t linkID = requestRefresh();
 8000cc2:	f7ff fbc1 	bl	8000448 <requestRefresh>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	74fb      	strb	r3, [r7, #19]
	SetLinkID(linkID);
 8000cca:	7cfb      	ldrb	r3, [r7, #19]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fc93 	bl	80005f8 <SetLinkID>

	if(linkID >= 0 && linkID < 5)
 8000cd2:	7cfb      	ldrb	r3, [r7, #19]
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	d828      	bhi.n	8000d2a <ESP_Request+0x76>
	{
		if(pages != NULL
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d020      	beq.n	8000d20 <ESP_Request+0x6c>
	       && functions != NULL)
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d01d      	beq.n	8000d20 <ESP_Request+0x6c>
		{
			for(int i = 0; i < number; i++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	e016      	b.n	8000d18 <ESP_Request+0x64>
			{
				if(requestConstFind(pages[i]))
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ffc7 	bl	8000c88 <requestConstFind>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d008      	beq.n	8000d12 <ESP_Request+0x5e>
				{
					functions[i]();
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	4413      	add	r3, r2
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4798      	blx	r3
					RingBuff_Clear();
 8000d0c:	f000 f876 	bl	8000dfc <RingBuff_Clear>
					return;
 8000d10:	e00b      	b.n	8000d2a <ESP_Request+0x76>
			for(int i = 0; i < number; i++)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	79fa      	ldrb	r2, [r7, #7]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dce4      	bgt.n	8000cea <ESP_Request+0x36>
				}
			}
		}
		ESP_SendConstData(statusNOTFOUND, strlen(statusNOTFOUND), 1);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2118      	movs	r1, #24
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <ESP_Request+0x7c>)
 8000d26:	f7ff fc0f 	bl	8000548 <ESP_SendConstData>
	}
}
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	08007224 	.word	0x08007224

08000d34 <RingBuff_Init>:

uint16_t index_in, index_out;
char buffer[BUF_SIZE];

void RingBuff_Init()
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
	index_in = index_out = 0;
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <RingBuff_Init+0x1c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	801a      	strh	r2, [r3, #0]
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <RingBuff_Init+0x1c>)
 8000d40:	881a      	ldrh	r2, [r3, #0]
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <RingBuff_Init+0x20>)
 8000d44:	801a      	strh	r2, [r3, #0]
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20002c08 	.word	0x20002c08
 8000d54:	2000300c 	.word	0x2000300c

08000d58 <RingBuff_Push>:

void RingBuff_Push(char element)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	buffer[index_in++] = element;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <RingBuff_Push+0x38>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	b291      	uxth	r1, r2
 8000d6a:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <RingBuff_Push+0x38>)
 8000d6c:	8011      	strh	r1, [r2, #0]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <RingBuff_Push+0x3c>)
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	5453      	strb	r3, [r2, r1]
	index_in &= BUF_MASK;
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <RingBuff_Push+0x38>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <RingBuff_Push+0x38>)
 8000d82:	801a      	strh	r2, [r3, #0]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	2000300c 	.word	0x2000300c
 8000d94:	20002c0c 	.word	0x20002c0c

08000d98 <RingBuff_Pop>:

char RingBuff_Pop()
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
	char element = buffer[index_out++];
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <RingBuff_Pop+0x34>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	b291      	uxth	r1, r2
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <RingBuff_Pop+0x34>)
 8000da8:	8011      	strh	r1, [r2, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <RingBuff_Pop+0x38>)
 8000dae:	5c9b      	ldrb	r3, [r3, r2]
 8000db0:	71fb      	strb	r3, [r7, #7]
	index_out &= BUF_MASK;
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <RingBuff_Pop+0x34>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <RingBuff_Pop+0x34>)
 8000dbe:	801a      	strh	r2, [r3, #0]
	return element;
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	20002c08 	.word	0x20002c08
 8000dd0:	20002c0c 	.word	0x20002c0c

08000dd4 <RingBuff_IsEmpty>:

uint8_t RingBuff_IsEmpty()
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
	if (index_in == index_out)
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <RingBuff_IsEmpty+0x20>)
 8000dda:	881a      	ldrh	r2, [r3, #0]
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <RingBuff_IsEmpty+0x24>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d101      	bne.n	8000de8 <RingBuff_IsEmpty+0x14>
		return 1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e000      	b.n	8000dea <RingBuff_IsEmpty+0x16>
	return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2000300c 	.word	0x2000300c
 8000df8:	20002c08 	.word	0x20002c08

08000dfc <RingBuff_Clear>:

void RingBuff_Clear()
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
	index_out = index_in = 0;
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <RingBuff_Clear+0x1c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	801a      	strh	r2, [r3, #0]
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <RingBuff_Clear+0x1c>)
 8000e08:	881a      	ldrh	r2, [r3, #0]
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <RingBuff_Clear+0x20>)
 8000e0c:	801a      	strh	r2, [r3, #0]
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	2000300c 	.word	0x2000300c
 8000e1c:	20002c08 	.word	0x20002c08

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_Init+0x28>)
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_Init+0x28>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f8c1 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f005 f8d8 	bl	8005fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f005 f89e 	bl	8005f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40022000 	.word	0x40022000

08000e4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_IncTick+0x1c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_IncTick+0x20>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a03      	ldr	r2, [pc, #12]	; (8000e6c <HAL_IncTick+0x20>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	20000010 	.word	0x20000010
 8000e6c:	20003010 	.word	0x20003010

08000e70 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <NVIC_EnableIRQ+0x2c>)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	095b      	lsrs	r3, r3, #5
 8000ee6:	79fa      	ldrb	r2, [r7, #7]
 8000ee8:	f002 021f 	and.w	r2, r2, #31
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	da0b      	bge.n	8000f30 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	490d      	ldr	r1, [pc, #52]	; (8000f50 <NVIC_SetPriority+0x4c>)
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f003 030f 	and.w	r3, r3, #15
 8000f20:	3b04      	subs	r3, #4
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2e:	e009      	b.n	8000f44 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	4908      	ldr	r1, [pc, #32]	; (8000f54 <NVIC_SetPriority+0x50>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	401a      	ands	r2, r3
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	1e59      	subs	r1, r3, #1
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff55 	bl	8000e70 <NVIC_SetPriorityGrouping>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe0:	f7ff ff6a 	bl	8000eb8 <NVIC_GetPriorityGrouping>
 8000fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	6978      	ldr	r0, [r7, #20]
 8000fec:	f7ff ffb4 	bl	8000f58 <NVIC_EncodePriority>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff83 	bl	8000f04 <NVIC_SetPriority>
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <NVIC_EnableIRQ>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001028:	4b02      	ldr	r3, [pc, #8]	; (8001034 <HAL_RCC_GetHCLKFreq+0x10>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	20000018 	.word	0x20000018

08001038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800103c:	f7ff fff2 	bl	8001024 <HAL_RCC_GetHCLKFreq>
 8001040:	4601      	mov	r1, r0
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	0adb      	lsrs	r3, r3, #11
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	4a03      	ldr	r2, [pc, #12]	; (800105c <HAL_RCC_GetPCLK2Freq+0x24>)
 800104e:	5cd3      	ldrb	r3, [r2, r3]
 8001050:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001054:	4618      	mov	r0, r3
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40021000 	.word	0x40021000
 800105c:	08007260 	.word	0x08007260

08001060 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	220f      	movs	r2, #15
 800106e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_RCC_GetClockConfig+0x58>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0203 	and.w	r2, r3, #3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_RCC_GetClockConfig+0x58>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_RCC_GetClockConfig+0x58>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_RCC_GetClockConfig+0x58>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	08db      	lsrs	r3, r3, #3
 800109a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	611a      	str	r2, [r3, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_RCC_GetClockConfig+0x5c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0207 	and.w	r2, r3, #7
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40022000 	.word	0x40022000

080010c0 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e01d      	b.n	800110e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d106      	bne.n	80010ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f815 	bl	8001116 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2202      	movs	r2, #2
 80010f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3304      	adds	r3, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4610      	mov	r0, r2
 8001100:	f000 f958 	bl	80013b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	68d2      	ldr	r2, [r2, #12]
 800113a:	f042 0201 	orr.w	r2, r2, #1
 800113e:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	6812      	ldr	r2, [r2, #0]
 8001148:	6812      	ldr	r2, [r2, #0]
 800114a:	f042 0201 	orr.w	r2, r2, #1
 800114e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b02      	cmp	r3, #2
 8001170:	d122      	bne.n	80011b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b02      	cmp	r3, #2
 800117e:	d11b      	bne.n	80011b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f06f 0202 	mvn.w	r2, #2
 8001188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f8ed 	bl	800137e <HAL_TIM_IC_CaptureCallback>
 80011a4:	e005      	b.n	80011b2 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f8e0 	bl	800136c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f8ef 	bl	8001390 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d122      	bne.n	800120c <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d11b      	bne.n	800120c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f06f 0204 	mvn.w	r2, #4
 80011dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2202      	movs	r2, #2
 80011e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f8c3 	bl	800137e <HAL_TIM_IC_CaptureCallback>
 80011f8:	e005      	b.n	8001206 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f8b6 	bl	800136c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f8c5 	bl	8001390 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b08      	cmp	r3, #8
 8001218:	d122      	bne.n	8001260 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	2b08      	cmp	r3, #8
 8001226:	d11b      	bne.n	8001260 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f06f 0208 	mvn.w	r2, #8
 8001230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2204      	movs	r2, #4
 8001236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f899 	bl	800137e <HAL_TIM_IC_CaptureCallback>
 800124c:	e005      	b.n	800125a <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f88c 	bl	800136c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f89b 	bl	8001390 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b10      	cmp	r3, #16
 800126c:	d122      	bne.n	80012b4 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	2b10      	cmp	r3, #16
 800127a:	d11b      	bne.n	80012b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f06f 0210 	mvn.w	r2, #16
 8001284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2208      	movs	r2, #8
 800128a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 f86f 	bl	800137e <HAL_TIM_IC_CaptureCallback>
 80012a0:	e005      	b.n	80012ae <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f862 	bl	800136c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 f871 	bl	8001390 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d10e      	bne.n	80012e0 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d107      	bne.n	80012e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f06f 0201 	mvn.w	r2, #1
 80012d8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f004 fe36 	bl	8005f4c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ea:	2b80      	cmp	r3, #128	; 0x80
 80012ec:	d10e      	bne.n	800130c <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f8:	2b80      	cmp	r3, #128	; 0x80
 80012fa:	d107      	bne.n	800130c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001304:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f8c3 	bl	8001492 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001316:	2b40      	cmp	r3, #64	; 0x40
 8001318:	d10e      	bne.n	8001338 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001324:	2b40      	cmp	r3, #64	; 0x40
 8001326:	d107      	bne.n	8001338 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001330:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f835 	bl	80013a2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	f003 0320 	and.w	r3, r3, #32
 8001342:	2b20      	cmp	r3, #32
 8001344:	d10e      	bne.n	8001364 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f003 0320 	and.w	r3, r3, #32
 8001350:	2b20      	cmp	r3, #32
 8001352:	d107      	bne.n	8001364 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f06f 0220 	mvn.w	r2, #32
 800135c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f88e 	bl	8001480 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a2a      	ldr	r2, [pc, #168]	; (8001474 <TIM_Base_SetConfig+0xc0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d00b      	beq.n	80013e8 <TIM_Base_SetConfig+0x34>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d6:	d007      	beq.n	80013e8 <TIM_Base_SetConfig+0x34>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a27      	ldr	r2, [pc, #156]	; (8001478 <TIM_Base_SetConfig+0xc4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d003      	beq.n	80013e8 <TIM_Base_SetConfig+0x34>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a26      	ldr	r2, [pc, #152]	; (800147c <TIM_Base_SetConfig+0xc8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d108      	bne.n	80013fa <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a1d      	ldr	r2, [pc, #116]	; (8001474 <TIM_Base_SetConfig+0xc0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d00b      	beq.n	800141a <TIM_Base_SetConfig+0x66>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001408:	d007      	beq.n	800141a <TIM_Base_SetConfig+0x66>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <TIM_Base_SetConfig+0xc4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d003      	beq.n	800141a <TIM_Base_SetConfig+0x66>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a19      	ldr	r2, [pc, #100]	; (800147c <TIM_Base_SetConfig+0xc8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d108      	bne.n	800142c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	4313      	orrs	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001432:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a07      	ldr	r2, [pc, #28]	; (8001474 <TIM_Base_SetConfig+0xc0>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d103      	bne.n	8001464 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	691a      	ldr	r2, [r3, #16]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	615a      	str	r2, [r3, #20]
}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	40012c00 	.word	0x40012c00
 8001478:	40000400 	.word	0x40000400
 800147c:	40000800 	.word	0x40000800

08001480 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b01      	cmp	r3, #1
 80014da:	bf0c      	ite	eq
 80014dc:	2301      	moveq	r3, #1
 80014de:	2300      	movne	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80014f6:	2301      	movs	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80014fa:	4813      	ldr	r0, [pc, #76]	; (8001548 <LL_ADC_CommonInit+0x5c>)
 80014fc:	f7ff ffe4 	bl	80014c8 <LL_ADC_IsEnabled>
 8001500:	4604      	mov	r4, r0
 8001502:	4812      	ldr	r0, [pc, #72]	; (800154c <LL_ADC_CommonInit+0x60>)
 8001504:	f7ff ffe0 	bl	80014c8 <LL_ADC_IsEnabled>
 8001508:	4603      	mov	r3, r0
 800150a:	4323      	orrs	r3, r4
 800150c:	2b00      	cmp	r3, #0
 800150e:	d114      	bne.n	800153a <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d009      	beq.n	800152c <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	e008      	b.n	800153e <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	e001      	b.n	800153e <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	bd90      	pop	{r4, r7, pc}
 8001548:	40012400 	.word	0x40012400
 800154c:	40012800 	.word	0x40012800

08001550 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800155a:	2301      	movs	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffb2 	bl	80014c8 <LL_ADC_IsEnabled>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d112      	bne.n	8001590 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	e001      	b.n	8001594 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff8b 	bl	80014c8 <LL_ADC_IsEnabled>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d131      	bne.n	800161c <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00c      	beq.n	80015da <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	430b      	orrs	r3, r1
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	e008      	b.n	80015ec <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80015f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	6811      	ldr	r1, [r2, #0]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	68d2      	ldr	r2, [r2, #12]
 8001600:	4311      	orrs	r1, r2
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	6912      	ldr	r2, [r2, #16]
 8001606:	430a      	orrs	r2, r1
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4619      	mov	r1, r3
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff45 	bl	80014a4 <LL_ADC_REG_SetSequencerLength>
 800161a:	e001      	b.n	8001620 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001634:	4905      	ldr	r1, [pc, #20]	; (800164c <LL_EXTI_EnableIT_0_31+0x20>)
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <LL_EXTI_EnableIT_0_31+0x20>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4313      	orrs	r3, r2
 800163e:	600b      	str	r3, [r1, #0]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40010400 	.word	0x40010400

08001650 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001658:	4905      	ldr	r1, [pc, #20]	; (8001670 <LL_EXTI_DisableIT_0_31+0x20>)
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <LL_EXTI_DisableIT_0_31+0x20>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	43db      	mvns	r3, r3
 8001662:	4013      	ands	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40010400 	.word	0x40010400

08001674 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800167c:	4905      	ldr	r1, [pc, #20]	; (8001694 <LL_EXTI_EnableEvent_0_31+0x20>)
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]

}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40010400 	.word	0x40010400

08001698 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80016a0:	4905      	ldr	r1, [pc, #20]	; (80016b8 <LL_EXTI_DisableEvent_0_31+0x20>)
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <LL_EXTI_DisableEvent_0_31+0x20>)
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4013      	ands	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	40010400 	.word	0x40010400

080016bc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80016c4:	4905      	ldr	r1, [pc, #20]	; (80016dc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]

}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40010400 	.word	0x40010400

080016e0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80016e8:	4905      	ldr	r1, [pc, #20]	; (8001700 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4013      	ands	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]

}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	40010400 	.word	0x40010400

08001704 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800170c:	4905      	ldr	r1, [pc, #20]	; (8001724 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001710:	68da      	ldr	r2, [r3, #12]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4313      	orrs	r3, r2
 8001716:	60cb      	str	r3, [r1, #12]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40010400 	.word	0x40010400

08001728 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001730:	4905      	ldr	r1, [pc, #20]	; (8001748 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	43db      	mvns	r3, r3
 800173a:	4013      	ands	r3, r2
 800173c:	60cb      	str	r3, [r1, #12]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	40010400 	.word	0x40010400

0800174c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	791b      	ldrb	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d060      	beq.n	8001822 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d066      	beq.n	8001836 <LL_EXTI_Init+0xea>
    {
      switch (EXTI_InitStruct->Mode)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	795b      	ldrb	r3, [r3, #5]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d00e      	beq.n	800178e <LL_EXTI_Init+0x42>
 8001770:	2b02      	cmp	r3, #2
 8001772:	d017      	beq.n	80017a4 <LL_EXTI_Init+0x58>
 8001774:	2b00      	cmp	r3, #0
 8001776:	d120      	bne.n	80017ba <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff8b 	bl	8001698 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff50 	bl	800162c <LL_EXTI_EnableIT_0_31>
          break;
 800178c:	e018      	b.n	80017c0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff5c 	bl	8001650 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff69 	bl	8001674 <LL_EXTI_EnableEvent_0_31>
          break;
 80017a2:	e00d      	b.n	80017c0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff3f 	bl	800162c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff5e 	bl	8001674 <LL_EXTI_EnableEvent_0_31>
          break;
 80017b8:	e002      	b.n	80017c0 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
          break;
 80017be:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	799b      	ldrb	r3, [r3, #6]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d036      	beq.n	8001836 <LL_EXTI_Init+0xea>
      {
        switch (EXTI_InitStruct->Trigger)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	799b      	ldrb	r3, [r3, #6]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d00e      	beq.n	80017ee <LL_EXTI_Init+0xa2>
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d017      	beq.n	8001804 <LL_EXTI_Init+0xb8>
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d120      	bne.n	800181a <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ffa3 	bl	8001728 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ff68 	bl	80016bc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80017ec:	e023      	b.n	8001836 <LL_EXTI_Init+0xea>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff74 	bl	80016e0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff81 	bl	8001704 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001802:	e018      	b.n	8001836 <LL_EXTI_Init+0xea>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff57 	bl	80016bc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff76 	bl	8001704 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001818:	e00d      	b.n	8001836 <LL_EXTI_Init+0xea>
          default:
            status = ERROR;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
            break;
 800181e:	bf00      	nop
 8001820:	e009      	b.n	8001836 <LL_EXTI_Init+0xea>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff12 	bl	8001650 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff31 	bl	8001698 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001840:	b490      	push	{r4, r7}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	461a      	mov	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	0e1b      	lsrs	r3, r3, #24
 8001854:	4413      	add	r3, r2
 8001856:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001858:	6822      	ldr	r2, [r4, #0]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	210f      	movs	r1, #15
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	401a      	ands	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	fa93 f3a3 	rbit	r3, r3
 8001882:	61bb      	str	r3, [r7, #24]
  return(result);
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fab3 f383 	clz	r3, r3
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	4313      	orrs	r3, r2
 8001894:	6023      	str	r3, [r4, #0]
}
 8001896:	bf00      	nop
 8001898:	3720      	adds	r7, #32
 800189a:	46bd      	mov	sp, r7
 800189c:	bc90      	pop	{r4, r7}
 800189e:	4770      	bx	lr

080018a0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80018a0:	b490      	push	{r4, r7}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	461a      	mov	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	0e1b      	lsrs	r3, r3, #24
 80018b4:	4413      	add	r3, r2
 80018b6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80018b8:	6822      	ldr	r2, [r4, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	fa93 f3a3 	rbit	r3, r3
 80018c4:	613b      	str	r3, [r7, #16]
  return(result);
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	fab3 f383 	clz	r3, r3
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	2103      	movs	r1, #3
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	401a      	ands	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fab3 f383 	clz	r3, r3
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 80018f6:	bf00      	nop
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc90      	pop	{r4, r7}
 80018fe:	4770      	bx	lr

08001900 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8001900:	b490      	push	{r4, r7}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	461a      	mov	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	0e1b      	lsrs	r3, r3, #24
 8001914:	4413      	add	r3, r2
 8001916:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001918:	6822      	ldr	r2, [r4, #0]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	613b      	str	r3, [r7, #16]
  return(result);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	fab3 f383 	clz	r3, r3
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	2104      	movs	r1, #4
 8001930:	fa01 f303 	lsl.w	r3, r1, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	401a      	ands	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	61bb      	str	r3, [r7, #24]
  return(result);
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	4313      	orrs	r3, r2
 8001954:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8001956:	bf00      	nop
 8001958:	3720      	adds	r7, #32
 800195a:	46bd      	mov	sp, r7
 800195c:	bc90      	pop	{r4, r7}
 800195e:	4770      	bx	lr

08001960 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	43db      	mvns	r3, r3
 8001976:	401a      	ands	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	fa93 f3a3 	rbit	r3, r3
 8001984:	613b      	str	r3, [r7, #16]
  return(result);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	431a      	orrs	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	60da      	str	r2, [r3, #12]
}
 8001998:	bf00      	nop
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b088      	sub	sp, #32
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	0c1b      	lsrs	r3, r3, #16
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	fa93 f3a3 	rbit	r3, r3
 80019c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80019c2:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0U)
 80019ca:	e040      	b.n	8001a4e <LL_GPIO_Init+0xac>
  {
    /* skip if bit is not set */
    if ((pinmask & (1U << pinpos)) != 0U)
 80019cc:	2201      	movs	r2, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	409a      	lsls	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d036      	beq.n	8001a48 <LL_GPIO_Init+0xa6>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	2b07      	cmp	r3, #7
 80019de:	d806      	bhi.n	80019ee <LL_GPIO_Init+0x4c>
      {
        currentpin = (0x00000101U << pinpos);
 80019e0:	f240 1201 	movw	r2, #257	; 0x101
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	61bb      	str	r3, [r7, #24]
 80019ec:	e008      	b.n	8001a00 <LL_GPIO_Init+0x5e>
      }
      else
      {
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b08      	subs	r3, #8
 80019f2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019fe:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	461a      	mov	r2, r3
 8001a06:	69b9      	ldr	r1, [r7, #24]
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff19 	bl	8001840 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	461a      	mov	r2, r3
 8001a14:	69b9      	ldr	r1, [r7, #24]
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffa2 	bl	8001960 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d003      	beq.n	8001a2c <LL_GPIO_Init+0x8a>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b09      	cmp	r3, #9
 8001a2a:	d10d      	bne.n	8001a48 <LL_GPIO_Init+0xa6>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	461a      	mov	r2, r3
 8001a32:	69b9      	ldr	r1, [r7, #24]
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff33 	bl	80018a0 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	69b9      	ldr	r1, [r7, #24]
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ff5c 	bl	8001900 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0U)
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	fa22 f303 	lsr.w	r3, r2, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1b8      	bne.n	80019cc <LL_GPIO_Init+0x2a>
  }
  return (SUCCESS);
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <LL_RCC_GetSysClkSource+0x14>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	40021000 	.word	0x40021000

08001a7c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <LL_RCC_GetAHBPrescaler+0x14>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	40021000 	.word	0x40021000

08001a94 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	40021000 	.word	0x40021000

08001aac <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <LL_RCC_GetAPB2Prescaler+0x14>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <LL_RCC_PLL_GetMainSource+0x14>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	40021000 	.word	0x40021000

08001adc <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	40021000 	.word	0x40021000

08001af4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <LL_RCC_PLL_GetPrediv+0x18>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	0c5b      	lsrs	r3, r3, #17
 8001afe:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000

08001b10 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001b18:	f000 f820 	bl	8001b5c <RCC_GetSystemClockFreq>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f83a 	bl	8001ba0 <RCC_GetHCLKClockFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 f848 	bl	8001bcc <RCC_GetPCLK1ClockFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f854 	bl	8001bf4 <RCC_GetPCLK2ClockFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	60da      	str	r2, [r3, #12]
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001b66:	f7ff ff7d 	bl	8001a64 <LL_RCC_GetSysClkSource>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d006      	beq.n	8001b7e <RCC_GetSystemClockFreq+0x22>
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d007      	beq.n	8001b84 <RCC_GetSystemClockFreq+0x28>
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <RCC_GetSystemClockFreq+0x40>)
 8001b7a:	607b      	str	r3, [r7, #4]
      break;
 8001b7c:	e009      	b.n	8001b92 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <RCC_GetSystemClockFreq+0x40>)
 8001b80:	607b      	str	r3, [r7, #4]
      break;
 8001b82:	e006      	b.n	8001b92 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001b84:	f000 f84a 	bl	8001c1c <RCC_PLL_GetFreqDomain_SYS>
 8001b88:	6078      	str	r0, [r7, #4]
      break;
 8001b8a:	e002      	b.n	8001b92 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <RCC_GetSystemClockFreq+0x40>)
 8001b8e:	607b      	str	r3, [r7, #4]
      break;
 8001b90:	bf00      	nop
  }

  return frequency;
 8001b92:	687b      	ldr	r3, [r7, #4]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	007a1200 	.word	0x007a1200

08001ba0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001ba8:	f7ff ff68 	bl	8001a7c <LL_RCC_GetAHBPrescaler>
 8001bac:	4603      	mov	r3, r0
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <RCC_GetHCLKClockFreq+0x28>)
 8001bb6:	5cd3      	ldrb	r3, [r2, r3]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	40d3      	lsrs	r3, r2
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	08007250 	.word	0x08007250

08001bcc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001bd4:	f7ff ff5e 	bl	8001a94 <LL_RCC_GetAPB1Prescaler>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <RCC_GetPCLK1ClockFreq+0x24>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	461a      	mov	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	40d3      	lsrs	r3, r2
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	08007260 	.word	0x08007260

08001bf4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001bfc:	f7ff ff56 	bl	8001aac <LL_RCC_GetAPB2Prescaler>
 8001c00:	4603      	mov	r3, r0
 8001c02:	0adb      	lsrs	r3, r3, #11
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <RCC_GetPCLK2ClockFreq+0x24>)
 8001c06:	5cd3      	ldrb	r3, [r2, r3]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	40d3      	lsrs	r3, r2
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	08007260 	.word	0x08007260

08001c1c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	2300      	movs	r3, #0
 8001c28:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001c2a:	f7ff ff4b 	bl	8001ac4 <LL_RCC_PLL_GetMainSource>
 8001c2e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3a:	d003      	beq.n	8001c44 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001c3c:	e00b      	b.n	8001c56 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8001c40:	607b      	str	r3, [r7, #4]
      break;
 8001c42:	e00b      	b.n	8001c5c <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001c44:	f7ff ff56 	bl	8001af4 <LL_RCC_PLL_GetPrediv>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	607b      	str	r3, [r7, #4]
      break;
 8001c54:	e002      	b.n	8001c5c <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8001c58:	607b      	str	r3, [r7, #4]
      break;
 8001c5a:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001c5c:	f7ff ff3e 	bl	8001adc <LL_RCC_PLL_GetMultiplicator>
 8001c60:	4603      	mov	r3, r0
 8001c62:	0c9b      	lsrs	r3, r3, #18
 8001c64:	3302      	adds	r3, #2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	fb02 f303 	mul.w	r3, r2, r3
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	003d0900 	.word	0x003d0900
 8001c78:	007a1200 	.word	0x007a1200

08001c7c <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	615a      	str	r2, [r3, #20]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <LL_TIM_Init+0xb4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d00b      	beq.n	8001d84 <LL_TIM_Init+0x34>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d72:	d007      	beq.n	8001d84 <LL_TIM_Init+0x34>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a24      	ldr	r2, [pc, #144]	; (8001e08 <LL_TIM_Init+0xb8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d003      	beq.n	8001d84 <LL_TIM_Init+0x34>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a23      	ldr	r2, [pc, #140]	; (8001e0c <LL_TIM_Init+0xbc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d106      	bne.n	8001d92 <LL_TIM_Init+0x42>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <LL_TIM_Init+0xb4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00b      	beq.n	8001db2 <LL_TIM_Init+0x62>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da0:	d007      	beq.n	8001db2 <LL_TIM_Init+0x62>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <LL_TIM_Init+0xb8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d003      	beq.n	8001db2 <LL_TIM_Init+0x62>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a17      	ldr	r2, [pc, #92]	; (8001e0c <LL_TIM_Init+0xbc>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d106      	bne.n	8001dc0 <LL_TIM_Init+0x70>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff62 	bl	8001c96 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff4f 	bl	8001c7c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <LL_TIM_Init+0xb4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d105      	bne.n	8001df2 <LL_TIM_Init+0xa2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	7c1b      	ldrb	r3, [r3, #16]
 8001dea:	4619      	mov	r1, r3
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff5f 	bl	8001cb0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ff9d 	bl	8001d32 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001df8:	2301      	movs	r3, #1
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40012c00 	.word	0x40012c00
 8001e08:	40000400 	.word	0x40000400
 8001e0c:	40000800 	.word	0x40000800

08001e10 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b10      	cmp	r3, #16
 8001e24:	d012      	beq.n	8001e4c <LL_TIM_OC_Init+0x3c>
 8001e26:	2b10      	cmp	r3, #16
 8001e28:	d802      	bhi.n	8001e30 <LL_TIM_OC_Init+0x20>
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d007      	beq.n	8001e3e <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001e2e:	e022      	b.n	8001e76 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8001e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e34:	d011      	beq.n	8001e5a <LL_TIM_OC_Init+0x4a>
 8001e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3a:	d015      	beq.n	8001e68 <LL_TIM_OC_Init+0x58>
      break;
 8001e3c:	e01b      	b.n	8001e76 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f81d 	bl	8001e80 <OC1Config>
 8001e46:	4603      	mov	r3, r0
 8001e48:	75fb      	strb	r3, [r7, #23]
      break;
 8001e4a:	e014      	b.n	8001e76 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 f882 	bl	8001f58 <OC2Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	75fb      	strb	r3, [r7, #23]
      break;
 8001e58:	e00d      	b.n	8001e76 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f8eb 	bl	8002038 <OC3Config>
 8001e62:	4603      	mov	r3, r0
 8001e64:	75fb      	strb	r3, [r7, #23]
      break;
 8001e66:	e006      	b.n	8001e76 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f954 	bl	8002118 <OC4Config>
 8001e70:	4603      	mov	r3, r0
 8001e72:	75fb      	strb	r3, [r7, #23]
      break;
 8001e74:	bf00      	nop
  }

  return result;
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	f023 0201 	bic.w	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 0303 	bic.w	r3, r3, #3
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f023 0202 	bic.w	r2, r3, #2
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f023 0201 	bic.w	r2, r3, #1
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1a      	ldr	r2, [pc, #104]	; (8001f54 <OC1Config+0xd4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d11e      	bne.n	8001f2c <OC1Config+0xac>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f023 0208 	bic.w	r2, r3, #8
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4313      	orrs	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f023 0204 	bic.w	r2, r3, #4
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff fec3 	bl	8001cca <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40012c00 	.word	0x40012c00

08001f58 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	f023 0210 	bic.w	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f023 0220 	bic.w	r2, r3, #32
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f023 0210 	bic.w	r2, r3, #16
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <OC2Config+0xdc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d11f      	bne.n	800200c <OC2Config+0xb4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	019b      	lsls	r3, r3, #6
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	019b      	lsls	r3, r3, #6
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	4619      	mov	r1, r3
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff fe60 	bl	8001ce4 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40012c00 	.word	0x40012c00

08002038 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f023 0303 	bic.w	r3, r3, #3
 8002072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	4313      	orrs	r3, r2
 8002090:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <OC3Config+0xdc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d11f      	bne.n	80020ea <OC3Config+0xb2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	029b      	lsls	r3, r3, #10
 80020b6:	4313      	orrs	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	029b      	lsls	r3, r3, #10
 80020c6:	4313      	orrs	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	015b      	lsls	r3, r3, #5
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	4619      	mov	r1, r3
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff fdfe 	bl	8001cfe <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002108:	2301      	movs	r3, #1
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40012c00 	.word	0x40012c00

08002118 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002152:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	031b      	lsls	r3, r3, #12
 8002170:	4313      	orrs	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	031b      	lsls	r3, r3, #12
 8002180:	4313      	orrs	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a0f      	ldr	r2, [pc, #60]	; (80021c4 <OC4Config+0xac>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d107      	bne.n	800219c <OC4Config+0x84>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	019b      	lsls	r3, r3, #6
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4619      	mov	r1, r3
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fdb2 	bl	8001d18 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40012c00 	.word	0x40012c00

080021c8 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021dc:	bf0c      	ite	eq
 80021de:	2301      	moveq	r3, #1
 80021e0:	2300      	movne	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	611a      	str	r2, [r3, #16]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr

08002212 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	615a      	str	r2, [r3, #20]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
	...

08002238 <LL_USART_SetBaudRate>:
  * @param  PeriphClk Peripheral Clock
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	009a      	lsls	r2, r3, #2
 800224e:	441a      	add	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	fbb2 f3f3 	udiv	r3, r2, r3
 8002258:	4a25      	ldr	r2, [pc, #148]	; (80022f0 <LL_USART_SetBaudRate+0xb8>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	b29b      	uxth	r3, r3
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	b299      	uxth	r1, r3
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	009a      	lsls	r2, r3, #2
 8002270:	441a      	add	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	fbb2 f2f3 	udiv	r2, r2, r3
 800227a:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <LL_USART_SetBaudRate+0xb8>)
 800227c:	fba3 0302 	umull	r0, r3, r3, r2
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	2064      	movs	r0, #100	; 0x64
 8002284:	fb00 f303 	mul.w	r3, r0, r3
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	3332      	adds	r3, #50	; 0x32
 800228e:	4a18      	ldr	r2, [pc, #96]	; (80022f0 <LL_USART_SetBaudRate+0xb8>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	b29b      	uxth	r3, r3
 8002298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229c:	b29b      	uxth	r3, r3
 800229e:	440b      	add	r3, r1
 80022a0:	b299      	uxth	r1, r3
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	009a      	lsls	r2, r3, #2
 80022ac:	441a      	add	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <LL_USART_SetBaudRate+0xb8>)
 80022b8:	fba3 0302 	umull	r0, r3, r3, r2
 80022bc:	095b      	lsrs	r3, r3, #5
 80022be:	2064      	movs	r0, #100	; 0x64
 80022c0:	fb00 f303 	mul.w	r3, r0, r3
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	3332      	adds	r3, #50	; 0x32
 80022ca:	4a09      	ldr	r2, [pc, #36]	; (80022f0 <LL_USART_SetBaudRate+0xb8>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	095b      	lsrs	r3, r3, #5
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	b29b      	uxth	r3, r3
 80022da:	440b      	add	r3, r1
 80022dc:	b29b      	uxth	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	609a      	str	r2, [r3, #8]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	51eb851f 	.word	0x51eb851f

080022f4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80022fe:	2300      	movs	r3, #0
 8002300:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff ff5e 	bl	80021c8 <LL_USART_IsEnabled>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d145      	bne.n	800239e <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800231a:	f023 030c 	bic.w	r3, r3, #12
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	6851      	ldr	r1, [r2, #4]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	68d2      	ldr	r2, [r2, #12]
 8002326:	4311      	orrs	r1, r2
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	6912      	ldr	r2, [r2, #16]
 800232c:	430a      	orrs	r2, r1
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ff57 	bl	80021ee <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	4619      	mov	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff ff63 	bl	8002212 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800234c:	f107 0308 	add.w	r3, r7, #8
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fbdd 	bl	8001b10 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <LL_USART_Init+0xb4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d102      	bne.n	8002364 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	e00c      	b.n	800237e <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a11      	ldr	r2, [pc, #68]	; (80023ac <LL_USART_Init+0xb8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d102      	bne.n	8002372 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	e005      	b.n	800237e <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <LL_USART_Init+0xbc>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00c      	beq.n	800239e <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 800238c:	2301      	movs	r3, #1
 800238e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	69b9      	ldr	r1, [r7, #24]
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ff4d 	bl	8002238 <LL_USART_SetBaudRate>
#endif /* USART_OverSampling_Feature */
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800239e:	7ffb      	ldrb	r3, [r7, #31]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40013800 	.word	0x40013800
 80023ac:	40004400 	.word	0x40004400
 80023b0:	40004800 	.word	0x40004800

080023b4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80023be:	4909      	ldr	r1, [pc, #36]	; (80023e4 <LL_InitTick+0x30>)
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <LL_InitTick+0x30>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d2:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <LL_InitTick+0x30>)
 80023d4:	2205      	movs	r2, #5
 80023d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000e010 	.word	0xe000e010

080023e8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80023f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ffdd 	bl	80023b4 <LL_InitTick>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800240c:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <LL_mDelay+0x44>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002412:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241a:	d00c      	beq.n	8002436 <LL_mDelay+0x32>
  {
    Delay++;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3301      	adds	r3, #1
 8002420:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002422:	e008      	b.n	8002436 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <LL_mDelay+0x44>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <LL_mDelay+0x32>
    {
      Delay--;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f3      	bne.n	8002424 <LL_mDelay+0x20>
    }
  }
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000e010 	.word	0xe000e010

0800244c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002454:	4a03      	ldr	r2, [pc, #12]	; (8002464 <LL_SetSystemCoreClock+0x18>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6013      	str	r3, [r2, #0]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	20000018 	.word	0x20000018

08002468 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800247a:	2b84      	cmp	r3, #132	; 0x84
 800247c:	d005      	beq.n	800248a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800247e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4413      	add	r3, r2
 8002486:	3303      	adds	r3, #3
 8002488:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800248a:	68fb      	ldr	r3, [r7, #12]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800249a:	f001 fa05 	bl	80038a8 <vTaskStartScheduler>
  
  return osOK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80024a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685c      	ldr	r4, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024ba:	b29e      	uxth	r6, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ffd0 	bl	8002468 <makeFreeRtosPriority>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f107 030c 	add.w	r3, r7, #12
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	9200      	str	r2, [sp, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	4632      	mov	r2, r6
 80024d6:	4629      	mov	r1, r5
 80024d8:	4620      	mov	r0, r4
 80024da:	f001 f87f 	bl	80035dc <xTaskCreate>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d001      	beq.n	80024e8 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e000      	b.n	80024ea <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80024e8:	68fb      	ldr	r3, [r7, #12]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <osDelay+0x16>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	e000      	b.n	800250a <osDelay+0x18>
 8002508:	2301      	movs	r3, #1
 800250a:	4618      	mov	r0, r3
 800250c:	f001 f998 	bl	8003840 <vTaskDelay>
  
  return osOK;
 8002510:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f103 0208 	add.w	r2, r3, #8
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f04f 32ff 	mov.w	r2, #4294967295
 8002532:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f103 0208 	add.w	r2, r3, #8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f103 0208 	add.w	r2, r3, #8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	601a      	str	r2, [r3, #0]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025b6:	b480      	push	{r7}
 80025b8:	b085      	sub	sp, #20
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d103      	bne.n	80025d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e00c      	b.n	80025f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3308      	adds	r3, #8
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	e002      	b.n	80025e4 <vListInsert+0x2e>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d9f6      	bls.n	80025de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	601a      	str	r2, [r3, #0]
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6892      	ldr	r2, [r2, #8]
 800263c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6852      	ldr	r2, [r2, #4]
 8002646:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	429a      	cmp	r2, r3
 8002650:	d103      	bne.n	800265a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	1e5a      	subs	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3b04      	subs	r3, #4
 8002688:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3b04      	subs	r3, #4
 8002696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f023 0201 	bic.w	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3b04      	subs	r3, #4
 80026a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80026a8:	4a08      	ldr	r2, [pc, #32]	; (80026cc <pxPortInitialiseStack+0x54>)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3b14      	subs	r3, #20
 80026b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3b20      	subs	r3, #32
 80026be:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80026c0:	68fb      	ldr	r3, [r7, #12]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	080026d1 	.word	0x080026d1

080026d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <prvTaskExitError+0x38>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026de:	d009      	beq.n	80026f4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	e7fe      	b.n	80026f2 <prvTaskExitError+0x22>
 80026f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8002706:	e7fe      	b.n	8002706 <prvTaskExitError+0x36>
 8002708:	20000014 	.word	0x20000014
 800270c:	00000000 	.word	0x00000000

08002710 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002710:	4b07      	ldr	r3, [pc, #28]	; (8002730 <pxCurrentTCBConst2>)
 8002712:	6819      	ldr	r1, [r3, #0]
 8002714:	6808      	ldr	r0, [r1, #0]
 8002716:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800271a:	f380 8809 	msr	PSP, r0
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	f04f 0000 	mov.w	r0, #0
 8002726:	f380 8811 	msr	BASEPRI, r0
 800272a:	f04e 0e0d 	orr.w	lr, lr, #13
 800272e:	4770      	bx	lr

08002730 <pxCurrentTCBConst2>:
 8002730:	20002230 	.word	0x20002230
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop

08002738 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002738:	4806      	ldr	r0, [pc, #24]	; (8002754 <prvPortStartFirstTask+0x1c>)
 800273a:	6800      	ldr	r0, [r0, #0]
 800273c:	6800      	ldr	r0, [r0, #0]
 800273e:	f380 8808 	msr	MSP, r0
 8002742:	b662      	cpsie	i
 8002744:	b661      	cpsie	f
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	f3bf 8f6f 	isb	sy
 800274e:	df00      	svc	0
 8002750:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002752:	bf00      	nop
 8002754:	e000ed08 	.word	0xe000ed08

08002758 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800275e:	4b28      	ldr	r3, [pc, #160]	; (8002800 <xPortStartScheduler+0xa8>)
 8002760:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	22ff      	movs	r2, #255	; 0xff
 800276e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002780:	b2da      	uxtb	r2, r3
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <xPortStartScheduler+0xac>)
 8002784:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <xPortStartScheduler+0xb0>)
 8002788:	2207      	movs	r2, #7
 800278a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800278c:	e009      	b.n	80027a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800278e:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <xPortStartScheduler+0xb0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3b01      	subs	r3, #1
 8002794:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <xPortStartScheduler+0xb0>)
 8002796:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b80      	cmp	r3, #128	; 0x80
 80027ac:	d0ef      	beq.n	800278e <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80027ae:	4b16      	ldr	r3, [pc, #88]	; (8002808 <xPortStartScheduler+0xb0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	4a14      	ldr	r2, [pc, #80]	; (8002808 <xPortStartScheduler+0xb0>)
 80027b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <xPortStartScheduler+0xb0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027c0:	4a11      	ldr	r2, [pc, #68]	; (8002808 <xPortStartScheduler+0xb0>)
 80027c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80027cc:	4a0f      	ldr	r2, [pc, #60]	; (800280c <xPortStartScheduler+0xb4>)
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <xPortStartScheduler+0xb4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80027d8:	4a0c      	ldr	r2, [pc, #48]	; (800280c <xPortStartScheduler+0xb4>)
 80027da:	4b0c      	ldr	r3, [pc, #48]	; (800280c <xPortStartScheduler+0xb4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80027e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80027e4:	f000 f8b0 	bl	8002948 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80027e8:	4b09      	ldr	r3, [pc, #36]	; (8002810 <xPortStartScheduler+0xb8>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80027ee:	f7ff ffa3 	bl	8002738 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80027f2:	f7ff ff6d 	bl	80026d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	e000e400 	.word	0xe000e400
 8002804:	20000212 	.word	0x20000212
 8002808:	20000214 	.word	0x20000214
 800280c:	e000ed20 	.word	0xe000ed20
 8002810:	20000014 	.word	0x20000014

08002814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800282c:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <vPortEnterCritical+0x54>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <vPortEnterCritical+0x54>)
 8002834:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002836:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <vPortEnterCritical+0x54>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d10e      	bne.n	800285c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <vPortEnterCritical+0x58>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d009      	beq.n	800285c <vPortEnterCritical+0x48>
 8002848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284c:	f383 8811 	msr	BASEPRI, r3
 8002850:	f3bf 8f6f 	isb	sy
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	e7fe      	b.n	800285a <vPortEnterCritical+0x46>
	}
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20000014 	.word	0x20000014
 800286c:	e000ed04 	.word	0xe000ed04

08002870 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <vPortExitCritical+0x48>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <vPortExitCritical+0x22>
 800287e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002882:	f383 8811 	msr	BASEPRI, r3
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	e7fe      	b.n	8002890 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <vPortExitCritical+0x48>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3b01      	subs	r3, #1
 8002898:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <vPortExitCritical+0x48>)
 800289a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <vPortExitCritical+0x48>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d104      	bne.n	80028ae <vPortExitCritical+0x3e>
 80028a4:	2300      	movs	r3, #0
 80028a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	20000014 	.word	0x20000014
 80028bc:	00000000 	.word	0x00000000

080028c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80028c0:	f3ef 8009 	mrs	r0, PSP
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <pxCurrentTCBConst>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80028d0:	6010      	str	r0, [r2, #0]
 80028d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80028d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80028da:	f380 8811 	msr	BASEPRI, r0
 80028de:	f001 fa6f 	bl	8003dc0 <vTaskSwitchContext>
 80028e2:	f04f 0000 	mov.w	r0, #0
 80028e6:	f380 8811 	msr	BASEPRI, r0
 80028ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80028ee:	6819      	ldr	r1, [r3, #0]
 80028f0:	6808      	ldr	r0, [r1, #0]
 80028f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80028f6:	f380 8809 	msr	PSP, r0
 80028fa:	f3bf 8f6f 	isb	sy
 80028fe:	4770      	bx	lr

08002900 <pxCurrentTCBConst>:
 8002900:	20002230 	.word	0x20002230
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop

08002908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
	__asm volatile
 800290e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002920:	f001 f992 	bl	8003c48 <xTaskIncrementTick>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <SysTick_Handler+0x3c>)
 800292c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	2300      	movs	r3, #0
 8002934:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	e000ed04 	.word	0xe000ed04

08002948 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800294c:	4a07      	ldr	r2, [pc, #28]	; (800296c <vPortSetupTimerInterrupt+0x24>)
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <vPortSetupTimerInterrupt+0x28>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4908      	ldr	r1, [pc, #32]	; (8002974 <vPortSetupTimerInterrupt+0x2c>)
 8002954:	fba1 1303 	umull	r1, r3, r1, r3
 8002958:	099b      	lsrs	r3, r3, #6
 800295a:	3b01      	subs	r3, #1
 800295c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <vPortSetupTimerInterrupt+0x30>)
 8002960:	2207      	movs	r2, #7
 8002962:	601a      	str	r2, [r3, #0]
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	e000e014 	.word	0xe000e014
 8002970:	20000018 	.word	0x20000018
 8002974:	10624dd3 	.word	0x10624dd3
 8002978:	e000e010 	.word	0xe000e010

0800297c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08a      	sub	sp, #40	; 0x28
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002988:	f000 ffd4 	bl	8003934 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800298c:	4b57      	ldr	r3, [pc, #348]	; (8002aec <pvPortMalloc+0x170>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002994:	f000 f916 	bl	8002bc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002998:	4b55      	ldr	r3, [pc, #340]	; (8002af0 <pvPortMalloc+0x174>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 808c 	bne.w	8002abe <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d01c      	beq.n	80029e6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80029ac:	2208      	movs	r2, #8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d013      	beq.n	80029e6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f023 0307 	bic.w	r3, r3, #7
 80029c4:	3308      	adds	r3, #8
 80029c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <pvPortMalloc+0x6a>
	__asm volatile
 80029d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d6:	f383 8811 	msr	BASEPRI, r3
 80029da:	f3bf 8f6f 	isb	sy
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	e7fe      	b.n	80029e4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d068      	beq.n	8002abe <pvPortMalloc+0x142>
 80029ec:	4b41      	ldr	r3, [pc, #260]	; (8002af4 <pvPortMalloc+0x178>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d863      	bhi.n	8002abe <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80029f6:	4b40      	ldr	r3, [pc, #256]	; (8002af8 <pvPortMalloc+0x17c>)
 80029f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80029fa:	4b3f      	ldr	r3, [pc, #252]	; (8002af8 <pvPortMalloc+0x17c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a00:	e004      	b.n	8002a0c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d203      	bcs.n	8002a1e <pvPortMalloc+0xa2>
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f1      	bne.n	8002a02 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002a1e:	4b33      	ldr	r3, [pc, #204]	; (8002aec <pvPortMalloc+0x170>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d04a      	beq.n	8002abe <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	4413      	add	r3, r2
 8002a30:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	1ad2      	subs	r2, r2, r3
 8002a42:	2308      	movs	r3, #8
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d91e      	bls.n	8002a88 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4413      	add	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d009      	beq.n	8002a70 <pvPortMalloc+0xf4>
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	e7fe      	b.n	8002a6e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	1ad2      	subs	r2, r2, r3
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a82:	69b8      	ldr	r0, [r7, #24]
 8002a84:	f000 f900 	bl	8002c88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a88:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <pvPortMalloc+0x178>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <pvPortMalloc+0x178>)
 8002a94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a96:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <pvPortMalloc+0x178>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <pvPortMalloc+0x180>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d203      	bcs.n	8002aaa <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002aa2:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <pvPortMalloc+0x178>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a15      	ldr	r2, [pc, #84]	; (8002afc <pvPortMalloc+0x180>)
 8002aa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <pvPortMalloc+0x174>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002abe:	f000 ff47 	bl	8003950 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <pvPortMalloc+0x164>
 8002acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e7fe      	b.n	8002ade <pvPortMalloc+0x162>
	return pvReturn;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3728      	adds	r7, #40	; 0x28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20002220 	.word	0x20002220
 8002af0:	2000222c 	.word	0x2000222c
 8002af4:	20002224 	.word	0x20002224
 8002af8:	20002218 	.word	0x20002218
 8002afc:	20002228 	.word	0x20002228

08002b00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d046      	beq.n	8002ba0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002b12:	2308      	movs	r3, #8
 8002b14:	425b      	negs	r3, r3
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4413      	add	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <vPortFree+0xa8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <vPortFree+0x42>
 8002b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b32:	f383 8811 	msr	BASEPRI, r3
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e7fe      	b.n	8002b40 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <vPortFree+0x5e>
 8002b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4e:	f383 8811 	msr	BASEPRI, r3
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	60bb      	str	r3, [r7, #8]
 8002b5c:	e7fe      	b.n	8002b5c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <vPortFree+0xa8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d019      	beq.n	8002ba0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d115      	bne.n	8002ba0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <vPortFree+0xa8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	401a      	ands	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002b84:	f000 fed6 	bl	8003934 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <vPortFree+0xac>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4413      	add	r3, r2
 8002b92:	4a06      	ldr	r2, [pc, #24]	; (8002bac <vPortFree+0xac>)
 8002b94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b96:	6938      	ldr	r0, [r7, #16]
 8002b98:	f000 f876 	bl	8002c88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002b9c:	f000 fed8 	bl	8003950 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002ba0:	bf00      	nop
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	2000222c 	.word	0x2000222c
 8002bac:	20002224 	.word	0x20002224

08002bb0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8002bb4:	4b02      	ldr	r3, [pc, #8]	; (8002bc0 <xPortGetFreeHeapSize+0x10>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	20002224 	.word	0x20002224

08002bc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002bd0:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <prvHeapInit+0xac>)
 8002bd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00c      	beq.n	8002bf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3307      	adds	r3, #7
 8002be2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0307 	bic.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	4a1f      	ldr	r2, [pc, #124]	; (8002c70 <prvHeapInit+0xac>)
 8002bf4:	4413      	add	r3, r2
 8002bf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <prvHeapInit+0xb0>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002c02:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <prvHeapInit+0xb0>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002c10:	2208      	movs	r2, #8
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0307 	bic.w	r3, r3, #7
 8002c1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a15      	ldr	r2, [pc, #84]	; (8002c78 <prvHeapInit+0xb4>)
 8002c24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <prvHeapInit+0xb4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <prvHeapInit+0xb4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	1ad2      	subs	r2, r2, r3
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <prvHeapInit+0xb4>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <prvHeapInit+0xb8>)
 8002c52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <prvHeapInit+0xbc>)
 8002c5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <prvHeapInit+0xc0>)
 8002c5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c62:	601a      	str	r2, [r3, #0]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000218 	.word	0x20000218
 8002c74:	20002218 	.word	0x20002218
 8002c78:	20002220 	.word	0x20002220
 8002c7c:	20002228 	.word	0x20002228
 8002c80:	20002224 	.word	0x20002224
 8002c84:	2000222c 	.word	0x2000222c

08002c88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c90:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <prvInsertBlockIntoFreeList+0xa8>)
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	e002      	b.n	8002c9c <prvInsertBlockIntoFreeList+0x14>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d3f7      	bcc.n	8002c96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	441a      	add	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d108      	bne.n	8002cca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	441a      	add	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	441a      	add	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d118      	bne.n	8002d10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <prvInsertBlockIntoFreeList+0xac>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d00d      	beq.n	8002d06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	441a      	add	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e008      	b.n	8002d18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <prvInsertBlockIntoFreeList+0xac>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e003      	b.n	8002d18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d002      	beq.n	8002d26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	20002218 	.word	0x20002218
 8002d34:	20002220 	.word	0x20002220

08002d38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <xQueueGenericReset+0x28>
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	e7fe      	b.n	8002d5e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002d60:	f7ff fd58 	bl	8002814 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6c:	68f9      	ldr	r1, [r7, #12]
 8002d6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	441a      	add	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	3b01      	subs	r3, #1
 8002d92:	68f9      	ldr	r1, [r7, #12]
 8002d94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	441a      	add	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	22ff      	movs	r2, #255	; 0xff
 8002da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	22ff      	movs	r2, #255	; 0xff
 8002dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d114      	bne.n	8002de0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d01a      	beq.n	8002df4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3310      	adds	r3, #16
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f001 f88a 	bl	8003edc <xTaskRemoveFromEventList>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d012      	beq.n	8002df4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <xQueueGenericReset+0xcc>)
 8002dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	e009      	b.n	8002df4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3310      	adds	r3, #16
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fb98 	bl	800251a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	3324      	adds	r3, #36	; 0x24
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fb93 	bl	800251a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002df4:	f7ff fd3c 	bl	8002870 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002df8:	2301      	movs	r3, #1
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	e000ed04 	.word	0xe000ed04

08002e08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08a      	sub	sp, #40	; 0x28
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	4613      	mov	r3, r2
 8002e14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d109      	bne.n	8002e30 <xQueueGenericCreate+0x28>
 8002e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e20:	f383 8811 	msr	BASEPRI, r3
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	e7fe      	b.n	8002e2e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	e004      	b.n	8002e46 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3348      	adds	r3, #72	; 0x48
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fd96 	bl	800297c <pvPortMalloc>
 8002e50:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00b      	beq.n	8002e70 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	3348      	adds	r3, #72	; 0x48
 8002e5c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e5e:	79fa      	ldrb	r2, [r7, #7]
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f805 	bl	8002e7a <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8002e70:	69bb      	ldr	r3, [r7, #24]
	}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e002      	b.n	8002e9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	69b8      	ldr	r0, [r7, #24]
 8002eac:	f7ff ff44 	bl	8002d38 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08e      	sub	sp, #56	; 0x38
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d109      	bne.n	8002ee8 <xQueueGenericSend+0x30>
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ee6:	e7fe      	b.n	8002ee6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d103      	bne.n	8002ef6 <xQueueGenericSend+0x3e>
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <xQueueGenericSend+0x42>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <xQueueGenericSend+0x44>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d109      	bne.n	8002f14 <xQueueGenericSend+0x5c>
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
 8002f12:	e7fe      	b.n	8002f12 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d103      	bne.n	8002f22 <xQueueGenericSend+0x6a>
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <xQueueGenericSend+0x6e>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <xQueueGenericSend+0x70>
 8002f26:	2300      	movs	r3, #0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <xQueueGenericSend+0x88>
 8002f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	623b      	str	r3, [r7, #32]
 8002f3e:	e7fe      	b.n	8002f3e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f40:	f001 f9ba 	bl	80042b8 <xTaskGetSchedulerState>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d102      	bne.n	8002f50 <xQueueGenericSend+0x98>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <xQueueGenericSend+0x9c>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <xQueueGenericSend+0x9e>
 8002f54:	2300      	movs	r3, #0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <xQueueGenericSend+0xb6>
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	e7fe      	b.n	8002f6c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f6e:	f7ff fc51 	bl	8002814 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d302      	bcc.n	8002f84 <xQueueGenericSend+0xcc>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d129      	bne.n	8002fd8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f8a:	f000 f9be 	bl	800330a <prvCopyDataToQueue>
 8002f8e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d010      	beq.n	8002fba <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9a:	3324      	adds	r3, #36	; 0x24
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 ff9d 	bl	8003edc <xTaskRemoveFromEventList>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d013      	beq.n	8002fd0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002fa8:	4b3f      	ldr	r3, [pc, #252]	; (80030a8 <xQueueGenericSend+0x1f0>)
 8002faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	e00a      	b.n	8002fd0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fc0:	4b39      	ldr	r3, [pc, #228]	; (80030a8 <xQueueGenericSend+0x1f0>)
 8002fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002fd0:	f7ff fc4e 	bl	8002870 <vPortExitCritical>
				return pdPASS;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e063      	b.n	80030a0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d103      	bne.n	8002fe6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fde:	f7ff fc47 	bl	8002870 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e05c      	b.n	80030a0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d106      	bne.n	8002ffa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002fec:	f107 0314 	add.w	r3, r7, #20
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 ffd5 	bl	8003fa0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ffa:	f7ff fc39 	bl	8002870 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ffe:	f000 fc99 	bl	8003934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003002:	f7ff fc07 	bl	8002814 <vPortEnterCritical>
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800300c:	b25b      	sxtb	r3, r3
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003012:	d103      	bne.n	800301c <xQueueGenericSend+0x164>
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003022:	b25b      	sxtb	r3, r3
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d103      	bne.n	8003032 <xQueueGenericSend+0x17a>
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003032:	f7ff fc1d 	bl	8002870 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003036:	1d3a      	adds	r2, r7, #4
 8003038:	f107 0314 	add.w	r3, r7, #20
 800303c:	4611      	mov	r1, r2
 800303e:	4618      	mov	r0, r3
 8003040:	f000 ffd0 	bl	8003fe4 <xTaskCheckForTimeOut>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d124      	bne.n	8003094 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800304a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800304c:	f000 fa55 	bl	80034fa <prvIsQueueFull>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d018      	beq.n	8003088 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003058:	3310      	adds	r3, #16
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f000 ff18 	bl	8003e94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003066:	f000 f9e0 	bl	800342a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800306a:	f000 fc71 	bl	8003950 <xTaskResumeAll>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	f47f af7c 	bne.w	8002f6e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <xQueueGenericSend+0x1f0>)
 8003078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	e772      	b.n	8002f6e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800308a:	f000 f9ce 	bl	800342a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800308e:	f000 fc5f 	bl	8003950 <xTaskResumeAll>
 8003092:	e76c      	b.n	8002f6e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003096:	f000 f9c8 	bl	800342a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800309a:	f000 fc59 	bl	8003950 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800309e:	2300      	movs	r3, #0
		}
	}
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3738      	adds	r7, #56	; 0x38
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	e000ed04 	.word	0xe000ed04

080030ac <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08e      	sub	sp, #56	; 0x38
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <xQueueGenericReceive+0x30>
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
 80030da:	e7fe      	b.n	80030da <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d103      	bne.n	80030ea <xQueueGenericReceive+0x3e>
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <xQueueGenericReceive+0x42>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <xQueueGenericReceive+0x44>
 80030ee:	2300      	movs	r3, #0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d109      	bne.n	8003108 <xQueueGenericReceive+0x5c>
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	623b      	str	r3, [r7, #32]
 8003106:	e7fe      	b.n	8003106 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003108:	f001 f8d6 	bl	80042b8 <xTaskGetSchedulerState>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d102      	bne.n	8003118 <xQueueGenericReceive+0x6c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <xQueueGenericReceive+0x70>
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <xQueueGenericReceive+0x72>
 800311c:	2300      	movs	r3, #0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <xQueueGenericReceive+0x8a>
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	e7fe      	b.n	8003134 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003136:	f7ff fb6d 	bl	8002814 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d046      	beq.n	80031d4 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003150:	f000 f945 	bl	80033de <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d121      	bne.n	800319e <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800315a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315c:	1e5a      	subs	r2, r3, #1
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d104      	bne.n	8003174 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800316a:	f001 f9bd 	bl	80044e8 <pvTaskIncrementMutexHeldCount>
 800316e:	4602      	mov	r2, r0
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d027      	beq.n	80031cc <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	3310      	adds	r3, #16
 8003180:	4618      	mov	r0, r3
 8003182:	f000 feab 	bl	8003edc <xTaskRemoveFromEventList>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01f      	beq.n	80031cc <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 800318c:	4b4f      	ldr	r3, [pc, #316]	; (80032cc <xQueueGenericReceive+0x220>)
 800318e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	e016      	b.n	80031cc <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031a2:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00f      	beq.n	80031cc <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	3324      	adds	r3, #36	; 0x24
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fe93 	bl	8003edc <xTaskRemoveFromEventList>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d007      	beq.n	80031cc <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80031bc:	4b43      	ldr	r3, [pc, #268]	; (80032cc <xQueueGenericReceive+0x220>)
 80031be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80031cc:	f7ff fb50 	bl	8002870 <vPortExitCritical>
				return pdPASS;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e077      	b.n	80032c4 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d103      	bne.n	80031e2 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031da:	f7ff fb49 	bl	8002870 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031de:	2300      	movs	r3, #0
 80031e0:	e070      	b.n	80032c4 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d106      	bne.n	80031f6 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80031e8:	f107 0314 	add.w	r3, r7, #20
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fed7 	bl	8003fa0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031f2:	2301      	movs	r3, #1
 80031f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031f6:	f7ff fb3b 	bl	8002870 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031fa:	f000 fb9b 	bl	8003934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031fe:	f7ff fb09 	bl	8002814 <vPortEnterCritical>
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003208:	b25b      	sxtb	r3, r3
 800320a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320e:	d103      	bne.n	8003218 <xQueueGenericReceive+0x16c>
 8003210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800321e:	b25b      	sxtb	r3, r3
 8003220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003224:	d103      	bne.n	800322e <xQueueGenericReceive+0x182>
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800322e:	f7ff fb1f 	bl	8002870 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003232:	1d3a      	adds	r2, r7, #4
 8003234:	f107 0314 	add.w	r3, r7, #20
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fed2 	bl	8003fe4 <xTaskCheckForTimeOut>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d131      	bne.n	80032aa <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003248:	f000 f941 	bl	80034ce <prvIsQueueEmpty>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d025      	beq.n	800329e <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d108      	bne.n	800326c <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 800325a:	f7ff fadb 	bl	8002814 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4618      	mov	r0, r3
 8003264:	f001 f846 	bl	80042f4 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8003268:	f7ff fb02 	bl	8002870 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	3324      	adds	r3, #36	; 0x24
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4611      	mov	r1, r2
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fe0d 	bl	8003e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800327a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800327c:	f000 f8d5 	bl	800342a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003280:	f000 fb66 	bl	8003950 <xTaskResumeAll>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	f47f af55 	bne.w	8003136 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 800328c:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <xQueueGenericReceive+0x220>)
 800328e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	e74b      	b.n	8003136 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800329e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032a0:	f000 f8c3 	bl	800342a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032a4:	f000 fb54 	bl	8003950 <xTaskResumeAll>
 80032a8:	e745      	b.n	8003136 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80032aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032ac:	f000 f8bd 	bl	800342a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032b0:	f000 fb4e 	bl	8003950 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032b6:	f000 f90a 	bl	80034ce <prvIsQueueEmpty>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f43f af3a 	beq.w	8003136 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3738      	adds	r7, #56	; 0x38
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	e000ed04 	.word	0xe000ed04

080032d0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <uxQueueMessagesWaiting+0x22>
 80032de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	e7fe      	b.n	80032f0 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 80032f2:	f7ff fa8f 	bl	8002814 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fa:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80032fc:	f7ff fab8 	bl	8002870 <vPortExitCritical>

	return uxReturn;
 8003300:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b086      	sub	sp, #24
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10d      	bne.n	8003344 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d14d      	bne.n	80033cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	4618      	mov	r0, r3
 8003336:	f001 f853 	bl	80043e0 <xTaskPriorityDisinherit>
 800333a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	e043      	b.n	80033cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d119      	bne.n	800337e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6898      	ldr	r0, [r3, #8]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	461a      	mov	r2, r3
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	f002 ff71 	bl	800623c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	441a      	add	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	429a      	cmp	r2, r3
 8003372:	d32b      	bcc.n	80033cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	e026      	b.n	80033cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	68d8      	ldr	r0, [r3, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	461a      	mov	r2, r3
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	f002 ff57 	bl	800623c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	425b      	negs	r3, r3
 8003398:	441a      	add	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d207      	bcs.n	80033ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	425b      	negs	r3, r3
 80033b4:	441a      	add	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d105      	bne.n	80033cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80033d4:	697b      	ldr	r3, [r7, #20]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d018      	beq.n	8003422 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	441a      	add	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	429a      	cmp	r2, r3
 8003408:	d303      	bcc.n	8003412 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68d9      	ldr	r1, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	461a      	mov	r2, r3
 800341c:	6838      	ldr	r0, [r7, #0]
 800341e:	f002 ff0d 	bl	800623c <memcpy>
	}
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003432:	f7ff f9ef 	bl	8002814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800343c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800343e:	e011      	b.n	8003464 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2b00      	cmp	r3, #0
 8003446:	d012      	beq.n	800346e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3324      	adds	r3, #36	; 0x24
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fd45 	bl	8003edc <xTaskRemoveFromEventList>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003458:	f000 fe22 	bl	80040a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	3b01      	subs	r3, #1
 8003460:	b2db      	uxtb	r3, r3
 8003462:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003468:	2b00      	cmp	r3, #0
 800346a:	dce9      	bgt.n	8003440 <prvUnlockQueue+0x16>
 800346c:	e000      	b.n	8003470 <prvUnlockQueue+0x46>
					break;
 800346e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	22ff      	movs	r2, #255	; 0xff
 8003474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003478:	f7ff f9fa 	bl	8002870 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800347c:	f7ff f9ca 	bl	8002814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003486:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003488:	e011      	b.n	80034ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d012      	beq.n	80034b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3310      	adds	r3, #16
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fd20 	bl	8003edc <xTaskRemoveFromEventList>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034a2:	f000 fdfd 	bl	80040a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034a6:	7bbb      	ldrb	r3, [r7, #14]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	dce9      	bgt.n	800348a <prvUnlockQueue+0x60>
 80034b6:	e000      	b.n	80034ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	22ff      	movs	r2, #255	; 0xff
 80034be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80034c2:	f7ff f9d5 	bl	8002870 <vPortExitCritical>
}
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034d6:	f7ff f99d 	bl	8002814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034e2:	2301      	movs	r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e001      	b.n	80034ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034ec:	f7ff f9c0 	bl	8002870 <vPortExitCritical>

	return xReturn;
 80034f0:	68fb      	ldr	r3, [r7, #12]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003502:	f7ff f987 	bl	8002814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350e:	429a      	cmp	r2, r3
 8003510:	d102      	bne.n	8003518 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003512:	2301      	movs	r3, #1
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	e001      	b.n	800351c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800351c:	f7ff f9a8 	bl	8002870 <vPortExitCritical>

	return xReturn;
 8003520:	68fb      	ldr	r3, [r7, #12]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	0a1b      	lsrs	r3, r3, #8
 800353c:	b29b      	uxth	r3, r3
 800353e:	405a      	eors	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	60da      	str	r2, [r3, #12]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
	...

08003550 <vApplicationStackOverflowHook>:

#pragma GCC push_options
#pragma GCC optimize ("O0") //__attribute__((optimize("O0")))

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
	char * task_name = pcTaskName;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
	 //ESP Led LDR Encoder
	//UBaseType_t uxHighWaterMarkIdle = uxTaskGetStackHighWaterMark( xTaskGetIdleTaskHandle() );

	UBaseType_t uxHighWaterMarkIdle = uxTaskGetStackHighWaterMark( xTaskGetIdleTaskHandle() );
 800355e:	f000 fb59 	bl	8003c14 <xTaskGetIdleTaskHandle>
 8003562:	4603      	mov	r3, r0
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fe57 	bl	8004218 <uxTaskGetStackHighWaterMark>
 800356a:	6238      	str	r0, [r7, #32]
	UBaseType_t uxHighWaterMarkESP = uxTaskGetStackHighWaterMark(  xTaskGetHandle("ESP")  );
 800356c:	4815      	ldr	r0, [pc, #84]	; (80035c4 <vApplicationStackOverflowHook+0x74>)
 800356e:	f000 faef 	bl	8003b50 <xTaskGetHandle>
 8003572:	4603      	mov	r3, r0
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fe4f 	bl	8004218 <uxTaskGetStackHighWaterMark>
 800357a:	61f8      	str	r0, [r7, #28]
	UBaseType_t uxHighWaterMarkLed = uxTaskGetStackHighWaterMark( xTaskGetHandle("Led") );
 800357c:	4812      	ldr	r0, [pc, #72]	; (80035c8 <vApplicationStackOverflowHook+0x78>)
 800357e:	f000 fae7 	bl	8003b50 <xTaskGetHandle>
 8003582:	4603      	mov	r3, r0
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fe47 	bl	8004218 <uxTaskGetStackHighWaterMark>
 800358a:	61b8      	str	r0, [r7, #24]
	UBaseType_t uxHighWaterMarkLDR = uxTaskGetStackHighWaterMark(  xTaskGetHandle("LDR") );
 800358c:	480f      	ldr	r0, [pc, #60]	; (80035cc <vApplicationStackOverflowHook+0x7c>)
 800358e:	f000 fadf 	bl	8003b50 <xTaskGetHandle>
 8003592:	4603      	mov	r3, r0
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fe3f 	bl	8004218 <uxTaskGetStackHighWaterMark>
 800359a:	6178      	str	r0, [r7, #20]
	UBaseType_t uxHighWaterMarkEncoder = uxTaskGetStackHighWaterMark( xTaskGetHandle("Encoder") );
 800359c:	480c      	ldr	r0, [pc, #48]	; (80035d0 <vApplicationStackOverflowHook+0x80>)
 800359e:	f000 fad7 	bl	8003b50 <xTaskGetHandle>
 80035a2:	4603      	mov	r3, r0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fe37 	bl	8004218 <uxTaskGetStackHighWaterMark>
 80035aa:	6138      	str	r0, [r7, #16]

	int free_heap = xPortGetFreeHeapSize();
 80035ac:	f7ff fb00 	bl	8002bb0 <xPortGetFreeHeapSize>
 80035b0:	4603      	mov	r3, r0
 80035b2:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_13);
 80035b4:	4907      	ldr	r1, [pc, #28]	; (80035d4 <vApplicationStackOverflowHook+0x84>)
 80035b6:	4808      	ldr	r0, [pc, #32]	; (80035d8 <vApplicationStackOverflowHook+0x88>)
 80035b8:	f7ff ffb7 	bl	800352a <LL_GPIO_TogglePin>
		delay(200);
 80035bc:	20c8      	movs	r0, #200	; 0xc8
 80035be:	f001 f80d 	bl	80045dc <delay>
		LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_13);
 80035c2:	e7f7      	b.n	80035b4 <vApplicationStackOverflowHook+0x64>
 80035c4:	08006de0 	.word	0x08006de0
 80035c8:	08006de4 	.word	0x08006de4
 80035cc:	08006de8 	.word	0x08006de8
 80035d0:	08006dec 	.word	0x08006dec
 80035d4:	04200020 	.word	0x04200020
 80035d8:	40010c00 	.word	0x40010c00

080035dc <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08c      	sub	sp, #48	; 0x30
 80035e0:	af04      	add	r7, sp, #16
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	4613      	mov	r3, r2
 80035ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff f9c3 	bl	800297c <pvPortMalloc>
 80035f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00e      	beq.n	800361c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80035fe:	2054      	movs	r0, #84	; 0x54
 8003600:	f7ff f9bc 	bl	800297c <pvPortMalloc>
 8003604:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	631a      	str	r2, [r3, #48]	; 0x30
 8003612:	e005      	b.n	8003620 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003614:	6978      	ldr	r0, [r7, #20]
 8003616:	f7ff fa73 	bl	8002b00 <vPortFree>
 800361a:	e001      	b.n	8003620 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d013      	beq.n	800364e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003626:	88fa      	ldrh	r2, [r7, #6]
 8003628:	2300      	movs	r3, #0
 800362a:	9303      	str	r3, [sp, #12]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	9302      	str	r3, [sp, #8]
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f80e 	bl	800365e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003642:	69f8      	ldr	r0, [r7, #28]
 8003644:	f000 f892 	bl	800376c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003648:	2301      	movs	r3, #1
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	e002      	b.n	8003654 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800364e:	f04f 33ff 	mov.w	r3, #4294967295
 8003652:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003654:	69bb      	ldr	r3, [r7, #24]
	}
 8003656:	4618      	mov	r0, r3
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b088      	sub	sp, #32
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
 800366a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	461a      	mov	r2, r3
 8003676:	21a5      	movs	r1, #165	; 0xa5
 8003678:	f002 fdeb 	bl	8006252 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003686:	3b01      	subs	r3, #1
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	f023 0307 	bic.w	r3, r3, #7
 8003694:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <prvInitialiseNewTask+0x56>
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	e7fe      	b.n	80036b2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]
 80036b8:	e012      	b.n	80036e0 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	7819      	ldrb	r1, [r3, #0]
 80036c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	4413      	add	r3, r2
 80036c8:	3334      	adds	r3, #52	; 0x34
 80036ca:	460a      	mov	r2, r1
 80036cc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d006      	beq.n	80036e8 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3301      	adds	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	2b0f      	cmp	r3, #15
 80036e4:	d9e9      	bls.n	80036ba <prvInitialiseNewTask+0x5c>
 80036e6:	e000      	b.n	80036ea <prvInitialiseNewTask+0x8c>
		{
			break;
 80036e8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	2b06      	cmp	r3, #6
 80036f6:	d901      	bls.n	80036fc <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036f8:	2306      	movs	r3, #6
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003700:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003706:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	2200      	movs	r2, #0
 800370c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	3304      	adds	r3, #4
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe ff20 	bl	8002558 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	3318      	adds	r3, #24
 800371c:	4618      	mov	r0, r3
 800371e:	f7fe ff1b 	bl	8002558 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003726:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	f1c3 0207 	rsb	r2, r3, #7
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003736:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	2200      	movs	r2, #0
 800373c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	68f9      	ldr	r1, [r7, #12]
 800374a:	69b8      	ldr	r0, [r7, #24]
 800374c:	f7fe ff94 	bl	8002678 <pxPortInitialiseStack>
 8003750:	4602      	mov	r2, r0
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003760:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003762:	bf00      	nop
 8003764:	3720      	adds	r7, #32
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003774:	f7ff f84e 	bl	8002814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003778:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <prvAddNewTaskToReadyList+0xb8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3301      	adds	r3, #1
 800377e:	4a29      	ldr	r2, [pc, #164]	; (8003824 <prvAddNewTaskToReadyList+0xb8>)
 8003780:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003782:	4b29      	ldr	r3, [pc, #164]	; (8003828 <prvAddNewTaskToReadyList+0xbc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800378a:	4a27      	ldr	r2, [pc, #156]	; (8003828 <prvAddNewTaskToReadyList+0xbc>)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003790:	4b24      	ldr	r3, [pc, #144]	; (8003824 <prvAddNewTaskToReadyList+0xb8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d110      	bne.n	80037ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003798:	f000 fca6 	bl	80040e8 <prvInitialiseTaskLists>
 800379c:	e00d      	b.n	80037ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800379e:	4b23      	ldr	r3, [pc, #140]	; (800382c <prvAddNewTaskToReadyList+0xc0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d109      	bne.n	80037ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037a6:	4b20      	ldr	r3, [pc, #128]	; (8003828 <prvAddNewTaskToReadyList+0xbc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d802      	bhi.n	80037ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037b4:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <prvAddNewTaskToReadyList+0xbc>)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037ba:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <prvAddNewTaskToReadyList+0xc4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3301      	adds	r3, #1
 80037c0:	4a1b      	ldr	r2, [pc, #108]	; (8003830 <prvAddNewTaskToReadyList+0xc4>)
 80037c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	2201      	movs	r2, #1
 80037ca:	409a      	lsls	r2, r3
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <prvAddNewTaskToReadyList+0xc8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	4a18      	ldr	r2, [pc, #96]	; (8003834 <prvAddNewTaskToReadyList+0xc8>)
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4a15      	ldr	r2, [pc, #84]	; (8003838 <prvAddNewTaskToReadyList+0xcc>)
 80037e4:	441a      	add	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3304      	adds	r3, #4
 80037ea:	4619      	mov	r1, r3
 80037ec:	4610      	mov	r0, r2
 80037ee:	f7fe febf 	bl	8002570 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037f2:	f7ff f83d 	bl	8002870 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <prvAddNewTaskToReadyList+0xc0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00e      	beq.n	800381c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <prvAddNewTaskToReadyList+0xbc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	429a      	cmp	r2, r3
 800380a:	d207      	bcs.n	800381c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <prvAddNewTaskToReadyList+0xd0>)
 800380e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800381c:	bf00      	nop
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20002330 	.word	0x20002330
 8003828:	20002230 	.word	0x20002230
 800382c:	2000233c 	.word	0x2000233c
 8003830:	2000234c 	.word	0x2000234c
 8003834:	20002338 	.word	0x20002338
 8003838:	20002234 	.word	0x20002234
 800383c:	e000ed04 	.word	0xe000ed04

08003840 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d016      	beq.n	8003880 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003852:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <vTaskDelay+0x60>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <vTaskDelay+0x2e>
 800385a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385e:	f383 8811 	msr	BASEPRI, r3
 8003862:	f3bf 8f6f 	isb	sy
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	60bb      	str	r3, [r7, #8]
 800386c:	e7fe      	b.n	800386c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800386e:	f000 f861 	bl	8003934 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003872:	2100      	movs	r1, #0
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fe4b 	bl	8004510 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800387a:	f000 f869 	bl	8003950 <xTaskResumeAll>
 800387e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d107      	bne.n	8003896 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003886:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <vTaskDelay+0x64>)
 8003888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20002358 	.word	0x20002358
 80038a4:	e000ed04 	.word	0xe000ed04

080038a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80038ae:	4b1b      	ldr	r3, [pc, #108]	; (800391c <vTaskStartScheduler+0x74>)
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	2300      	movs	r3, #0
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	2300      	movs	r3, #0
 80038b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038bc:	4918      	ldr	r1, [pc, #96]	; (8003920 <vTaskStartScheduler+0x78>)
 80038be:	4819      	ldr	r0, [pc, #100]	; (8003924 <vTaskStartScheduler+0x7c>)
 80038c0:	f7ff fe8c 	bl	80035dc <xTaskCreate>
 80038c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d115      	bne.n	80038f8 <vTaskStartScheduler+0x50>
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <vTaskStartScheduler+0x80>)
 80038e0:	f04f 32ff 	mov.w	r2, #4294967295
 80038e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038e6:	4b11      	ldr	r3, [pc, #68]	; (800392c <vTaskStartScheduler+0x84>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80038ec:	4b10      	ldr	r3, [pc, #64]	; (8003930 <vTaskStartScheduler+0x88>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038f2:	f7fe ff31 	bl	8002758 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038f6:	e00d      	b.n	8003914 <vTaskStartScheduler+0x6c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fe:	d109      	bne.n	8003914 <vTaskStartScheduler+0x6c>
 8003900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	607b      	str	r3, [r7, #4]
 8003912:	e7fe      	b.n	8003912 <vTaskStartScheduler+0x6a>
}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20002354 	.word	0x20002354
 8003920:	08006df4 	.word	0x08006df4
 8003924:	080040b9 	.word	0x080040b9
 8003928:	20002350 	.word	0x20002350
 800392c:	2000233c 	.word	0x2000233c
 8003930:	20002334 	.word	0x20002334

08003934 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003938:	4b04      	ldr	r3, [pc, #16]	; (800394c <vTaskSuspendAll+0x18>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3301      	adds	r3, #1
 800393e:	4a03      	ldr	r2, [pc, #12]	; (800394c <vTaskSuspendAll+0x18>)
 8003940:	6013      	str	r3, [r2, #0]
}
 8003942:	bf00      	nop
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20002358 	.word	0x20002358

08003950 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800395a:	2300      	movs	r3, #0
 800395c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800395e:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <xTaskResumeAll+0x114>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <xTaskResumeAll+0x2a>
 8003966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	e7fe      	b.n	8003978 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800397a:	f7fe ff4b 	bl	8002814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800397e:	4b39      	ldr	r3, [pc, #228]	; (8003a64 <xTaskResumeAll+0x114>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3b01      	subs	r3, #1
 8003984:	4a37      	ldr	r2, [pc, #220]	; (8003a64 <xTaskResumeAll+0x114>)
 8003986:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003988:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <xTaskResumeAll+0x114>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d161      	bne.n	8003a54 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003990:	4b35      	ldr	r3, [pc, #212]	; (8003a68 <xTaskResumeAll+0x118>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d05d      	beq.n	8003a54 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003998:	e02e      	b.n	80039f8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800399a:	4b34      	ldr	r3, [pc, #208]	; (8003a6c <xTaskResumeAll+0x11c>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3318      	adds	r3, #24
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe fe3d 	bl	8002626 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fe38 	bl	8002626 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	2201      	movs	r2, #1
 80039bc:	409a      	lsls	r2, r3
 80039be:	4b2c      	ldr	r3, [pc, #176]	; (8003a70 <xTaskResumeAll+0x120>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	4a2a      	ldr	r2, [pc, #168]	; (8003a70 <xTaskResumeAll+0x120>)
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <xTaskResumeAll+0x124>)
 80039d6:	441a      	add	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3304      	adds	r3, #4
 80039dc:	4619      	mov	r1, r3
 80039de:	4610      	mov	r0, r2
 80039e0:	f7fe fdc6 	bl	8002570 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e8:	4b23      	ldr	r3, [pc, #140]	; (8003a78 <xTaskResumeAll+0x128>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80039f2:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <xTaskResumeAll+0x12c>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039f8:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <xTaskResumeAll+0x11c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1cc      	bne.n	800399a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a06:	f000 fc33 	bl	8004270 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <xTaskResumeAll+0x130>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d010      	beq.n	8003a38 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a16:	f000 f917 	bl	8003c48 <xTaskIncrementTick>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003a20:	4b16      	ldr	r3, [pc, #88]	; (8003a7c <xTaskResumeAll+0x12c>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f1      	bne.n	8003a16 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003a32:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <xTaskResumeAll+0x130>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a38:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <xTaskResumeAll+0x12c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d009      	beq.n	8003a54 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a40:	2301      	movs	r3, #1
 8003a42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a44:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <xTaskResumeAll+0x134>)
 8003a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a54:	f7fe ff0c 	bl	8002870 <vPortExitCritical>

	return xAlreadyYielded;
 8003a58:	68bb      	ldr	r3, [r7, #8]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20002358 	.word	0x20002358
 8003a68:	20002330 	.word	0x20002330
 8003a6c:	200022f0 	.word	0x200022f0
 8003a70:	20002338 	.word	0x20002338
 8003a74:	20002234 	.word	0x20002234
 8003a78:	20002230 	.word	0x20002230
 8003a7c:	20002344 	.word	0x20002344
 8003a80:	20002340 	.word	0x20002340
 8003a84:	e000ed04 	.word	0xe000ed04

08003a88 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 8003a88:	b480      	push	{r7}
 8003a8a:	b08b      	sub	sp, #44	; 0x2c
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
	UBaseType_t x;
	char cNextChar;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d052      	beq.n	8003b44 <prvSearchForNameWithinSingleList+0xbc>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d104      	bne.n	8003ac2 <prvSearchForNameWithinSingleList+0x3a>
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	61bb      	str	r3, [r7, #24]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d104      	bne.n	8003aee <prvSearchForNameWithinSingleList+0x66>
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	613b      	str	r3, [r7, #16]

				/* Check each character in the name looking for a match or
				mismatch. */
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003af6:	2300      	movs	r3, #0
 8003af8:	623b      	str	r3, [r7, #32]
 8003afa:	e015      	b.n	8003b28 <prvSearchForNameWithinSingleList+0xa0>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	4413      	add	r3, r2
 8003b02:	3334      	adds	r3, #52	; 0x34
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	73fb      	strb	r3, [r7, #15]

					if( cNextChar != pcNameToQuery[ x ] )
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	7bfa      	ldrb	r2, [r7, #15]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d10c      	bne.n	8003b30 <prvSearchForNameWithinSingleList+0xa8>
					{
						/* Characters didn't match. */
						break;
					}
					else if( cNextChar == 0x00 )
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d102      	bne.n	8003b22 <prvSearchForNameWithinSingleList+0x9a>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 8003b20:	e007      	b.n	8003b32 <prvSearchForNameWithinSingleList+0xaa>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	3301      	adds	r3, #1
 8003b26:	623b      	str	r3, [r7, #32]
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	2b0f      	cmp	r3, #15
 8003b2c:	d9e6      	bls.n	8003afc <prvSearchForNameWithinSingleList+0x74>
 8003b2e:	e000      	b.n	8003b32 <prvSearchForNameWithinSingleList+0xaa>
						break;
 8003b30:	bf00      	nop
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxReturn != NULL )
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d104      	bne.n	8003b42 <prvSearchForNameWithinSingleList+0xba>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d1c4      	bne.n	8003aca <prvSearchForNameWithinSingleList+0x42>
 8003b40:	e000      	b.n	8003b44 <prvSearchForNameWithinSingleList+0xbc>
					break;
 8003b42:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003b46:	4618      	mov	r0, r3
 8003b48:	372c      	adds	r7, #44	; 0x2c
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr

08003b50 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 8003b58:	2307      	movs	r3, #7
 8003b5a:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7fc faf7 	bl	8000150 <strlen>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b0f      	cmp	r3, #15
 8003b66:	d909      	bls.n	8003b7c <xTaskGetHandle+0x2c>
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	e7fe      	b.n	8003b7a <xTaskGetHandle+0x2a>

		vTaskSuspendAll();
 8003b7c:	f7ff feda 	bl	8003934 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <xTaskGetHandle+0xb0>)
 8003b92:	4413      	add	r3, r2
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff ff76 	bl	8003a88 <prvSearchForNameWithinSingleList>
 8003b9c:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d103      	bne.n	8003bac <xTaskGetHandle+0x5c>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1ea      	bne.n	8003b80 <xTaskGetHandle+0x30>
 8003baa:	e000      	b.n	8003bae <xTaskGetHandle+0x5e>
					break;
 8003bac:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <xTaskGetHandle+0x72>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8003bb4:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <xTaskGetHandle+0xb4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff ff64 	bl	8003a88 <prvSearchForNameWithinSingleList>
 8003bc0:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d106      	bne.n	8003bd6 <xTaskGetHandle+0x86>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <xTaskGetHandle+0xb8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff ff5a 	bl	8003a88 <prvSearchForNameWithinSingleList>
 8003bd4:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d104      	bne.n	8003be6 <xTaskGetHandle+0x96>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	480b      	ldr	r0, [pc, #44]	; (8003c0c <xTaskGetHandle+0xbc>)
 8003be0:	f7ff ff52 	bl	8003a88 <prvSearchForNameWithinSingleList>
 8003be4:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d104      	bne.n	8003bf6 <xTaskGetHandle+0xa6>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4808      	ldr	r0, [pc, #32]	; (8003c10 <xTaskGetHandle+0xc0>)
 8003bf0:	f7ff ff4a 	bl	8003a88 <prvSearchForNameWithinSingleList>
 8003bf4:	6138      	str	r0, [r7, #16]
			}
			#endif
		}
		//( void ) xTaskResumeAll();

		return ( TaskHandle_t ) pxTCB;
 8003bf6:	693b      	ldr	r3, [r7, #16]
	}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20002234 	.word	0x20002234
 8003c04:	200022e8 	.word	0x200022e8
 8003c08:	200022ec 	.word	0x200022ec
 8003c0c:	2000231c 	.word	0x2000231c
 8003c10:	20002304 	.word	0x20002304

08003c14 <xTaskGetIdleTaskHandle>:
/*----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )

	TaskHandle_t xTaskGetIdleTaskHandle( void )
	{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <xTaskGetIdleTaskHandle+0x30>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <xTaskGetIdleTaskHandle+0x22>
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	607b      	str	r3, [r7, #4]
 8003c34:	e7fe      	b.n	8003c34 <xTaskGetIdleTaskHandle+0x20>
		return xIdleTaskHandle;
 8003c36:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <xTaskGetIdleTaskHandle+0x30>)
 8003c38:	681b      	ldr	r3, [r3, #0]
	}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	20002354 	.word	0x20002354

08003c48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c52:	4b50      	ldr	r3, [pc, #320]	; (8003d94 <xTaskIncrementTick+0x14c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f040 808c 	bne.w	8003d74 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8003c5c:	4b4e      	ldr	r3, [pc, #312]	; (8003d98 <xTaskIncrementTick+0x150>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c64:	4a4c      	ldr	r2, [pc, #304]	; (8003d98 <xTaskIncrementTick+0x150>)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d11f      	bne.n	8003cb0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c70:	4b4a      	ldr	r3, [pc, #296]	; (8003d9c <xTaskIncrementTick+0x154>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d009      	beq.n	8003c8e <xTaskIncrementTick+0x46>
 8003c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	e7fe      	b.n	8003c8c <xTaskIncrementTick+0x44>
 8003c8e:	4b43      	ldr	r3, [pc, #268]	; (8003d9c <xTaskIncrementTick+0x154>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	4b42      	ldr	r3, [pc, #264]	; (8003da0 <xTaskIncrementTick+0x158>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a40      	ldr	r2, [pc, #256]	; (8003d9c <xTaskIncrementTick+0x154>)
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	4a40      	ldr	r2, [pc, #256]	; (8003da0 <xTaskIncrementTick+0x158>)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	4b40      	ldr	r3, [pc, #256]	; (8003da4 <xTaskIncrementTick+0x15c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	4a3e      	ldr	r2, [pc, #248]	; (8003da4 <xTaskIncrementTick+0x15c>)
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	f000 fae0 	bl	8004270 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cb0:	4b3d      	ldr	r3, [pc, #244]	; (8003da8 <xTaskIncrementTick+0x160>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d34d      	bcc.n	8003d56 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cba:	4b38      	ldr	r3, [pc, #224]	; (8003d9c <xTaskIncrementTick+0x154>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <xTaskIncrementTick+0x80>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <xTaskIncrementTick+0x82>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d004      	beq.n	8003cd8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cce:	4b36      	ldr	r3, [pc, #216]	; (8003da8 <xTaskIncrementTick+0x160>)
 8003cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd4:	601a      	str	r2, [r3, #0]
					break;
 8003cd6:	e03e      	b.n	8003d56 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cd8:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <xTaskIncrementTick+0x154>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d203      	bcs.n	8003cf8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cf0:	4a2d      	ldr	r2, [pc, #180]	; (8003da8 <xTaskIncrementTick+0x160>)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6013      	str	r3, [r2, #0]
						break;
 8003cf6:	e02e      	b.n	8003d56 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe fc92 	bl	8002626 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d004      	beq.n	8003d14 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	3318      	adds	r3, #24
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe fc89 	bl	8002626 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	2201      	movs	r2, #1
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	4b23      	ldr	r3, [pc, #140]	; (8003dac <xTaskIncrementTick+0x164>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	4a22      	ldr	r2, [pc, #136]	; (8003dac <xTaskIncrementTick+0x164>)
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4a1f      	ldr	r2, [pc, #124]	; (8003db0 <xTaskIncrementTick+0x168>)
 8003d34:	441a      	add	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	f7fe fc17 	bl	8002570 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d46:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <xTaskIncrementTick+0x16c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d3b4      	bcc.n	8003cba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003d50:	2301      	movs	r3, #1
 8003d52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d54:	e7b1      	b.n	8003cba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d56:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <xTaskIncrementTick+0x16c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5c:	4914      	ldr	r1, [pc, #80]	; (8003db0 <xTaskIncrementTick+0x168>)
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d907      	bls.n	8003d7e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	e004      	b.n	8003d7e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003d74:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <xTaskIncrementTick+0x170>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	4a0f      	ldr	r2, [pc, #60]	; (8003db8 <xTaskIncrementTick+0x170>)
 8003d7c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d7e:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <xTaskIncrementTick+0x174>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003d86:	2301      	movs	r3, #1
 8003d88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003d8a:	697b      	ldr	r3, [r7, #20]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20002358 	.word	0x20002358
 8003d98:	20002334 	.word	0x20002334
 8003d9c:	200022e8 	.word	0x200022e8
 8003da0:	200022ec 	.word	0x200022ec
 8003da4:	20002348 	.word	0x20002348
 8003da8:	20002350 	.word	0x20002350
 8003dac:	20002338 	.word	0x20002338
 8003db0:	20002234 	.word	0x20002234
 8003db4:	20002230 	.word	0x20002230
 8003db8:	20002340 	.word	0x20002340
 8003dbc:	20002344 	.word	0x20002344

08003dc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dc6:	4b2e      	ldr	r3, [pc, #184]	; (8003e80 <vTaskSwitchContext+0xc0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dce:	4b2d      	ldr	r3, [pc, #180]	; (8003e84 <vTaskSwitchContext+0xc4>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003dd4:	e04f      	b.n	8003e76 <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 8003dd6:	4b2b      	ldr	r3, [pc, #172]	; (8003e84 <vTaskSwitchContext+0xc4>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8003ddc:	4b2a      	ldr	r3, [pc, #168]	; (8003e88 <vTaskSwitchContext+0xc8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4b29      	ldr	r3, [pc, #164]	; (8003e88 <vTaskSwitchContext+0xc8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d808      	bhi.n	8003dfe <vTaskSwitchContext+0x3e>
 8003dec:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <vTaskSwitchContext+0xc8>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <vTaskSwitchContext+0xc8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3334      	adds	r3, #52	; 0x34
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f7ff fba9 	bl	8003550 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003dfe:	4b23      	ldr	r3, [pc, #140]	; (8003e8c <vTaskSwitchContext+0xcc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	fab3 f383 	clz	r3, r3
 8003e0a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003e0c:	7afb      	ldrb	r3, [r7, #11]
 8003e0e:	f1c3 031f 	rsb	r3, r3, #31
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	491e      	ldr	r1, [pc, #120]	; (8003e90 <vTaskSwitchContext+0xd0>)
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d109      	bne.n	8003e3c <vTaskSwitchContext+0x7c>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	e7fe      	b.n	8003e3a <vTaskSwitchContext+0x7a>
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4a12      	ldr	r2, [pc, #72]	; (8003e90 <vTaskSwitchContext+0xd0>)
 8003e48:	4413      	add	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d104      	bne.n	8003e6c <vTaskSwitchContext+0xac>
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	605a      	str	r2, [r3, #4]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	4a05      	ldr	r2, [pc, #20]	; (8003e88 <vTaskSwitchContext+0xc8>)
 8003e74:	6013      	str	r3, [r2, #0]
}
 8003e76:	bf00      	nop
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20002358 	.word	0x20002358
 8003e84:	20002344 	.word	0x20002344
 8003e88:	20002230 	.word	0x20002230
 8003e8c:	20002338 	.word	0x20002338
 8003e90:	20002234 	.word	0x20002234

08003e94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d109      	bne.n	8003eb8 <vTaskPlaceOnEventList+0x24>
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	e7fe      	b.n	8003eb6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003eb8:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <vTaskPlaceOnEventList+0x44>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3318      	adds	r3, #24
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7fe fb78 	bl	80025b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	6838      	ldr	r0, [r7, #0]
 8003eca:	f000 fb21 	bl	8004510 <prvAddCurrentTaskToDelayedList>
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20002230 	.word	0x20002230

08003edc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <xTaskRemoveFromEventList+0x2a>
 8003ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	e7fe      	b.n	8003f04 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	3318      	adds	r3, #24
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe fb8b 	bl	8002626 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f10:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <xTaskRemoveFromEventList+0xac>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d11c      	bne.n	8003f52 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fe fb82 	bl	8002626 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	2201      	movs	r2, #1
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <xTaskRemoveFromEventList+0xb0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	4a16      	ldr	r2, [pc, #88]	; (8003f8c <xTaskRemoveFromEventList+0xb0>)
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4a13      	ldr	r2, [pc, #76]	; (8003f90 <xTaskRemoveFromEventList+0xb4>)
 8003f42:	441a      	add	r2, r3
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f7fe fb10 	bl	8002570 <vListInsertEnd>
 8003f50:	e005      	b.n	8003f5e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	3318      	adds	r3, #24
 8003f56:	4619      	mov	r1, r3
 8003f58:	480e      	ldr	r0, [pc, #56]	; (8003f94 <xTaskRemoveFromEventList+0xb8>)
 8003f5a:	f7fe fb09 	bl	8002570 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f62:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <xTaskRemoveFromEventList+0xbc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d905      	bls.n	8003f78 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <xTaskRemoveFromEventList+0xc0>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	e001      	b.n	8003f7c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003f7c:	697b      	ldr	r3, [r7, #20]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20002358 	.word	0x20002358
 8003f8c:	20002338 	.word	0x20002338
 8003f90:	20002234 	.word	0x20002234
 8003f94:	200022f0 	.word	0x200022f0
 8003f98:	20002230 	.word	0x20002230
 8003f9c:	20002344 	.word	0x20002344

08003fa0 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <vTaskSetTimeOutState+0x22>
 8003fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	e7fe      	b.n	8003fc0 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <vTaskSetTimeOutState+0x3c>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fca:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <vTaskSetTimeOutState+0x40>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	605a      	str	r2, [r3, #4]
}
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	20002348 	.word	0x20002348
 8003fe0:	20002334 	.word	0x20002334

08003fe4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d109      	bne.n	8004008 <xTaskCheckForTimeOut+0x24>
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e7fe      	b.n	8004006 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <xTaskCheckForTimeOut+0x3e>
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	e7fe      	b.n	8004020 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004022:	f7fe fbf7 	bl	8002814 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004026:	4b1c      	ldr	r3, [pc, #112]	; (8004098 <xTaskCheckForTimeOut+0xb4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004034:	d102      	bne.n	800403c <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	e026      	b.n	800408a <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b16      	ldr	r3, [pc, #88]	; (800409c <xTaskCheckForTimeOut+0xb8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d007      	beq.n	8004058 <xTaskCheckForTimeOut+0x74>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	429a      	cmp	r2, r3
 8004050:	d802      	bhi.n	8004058 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004052:	2301      	movs	r3, #1
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	e018      	b.n	800408a <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	1ad2      	subs	r2, r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d20e      	bcs.n	8004086 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6859      	ldr	r1, [r3, #4]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1acb      	subs	r3, r1, r3
 8004074:	441a      	add	r2, r3
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff ff90 	bl	8003fa0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	e001      	b.n	800408a <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8004086:	2301      	movs	r3, #1
 8004088:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800408a:	f7fe fbf1 	bl	8002870 <vPortExitCritical>

	return xReturn;
 800408e:	697b      	ldr	r3, [r7, #20]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20002334 	.word	0x20002334
 800409c:	20002348 	.word	0x20002348

080040a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <vTaskMissedYield+0x14>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20002344 	.word	0x20002344

080040b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040c0:	f000 f852 	bl	8004168 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <prvIdleTask+0x28>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d9f9      	bls.n	80040c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <prvIdleTask+0x2c>)
 80040ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040dc:	e7f0      	b.n	80040c0 <prvIdleTask+0x8>
 80040de:	bf00      	nop
 80040e0:	20002234 	.word	0x20002234
 80040e4:	e000ed04 	.word	0xe000ed04

080040e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	e00c      	b.n	800410e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4a12      	ldr	r2, [pc, #72]	; (8004148 <prvInitialiseTaskLists+0x60>)
 8004100:	4413      	add	r3, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fa09 	bl	800251a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3301      	adds	r3, #1
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b06      	cmp	r3, #6
 8004112:	d9ef      	bls.n	80040f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004114:	480d      	ldr	r0, [pc, #52]	; (800414c <prvInitialiseTaskLists+0x64>)
 8004116:	f7fe fa00 	bl	800251a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800411a:	480d      	ldr	r0, [pc, #52]	; (8004150 <prvInitialiseTaskLists+0x68>)
 800411c:	f7fe f9fd 	bl	800251a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004120:	480c      	ldr	r0, [pc, #48]	; (8004154 <prvInitialiseTaskLists+0x6c>)
 8004122:	f7fe f9fa 	bl	800251a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004126:	480c      	ldr	r0, [pc, #48]	; (8004158 <prvInitialiseTaskLists+0x70>)
 8004128:	f7fe f9f7 	bl	800251a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800412c:	480b      	ldr	r0, [pc, #44]	; (800415c <prvInitialiseTaskLists+0x74>)
 800412e:	f7fe f9f4 	bl	800251a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004132:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <prvInitialiseTaskLists+0x78>)
 8004134:	4a05      	ldr	r2, [pc, #20]	; (800414c <prvInitialiseTaskLists+0x64>)
 8004136:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <prvInitialiseTaskLists+0x7c>)
 800413a:	4a05      	ldr	r2, [pc, #20]	; (8004150 <prvInitialiseTaskLists+0x68>)
 800413c:	601a      	str	r2, [r3, #0]
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20002234 	.word	0x20002234
 800414c:	200022c0 	.word	0x200022c0
 8004150:	200022d4 	.word	0x200022d4
 8004154:	200022f0 	.word	0x200022f0
 8004158:	20002304 	.word	0x20002304
 800415c:	2000231c 	.word	0x2000231c
 8004160:	200022e8 	.word	0x200022e8
 8004164:	200022ec 	.word	0x200022ec

08004168 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800416e:	e028      	b.n	80041c2 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8004170:	f7ff fbe0 	bl	8003934 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004174:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <prvCheckTasksWaitingTermination+0x6c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8004184:	f7ff fbe4 	bl	8003950 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d119      	bne.n	80041c2 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800418e:	f7fe fb41 	bl	8002814 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004192:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <prvCheckTasksWaitingTermination+0x6c>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	3304      	adds	r3, #4
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fa41 	bl	8002626 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80041a4:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <prvCheckTasksWaitingTermination+0x70>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	4a0b      	ldr	r2, [pc, #44]	; (80041d8 <prvCheckTasksWaitingTermination+0x70>)
 80041ac:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80041ae:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <prvCheckTasksWaitingTermination+0x74>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	4a09      	ldr	r2, [pc, #36]	; (80041dc <prvCheckTasksWaitingTermination+0x74>)
 80041b6:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80041b8:	f7fe fb5a 	bl	8002870 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80041bc:	6838      	ldr	r0, [r7, #0]
 80041be:	f000 f847 	bl	8004250 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <prvCheckTasksWaitingTermination+0x74>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1d2      	bne.n	8004170 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20002304 	.word	0x20002304
 80041d8:	20002330 	.word	0x20002330
 80041dc:	20002318 	.word	0x20002318

080041e0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80041ec:	e005      	b.n	80041fa <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3301      	adds	r3, #1
 80041f2:	607b      	str	r3, [r7, #4]
			ulCount++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3301      	adds	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2ba5      	cmp	r3, #165	; 0xa5
 8004200:	d0f5      	beq.n	80041ee <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	089b      	lsrs	r3, r3, #2
 8004206:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	b29b      	uxth	r3, r3
	}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
	...

08004218 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <uxTaskGetStackHighWaterMark+0x14>
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <uxTaskGetStackHighWaterMark+0x34>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	e000      	b.n	800422e <uxTaskGetStackHighWaterMark+0x16>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8004236:	6938      	ldr	r0, [r7, #16]
 8004238:	f7ff ffd2 	bl	80041e0 <prvTaskCheckFreeStackSpace>
 800423c:	4603      	mov	r3, r0
 800423e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8004240:	68fb      	ldr	r3, [r7, #12]
	}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20002230 	.word	0x20002230

08004250 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe fc4f 	bl	8002b00 <vPortFree>
			vPortFree( pxTCB );
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fe fc4c 	bl	8002b00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004276:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <prvResetNextTaskUnblockTime+0x40>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <prvResetNextTaskUnblockTime+0x14>
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <prvResetNextTaskUnblockTime+0x16>
 8004284:	2300      	movs	r3, #0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800428a:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <prvResetNextTaskUnblockTime+0x44>)
 800428c:	f04f 32ff 	mov.w	r2, #4294967295
 8004290:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004292:	e008      	b.n	80042a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <prvResetNextTaskUnblockTime+0x40>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4a04      	ldr	r2, [pc, #16]	; (80042b4 <prvResetNextTaskUnblockTime+0x44>)
 80042a4:	6013      	str	r3, [r2, #0]
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr
 80042b0:	200022e8 	.word	0x200022e8
 80042b4:	20002350 	.word	0x20002350

080042b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <xTaskGetSchedulerState+0x34>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042c6:	2301      	movs	r3, #1
 80042c8:	607b      	str	r3, [r7, #4]
 80042ca:	e008      	b.n	80042de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042cc:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <xTaskGetSchedulerState+0x38>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d102      	bne.n	80042da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042d4:	2302      	movs	r3, #2
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	e001      	b.n	80042de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042da:	2300      	movs	r3, #0
 80042dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042de:	687b      	ldr	r3, [r7, #4]
	}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	2000233c 	.word	0x2000233c
 80042f0:	20002358 	.word	0x20002358

080042f4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d062      	beq.n	80043cc <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430a:	4b32      	ldr	r3, [pc, #200]	; (80043d4 <vTaskPriorityInherit+0xe0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	429a      	cmp	r2, r3
 8004312:	d25b      	bcs.n	80043cc <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	db06      	blt.n	800432a <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800431c:	4b2d      	ldr	r3, [pc, #180]	; (80043d4 <vTaskPriorityInherit+0xe0>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	f1c3 0207 	rsb	r2, r3, #7
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6959      	ldr	r1, [r3, #20]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004332:	4613      	mov	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4a27      	ldr	r2, [pc, #156]	; (80043d8 <vTaskPriorityInherit+0xe4>)
 800433c:	4413      	add	r3, r2
 800433e:	4299      	cmp	r1, r3
 8004340:	d101      	bne.n	8004346 <vTaskPriorityInherit+0x52>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <vTaskPriorityInherit+0x54>
 8004346:	2300      	movs	r3, #0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d03a      	beq.n	80043c2 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3304      	adds	r3, #4
 8004350:	4618      	mov	r0, r3
 8004352:	f7fe f968 	bl	8002626 <uxListRemove>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d115      	bne.n	8004388 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004360:	491d      	ldr	r1, [pc, #116]	; (80043d8 <vTaskPriorityInherit+0xe4>)
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <vTaskPriorityInherit+0x94>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	2201      	movs	r2, #1
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	43da      	mvns	r2, r3
 800437e:	4b17      	ldr	r3, [pc, #92]	; (80043dc <vTaskPriorityInherit+0xe8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4013      	ands	r3, r2
 8004384:	4a15      	ldr	r2, [pc, #84]	; (80043dc <vTaskPriorityInherit+0xe8>)
 8004386:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004388:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <vTaskPriorityInherit+0xe0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	2201      	movs	r2, #1
 8004398:	409a      	lsls	r2, r3
 800439a:	4b10      	ldr	r3, [pc, #64]	; (80043dc <vTaskPriorityInherit+0xe8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4313      	orrs	r3, r2
 80043a0:	4a0e      	ldr	r2, [pc, #56]	; (80043dc <vTaskPriorityInherit+0xe8>)
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4a09      	ldr	r2, [pc, #36]	; (80043d8 <vTaskPriorityInherit+0xe4>)
 80043b2:	441a      	add	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4619      	mov	r1, r3
 80043ba:	4610      	mov	r0, r2
 80043bc:	f7fe f8d8 	bl	8002570 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043c0:	e004      	b.n	80043cc <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80043c2:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <vTaskPriorityInherit+0xe0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80043cc:	bf00      	nop
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	20002230 	.word	0x20002230
 80043d8:	20002234 	.word	0x20002234
 80043dc:	20002338 	.word	0x20002338

080043e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d06c      	beq.n	80044d0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043f6:	4b39      	ldr	r3, [pc, #228]	; (80044dc <xTaskPriorityDisinherit+0xfc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d009      	beq.n	8004414 <xTaskPriorityDisinherit+0x34>
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	e7fe      	b.n	8004412 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004418:	2b00      	cmp	r3, #0
 800441a:	d109      	bne.n	8004430 <xTaskPriorityDisinherit+0x50>
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	60bb      	str	r3, [r7, #8]
 800442e:	e7fe      	b.n	800442e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004434:	1e5a      	subs	r2, r3, #1
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	429a      	cmp	r2, r3
 8004444:	d044      	beq.n	80044d0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444a:	2b00      	cmp	r3, #0
 800444c:	d140      	bne.n	80044d0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	3304      	adds	r3, #4
 8004452:	4618      	mov	r0, r3
 8004454:	f7fe f8e7 	bl	8002626 <uxListRemove>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d115      	bne.n	800448a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004462:	491f      	ldr	r1, [pc, #124]	; (80044e0 <xTaskPriorityDisinherit+0x100>)
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <xTaskPriorityDisinherit+0xaa>
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	2201      	movs	r2, #1
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43da      	mvns	r2, r3
 8004480:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <xTaskPriorityDisinherit+0x104>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4013      	ands	r3, r2
 8004486:	4a17      	ldr	r2, [pc, #92]	; (80044e4 <xTaskPriorityDisinherit+0x104>)
 8004488:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	f1c3 0207 	rsb	r2, r3, #7
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	2201      	movs	r2, #1
 80044a4:	409a      	lsls	r2, r3
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <xTaskPriorityDisinherit+0x104>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	4a0d      	ldr	r2, [pc, #52]	; (80044e4 <xTaskPriorityDisinherit+0x104>)
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4a08      	ldr	r2, [pc, #32]	; (80044e0 <xTaskPriorityDisinherit+0x100>)
 80044be:	441a      	add	r2, r3
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	3304      	adds	r3, #4
 80044c4:	4619      	mov	r1, r3
 80044c6:	4610      	mov	r0, r2
 80044c8:	f7fe f852 	bl	8002570 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044cc:	2301      	movs	r3, #1
 80044ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044d0:	697b      	ldr	r3, [r7, #20]
	}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20002230 	.word	0x20002230
 80044e0:	20002234 	.word	0x20002234
 80044e4:	20002338 	.word	0x20002338

080044e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80044ec:	4b07      	ldr	r3, [pc, #28]	; (800450c <pvTaskIncrementMutexHeldCount+0x24>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <pvTaskIncrementMutexHeldCount+0x24>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044fa:	3201      	adds	r2, #1
 80044fc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80044fe:	4b03      	ldr	r3, [pc, #12]	; (800450c <pvTaskIncrementMutexHeldCount+0x24>)
 8004500:	681b      	ldr	r3, [r3, #0]
	}
 8004502:	4618      	mov	r0, r3
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	20002230 	.word	0x20002230

08004510 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800451a:	4b29      	ldr	r3, [pc, #164]	; (80045c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004520:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3304      	adds	r3, #4
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe f87d 	bl	8002626 <uxListRemove>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10b      	bne.n	800454a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004532:	4b24      	ldr	r3, [pc, #144]	; (80045c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	2201      	movs	r2, #1
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	43da      	mvns	r2, r3
 8004540:	4b21      	ldr	r3, [pc, #132]	; (80045c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4013      	ands	r3, r2
 8004546:	4a20      	ldr	r2, [pc, #128]	; (80045c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004548:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d10a      	bne.n	8004568 <prvAddCurrentTaskToDelayedList+0x58>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004558:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3304      	adds	r3, #4
 800455e:	4619      	mov	r1, r3
 8004560:	481a      	ldr	r0, [pc, #104]	; (80045cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004562:	f7fe f805 	bl	8002570 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004566:	e026      	b.n	80045b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4413      	add	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004570:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	429a      	cmp	r2, r3
 800457e:	d209      	bcs.n	8004594 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004580:	4b13      	ldr	r3, [pc, #76]	; (80045d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3304      	adds	r3, #4
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f7fe f812 	bl	80025b6 <vListInsert>
}
 8004592:	e010      	b.n	80045b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004594:	4b0f      	ldr	r3, [pc, #60]	; (80045d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3304      	adds	r3, #4
 800459e:	4619      	mov	r1, r3
 80045a0:	4610      	mov	r0, r2
 80045a2:	f7fe f808 	bl	80025b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045a6:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d202      	bcs.n	80045b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80045b0:	4a09      	ldr	r2, [pc, #36]	; (80045d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6013      	str	r3, [r2, #0]
}
 80045b6:	bf00      	nop
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20002334 	.word	0x20002334
 80045c4:	20002230 	.word	0x20002230
 80045c8:	20002338 	.word	0x20002338
 80045cc:	2000231c 	.word	0x2000231c
 80045d0:	200022ec 	.word	0x200022ec
 80045d4:	200022e8 	.word	0x200022e8
 80045d8:	20002350 	.word	0x20002350

080045dc <delay>:
#include "delay.h"

void delay(uint16_t value)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	80fb      	strh	r3, [r7, #6]
	LL_mDelay(value);
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fd ff0b 	bl	8002404 <LL_mDelay>
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <get_sys_tick>:

uint32_t get_sys_tick(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
	return SysTick->VAL;
 80045fc:	4b02      	ldr	r3, [pc, #8]	; (8004608 <get_sys_tick+0x10>)
 80045fe:	689b      	ldr	r3, [r3, #8]
}
 8004600:	4618      	mov	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr
 8004608:	e000e010 	.word	0xe000e010

0800460c <NVIC_GetPriorityGrouping>:
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004610:	4b04      	ldr	r3, [pc, #16]	; (8004624 <NVIC_GetPriorityGrouping+0x18>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	0a1b      	lsrs	r3, r3, #8
 8004616:	f003 0307 	and.w	r3, r3, #7
}
 800461a:	4618      	mov	r0, r3
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	e000ed00 	.word	0xe000ed00

08004628 <NVIC_EnableIRQ>:
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004632:	4908      	ldr	r1, [pc, #32]	; (8004654 <NVIC_EnableIRQ+0x2c>)
 8004634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	79fa      	ldrb	r2, [r7, #7]
 800463c:	f002 021f 	and.w	r2, r2, #31
 8004640:	2001      	movs	r0, #1
 8004642:	fa00 f202 	lsl.w	r2, r0, r2
 8004646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr
 8004654:	e000e100 	.word	0xe000e100

08004658 <NVIC_SetPriority>:
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	6039      	str	r1, [r7, #0]
 8004662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8004664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004668:	2b00      	cmp	r3, #0
 800466a:	da0b      	bge.n	8004684 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466c:	490d      	ldr	r1, [pc, #52]	; (80046a4 <NVIC_SetPriority+0x4c>)
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	3b04      	subs	r3, #4
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	0112      	lsls	r2, r2, #4
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	440b      	add	r3, r1
 8004680:	761a      	strb	r2, [r3, #24]
}
 8004682:	e009      	b.n	8004698 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004684:	4908      	ldr	r1, [pc, #32]	; (80046a8 <NVIC_SetPriority+0x50>)
 8004686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	0112      	lsls	r2, r2, #4
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	440b      	add	r3, r1
 8004694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	e000ed00 	.word	0xe000ed00
 80046a8:	e000e100 	.word	0xe000e100

080046ac <NVIC_EncodePriority>:
{
 80046ac:	b480      	push	{r7}
 80046ae:	b089      	sub	sp, #36	; 0x24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f1c3 0307 	rsb	r3, r3, #7
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	bf28      	it	cs
 80046ca:	2304      	movcs	r3, #4
 80046cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	3304      	adds	r3, #4
 80046d2:	2b06      	cmp	r3, #6
 80046d4:	d902      	bls.n	80046dc <NVIC_EncodePriority+0x30>
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	3b03      	subs	r3, #3
 80046da:	e000      	b.n	80046de <NVIC_EncodePriority+0x32>
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e0:	2201      	movs	r2, #1
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	1e5a      	subs	r2, r3, #1
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	401a      	ands	r2, r3
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046f2:	2101      	movs	r1, #1
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	fa01 f303 	lsl.w	r3, r1, r3
 80046fa:	1e59      	subs	r1, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004700:	4313      	orrs	r3, r2
}
 8004702:	4618      	mov	r0, r3
 8004704:	3724      	adds	r7, #36	; 0x24
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr

0800470c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8004714:	4a03      	ldr	r2, [pc, #12]	; (8004724 <LL_EXTI_ClearFlag_0_31+0x18>)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6153      	str	r3, [r2, #20]
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr
 8004724:	40010400 	.word	0x40010400

08004728 <LL_GPIO_ReadInputPort>:
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  return (READ_REG(GPIOx->IDR));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr
	...

08004740 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8004740:	b490      	push	{r4, r7}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800474a:	4c11      	ldr	r4, [pc, #68]	; (8004790 <LL_GPIO_AF_SetEXTISource+0x50>)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	490f      	ldr	r1, [pc, #60]	; (8004790 <LL_GPIO_AF_SetEXTISource+0x50>)
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	3202      	adds	r2, #2
 8004758:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	0c12      	lsrs	r2, r2, #16
 8004760:	43d2      	mvns	r2, r2
 8004762:	4011      	ands	r1, r2
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	0c12      	lsrs	r2, r2, #16
 8004768:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	fa92 f2a2 	rbit	r2, r2
 8004770:	60ba      	str	r2, [r7, #8]
  return(result);
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	fab2 f282 	clz	r2, r2
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	fa00 f202 	lsl.w	r2, r0, r2
 800477e:	430a      	orrs	r2, r1
 8004780:	3302      	adds	r3, #2
 8004782:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bc90      	pop	{r4, r7}
 800478e:	4770      	bx	lr
 8004790:	40010000 	.word	0x40010000

08004794 <GPIO_Init>:
#include "encoder_driver.h"

static bool button_status = false, rotate_status = false, rotate_pin_A, rotate_pin_B;

void GPIO_Init()
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
    LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800479a:	f107 0318 	add.w	r3, r7, #24
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	605a      	str	r2, [r3, #4]

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80047a4:	2302      	movs	r3, #2
 80047a6:	61bb      	str	r3, [r7, #24]
    EXTI_InitStruct.LineCommand = ENABLE;
 80047a8:	2301      	movs	r3, #1
 80047aa:	773b      	strb	r3, [r7, #28]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80047ac:	2300      	movs	r3, #0
 80047ae:	777b      	strb	r3, [r7, #29]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80047b0:	2301      	movs	r3, #1
 80047b2:	77bb      	strb	r3, [r7, #30]
    LL_EXTI_Init(&EXTI_InitStruct);
 80047b4:	f107 0318 	add.w	r3, r7, #24
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fc ffc7 	bl	800174c <LL_EXTI_Init>

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 80047be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047c2:	61bb      	str	r3, [r7, #24]
    EXTI_InitStruct.LineCommand = ENABLE;
 80047c4:	2301      	movs	r3, #1
 80047c6:	773b      	strb	r3, [r7, #28]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80047c8:	2300      	movs	r3, #0
 80047ca:	777b      	strb	r3, [r7, #29]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80047cc:	2302      	movs	r3, #2
 80047ce:	77bb      	strb	r3, [r7, #30]
    LL_EXTI_Init(&EXTI_InitStruct);
 80047d0:	f107 0318 	add.w	r3, r7, #24
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fc ffb9 	bl	800174c <LL_EXTI_Init>

    LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE1);
 80047da:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80047de:	2001      	movs	r0, #1
 80047e0:	f7ff ffae 	bl	8004740 <LL_GPIO_AF_SetEXTISource>
    LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE10);
 80047e4:	491d      	ldr	r1, [pc, #116]	; (800485c <GPIO_Init+0xc8>)
 80047e6:	2001      	movs	r0, #1
 80047e8:	f7ff ffaa 	bl	8004740 <LL_GPIO_AF_SetEXTISource>


	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ec:	1d3b      	adds	r3, r7, #4
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	605a      	str	r2, [r3, #4]
 80047f4:	609a      	str	r2, [r3, #8]
 80047f6:	60da      	str	r2, [r3, #12]
 80047f8:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = LL_GPIO_PIN_1 | LL_GPIO_PIN_10 | LL_GPIO_PIN_11;
 80047fa:	4b19      	ldr	r3, [pc, #100]	; (8004860 <GPIO_Init+0xcc>)
 80047fc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80047fe:	2308      	movs	r3, #8
 8004800:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004802:	2303      	movs	r3, #3
 8004804:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800480a:	1d3b      	adds	r3, r7, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4815      	ldr	r0, [pc, #84]	; (8004864 <GPIO_Init+0xd0>)
 8004810:	f7fd f8c7 	bl	80019a2 <LL_GPIO_Init>

    NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),8, 0));
 8004814:	f7ff fefa 	bl	800460c <NVIC_GetPriorityGrouping>
 8004818:	4603      	mov	r3, r0
 800481a:	2200      	movs	r2, #0
 800481c:	2108      	movs	r1, #8
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ff44 	bl	80046ac <NVIC_EncodePriority>
 8004824:	4603      	mov	r3, r0
 8004826:	4619      	mov	r1, r3
 8004828:	2007      	movs	r0, #7
 800482a:	f7ff ff15 	bl	8004658 <NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI1_IRQn);
 800482e:	2007      	movs	r0, #7
 8004830:	f7ff fefa 	bl	8004628 <NVIC_EnableIRQ>


    NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),8, 0));
 8004834:	f7ff feea 	bl	800460c <NVIC_GetPriorityGrouping>
 8004838:	4603      	mov	r3, r0
 800483a:	2200      	movs	r2, #0
 800483c:	2108      	movs	r1, #8
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff ff34 	bl	80046ac <NVIC_EncodePriority>
 8004844:	4603      	mov	r3, r0
 8004846:	4619      	mov	r1, r3
 8004848:	2028      	movs	r0, #40	; 0x28
 800484a:	f7ff ff05 	bl	8004658 <NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 800484e:	2028      	movs	r0, #40	; 0x28
 8004850:	f7ff feea 	bl	8004628 <NVIC_EnableIRQ>
}
 8004854:	bf00      	nop
 8004856:	3720      	adds	r7, #32
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	0f000002 	.word	0x0f000002
 8004860:	040c020e 	.word	0x040c020e
 8004864:	40010c00 	.word	0x40010c00

08004868 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 800486c:	2002      	movs	r0, #2
 800486e:	f7ff ff4d 	bl	800470c <LL_EXTI_ClearFlag_0_31>

	button_status = true;
 8004872:	4b02      	ldr	r3, [pc, #8]	; (800487c <EXTI1_IRQHandler+0x14>)
 8004874:	2201      	movs	r2, #1
 8004876:	701a      	strb	r2, [r3, #0]
}
 8004878:	bf00      	nop
 800487a:	bd80      	pop	{r7, pc}
 800487c:	2000235c 	.word	0x2000235c

08004880 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_10);
 8004884:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004888:	f7ff ff40 	bl	800470c <LL_EXTI_ClearFlag_0_31>

	rotate_status = true;
 800488c:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <EXTI15_10_IRQHandler+0x44>)
 800488e:	2201      	movs	r2, #1
 8004890:	701a      	strb	r2, [r3, #0]
	rotate_pin_A = GPIO_Read_Pin(10);
 8004892:	200a      	movs	r0, #10
 8004894:	f000 f85c 	bl	8004950 <GPIO_Read_Pin>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	bf14      	ite	ne
 800489e:	2301      	movne	r3, #1
 80048a0:	2300      	moveq	r3, #0
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	4b08      	ldr	r3, [pc, #32]	; (80048c8 <EXTI15_10_IRQHandler+0x48>)
 80048a6:	701a      	strb	r2, [r3, #0]
	rotate_pin_B = GPIO_Read_Pin(11);
 80048a8:	200b      	movs	r0, #11
 80048aa:	f000 f851 	bl	8004950 <GPIO_Read_Pin>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf14      	ite	ne
 80048b4:	2301      	movne	r3, #1
 80048b6:	2300      	moveq	r3, #0
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	4b04      	ldr	r3, [pc, #16]	; (80048cc <EXTI15_10_IRQHandler+0x4c>)
 80048bc:	701a      	strb	r2, [r3, #0]
}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	2000235d 	.word	0x2000235d
 80048c8:	2000235e 	.word	0x2000235e
 80048cc:	2000235f 	.word	0x2000235f

080048d0 <GetButton>:

bool GetButton(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
	return button_status;
 80048d4:	4b02      	ldr	r3, [pc, #8]	; (80048e0 <GetButton+0x10>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr
 80048e0:	2000235c 	.word	0x2000235c

080048e4 <ClearButton>:

void ClearButton()
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
    button_status = false;
 80048e8:	4b03      	ldr	r3, [pc, #12]	; (80048f8 <ClearButton+0x14>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	701a      	strb	r2, [r3, #0]
}
 80048ee:	bf00      	nop
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	2000235c 	.word	0x2000235c

080048fc <GetRotateStatus>:

bool GetRotateStatus(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
	return rotate_status;
 8004900:	4b02      	ldr	r3, [pc, #8]	; (800490c <GetRotateStatus+0x10>)
 8004902:	781b      	ldrb	r3, [r3, #0]
}
 8004904:	4618      	mov	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr
 800490c:	2000235d 	.word	0x2000235d

08004910 <ClearRotateStatus>:

void ClearRotateStatus()
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
    rotate_status = false;
 8004914:	4b03      	ldr	r3, [pc, #12]	; (8004924 <ClearRotateStatus+0x14>)
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]
}
 800491a:	bf00      	nop
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	2000235d 	.word	0x2000235d

08004928 <GetRotatePinB>:

bool GetRotatePinB()
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
	return rotate_pin_A;
 800492c:	4b02      	ldr	r3, [pc, #8]	; (8004938 <GetRotatePinB+0x10>)
 800492e:	781b      	ldrb	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	2000235e 	.word	0x2000235e

0800493c <GetRotatePinA>:

bool GetRotatePinA()
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
	return rotate_pin_B;
 8004940:	4b02      	ldr	r3, [pc, #8]	; (800494c <GetRotatePinA+0x10>)
 8004942:	781b      	ldrb	r3, [r3, #0]
}
 8004944:	4618      	mov	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr
 800494c:	2000235f 	.word	0x2000235f

08004950 <GPIO_Read_Pin>:

uint8_t GPIO_Read_Pin(uint8_t mask)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	4603      	mov	r3, r0
 8004958:	71fb      	strb	r3, [r7, #7]
	uint16_t port_bits = LL_GPIO_ReadInputPort(GPIOB);
 800495a:	480a      	ldr	r0, [pc, #40]	; (8004984 <GPIO_Read_Pin+0x34>)
 800495c:	f7ff fee4 	bl	8004728 <LL_GPIO_ReadInputPort>
 8004960:	4603      	mov	r3, r0
 8004962:	81fb      	strh	r3, [r7, #14]
	return ((port_bits & (1 << mask)) != 0);
 8004964:	89fa      	ldrh	r2, [r7, #14]
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	fa42 f303 	asr.w	r3, r2, r3
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	bf14      	ite	ne
 8004974:	2301      	movne	r3, #1
 8004976:	2300      	moveq	r3, #0
 8004978:	b2db      	uxtb	r3, r3
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40010c00 	.word	0x40010c00

08004988 <EncoderQueueInit>:

xQueueHandle encoder_queue;
EncoderRotateInfo xEncoder_info;

void EncoderQueueInit(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
	encoder_queue = xQueueCreate( 2, sizeof(EncoderRotateInfo));
 800498c:	2200      	movs	r2, #0
 800498e:	2104      	movs	r1, #4
 8004990:	2002      	movs	r0, #2
 8004992:	f7fe fa39 	bl	8002e08 <xQueueGenericCreate>
 8004996:	4602      	mov	r2, r0
 8004998:	4b01      	ldr	r3, [pc, #4]	; (80049a0 <EncoderQueueInit+0x18>)
 800499a:	601a      	str	r2, [r3, #0]
}
 800499c:	bf00      	nop
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	20003014 	.word	0x20003014

080049a4 <EncoderQueue_Send>:

void EncoderQueue_Send(uint16_t value, uint8_t button)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	460a      	mov	r2, r1
 80049ae:	80fb      	strh	r3, [r7, #6]
 80049b0:	4613      	mov	r3, r2
 80049b2:	717b      	strb	r3, [r7, #5]
	const portTickType xTicksToWait = 100 / portTICK_RATE_MS;
 80049b4:	2364      	movs	r3, #100	; 0x64
 80049b6:	60fb      	str	r3, [r7, #12]
	xEncoder_info.button = button;
 80049b8:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80049bc:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <EncoderQueue_Send+0x3c>)
 80049be:	709a      	strb	r2, [r3, #2]
	xEncoder_info.state = value;
 80049c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80049c4:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <EncoderQueue_Send+0x3c>)
 80049c6:	801a      	strh	r2, [r3, #0]
	xQueueSendToBack(encoder_queue, &xEncoder_info, xTicksToWait);
 80049c8:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <EncoderQueue_Send+0x40>)
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	2300      	movs	r3, #0
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4903      	ldr	r1, [pc, #12]	; (80049e0 <EncoderQueue_Send+0x3c>)
 80049d2:	f7fe fa71 	bl	8002eb8 <xQueueGenericSend>
}
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20003018 	.word	0x20003018
 80049e4:	20003014 	.word	0x20003014

080049e8 <EncoderQueue_Receive>:

EncoderRotateInfo EncoderQueue_Receive(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
	EncoderRotateInfo value;
	xQueueReceive(encoder_queue, &value, 0);
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <EncoderQueue_Receive+0x30>)
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	4639      	mov	r1, r7
 80049f4:	2300      	movs	r3, #0
 80049f6:	2200      	movs	r2, #0
 80049f8:	f7fe fb58 	bl	80030ac <xQueueGenericReceive>
	return value;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	607b      	str	r3, [r7, #4]
 8004a00:	2300      	movs	r3, #0
 8004a02:	88ba      	ldrh	r2, [r7, #4]
 8004a04:	f362 030f 	bfi	r3, r2, #0, #16
 8004a08:	88fa      	ldrh	r2, [r7, #6]
 8004a0a:	f362 431f 	bfi	r3, r2, #16, #16
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20003014 	.word	0x20003014

08004a1c <EncoderQueue_IsElements>:
bool EncoderQueue_IsElements(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
	if(uxQueueMessagesWaiting(encoder_queue) > 0)
 8004a20:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <EncoderQueue_IsElements+0x20>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fe fc53 	bl	80032d0 <uxQueueMessagesWaiting>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <EncoderQueue_IsElements+0x18>
	{
		return true;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <EncoderQueue_IsElements+0x1a>
	}
	return false;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20003014 	.word	0x20003014

08004a40 <pxEncoder>:
#include "encoder_queue.h"
#include "encoder.h"
#include "cmsis_os.h"

static void pxEncoder(void * arg)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
	EncoderInit();
 8004a48:	f7fb fe44 	bl	80006d4 <EncoderInit>
	static uint8_t encoder_button_step = 0;

	while(1)
	{
		switch(Encoder_State())
 8004a4c:	f7fb fe48 	bl	80006e0 <Encoder_State>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d828      	bhi.n	8004aa8 <pxEncoder+0x68>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <pxEncoder+0x1c>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004aa9 	.word	0x08004aa9
 8004a60:	08004a89 	.word	0x08004a89
 8004a64:	08004a99 	.word	0x08004a99
 8004a68:	08004a6d 	.word	0x08004a6d
		{
			case eNone: break;
			case eButton:
			{
				encoder_button_step++;
 8004a6c:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <pxEncoder+0x78>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	3301      	adds	r3, #1
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <pxEncoder+0x78>)
 8004a76:	701a      	strb	r2, [r3, #0]
				if(encoder_button_step > 4)
 8004a78:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <pxEncoder+0x78>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d915      	bls.n	8004aac <pxEncoder+0x6c>
				{
					encoder_button_step = 0;
 8004a80:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <pxEncoder+0x78>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
				}
				break;
 8004a86:	e011      	b.n	8004aac <pxEncoder+0x6c>
			}
			case eLeft:
			{
				EncoderQueue_Send(-1000, encoder_button_step);
 8004a88:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <pxEncoder+0x78>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f64f 4018 	movw	r0, #64536	; 0xfc18
 8004a92:	f7ff ff87 	bl	80049a4 <EncoderQueue_Send>
				break;
 8004a96:	e00a      	b.n	8004aae <pxEncoder+0x6e>
			}
			case eRight:
			{
				EncoderQueue_Send(1000, encoder_button_step);
 8004a98:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <pxEncoder+0x78>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004aa2:	f7ff ff7f 	bl	80049a4 <EncoderQueue_Send>
				break;
 8004aa6:	e002      	b.n	8004aae <pxEncoder+0x6e>
			}
			default: break;
 8004aa8:	bf00      	nop
 8004aaa:	e000      	b.n	8004aae <pxEncoder+0x6e>
				break;
 8004aac:	bf00      	nop
		}
		osDelay(5);
 8004aae:	2005      	movs	r0, #5
 8004ab0:	f7fd fd1f 	bl	80024f2 <osDelay>
		switch(Encoder_State())
 8004ab4:	e7ca      	b.n	8004a4c <pxEncoder+0xc>
 8004ab6:	bf00      	nop
 8004ab8:	20002360 	.word	0x20002360

08004abc <EncoderTaskInit>:
	}
}

void EncoderTaskInit(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af02      	add	r7, sp, #8
	xTaskCreate(pxEncoder, "Encoder", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	2300      	movs	r3, #0
 8004acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ad0:	4903      	ldr	r1, [pc, #12]	; (8004ae0 <EncoderTaskInit+0x24>)
 8004ad2:	4804      	ldr	r0, [pc, #16]	; (8004ae4 <EncoderTaskInit+0x28>)
 8004ad4:	f7fe fd82 	bl	80035dc <xTaskCreate>
}
 8004ad8:	bf00      	nop
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	08006dfc 	.word	0x08006dfc
 8004ae4:	08004a41 	.word	0x08004a41

08004ae8 <espStart>:
#include <stdbool.h>

static uint8_t gMissConnection = 0;

static uint8_t espStart(int fails)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	while(ESP_SetModeBoth()==0)
 8004af0:	e012      	b.n	8004b18 <espStart+0x30>
	{
		gMissConnection++;
 8004af2:	4b16      	ldr	r3, [pc, #88]	; (8004b4c <espStart+0x64>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	3301      	adds	r3, #1
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <espStart+0x64>)
 8004afc:	701a      	strb	r2, [r3, #0]
		ESP_Resset();
 8004afe:	f7fb fb5f 	bl	80001c0 <ESP_Resset>
		delay(100);
 8004b02:	2064      	movs	r0, #100	; 0x64
 8004b04:	f7ff fd6a 	bl	80045dc <delay>
		if(gMissConnection >= fails)
 8004b08:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <espStart+0x64>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	db01      	blt.n	8004b18 <espStart+0x30>
		{
			return 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e014      	b.n	8004b42 <espStart+0x5a>
	while(ESP_SetModeBoth()==0)
 8004b18:	f7fb fbd4 	bl	80002c4 <ESP_SetModeBoth>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0e7      	beq.n	8004af2 <espStart+0xa>
		}
	}

	if(GPIO_Read_Pin(1) == 0)
 8004b22:	2001      	movs	r0, #1
 8004b24:	f7ff ff14 	bl	8004950 <GPIO_Read_Pin>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d105      	bne.n	8004b3a <espStart+0x52>
	{
		ESP_SetModeSoftAP();
 8004b2e:	f7fb fbc1 	bl	80002b4 <ESP_SetModeSoftAP>
		ESP_SetParamsSoftAP("ESP", "12345678");
 8004b32:	4907      	ldr	r1, [pc, #28]	; (8004b50 <espStart+0x68>)
 8004b34:	4807      	ldr	r0, [pc, #28]	; (8004b54 <espStart+0x6c>)
 8004b36:	f7fb fbcd 	bl	80002d4 <ESP_SetParamsSoftAP>
	}

	ESP_StartTCPServer(80);
 8004b3a:	2050      	movs	r0, #80	; 0x50
 8004b3c:	f7fb fc3e 	bl	80003bc <ESP_StartTCPServer>

	return 1;
 8004b40:	2301      	movs	r3, #1
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20002361 	.word	0x20002361
 8004b50:	08006e04 	.word	0x08006e04
 8004b54:	08006e10 	.word	0x08006e10

08004b58 <pxESP>:

static void pxESP(void * arg)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b0a4      	sub	sp, #144	; 0x90
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
	uint8_t config_flag = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	StatusLedInit();
 8004b66:	f000 fe11 	bl	800578c <StatusLedInit>
	ESPInit();
 8004b6a:	f7fb fb21 	bl	80001b0 <ESPInit>

	if(espStart(5))
 8004b6e:	2005      	movs	r0, #5
 8004b70:	f7ff ffba 	bl	8004ae8 <espStart>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <pxESP+0x28>
	{
		StatusLedON();
 8004b7a:	f000 fe2f 	bl	80057dc <StatusLedON>
 8004b7e:	e001      	b.n	8004b84 <pxESP+0x2c>
	}
	else ErrorBlink();
 8004b80:	f000 fe38 	bl	80057f4 <ErrorBlink>

	while(1)
	{
		if(strlen(GetSSID()) > 1 && config_flag == 0)
 8004b84:	f7fb fd72 	bl	800066c <GetSSID>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fb fae0 	bl	8000150 <strlen>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d928      	bls.n	8004be8 <pxESP+0x90>
 8004b96:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d124      	bne.n	8004be8 <pxESP+0x90>
		{
			config_flag = 1;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			char ssid[64], paswd[64];
			strcpy(ssid, GetSSID());
 8004ba4:	f7fb fd62 	bl	800066c <GetSSID>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	f107 030c 	add.w	r3, r7, #12
 8004bae:	4611      	mov	r1, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f001 fb7b 	bl	80062ac <strcpy>
			strcpy(paswd, GetPasw());
 8004bb6:	f7fb fd83 	bl	80006c0 <GetPasw>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f001 fb72 	bl	80062ac <strcpy>
			if(ESP_SetModeBoth()==0, ESP_SetParamsStation(ssid, paswd)==0)
 8004bc8:	f7fb fb7c 	bl	80002c4 <ESP_SetModeBoth>
 8004bcc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004bd0:	f107 030c 	add.w	r3, r7, #12
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fb fbbe 	bl	8000358 <ESP_SetParamsStation>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <pxESP+0x90>
			{
				config_flag = 0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
		}
		ESP_Request(PAGES, FUNCTIONS, 4);
 8004be8:	2204      	movs	r2, #4
 8004bea:	4904      	ldr	r1, [pc, #16]	; (8004bfc <pxESP+0xa4>)
 8004bec:	4804      	ldr	r0, [pc, #16]	; (8004c00 <pxESP+0xa8>)
 8004bee:	f7fc f861 	bl	8000cb4 <ESP_Request>
		osDelay(10);
 8004bf2:	200a      	movs	r0, #10
 8004bf4:	f7fd fc7d 	bl	80024f2 <osDelay>
		if(strlen(GetSSID()) > 1 && config_flag == 0)
 8004bf8:	e7c4      	b.n	8004b84 <pxESP+0x2c>
 8004bfa:	bf00      	nop
 8004bfc:	08006e3c 	.word	0x08006e3c
 8004c00:	20000000 	.word	0x20000000

08004c04 <ESPTaskInit>:
	}
}


void ESPTaskInit(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af02      	add	r7, sp, #8
	xTaskCreate(pxESP, "ESP", configMINIMAL_STACK_SIZE, NULL, osPriorityAboveNormal, NULL);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	2301      	movs	r3, #1
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	2300      	movs	r3, #0
 8004c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c18:	4903      	ldr	r1, [pc, #12]	; (8004c28 <ESPTaskInit+0x24>)
 8004c1a:	4804      	ldr	r0, [pc, #16]	; (8004c2c <ESPTaskInit+0x28>)
 8004c1c:	f7fe fcde 	bl	80035dc <xTaskCreate>
}
 8004c20:	bf00      	nop
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	08006e10 	.word	0x08006e10
 8004c2c:	08004b59 	.word	0x08004b59

08004c30 <NVIC_GetPriorityGrouping>:
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c34:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <NVIC_GetPriorityGrouping+0x18>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	0a1b      	lsrs	r3, r3, #8
 8004c3a:	f003 0307 	and.w	r3, r3, #7
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	e000ed00 	.word	0xe000ed00

08004c4c <NVIC_EnableIRQ>:
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004c56:	4908      	ldr	r1, [pc, #32]	; (8004c78 <NVIC_EnableIRQ+0x2c>)
 8004c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	79fa      	ldrb	r2, [r7, #7]
 8004c60:	f002 021f 	and.w	r2, r2, #31
 8004c64:	2001      	movs	r0, #1
 8004c66:	fa00 f202 	lsl.w	r2, r0, r2
 8004c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr
 8004c78:	e000e100 	.word	0xe000e100

08004c7c <NVIC_SetPriority>:
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	6039      	str	r1, [r7, #0]
 8004c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8004c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	da0b      	bge.n	8004ca8 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c90:	490d      	ldr	r1, [pc, #52]	; (8004cc8 <NVIC_SetPriority+0x4c>)
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	3b04      	subs	r3, #4
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	0112      	lsls	r2, r2, #4
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	761a      	strb	r2, [r3, #24]
}
 8004ca6:	e009      	b.n	8004cbc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ca8:	4908      	ldr	r1, [pc, #32]	; (8004ccc <NVIC_SetPriority+0x50>)
 8004caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	0112      	lsls	r2, r2, #4
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	e000ed00 	.word	0xe000ed00
 8004ccc:	e000e100 	.word	0xe000e100

08004cd0 <NVIC_EncodePriority>:
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b089      	sub	sp, #36	; 0x24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f1c3 0307 	rsb	r3, r3, #7
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	bf28      	it	cs
 8004cee:	2304      	movcs	r3, #4
 8004cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	2b06      	cmp	r3, #6
 8004cf8:	d902      	bls.n	8004d00 <NVIC_EncodePriority+0x30>
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	3b03      	subs	r3, #3
 8004cfe:	e000      	b.n	8004d02 <NVIC_EncodePriority+0x32>
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d04:	2201      	movs	r2, #1
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	1e5a      	subs	r2, r3, #1
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	401a      	ands	r2, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d16:	2101      	movs	r1, #1
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1e:	1e59      	subs	r1, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d24:	4313      	orrs	r3, r2
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3724      	adds	r7, #36	; 0x24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr

08004d30 <LL_ADC_REG_SetSequencerRanks>:
{
 8004d30:	b490      	push	{r4, r7}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	332c      	adds	r3, #44	; 0x2c
 8004d40:	4619      	mov	r1, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004d48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	fa93 f3a3 	rbit	r3, r3
 8004d54:	613b      	str	r3, [r7, #16]
  return(result);
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	fab3 f383 	clz	r3, r3
 8004d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004d66:	6822      	ldr	r2, [r4, #0]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	211f      	movs	r1, #31
 8004d70:	fa01 f303 	lsl.w	r3, r1, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	401a      	ands	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f003 011f 	and.w	r1, r3, #31
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	fa01 f303 	lsl.w	r3, r1, r3
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	6023      	str	r3, [r4, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc90      	pop	{r4, r7}
 8004d94:	4770      	bx	lr

08004d96 <LL_ADC_SetChannelSamplingTime>:
{
 8004d96:	b490      	push	{r4, r7}
 8004d98:	b08a      	sub	sp, #40	; 0x28
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	607a      	str	r2, [r7, #4]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	330c      	adds	r3, #12
 8004da6:	4619      	mov	r1, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8004dae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	fa93 f3a3 	rbit	r3, r3
 8004dba:	613b      	str	r3, [r7, #16]
  return(result);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	fab3 f383 	clz	r3, r3
 8004dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8004dcc:	6822      	ldr	r2, [r4, #0]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8004dd4:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8004dd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	fa93 f3a3 	rbit	r3, r3
 8004de0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	fab3 f383 	clz	r3, r3
 8004de8:	fa21 f303 	lsr.w	r3, r1, r3
 8004dec:	2107      	movs	r1, #7
 8004dee:	fa01 f303 	lsl.w	r3, r1, r3
 8004df2:	43db      	mvns	r3, r3
 8004df4:	401a      	ands	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8004dfc:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	fa93 f3a3 	rbit	r3, r3
 8004e08:	623b      	str	r3, [r7, #32]
  return(result);
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	fab3 f383 	clz	r3, r3
 8004e10:	fa21 f303 	lsr.w	r3, r1, r3
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	6023      	str	r3, [r4, #0]
}
 8004e1e:	bf00      	nop
 8004e20:	3728      	adds	r7, #40	; 0x28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc90      	pop	{r4, r7}
 8004e26:	4770      	bx	lr

08004e28 <LL_ADC_Enable>:
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f043 0201 	orr.w	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	609a      	str	r2, [r3, #8]
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr

08004e46 <LL_ADC_IsEnabled>:
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	bf0c      	ite	eq
 8004e5a:	2301      	moveq	r3, #1
 8004e5c:	2300      	movne	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr

08004e6a <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f043 0204 	orr.w	r2, r3, #4
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	609a      	str	r2, [r3, #8]
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr

08004e88 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2301      	moveq	r3, #1
 8004e9e:	2300      	movne	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr

08004eac <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb8:	b29b      	uxth	r3, r3
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr

08004ec4 <LL_ADC_IsActiveFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	bf0c      	ite	eq
 8004ed8:	2301      	moveq	r3, #1
 8004eda:	2300      	movne	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr

08004ee8 <LL_ADC_ClearFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f06f 0202 	mvn.w	r2, #2
 8004ef6:	601a      	str	r2, [r3, #0]
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr

08004f02 <LL_ADC_EnableIT_EOS>:
  * @rmtoll CR1      EOCIE          LL_ADC_EnableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOS(ADC_TypeDef *ADCx)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 serie, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  SET_BIT(ADCx->CR1, ADC_CR1_EOCIE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f043 0220 	orr.w	r2, r3, #32
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	605a      	str	r2, [r3, #4]
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr

08004f20 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004f28:	4908      	ldr	r1, [pc, #32]	; (8004f4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8004f2a:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8004f36:	699a      	ldr	r2, [r3, #24]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
}
 8004f40:	bf00      	nop
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40021000 	.word	0x40021000

08004f50 <MX_ADC1_Init>:
#include "ldr_driver.h"

uint16_t ADC1_value = 0;

void MX_ADC1_Init(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08e      	sub	sp, #56	; 0x38
 8004f54:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004f56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8004f60:	2300      	movs	r3, #0
 8004f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004f64:	f107 0318 	add.w	r3, r7, #24
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	605a      	str	r2, [r3, #4]
 8004f6e:	609a      	str	r2, [r3, #8]
 8004f70:	60da      	str	r2, [r3, #12]
 8004f72:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f74:	1d3b      	adds	r3, r7, #4
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	605a      	str	r2, [r3, #4]
 8004f7c:	609a      	str	r2, [r3, #8]
 8004f7e:	60da      	str	r2, [r3, #12]
 8004f80:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8004f82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004f86:	f7ff ffcb 	bl	8004f20 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004f8a:	2004      	movs	r0, #4
 8004f8c:	f7ff ffc8 	bl	8004f20 <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA4   ------> ADC1_IN4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8004f90:	f241 0310 	movw	r3, #4112	; 0x1010
 8004f94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f9a:	1d3b      	adds	r3, r7, #4
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4828      	ldr	r0, [pc, #160]	; (8005040 <MX_ADC1_Init+0xf0>)
 8004fa0:	f7fc fcff 	bl	80019a2 <LL_GPIO_Init>

  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004fac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4824      	ldr	r0, [pc, #144]	; (8005044 <MX_ADC1_Init+0xf4>)
 8004fb4:	f7fc facc 	bl	8001550 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8004fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4820      	ldr	r0, [pc, #128]	; (8005044 <MX_ADC1_Init+0xf4>)
 8004fc4:	f7fc fa92 	bl	80014ec <LL_ADC_CommonInit>

  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8004fc8:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8004fcc:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004fde:	f107 0318 	add.w	r3, r7, #24
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4817      	ldr	r0, [pc, #92]	; (8005044 <MX_ADC1_Init+0xf4>)
 8004fe6:	f7fc fada 	bl	800159e <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8004fea:	4a17      	ldr	r2, [pc, #92]	; (8005048 <MX_ADC1_Init+0xf8>)
 8004fec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ff0:	4814      	ldr	r0, [pc, #80]	; (8005044 <MX_ADC1_Init+0xf4>)
 8004ff2:	f7ff fe9d 	bl	8004d30 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	4913      	ldr	r1, [pc, #76]	; (8005048 <MX_ADC1_Init+0xf8>)
 8004ffa:	4812      	ldr	r0, [pc, #72]	; (8005044 <MX_ADC1_Init+0xf4>)
 8004ffc:	f7ff fecb 	bl	8004d96 <LL_ADC_SetChannelSamplingTime>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005000:	f7ff fe16 	bl	8004c30 <NVIC_GetPriorityGrouping>
 8005004:	4603      	mov	r3, r0
 8005006:	2200      	movs	r2, #0
 8005008:	2100      	movs	r1, #0
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff fe60 	bl	8004cd0 <NVIC_EncodePriority>
 8005010:	4603      	mov	r3, r0
 8005012:	4619      	mov	r1, r3
 8005014:	2012      	movs	r0, #18
 8005016:	f7ff fe31 	bl	8004c7c <NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_2_IRQn);
 800501a:	2012      	movs	r0, #18
 800501c:	f7ff fe16 	bl	8004c4c <NVIC_EnableIRQ>
  LL_ADC_EnableIT_EOS(ADC1);
 8005020:	4808      	ldr	r0, [pc, #32]	; (8005044 <MX_ADC1_Init+0xf4>)
 8005022:	f7ff ff6e 	bl	8004f02 <LL_ADC_EnableIT_EOS>

  if (LL_ADC_IsEnabled(ADC1) == 0)
 8005026:	4807      	ldr	r0, [pc, #28]	; (8005044 <MX_ADC1_Init+0xf4>)
 8005028:	f7ff ff0d 	bl	8004e46 <LL_ADC_IsEnabled>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d102      	bne.n	8005038 <MX_ADC1_Init+0xe8>
  {
	  LL_ADC_Enable(ADC1);
 8005032:	4804      	ldr	r0, [pc, #16]	; (8005044 <MX_ADC1_Init+0xf4>)
 8005034:	f7ff fef8 	bl	8004e28 <LL_ADC_Enable>
  }
}
 8005038:	bf00      	nop
 800503a:	3738      	adds	r7, #56	; 0x38
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40010800 	.word	0x40010800
 8005044:	40012400 	.word	0x40012400
 8005048:	02c00004 	.word	0x02c00004

0800504c <ADC1_Activate>:

void ADC1_Activate(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
	if (LL_ADC_IsEnabled(ADC1) == 1)
 8005050:	480e      	ldr	r0, [pc, #56]	; (800508c <ADC1_Activate+0x40>)
 8005052:	f7ff fef8 	bl	8004e46 <LL_ADC_IsEnabled>
 8005056:	4603      	mov	r3, r0
 8005058:	2b01      	cmp	r3, #1
 800505a:	d114      	bne.n	8005086 <ADC1_Activate+0x3a>
	{
		LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 800505c:	2200      	movs	r2, #0
 800505e:	490c      	ldr	r1, [pc, #48]	; (8005090 <ADC1_Activate+0x44>)
 8005060:	480a      	ldr	r0, [pc, #40]	; (800508c <ADC1_Activate+0x40>)
 8005062:	f7ff fe98 	bl	8004d96 <LL_ADC_SetChannelSamplingTime>
		LL_ADC_Enable(ADC1);
 8005066:	4809      	ldr	r0, [pc, #36]	; (800508c <ADC1_Activate+0x40>)
 8005068:	f7ff fede 	bl	8004e28 <LL_ADC_Enable>
		LL_mDelay(1);
 800506c:	2001      	movs	r0, #1
 800506e:	f7fd f9c9 	bl	8002404 <LL_mDelay>

	    LL_ADC_StartCalibration(ADC1);
 8005072:	4806      	ldr	r0, [pc, #24]	; (800508c <ADC1_Activate+0x40>)
 8005074:	f7ff fef9 	bl	8004e6a <LL_ADC_StartCalibration>
	    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0);
 8005078:	bf00      	nop
 800507a:	4804      	ldr	r0, [pc, #16]	; (800508c <ADC1_Activate+0x40>)
 800507c:	f7ff ff04 	bl	8004e88 <LL_ADC_IsCalibrationOnGoing>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f9      	bne.n	800507a <ADC1_Activate+0x2e>
	}
}
 8005086:	bf00      	nop
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40012400 	.word	0x40012400
 8005090:	02c00004 	.word	0x02c00004

08005094 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  if(LL_ADC_IsActiveFlag_EOS(ADC1) != 0)
 8005098:	4808      	ldr	r0, [pc, #32]	; (80050bc <ADC1_2_IRQHandler+0x28>)
 800509a:	f7ff ff13 	bl	8004ec4 <LL_ADC_IsActiveFlag_EOS>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d009      	beq.n	80050b8 <ADC1_2_IRQHandler+0x24>
  {
    LL_ADC_ClearFlag_EOS(ADC1);
 80050a4:	4805      	ldr	r0, [pc, #20]	; (80050bc <ADC1_2_IRQHandler+0x28>)
 80050a6:	f7ff ff1f 	bl	8004ee8 <LL_ADC_ClearFlag_EOS>

    ADC1_value = LL_ADC_REG_ReadConversionData12(ADC1);
 80050aa:	4804      	ldr	r0, [pc, #16]	; (80050bc <ADC1_2_IRQHandler+0x28>)
 80050ac:	f7ff fefe 	bl	8004eac <LL_ADC_REG_ReadConversionData12>
 80050b0:	4603      	mov	r3, r0
 80050b2:	461a      	mov	r2, r3
 80050b4:	4b02      	ldr	r3, [pc, #8]	; (80050c0 <ADC1_2_IRQHandler+0x2c>)
 80050b6:	801a      	strh	r2, [r3, #0]
  }
}
 80050b8:	bf00      	nop
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40012400 	.word	0x40012400
 80050c0:	20002362 	.word	0x20002362

080050c4 <ADC1_Get>:

uint16_t ADC1_Get()
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
	return ADC1_value;
 80050c8:	4b02      	ldr	r3, [pc, #8]	; (80050d4 <ADC1_Get+0x10>)
 80050ca:	881b      	ldrh	r3, [r3, #0]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr
 80050d4:	20002362 	.word	0x20002362

080050d8 <LDRQueueInit>:
#include "cmsis_os.h"

xQueueHandle ldr_queue;

void LDRQueueInit(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
	  ldr_queue = xQueueCreate(2, sizeof(uint16_t));
 80050dc:	2200      	movs	r2, #0
 80050de:	2102      	movs	r1, #2
 80050e0:	2002      	movs	r0, #2
 80050e2:	f7fd fe91 	bl	8002e08 <xQueueGenericCreate>
 80050e6:	4602      	mov	r2, r0
 80050e8:	4b01      	ldr	r3, [pc, #4]	; (80050f0 <LDRQueueInit+0x18>)
 80050ea:	601a      	str	r2, [r3, #0]
}
 80050ec:	bf00      	nop
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	2000301c 	.word	0x2000301c

080050f4 <LDRQueue_Send>:

void LDRQueue_Send(uint16_t value)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	4603      	mov	r3, r0
 80050fc:	80fb      	strh	r3, [r7, #6]
	const portTickType xTicksToWait = 100 / portTICK_RATE_MS;
 80050fe:	2364      	movs	r3, #100	; 0x64
 8005100:	60fb      	str	r3, [r7, #12]
	xQueueSendToBack(ldr_queue, &value, xTicksToWait);
 8005102:	4b05      	ldr	r3, [pc, #20]	; (8005118 <LDRQueue_Send+0x24>)
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	1db9      	adds	r1, r7, #6
 8005108:	2300      	movs	r3, #0
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	f7fd fed4 	bl	8002eb8 <xQueueGenericSend>
}
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	2000301c 	.word	0x2000301c

0800511c <LDRQueue_Receive>:

uint16_t LDRQueue_Receive(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
	uint16_t value;
	xQueueReceive(ldr_queue, &value, 0);
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <LDRQueue_Receive+0x20>)
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	1db9      	adds	r1, r7, #6
 8005128:	2300      	movs	r3, #0
 800512a:	2200      	movs	r2, #0
 800512c:	f7fd ffbe 	bl	80030ac <xQueueGenericReceive>
	return value;
 8005130:	88fb      	ldrh	r3, [r7, #6]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	2000301c 	.word	0x2000301c

08005140 <LDRQueue_IsElements>:

bool LDRQueue_IsElements(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
	if(uxQueueMessagesWaiting(ldr_queue) > 0)
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <LDRQueue_IsElements+0x20>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f7fe f8c1 	bl	80032d0 <uxQueueMessagesWaiting>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <LDRQueue_IsElements+0x18>
	{
		return true;
 8005154:	2301      	movs	r3, #1
 8005156:	e000      	b.n	800515a <LDRQueue_IsElements+0x1a>
	}
	return false;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	2000301c 	.word	0x2000301c

08005164 <pxLDR>:
#include "ldr.h"
#include "ldr_queue.h"
#include "cmsis_os.h"

static void pxLDR(void * arg)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
	LDRInit();
 800516c:	f7fb fae2 	bl	8000734 <LDRInit>
	while(1)
	{
		uint16_t adc_value = LDR_Get();
 8005170:	f7fb fae6 	bl	8000740 <LDR_Get>
 8005174:	4603      	mov	r3, r0
 8005176:	81fb      	strh	r3, [r7, #14]
		LDRQueue_Send(adc_value);
 8005178:	89fb      	ldrh	r3, [r7, #14]
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff ffba 	bl	80050f4 <LDRQueue_Send>
		osDelay(100);
 8005180:	2064      	movs	r0, #100	; 0x64
 8005182:	f7fd f9b6 	bl	80024f2 <osDelay>
	{
 8005186:	e7f3      	b.n	8005170 <pxLDR+0xc>

08005188 <LDRTaskInit>:
	}
}

void LDRTaskInit(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af02      	add	r7, sp, #8
	xTaskCreate(pxLDR, "LDR", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 800518e:	2300      	movs	r3, #0
 8005190:	9301      	str	r3, [sp, #4]
 8005192:	2300      	movs	r3, #0
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	2300      	movs	r3, #0
 8005198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800519c:	4903      	ldr	r1, [pc, #12]	; (80051ac <LDRTaskInit+0x24>)
 800519e:	4804      	ldr	r0, [pc, #16]	; (80051b0 <LDRTaskInit+0x28>)
 80051a0:	f7fe fa1c 	bl	80035dc <xTaskCreate>
}
 80051a4:	bf00      	nop
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	08006e14 	.word	0x08006e14
 80051b0:	08005165 	.word	0x08005165

080051b4 <LL_APB1_GRP1_EnableClock>:
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80051bc:	4908      	ldr	r1, [pc, #32]	; (80051e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80051be:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80051c0:	69da      	ldr	r2, [r3, #28]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80051ca:	69da      	ldr	r2, [r3, #28]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4013      	ands	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80051d2:	68fb      	ldr	r3, [r7, #12]
}
 80051d4:	bf00      	nop
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40021000 	.word	0x40021000

080051e4 <LL_APB2_GRP1_EnableClock>:
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80051ec:	4908      	ldr	r1, [pc, #32]	; (8005210 <LL_APB2_GRP1_EnableClock+0x2c>)
 80051ee:	4b08      	ldr	r3, [pc, #32]	; (8005210 <LL_APB2_GRP1_EnableClock+0x2c>)
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80051f8:	4b05      	ldr	r3, [pc, #20]	; (8005210 <LL_APB2_GRP1_EnableClock+0x2c>)
 80051fa:	699a      	ldr	r2, [r3, #24]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4013      	ands	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005202:	68fb      	ldr	r3, [r7, #12]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	bc80      	pop	{r7}
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40021000 	.word	0x40021000

08005214 <LL_TIM_EnableCounter>:
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f043 0201 	orr.w	r2, r3, #1
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	601a      	str	r2, [r3, #0]
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	bc80      	pop	{r7}
 8005230:	4770      	bx	lr

08005232 <LL_TIM_EnableARRPreload>:
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	601a      	str	r2, [r3, #0]
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr

08005250 <LL_TIM_GetAutoReload>:
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr

08005266 <LL_TIM_CC_EnableChannel>:
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1a      	ldr	r2, [r3, #32]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	621a      	str	r2, [r3, #32]
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr
	...

08005288 <LL_TIM_OC_DisableFast>:
{
 8005288:	b4b0      	push	{r4, r5, r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d01c      	beq.n	80052d2 <LL_TIM_OC_DisableFast+0x4a>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b04      	cmp	r3, #4
 800529c:	d017      	beq.n	80052ce <LL_TIM_OC_DisableFast+0x46>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	d012      	beq.n	80052ca <LL_TIM_OC_DisableFast+0x42>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b40      	cmp	r3, #64	; 0x40
 80052a8:	d00d      	beq.n	80052c6 <LL_TIM_OC_DisableFast+0x3e>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b0:	d007      	beq.n	80052c2 <LL_TIM_OC_DisableFast+0x3a>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b8:	d101      	bne.n	80052be <LL_TIM_OC_DisableFast+0x36>
 80052ba:	2305      	movs	r3, #5
 80052bc:	e00a      	b.n	80052d4 <LL_TIM_OC_DisableFast+0x4c>
 80052be:	2306      	movs	r3, #6
 80052c0:	e008      	b.n	80052d4 <LL_TIM_OC_DisableFast+0x4c>
 80052c2:	2304      	movs	r3, #4
 80052c4:	e006      	b.n	80052d4 <LL_TIM_OC_DisableFast+0x4c>
 80052c6:	2303      	movs	r3, #3
 80052c8:	e004      	b.n	80052d4 <LL_TIM_OC_DisableFast+0x4c>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e002      	b.n	80052d4 <LL_TIM_OC_DisableFast+0x4c>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <LL_TIM_OC_DisableFast+0x4c>
 80052d2:	2300      	movs	r3, #0
 80052d4:	461d      	mov	r5, r3
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3318      	adds	r3, #24
 80052da:	461a      	mov	r2, r3
 80052dc:	4629      	mov	r1, r5
 80052de:	4b09      	ldr	r3, [pc, #36]	; (8005304 <LL_TIM_OC_DisableFast+0x7c>)
 80052e0:	5c5b      	ldrb	r3, [r3, r1]
 80052e2:	4413      	add	r3, r2
 80052e4:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80052e6:	6822      	ldr	r2, [r4, #0]
 80052e8:	4629      	mov	r1, r5
 80052ea:	4b07      	ldr	r3, [pc, #28]	; (8005308 <LL_TIM_OC_DisableFast+0x80>)
 80052ec:	5c5b      	ldrb	r3, [r3, r1]
 80052ee:	4619      	mov	r1, r3
 80052f0:	2304      	movs	r3, #4
 80052f2:	408b      	lsls	r3, r1
 80052f4:	43db      	mvns	r3, r3
 80052f6:	4013      	ands	r3, r2
 80052f8:	6023      	str	r3, [r4, #0]
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	bcb0      	pop	{r4, r5, r7}
 8005302:	4770      	bx	lr
 8005304:	08007240 	.word	0x08007240
 8005308:	08007248 	.word	0x08007248

0800530c <LL_TIM_OC_SetCompareCH1>:
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	bc80      	pop	{r7}
 8005324:	4770      	bx	lr

08005326 <LL_TIM_OC_SetCompareCH2>:
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr

08005340 <LL_TIM_OC_SetCompareCH3>:
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr

0800535a <LL_TIM_SetTriggerOutput>:
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	605a      	str	r2, [r3, #4]
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr

0800537e <LL_TIM_DisableMasterSlaveMode>:
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	609a      	str	r2, [r3, #8]
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <LL_TIM_GenerateEvent_UPDATE>:
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	f043 0201 	orr.w	r2, r3, #1
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	615a      	str	r2, [r3, #20]
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr
	...

080053bc <MX_TIM4_Init>:
#include "led_driver.h"

void MX_TIM4_Init(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b092      	sub	sp, #72	; 0x48
 80053c0:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80053c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	605a      	str	r2, [r3, #4]
 80053cc:	609a      	str	r2, [r3, #8]
 80053ce:	60da      	str	r2, [r3, #12]
 80053d0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80053d2:	f107 0314 	add.w	r3, r7, #20
 80053d6:	2220      	movs	r2, #32
 80053d8:	2100      	movs	r1, #0
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 ff39 	bl	8006252 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e0:	463b      	mov	r3, r7
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	605a      	str	r2, [r3, #4]
 80053e8:	609a      	str	r2, [r3, #8]
 80053ea:	60da      	str	r2, [r3, #12]
 80053ec:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80053ee:	2004      	movs	r0, #4
 80053f0:	f7ff fee0 	bl	80051b4 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80053f8:	2300      	movs	r3, #0
 80053fa:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 4096;
 80053fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005400:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005402:	2300      	movs	r3, #0
 8005404:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8005406:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800540a:	4619      	mov	r1, r3
 800540c:	483a      	ldr	r0, [pc, #232]	; (80054f8 <MX_TIM4_Init+0x13c>)
 800540e:	f7fc fc9f 	bl	8001d50 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM4);
 8005412:	4839      	ldr	r0, [pc, #228]	; (80054f8 <MX_TIM4_Init+0x13c>)
 8005414:	f7ff ff0d 	bl	8005232 <LL_TIM_EnableARRPreload>

  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005418:	2360      	movs	r3, #96	; 0x60
 800541a:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800541c:	2300      	movs	r3, #0
 800541e:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005420:	2300      	movs	r3, #0
 8005422:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = LL_TIM_GetAutoReload(TIM4);
 8005424:	4834      	ldr	r0, [pc, #208]	; (80054f8 <MX_TIM4_Init+0x13c>)
 8005426:	f7ff ff13 	bl	8005250 <LL_TIM_GetAutoReload>
 800542a:	4603      	mov	r3, r0
 800542c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800542e:	2300      	movs	r3, #0
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 8005432:	2300      	movs	r3, #0
 8005434:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
 8005436:	2300      	movs	r3, #0
 8005438:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800543a:	2300      	movs	r3, #0
 800543c:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800543e:	f107 0314 	add.w	r3, r7, #20
 8005442:	461a      	mov	r2, r3
 8005444:	2101      	movs	r1, #1
 8005446:	482c      	ldr	r0, [pc, #176]	; (80054f8 <MX_TIM4_Init+0x13c>)
 8005448:	f7fc fce2 	bl	8001e10 <LL_TIM_OC_Init>

  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 800544c:	2101      	movs	r1, #1
 800544e:	482a      	ldr	r0, [pc, #168]	; (80054f8 <MX_TIM4_Init+0x13c>)
 8005450:	f7ff ff1a 	bl	8005288 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005454:	2300      	movs	r3, #0
 8005456:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005458:	2300      	movs	r3, #0
 800545a:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800545c:	f107 0314 	add.w	r3, r7, #20
 8005460:	461a      	mov	r2, r3
 8005462:	2110      	movs	r1, #16
 8005464:	4824      	ldr	r0, [pc, #144]	; (80054f8 <MX_TIM4_Init+0x13c>)
 8005466:	f7fc fcd3 	bl	8001e10 <LL_TIM_OC_Init>

  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 800546a:	2110      	movs	r1, #16
 800546c:	4822      	ldr	r0, [pc, #136]	; (80054f8 <MX_TIM4_Init+0x13c>)
 800546e:	f7ff ff0b 	bl	8005288 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005472:	2300      	movs	r3, #0
 8005474:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800547a:	f107 0314 	add.w	r3, r7, #20
 800547e:	461a      	mov	r2, r3
 8005480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005484:	481c      	ldr	r0, [pc, #112]	; (80054f8 <MX_TIM4_Init+0x13c>)
 8005486:	f7fc fcc3 	bl	8001e10 <LL_TIM_OC_Init>

  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 800548a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800548e:	481a      	ldr	r0, [pc, #104]	; (80054f8 <MX_TIM4_Init+0x13c>)
 8005490:	f7ff fefa 	bl	8005288 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8005494:	2100      	movs	r1, #0
 8005496:	4818      	ldr	r0, [pc, #96]	; (80054f8 <MX_TIM4_Init+0x13c>)
 8005498:	f7ff ff5f 	bl	800535a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 800549c:	4816      	ldr	r0, [pc, #88]	; (80054f8 <MX_TIM4_Init+0x13c>)
 800549e:	f7ff ff6e 	bl	800537e <LL_TIM_DisableMasterSlaveMode>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80054a2:	2008      	movs	r0, #8
 80054a4:	f7ff fe9e 	bl	80051e4 <LL_APB2_GRP1_EnableClock>
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 80054a8:	4b14      	ldr	r3, [pc, #80]	; (80054fc <MX_TIM4_Init+0x140>)
 80054aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80054ac:	2309      	movs	r3, #9
 80054ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80054b0:	2303      	movs	r3, #3
 80054b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054b8:	463b      	mov	r3, r7
 80054ba:	4619      	mov	r1, r3
 80054bc:	4810      	ldr	r0, [pc, #64]	; (8005500 <MX_TIM4_Init+0x144>)
 80054be:	f7fc fa70 	bl	80019a2 <LL_GPIO_Init>

  LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH3);
 80054c2:	f240 1111 	movw	r1, #273	; 0x111
 80054c6:	480c      	ldr	r0, [pc, #48]	; (80054f8 <MX_TIM4_Init+0x13c>)
 80054c8:	f7ff fecd 	bl	8005266 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM4);
 80054cc:	480a      	ldr	r0, [pc, #40]	; (80054f8 <MX_TIM4_Init+0x13c>)
 80054ce:	f7ff fea1 	bl	8005214 <LL_TIM_EnableCounter>

  LL_TIM_GenerateEvent_UPDATE(TIM4);
 80054d2:	4809      	ldr	r0, [pc, #36]	; (80054f8 <MX_TIM4_Init+0x13c>)
 80054d4:	f7ff ff62 	bl	800539c <LL_TIM_GenerateEvent_UPDATE>

  LL_TIM_OC_SetCompareCH1(TIM4, 0);
 80054d8:	2100      	movs	r1, #0
 80054da:	4807      	ldr	r0, [pc, #28]	; (80054f8 <MX_TIM4_Init+0x13c>)
 80054dc:	f7ff ff16 	bl	800530c <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIM4, 0);
 80054e0:	2100      	movs	r1, #0
 80054e2:	4805      	ldr	r0, [pc, #20]	; (80054f8 <MX_TIM4_Init+0x13c>)
 80054e4:	f7ff ff1f 	bl	8005326 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIM4, 0);
 80054e8:	2100      	movs	r1, #0
 80054ea:	4803      	ldr	r0, [pc, #12]	; (80054f8 <MX_TIM4_Init+0x13c>)
 80054ec:	f7ff ff28 	bl	8005340 <LL_TIM_OC_SetCompareCH3>
}
 80054f0:	bf00      	nop
 80054f2:	3748      	adds	r7, #72	; 0x48
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40000800 	.word	0x40000800
 80054fc:	0401c0c1 	.word	0x0401c0c1
 8005500:	40010c00 	.word	0x40010c00

08005504 <TIM4_SET_CH1>:

inline void TIM4_SET_CH1(uint16_t duty_cycle)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH1(TIM4, duty_cycle);
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	4619      	mov	r1, r3
 8005512:	4803      	ldr	r0, [pc, #12]	; (8005520 <TIM4_SET_CH1+0x1c>)
 8005514:	f7ff fefa 	bl	800530c <LL_TIM_OC_SetCompareCH1>
}
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40000800 	.word	0x40000800

08005524 <TIM4_SET_CH2>:

inline void TIM4_SET_CH2(uint16_t duty_cycle)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	4603      	mov	r3, r0
 800552c:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH2(TIM4, duty_cycle);
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	4619      	mov	r1, r3
 8005532:	4803      	ldr	r0, [pc, #12]	; (8005540 <TIM4_SET_CH2+0x1c>)
 8005534:	f7ff fef7 	bl	8005326 <LL_TIM_OC_SetCompareCH2>
}
 8005538:	bf00      	nop
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40000800 	.word	0x40000800

08005544 <TIM4_SET_CH3>:

inline void TIM4_SET_CH3(uint16_t duty_cycle)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	4603      	mov	r3, r0
 800554c:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH3(TIM4, duty_cycle);
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	4619      	mov	r1, r3
 8005552:	4803      	ldr	r0, [pc, #12]	; (8005560 <TIM4_SET_CH3+0x1c>)
 8005554:	f7ff fef4 	bl	8005340 <LL_TIM_OC_SetCompareCH3>
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40000800 	.word	0x40000800

08005564 <constrain>:
#include "encoder_queue.h"
#include "ldr_queue.h"
#include "cmsis_os.h"

static uint16_t constrain(int32_t value)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	if(value > 4096) value = 4096;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005572:	dd02      	ble.n	800557a <constrain+0x16>
 8005574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005578:	607b      	str	r3, [r7, #4]
	if(value < 0) value = 0;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	da01      	bge.n	8005584 <constrain+0x20>
 8005580:	2300      	movs	r3, #0
 8005582:	607b      	str	r3, [r7, #4]
	return value;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	b29b      	uxth	r3, r3
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	bc80      	pop	{r7}
 8005590:	4770      	bx	lr
	...

08005594 <pxLed>:

static void pxLed(void * arg)
{
 8005594:	b5b0      	push	{r4, r5, r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	LedInit();
 800559c:	f7fb f900 	bl	80007a0 <LedInit>

	uint16_t ldr_value = 4096, ldr_value_old = 4096;
 80055a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055a4:	82fb      	strh	r3, [r7, #22]
 80055a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055aa:	82bb      	strh	r3, [r7, #20]
	EncoderRotateInfo xEncoder_info;

	while(1)
	{
		if(EncoderQueue_IsElements())
 80055ac:	f7ff fa36 	bl	8004a1c <EncoderQueue_IsElements>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d072      	beq.n	800569c <pxLed+0x108>
		{
			xEncoder_info = EncoderQueue_Receive();
 80055b6:	f7ff fa17 	bl	80049e8 <EncoderQueue_Receive>
 80055ba:	4603      	mov	r3, r0
 80055bc:	60bb      	str	r3, [r7, #8]
			int16_t red = Led_Get_Color(eRed), green = Led_Get_Color(eGreen), blue = Led_Get_Color(eBlue);
 80055be:	2000      	movs	r0, #0
 80055c0:	f7fb f960 	bl	8000884 <Led_Get_Color>
 80055c4:	4603      	mov	r3, r0
 80055c6:	827b      	strh	r3, [r7, #18]
 80055c8:	2001      	movs	r0, #1
 80055ca:	f7fb f95b 	bl	8000884 <Led_Get_Color>
 80055ce:	4603      	mov	r3, r0
 80055d0:	823b      	strh	r3, [r7, #16]
 80055d2:	2002      	movs	r0, #2
 80055d4:	f7fb f956 	bl	8000884 <Led_Get_Color>
 80055d8:	4603      	mov	r3, r0
 80055da:	81fb      	strh	r3, [r7, #14]

			switch(xEncoder_info.button)
 80055dc:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d85a      	bhi.n	800569a <pxLed+0x106>
 80055e4:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <pxLed+0x58>)
 80055e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ea:	bf00      	nop
 80055ec:	0800569b 	.word	0x0800569b
 80055f0:	08005601 	.word	0x08005601
 80055f4:	0800561d 	.word	0x0800561d
 80055f8:	08005639 	.word	0x08005639
 80055fc:	08005655 	.word	0x08005655
			{
				case 0: break;
				case 1:
					{
						Led_Set_Color(eRed, constrain(red + xEncoder_info.state));
 8005600:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005604:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005608:	4413      	add	r3, r2
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff ffaa 	bl	8005564 <constrain>
 8005610:	4603      	mov	r3, r0
 8005612:	4619      	mov	r1, r3
 8005614:	2000      	movs	r0, #0
 8005616:	f7fb f903 	bl	8000820 <Led_Set_Color>
						break;
 800561a:	e03f      	b.n	800569c <pxLed+0x108>
					}
				case 2:
					{
						Led_Set_Color(eGreen, constrain(green + xEncoder_info.state));
 800561c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005620:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005624:	4413      	add	r3, r2
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff ff9c 	bl	8005564 <constrain>
 800562c:	4603      	mov	r3, r0
 800562e:	4619      	mov	r1, r3
 8005630:	2001      	movs	r0, #1
 8005632:	f7fb f8f5 	bl	8000820 <Led_Set_Color>
						break;
 8005636:	e031      	b.n	800569c <pxLed+0x108>
					}
				case 3:
					{
						Led_Set_Color(eBlue, constrain(blue + xEncoder_info.state));
 8005638:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800563c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005640:	4413      	add	r3, r2
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff ff8e 	bl	8005564 <constrain>
 8005648:	4603      	mov	r3, r0
 800564a:	4619      	mov	r1, r3
 800564c:	2002      	movs	r0, #2
 800564e:	f7fb f8e7 	bl	8000820 <Led_Set_Color>
						break;
 8005652:	e023      	b.n	800569c <pxLed+0x108>
					}
				case 4:
					{
						Led_Set(constrain(red + xEncoder_info.state), constrain(green + xEncoder_info.state), constrain(blue + xEncoder_info.state));
 8005654:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005658:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800565c:	4413      	add	r3, r2
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff ff80 	bl	8005564 <constrain>
 8005664:	4603      	mov	r3, r0
 8005666:	461c      	mov	r4, r3
 8005668:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800566c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005670:	4413      	add	r3, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff ff76 	bl	8005564 <constrain>
 8005678:	4603      	mov	r3, r0
 800567a:	461d      	mov	r5, r3
 800567c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005680:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005684:	4413      	add	r3, r2
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff ff6c 	bl	8005564 <constrain>
 800568c:	4603      	mov	r3, r0
 800568e:	461a      	mov	r2, r3
 8005690:	4629      	mov	r1, r5
 8005692:	4620      	mov	r0, r4
 8005694:	f7fb f89c 	bl	80007d0 <Led_Set>
						break;
 8005698:	e000      	b.n	800569c <pxLed+0x108>
					}
				default: break;
 800569a:	bf00      	nop
			}
		}
		if(LDRQueue_IsElements())
 800569c:	f7ff fd50 	bl	8005140 <LDRQueue_IsElements>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d018      	beq.n	80056d8 <pxLed+0x144>
		{
			 ldr_value = LDRQueue_Receive();
 80056a6:	f7ff fd39 	bl	800511c <LDRQueue_Receive>
 80056aa:	4603      	mov	r3, r0
 80056ac:	82fb      	strh	r3, [r7, #22]
		}

		while(!(ldr_value_old == ldr_value))
 80056ae:	e013      	b.n	80056d8 <pxLed+0x144>
		{
			if(ldr_value_old > ldr_value)
 80056b0:	8aba      	ldrh	r2, [r7, #20]
 80056b2:	8afb      	ldrh	r3, [r7, #22]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d906      	bls.n	80056c6 <pxLed+0x132>
			{
				Led_Refresh(ldr_value_old--);
 80056b8:	8abb      	ldrh	r3, [r7, #20]
 80056ba:	1e5a      	subs	r2, r3, #1
 80056bc:	82ba      	strh	r2, [r7, #20]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fb f916 	bl	80008f0 <Led_Refresh>
 80056c4:	e005      	b.n	80056d2 <pxLed+0x13e>
			}
			else Led_Refresh(ldr_value_old++);
 80056c6:	8abb      	ldrh	r3, [r7, #20]
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	82ba      	strh	r2, [r7, #20]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fb f90f 	bl	80008f0 <Led_Refresh>

			osDelay(1);
 80056d2:	2001      	movs	r0, #1
 80056d4:	f7fc ff0d 	bl	80024f2 <osDelay>
		while(!(ldr_value_old == ldr_value))
 80056d8:	8aba      	ldrh	r2, [r7, #20]
 80056da:	8afb      	ldrh	r3, [r7, #22]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d1e7      	bne.n	80056b0 <pxLed+0x11c>
		}
		ldr_value_old = ldr_value;
 80056e0:	8afb      	ldrh	r3, [r7, #22]
 80056e2:	82bb      	strh	r3, [r7, #20]
		osDelay(10);
 80056e4:	200a      	movs	r0, #10
 80056e6:	f7fc ff04 	bl	80024f2 <osDelay>
		if(EncoderQueue_IsElements())
 80056ea:	e75f      	b.n	80055ac <pxLed+0x18>

080056ec <LedTaskInit>:
	}
}

void LedTaskInit(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af02      	add	r7, sp, #8
	xTaskCreate(pxLed, "Led", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 80056f2:	2300      	movs	r3, #0
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	2300      	movs	r3, #0
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	2300      	movs	r3, #0
 80056fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005700:	4903      	ldr	r1, [pc, #12]	; (8005710 <LedTaskInit+0x24>)
 8005702:	4804      	ldr	r0, [pc, #16]	; (8005714 <LedTaskInit+0x28>)
 8005704:	f7fd ff6a 	bl	80035dc <xTaskCreate>
}
 8005708:	bf00      	nop
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	08006e18 	.word	0x08006e18
 8005714:	08005595 	.word	0x08005595

08005718 <LL_APB2_GRP1_EnableClock>:
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005720:	4908      	ldr	r1, [pc, #32]	; (8005744 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005722:	4b08      	ldr	r3, [pc, #32]	; (8005744 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005724:	699a      	ldr	r2, [r3, #24]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4313      	orrs	r3, r2
 800572a:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <LL_APB2_GRP1_EnableClock+0x2c>)
 800572e:	699a      	ldr	r2, [r3, #24]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4013      	ands	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005736:	68fb      	ldr	r3, [r7, #12]
}
 8005738:	bf00      	nop
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	bc80      	pop	{r7}
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40021000 	.word	0x40021000

08005748 <LL_GPIO_SetOutputPin>:
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	b29a      	uxth	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	611a      	str	r2, [r3, #16]
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	bc80      	pop	{r7}
 8005764:	4770      	bx	lr

08005766 <LL_GPIO_TogglePin>:
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	0a1b      	lsrs	r3, r3, #8
 8005778:	b29b      	uxth	r3, r3
 800577a:	405a      	eors	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	60da      	str	r2, [r3, #12]
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	bc80      	pop	{r7}
 8005788:	4770      	bx	lr
	...

0800578c <StatusLedInit>:
#include "delay.h"
#include "cmsis_os.h"


void StatusLedInit(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8005792:	2004      	movs	r0, #4
 8005794:	f7ff ffc0 	bl	8005718 <LL_APB2_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8005798:	2008      	movs	r0, #8
 800579a:	f7ff ffbd 	bl	8005718 <LL_APB2_GRP1_EnableClock>

  	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	605a      	str	r2, [r3, #4]
 80057a6:	609a      	str	r2, [r3, #8]
 80057a8:	60da      	str	r2, [r3, #12]
 80057aa:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80057ac:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <StatusLedInit+0x48>)
 80057ae:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80057b0:	2301      	movs	r3, #1
 80057b2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80057b4:	2303      	movs	r3, #3
 80057b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80057b8:	2300      	movs	r3, #0
 80057ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80057bc:	2300      	movs	r3, #0
 80057be:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057c0:	1d3b      	adds	r3, r7, #4
 80057c2:	4619      	mov	r1, r3
 80057c4:	4804      	ldr	r0, [pc, #16]	; (80057d8 <StatusLedInit+0x4c>)
 80057c6:	f7fc f8ec 	bl	80019a2 <LL_GPIO_Init>
}
 80057ca:	bf00      	nop
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	04200020 	.word	0x04200020
 80057d8:	40010c00 	.word	0x40010c00

080057dc <StatusLedON>:

void StatusLedON()
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_13);
 80057e0:	4902      	ldr	r1, [pc, #8]	; (80057ec <StatusLedON+0x10>)
 80057e2:	4803      	ldr	r0, [pc, #12]	; (80057f0 <StatusLedON+0x14>)
 80057e4:	f7ff ffb0 	bl	8005748 <LL_GPIO_SetOutputPin>
}
 80057e8:	bf00      	nop
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	04200020 	.word	0x04200020
 80057f0:	40010c00 	.word	0x40010c00

080057f4 <ErrorBlink>:
{
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_13);
}

void ErrorBlink()
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
	while(1)
	{
		LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_13);
 80057f8:	4903      	ldr	r1, [pc, #12]	; (8005808 <ErrorBlink+0x14>)
 80057fa:	4804      	ldr	r0, [pc, #16]	; (800580c <ErrorBlink+0x18>)
 80057fc:	f7ff ffb3 	bl	8005766 <LL_GPIO_TogglePin>
		delay(200);
 8005800:	20c8      	movs	r0, #200	; 0xc8
 8005802:	f7fe feeb 	bl	80045dc <delay>
		LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_13);
 8005806:	e7f7      	b.n	80057f8 <ErrorBlink+0x4>
 8005808:	04200020 	.word	0x04200020
 800580c:	40010c00 	.word	0x40010c00

08005810 <NVIC_GetPriorityGrouping>:
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005814:	4b04      	ldr	r3, [pc, #16]	; (8005828 <NVIC_GetPriorityGrouping+0x18>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	0a1b      	lsrs	r3, r3, #8
 800581a:	f003 0307 	and.w	r3, r3, #7
}
 800581e:	4618      	mov	r0, r3
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	e000ed00 	.word	0xe000ed00

0800582c <NVIC_EnableIRQ>:
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005836:	4908      	ldr	r1, [pc, #32]	; (8005858 <NVIC_EnableIRQ+0x2c>)
 8005838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800583c:	095b      	lsrs	r3, r3, #5
 800583e:	79fa      	ldrb	r2, [r7, #7]
 8005840:	f002 021f 	and.w	r2, r2, #31
 8005844:	2001      	movs	r0, #1
 8005846:	fa00 f202 	lsl.w	r2, r0, r2
 800584a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr
 8005858:	e000e100 	.word	0xe000e100

0800585c <NVIC_DisableIRQ>:
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	4603      	mov	r3, r0
 8005864:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005866:	4909      	ldr	r1, [pc, #36]	; (800588c <NVIC_DisableIRQ+0x30>)
 8005868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800586c:	095b      	lsrs	r3, r3, #5
 800586e:	79fa      	ldrb	r2, [r7, #7]
 8005870:	f002 021f 	and.w	r2, r2, #31
 8005874:	2001      	movs	r0, #1
 8005876:	fa00 f202 	lsl.w	r2, r0, r2
 800587a:	3320      	adds	r3, #32
 800587c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	e000e100 	.word	0xe000e100

08005890 <NVIC_SetPriority>:
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	6039      	str	r1, [r7, #0]
 800589a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800589c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	da0b      	bge.n	80058bc <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058a4:	490d      	ldr	r1, [pc, #52]	; (80058dc <NVIC_SetPriority+0x4c>)
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	3b04      	subs	r3, #4
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	0112      	lsls	r2, r2, #4
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	440b      	add	r3, r1
 80058b8:	761a      	strb	r2, [r3, #24]
}
 80058ba:	e009      	b.n	80058d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058bc:	4908      	ldr	r1, [pc, #32]	; (80058e0 <NVIC_SetPriority+0x50>)
 80058be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	b2d2      	uxtb	r2, r2
 80058c6:	0112      	lsls	r2, r2, #4
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	440b      	add	r3, r1
 80058cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bc80      	pop	{r7}
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	e000ed00 	.word	0xe000ed00
 80058e0:	e000e100 	.word	0xe000e100

080058e4 <NVIC_EncodePriority>:
{
 80058e4:	b480      	push	{r7}
 80058e6:	b089      	sub	sp, #36	; 0x24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f1c3 0307 	rsb	r3, r3, #7
 80058fe:	2b04      	cmp	r3, #4
 8005900:	bf28      	it	cs
 8005902:	2304      	movcs	r3, #4
 8005904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	3304      	adds	r3, #4
 800590a:	2b06      	cmp	r3, #6
 800590c:	d902      	bls.n	8005914 <NVIC_EncodePriority+0x30>
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	3b03      	subs	r3, #3
 8005912:	e000      	b.n	8005916 <NVIC_EncodePriority+0x32>
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005918:	2201      	movs	r2, #1
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	1e5a      	subs	r2, r3, #1
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	401a      	ands	r2, r3
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800592a:	2101      	movs	r1, #1
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	fa01 f303 	lsl.w	r3, r1, r3
 8005932:	1e59      	subs	r1, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005938:	4313      	orrs	r3, r2
}
 800593a:	4618      	mov	r0, r3
 800593c:	3724      	adds	r7, #36	; 0x24
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr

08005944 <LL_APB2_GRP1_EnableClock>:
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800594c:	4908      	ldr	r1, [pc, #32]	; (8005970 <LL_APB2_GRP1_EnableClock+0x2c>)
 800594e:	4b08      	ldr	r3, [pc, #32]	; (8005970 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4313      	orrs	r3, r2
 8005956:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <LL_APB2_GRP1_EnableClock+0x2c>)
 800595a:	699a      	ldr	r2, [r3, #24]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4013      	ands	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005962:	68fb      	ldr	r3, [r7, #12]
}
 8005964:	bf00      	nop
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	bc80      	pop	{r7}
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40021000 	.word	0x40021000

08005974 <LL_USART_Enable>:
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	60da      	str	r2, [r3, #12]
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr

08005992 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	615a      	str	r2, [r3, #20]
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0320 	and.w	r3, r3, #32
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	bf0c      	ite	eq
 80059d0:	2301      	moveq	r3, #1
 80059d2:	2300      	movne	r3, #0
 80059d4:	b2db      	uxtb	r3, r3
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f0:	2b40      	cmp	r3, #64	; 0x40
 80059f2:	bf0c      	ite	eq
 80059f4:	2301      	moveq	r3, #1
 80059f6:	2300      	movne	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr

08005a04 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f043 0220 	orr.w	r2, r3, #32
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	60da      	str	r2, [r3, #12]
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bc80      	pop	{r7}
 8005a20:	4770      	bx	lr

08005a22 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f043 0201 	orr.w	r2, r3, #1
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	615a      	str	r2, [r3, #20]
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr

08005a40 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	bf0c      	ite	eq
 8005a54:	2301      	moveq	r3, #1
 8005a56:	2300      	movne	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr

08005a64 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	b2db      	uxtb	r3, r3
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr

08005a7c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8005a88:	78fa      	ldrb	r2, [r7, #3]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	605a      	str	r2, [r3, #4]
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr

08005a98 <LL_GPIO_SetOutputPin>:
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	0a1b      	lsrs	r3, r3, #8
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	611a      	str	r2, [r3, #16]
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bc80      	pop	{r7}
 8005ab4:	4770      	bx	lr

08005ab6 <LL_GPIO_ResetOutputPin>:
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	0a1b      	lsrs	r3, r3, #8
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	615a      	str	r2, [r3, #20]
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr

08005ad4 <USART_SendData_byte>:
#include "ring_buffer.h"

//char uart_rx_buffer[512];

void USART_SendData_byte(char data)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART1, data);
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4807      	ldr	r0, [pc, #28]	; (8005b00 <USART_SendData_byte+0x2c>)
 8005ae4:	f7ff ffca 	bl	8005a7c <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TC(USART1));
 8005ae8:	bf00      	nop
 8005aea:	4805      	ldr	r0, [pc, #20]	; (8005b00 <USART_SendData_byte+0x2c>)
 8005aec:	f7ff ff78 	bl	80059e0 <LL_USART_IsActiveFlag_TC>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f9      	beq.n	8005aea <USART_SendData_byte+0x16>
}
 8005af6:	bf00      	nop
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40013800 	.word	0x40013800

08005b04 <USART_SendData>:

void USART_SendData(char * data, uint32_t data_length)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < data_length; i++)
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	e014      	b.n	8005b3e <USART_SendData+0x3a>
	{
		LL_USART_TransmitData8(USART1, data[i]);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4413      	add	r3, r2
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	480c      	ldr	r0, [pc, #48]	; (8005b50 <USART_SendData+0x4c>)
 8005b20:	f7ff ffac 	bl	8005a7c <LL_USART_TransmitData8>
		LL_mDelay(2);
 8005b24:	2002      	movs	r0, #2
 8005b26:	f7fc fc6d 	bl	8002404 <LL_mDelay>
		while (!LL_USART_IsActiveFlag_TC(USART1));
 8005b2a:	bf00      	nop
 8005b2c:	4808      	ldr	r0, [pc, #32]	; (8005b50 <USART_SendData+0x4c>)
 8005b2e:	f7ff ff57 	bl	80059e0 <LL_USART_IsActiveFlag_TC>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0f9      	beq.n	8005b2c <USART_SendData+0x28>
	for(int i = 0; i < data_length; i++)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d3e6      	bcc.n	8005b14 <USART_SendData+0x10>
	}
}
 8005b46:	bf00      	nop
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	40013800 	.word	0x40013800

08005b54 <USART_CharReception_Callback>:

void USART_CharReception_Callback(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
	__IO uint32_t received_char;
	received_char = LL_USART_ReceiveData8(USART1);
 8005b5a:	4807      	ldr	r0, [pc, #28]	; (8005b78 <USART_CharReception_Callback+0x24>)
 8005b5c:	f7ff ff82 	bl	8005a64 <LL_USART_ReceiveData8>
 8005b60:	4603      	mov	r3, r0
 8005b62:	607b      	str	r3, [r7, #4]

	RingBuff_Push(received_char);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fb f8f5 	bl	8000d58 <RingBuff_Push>
  //LL_USART_TransmitData8(USART1, received_char);
}
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40013800 	.word	0x40013800

08005b7c <Error_Callback>:

void Error_Callback(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
  __IO uint32_t sr_reg;

  NVIC_DisableIRQ(USART1_IRQn);
 8005b82:	2025      	movs	r0, #37	; 0x25
 8005b84:	f7ff fe6a 	bl	800585c <NVIC_DisableIRQ>

  sr_reg = LL_USART_ReadReg(USART1, SR);
 8005b88:	4b03      	ldr	r3, [pc, #12]	; (8005b98 <Error_Callback+0x1c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	607b      	str	r3, [r7, #4]
  if (sr_reg & LL_USART_SR_NE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
  {

  }
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	40013800 	.word	0x40013800

08005b9c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  if(LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
 8005ba0:	4809      	ldr	r0, [pc, #36]	; (8005bc8 <USART1_IRQHandler+0x2c>)
 8005ba2:	f7ff ff0b 	bl	80059bc <LL_USART_IsActiveFlag_RXNE>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d008      	beq.n	8005bbe <USART1_IRQHandler+0x22>
 8005bac:	4806      	ldr	r0, [pc, #24]	; (8005bc8 <USART1_IRQHandler+0x2c>)
 8005bae:	f7ff ff47 	bl	8005a40 <LL_USART_IsEnabledIT_RXNE>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <USART1_IRQHandler+0x22>
  {
    USART_CharReception_Callback();
 8005bb8:	f7ff ffcc 	bl	8005b54 <USART_CharReception_Callback>
 8005bbc:	e001      	b.n	8005bc2 <USART1_IRQHandler+0x26>
  }
  else
  {
    Error_Callback();
 8005bbe:	f7ff ffdd 	bl	8005b7c <Error_Callback>
  }
}
 8005bc2:	bf00      	nop
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40013800 	.word	0x40013800

08005bcc <USART1_Device_Reset>:

void USART1_Device_Reset(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8005bd0:	4906      	ldr	r1, [pc, #24]	; (8005bec <USART1_Device_Reset+0x20>)
 8005bd2:	4807      	ldr	r0, [pc, #28]	; (8005bf0 <USART1_Device_Reset+0x24>)
 8005bd4:	f7ff ff6f 	bl	8005ab6 <LL_GPIO_ResetOutputPin>
	LL_mDelay(100);
 8005bd8:	2064      	movs	r0, #100	; 0x64
 8005bda:	f7fc fc13 	bl	8002404 <LL_mDelay>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8005bde:	4903      	ldr	r1, [pc, #12]	; (8005bec <USART1_Device_Reset+0x20>)
 8005be0:	4803      	ldr	r0, [pc, #12]	; (8005bf0 <USART1_Device_Reset+0x24>)
 8005be2:	f7ff ff59 	bl	8005a98 <LL_GPIO_SetOutputPin>
}
 8005be6:	bf00      	nop
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	04010001 	.word	0x04010001
 8005bf0:	40010800 	.word	0x40010800

08005bf4 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08c      	sub	sp, #48	; 0x30
 8005bf8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005bfa:	f107 0318 	add.w	r3, r7, #24
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	605a      	str	r2, [r3, #4]
 8005c04:	609a      	str	r2, [r3, #8]
 8005c06:	60da      	str	r2, [r3, #12]
 8005c08:	611a      	str	r2, [r3, #16]
 8005c0a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c0c:	1d3b      	adds	r3, r7, #4
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	605a      	str	r2, [r3, #4]
 8005c14:	609a      	str	r2, [r3, #8]
 8005c16:	60da      	str	r2, [r3, #12]
 8005c18:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8005c1a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005c1e:	f7ff fe91 	bl	8005944 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8005c22:	2004      	movs	r0, #4
 8005c24:	f7ff fe8e 	bl	8005944 <LL_APB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8005c28:	4b30      	ldr	r3, [pc, #192]	; (8005cec <MX_USART1_UART_Init+0xf8>)
 8005c2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005c2c:	2309      	movs	r3, #9
 8005c2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005c30:	2303      	movs	r3, #3
 8005c32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c3c:	1d3b      	adds	r3, r7, #4
 8005c3e:	4619      	mov	r1, r3
 8005c40:	482b      	ldr	r0, [pc, #172]	; (8005cf0 <MX_USART1_UART_Init+0xfc>)
 8005c42:	f7fb feae 	bl	80019a2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8005c46:	4b2b      	ldr	r3, [pc, #172]	; (8005cf4 <MX_USART1_UART_Init+0x100>)
 8005c48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8005c4a:	2304      	movs	r3, #4
 8005c4c:	60bb      	str	r3, [r7, #8]

  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005c52:	2301      	movs	r3, #1
 8005c54:	617b      	str	r3, [r7, #20]

  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c56:	1d3b      	adds	r3, r7, #4
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4825      	ldr	r0, [pc, #148]	; (8005cf0 <MX_USART1_UART_Init+0xfc>)
 8005c5c:	f7fb fea1 	bl	80019a2 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005c60:	f7ff fdd6 	bl	8005810 <NVIC_GetPriorityGrouping>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2200      	movs	r2, #0
 8005c68:	2100      	movs	r1, #0
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff fe3a 	bl	80058e4 <NVIC_EncodePriority>
 8005c70:	4603      	mov	r3, r0
 8005c72:	4619      	mov	r1, r3
 8005c74:	2025      	movs	r0, #37	; 0x25
 8005c76:	f7ff fe0b 	bl	8005890 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8005c7a:	2025      	movs	r0, #37	; 0x25
 8005c7c:	f7ff fdd6 	bl	800582c <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8005c80:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005c84:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005c92:	230c      	movs	r3, #12
 8005c94:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005c96:	2300      	movs	r3, #0
 8005c98:	62fb      	str	r3, [r7, #44]	; 0x2c

  LL_USART_Init(USART1, &USART_InitStruct);
 8005c9a:	f107 0318 	add.w	r3, r7, #24
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4815      	ldr	r0, [pc, #84]	; (8005cf8 <MX_USART1_UART_Init+0x104>)
 8005ca2:	f7fc fb27 	bl	80022f4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8005ca6:	4814      	ldr	r0, [pc, #80]	; (8005cf8 <MX_USART1_UART_Init+0x104>)
 8005ca8:	f7ff fe73 	bl	8005992 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8005cac:	4812      	ldr	r0, [pc, #72]	; (8005cf8 <MX_USART1_UART_Init+0x104>)
 8005cae:	f7ff fe61 	bl	8005974 <LL_USART_Enable>

  LL_USART_EnableIT_RXNE(USART1);
 8005cb2:	4811      	ldr	r0, [pc, #68]	; (8005cf8 <MX_USART1_UART_Init+0x104>)
 8005cb4:	f7ff fea6 	bl	8005a04 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_ERROR(USART1);
 8005cb8:	480f      	ldr	r0, [pc, #60]	; (8005cf8 <MX_USART1_UART_Init+0x104>)
 8005cba:	f7ff feb2 	bl	8005a22 <LL_USART_EnableIT_ERROR>

  //Reset gpio
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8005cbe:	4b0f      	ldr	r3, [pc, #60]	; (8005cfc <MX_USART1_UART_Init+0x108>)
 8005cc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cd2:	1d3b      	adds	r3, r7, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4806      	ldr	r0, [pc, #24]	; (8005cf0 <MX_USART1_UART_Init+0xfc>)
 8005cd8:	f7fb fe63 	bl	80019a2 <LL_GPIO_Init>

  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8005cdc:	4907      	ldr	r1, [pc, #28]	; (8005cfc <MX_USART1_UART_Init+0x108>)
 8005cde:	4804      	ldr	r0, [pc, #16]	; (8005cf0 <MX_USART1_UART_Init+0xfc>)
 8005ce0:	f7ff feda 	bl	8005a98 <LL_GPIO_SetOutputPin>
}
 8005ce4:	bf00      	nop
 8005ce6:	3730      	adds	r7, #48	; 0x30
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	04020002 	.word	0x04020002
 8005cf0:	40010800 	.word	0x40010800
 8005cf4:	04040004 	.word	0x04040004
 8005cf8:	40013800 	.word	0x40013800
 8005cfc:	04010001 	.word	0x04010001

08005d00 <MX_FREERTOS_Init>:
//
//	int free_heap = xPortGetFreeHeapSize();
//}
//#pragma GCC pop_options

void MX_FREERTOS_Init(void) {
 8005d00:	b5b0      	push	{r4, r5, r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0

  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8005d06:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <MX_FREERTOS_Init+0x44>)
 8005d08:	1d3c      	adds	r4, r7, #4
 8005d0a:	461d      	mov	r5, r3
 8005d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d10:	682b      	ldr	r3, [r5, #0]
 8005d12:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005d14:	1d3b      	adds	r3, r7, #4
 8005d16:	2100      	movs	r1, #0
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fc fbc3 	bl	80024a4 <osThreadCreate>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	4b09      	ldr	r3, [pc, #36]	; (8005d48 <MX_FREERTOS_Init+0x48>)
 8005d22:	601a      	str	r2, [r3, #0]

  EncoderQueueInit();
 8005d24:	f7fe fe30 	bl	8004988 <EncoderQueueInit>
  LDRQueueInit();
 8005d28:	f7ff f9d6 	bl	80050d8 <LDRQueueInit>

  LedTaskInit();
 8005d2c:	f7ff fcde 	bl	80056ec <LedTaskInit>
  LDRTaskInit();
 8005d30:	f7ff fa2a 	bl	8005188 <LDRTaskInit>
  EncoderTaskInit();
 8005d34:	f7fe fec2 	bl	8004abc <EncoderTaskInit>
  ESPTaskInit();
 8005d38:	f7fe ff64 	bl	8004c04 <ESPTaskInit>

  //TakeStackSize();

}
 8005d3c:	bf00      	nop
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bdb0      	pop	{r4, r5, r7, pc}
 8005d44:	08006e28 	.word	0x08006e28
 8005d48:	20003020 	.word	0x20003020

08005d4c <StartDefaultTask>:

void StartDefaultTask(void const * argument)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8005d54:	2001      	movs	r0, #1
 8005d56:	f7fc fbcc 	bl	80024f2 <osDelay>
 8005d5a:	e7fb      	b.n	8005d54 <StartDefaultTask+0x8>

08005d5c <LL_RCC_HSE_Enable>:
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005d60:	4a04      	ldr	r2, [pc, #16]	; (8005d74 <LL_RCC_HSE_Enable+0x18>)
 8005d62:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <LL_RCC_HSE_Enable+0x18>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d6a:	6013      	str	r3, [r2, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr
 8005d74:	40021000 	.word	0x40021000

08005d78 <LL_RCC_HSE_IsReady>:
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <LL_RCC_HSE_IsReady+0x20>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d88:	bf0c      	ite	eq
 8005d8a:	2301      	moveq	r3, #1
 8005d8c:	2300      	movne	r3, #0
 8005d8e:	b2db      	uxtb	r3, r3
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bc80      	pop	{r7}
 8005d96:	4770      	bx	lr
 8005d98:	40021000 	.word	0x40021000

08005d9c <LL_RCC_SetSysClkSource>:
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005da4:	4906      	ldr	r1, [pc, #24]	; (8005dc0 <LL_RCC_SetSysClkSource+0x24>)
 8005da6:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <LL_RCC_SetSysClkSource+0x24>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f023 0203 	bic.w	r2, r3, #3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	604b      	str	r3, [r1, #4]
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bc80      	pop	{r7}
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40021000 	.word	0x40021000

08005dc4 <LL_RCC_GetSysClkSource>:
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005dc8:	4b03      	ldr	r3, [pc, #12]	; (8005dd8 <LL_RCC_GetSysClkSource+0x14>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f003 030c 	and.w	r3, r3, #12
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bc80      	pop	{r7}
 8005dd6:	4770      	bx	lr
 8005dd8:	40021000 	.word	0x40021000

08005ddc <LL_RCC_SetAHBPrescaler>:
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005de4:	4906      	ldr	r1, [pc, #24]	; (8005e00 <LL_RCC_SetAHBPrescaler+0x24>)
 8005de6:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <LL_RCC_SetAHBPrescaler+0x24>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	604b      	str	r3, [r1, #4]
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40021000 	.word	0x40021000

08005e04 <LL_RCC_SetAPB1Prescaler>:
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005e0c:	4906      	ldr	r1, [pc, #24]	; (8005e28 <LL_RCC_SetAPB1Prescaler+0x24>)
 8005e0e:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <LL_RCC_SetAPB1Prescaler+0x24>)
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	604b      	str	r3, [r1, #4]
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bc80      	pop	{r7}
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40021000 	.word	0x40021000

08005e2c <LL_RCC_SetAPB2Prescaler>:
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005e34:	4906      	ldr	r1, [pc, #24]	; (8005e50 <LL_RCC_SetAPB2Prescaler+0x24>)
 8005e36:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <LL_RCC_SetAPB2Prescaler+0x24>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	604b      	str	r3, [r1, #4]
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40021000 	.word	0x40021000

08005e54 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8005e5c:	4906      	ldr	r1, [pc, #24]	; (8005e78 <LL_FLASH_SetLatency+0x24>)
 8005e5e:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <LL_FLASH_SetLatency+0x24>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f023 0207 	bic.w	r2, r3, #7
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	600b      	str	r3, [r1, #0]
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bc80      	pop	{r7}
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40022000 	.word	0x40022000

08005e7c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8005e80:	4b03      	ldr	r3, [pc, #12]	; (8005e90 <LL_FLASH_GetLatency+0x14>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0307 	and.w	r3, r3, #7
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bc80      	pop	{r7}
 8005e8e:	4770      	bx	lr
 8005e90:	40022000 	.word	0x40022000

08005e94 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d106      	bne.n	8005eb0 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8005ea2:	4a09      	ldr	r2, [pc, #36]	; (8005ec8 <LL_SYSTICK_SetClkSource+0x34>)
 8005ea4:	4b08      	ldr	r3, [pc, #32]	; (8005ec8 <LL_SYSTICK_SetClkSource+0x34>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f043 0304 	orr.w	r3, r3, #4
 8005eac:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8005eae:	e005      	b.n	8005ebc <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8005eb0:	4a05      	ldr	r2, [pc, #20]	; (8005ec8 <LL_SYSTICK_SetClkSource+0x34>)
 8005eb2:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <LL_SYSTICK_SetClkSource+0x34>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f023 0304 	bic.w	r3, r3, #4
 8005eba:	6013      	str	r3, [r2, #0]
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	e000e010 	.word	0xe000e010

08005ecc <main>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);

int main(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  HAL_Init();
 8005ed0:	f7fa ffa6 	bl	8000e20 <HAL_Init>
  SystemClock_Config();
 8005ed4:	f000 f806 	bl	8005ee4 <SystemClock_Config>
  MX_FREERTOS_Init();
 8005ed8:	f7ff ff12 	bl	8005d00 <MX_FREERTOS_Init>

  osKernelStart();
 8005edc:	f7fc fadb 	bl	8002496 <osKernelStart>

  while (1)
 8005ee0:	e7fe      	b.n	8005ee0 <main+0x14>
	...

08005ee4 <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8005ee8:	2000      	movs	r0, #0
 8005eea:	f7ff ffb3 	bl	8005e54 <LL_FLASH_SetLatency>

    if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8005eee:	f7ff ffc5 	bl	8005e7c <LL_FLASH_GetLatency>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <SystemClock_Config+0x18>
    {
      Error_Handler();
 8005ef8:	f000 f83a 	bl	8005f70 <Error_Handler>
    }
    LL_RCC_HSE_Enable();
 8005efc:	f7ff ff2e 	bl	8005d5c <LL_RCC_HSE_Enable>

    while(LL_RCC_HSE_IsReady() != 1)
 8005f00:	bf00      	nop
 8005f02:	f7ff ff39 	bl	8005d78 <LL_RCC_HSE_IsReady>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d1fa      	bne.n	8005f02 <SystemClock_Config+0x1e>
    {

    }
    LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	f7ff ff65 	bl	8005ddc <LL_RCC_SetAHBPrescaler>
    LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8005f12:	2000      	movs	r0, #0
 8005f14:	f7ff ff76 	bl	8005e04 <LL_RCC_SetAPB1Prescaler>
    LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8005f18:	2000      	movs	r0, #0
 8005f1a:	f7ff ff87 	bl	8005e2c <LL_RCC_SetAPB2Prescaler>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8005f1e:	2001      	movs	r0, #1
 8005f20:	f7ff ff3c 	bl	8005d9c <LL_RCC_SetSysClkSource>

    while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)
 8005f24:	bf00      	nop
 8005f26:	f7ff ff4d 	bl	8005dc4 <LL_RCC_GetSysClkSource>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	d1fa      	bne.n	8005f26 <SystemClock_Config+0x42>
    {
    
    }
    LL_Init1msTick(8000000);
 8005f30:	4805      	ldr	r0, [pc, #20]	; (8005f48 <SystemClock_Config+0x64>)
 8005f32:	f7fc fa59 	bl	80023e8 <LL_Init1msTick>
    LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8005f36:	2004      	movs	r0, #4
 8005f38:	f7ff ffac 	bl	8005e94 <LL_SYSTICK_SetClkSource>
    LL_SetSystemCoreClock(8000000);
 8005f3c:	4802      	ldr	r0, [pc, #8]	; (8005f48 <SystemClock_Config+0x64>)
 8005f3e:	f7fc fa85 	bl	800244c <LL_SetSystemCoreClock>
}
 8005f42:	bf00      	nop
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	007a1200 	.word	0x007a1200

08005f4c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a04      	ldr	r2, [pc, #16]	; (8005f6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d101      	bne.n	8005f62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005f5e:	f7fa ff75 	bl	8000e4c <HAL_IncTick>
  }
}
 8005f62:	bf00      	nop
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	40012c00 	.word	0x40012c00

08005f70 <Error_Handler>:

void Error_Handler(void)
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0

}
 8005f74:	bf00      	nop
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr

08005f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005f82:	4a18      	ldr	r2, [pc, #96]	; (8005fe4 <HAL_MspInit+0x68>)
 8005f84:	4b17      	ldr	r3, [pc, #92]	; (8005fe4 <HAL_MspInit+0x68>)
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	6193      	str	r3, [r2, #24]
 8005f8e:	4b15      	ldr	r3, [pc, #84]	; (8005fe4 <HAL_MspInit+0x68>)
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	60bb      	str	r3, [r7, #8]
 8005f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f9a:	4a12      	ldr	r2, [pc, #72]	; (8005fe4 <HAL_MspInit+0x68>)
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <HAL_MspInit+0x68>)
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	61d3      	str	r3, [r2, #28]
 8005fa6:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <HAL_MspInit+0x68>)
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fae:	607b      	str	r3, [r7, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	210f      	movs	r1, #15
 8005fb6:	f06f 0001 	mvn.w	r0, #1
 8005fba:	f7fb f808 	bl	8000fce <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005fbe:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <HAL_MspInit+0x6c>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	4a04      	ldr	r2, [pc, #16]	; (8005fe8 <HAL_MspInit+0x6c>)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fda:	bf00      	nop
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	40010000 	.word	0x40010000

08005fec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b08c      	sub	sp, #48	; 0x30
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	2019      	movs	r0, #25
 8006002:	f7fa ffe4 	bl	8000fce <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8006006:	2019      	movs	r0, #25
 8006008:	f7fa fffd 	bl	8001006 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800600c:	4a1e      	ldr	r2, [pc, #120]	; (8006088 <HAL_InitTick+0x9c>)
 800600e:	4b1e      	ldr	r3, [pc, #120]	; (8006088 <HAL_InitTick+0x9c>)
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006016:	6193      	str	r3, [r2, #24]
 8006018:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <HAL_InitTick+0x9c>)
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006024:	f107 0210 	add.w	r2, r7, #16
 8006028:	f107 0314 	add.w	r3, r7, #20
 800602c:	4611      	mov	r1, r2
 800602e:	4618      	mov	r0, r3
 8006030:	f7fb f816 	bl	8001060 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006034:	f7fb f800 	bl	8001038 <HAL_RCC_GetPCLK2Freq>
 8006038:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603c:	4a13      	ldr	r2, [pc, #76]	; (800608c <HAL_InitTick+0xa0>)
 800603e:	fba2 2303 	umull	r2, r3, r2, r3
 8006042:	0c9b      	lsrs	r3, r3, #18
 8006044:	3b01      	subs	r3, #1
 8006046:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006048:	4b11      	ldr	r3, [pc, #68]	; (8006090 <HAL_InitTick+0xa4>)
 800604a:	4a12      	ldr	r2, [pc, #72]	; (8006094 <HAL_InitTick+0xa8>)
 800604c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800604e:	4b10      	ldr	r3, [pc, #64]	; (8006090 <HAL_InitTick+0xa4>)
 8006050:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006054:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8006056:	4a0e      	ldr	r2, [pc, #56]	; (8006090 <HAL_InitTick+0xa4>)
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800605c:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <HAL_InitTick+0xa4>)
 800605e:	2200      	movs	r2, #0
 8006060:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006062:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <HAL_InitTick+0xa4>)
 8006064:	2200      	movs	r2, #0
 8006066:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8006068:	4809      	ldr	r0, [pc, #36]	; (8006090 <HAL_InitTick+0xa4>)
 800606a:	f7fb f829 	bl	80010c0 <HAL_TIM_Base_Init>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d104      	bne.n	800607e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8006074:	4806      	ldr	r0, [pc, #24]	; (8006090 <HAL_InitTick+0xa4>)
 8006076:	f7fb f857 	bl	8001128 <HAL_TIM_Base_Start_IT>
 800607a:	4603      	mov	r3, r0
 800607c:	e000      	b.n	8006080 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
}
 8006080:	4618      	mov	r0, r3
 8006082:	3730      	adds	r7, #48	; 0x30
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40021000 	.word	0x40021000
 800608c:	431bde83 	.word	0x431bde83
 8006090:	20003024 	.word	0x20003024
 8006094:	40012c00 	.word	0x40012c00

08006098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800609c:	bf00      	nop
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr

080060a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80060a8:	e7fe      	b.n	80060a8 <HardFault_Handler+0x4>

080060aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060aa:	b480      	push	{r7}
 80060ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80060ae:	e7fe      	b.n	80060ae <MemManage_Handler+0x4>

080060b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80060b4:	e7fe      	b.n	80060b4 <BusFault_Handler+0x4>

080060b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80060b6:	b480      	push	{r7}
 80060b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80060ba:	e7fe      	b.n	80060ba <UsageFault_Handler+0x4>

080060bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80060c0:	bf00      	nop
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr

080060c8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80060cc:	4802      	ldr	r0, [pc, #8]	; (80060d8 <TIM1_UP_IRQHandler+0x10>)
 80060ce:	f7fb f845 	bl	800115c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80060d2:	bf00      	nop
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20003024 	.word	0x20003024

080060dc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80060e4:	4b11      	ldr	r3, [pc, #68]	; (800612c <_sbrk+0x50>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <_sbrk+0x16>
		heap_end = &end;
 80060ec:	4b0f      	ldr	r3, [pc, #60]	; (800612c <_sbrk+0x50>)
 80060ee:	4a10      	ldr	r2, [pc, #64]	; (8006130 <_sbrk+0x54>)
 80060f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80060f2:	4b0e      	ldr	r3, [pc, #56]	; (800612c <_sbrk+0x50>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <_sbrk+0x50>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4413      	add	r3, r2
 8006100:	466a      	mov	r2, sp
 8006102:	4293      	cmp	r3, r2
 8006104:	d907      	bls.n	8006116 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006106:	f000 f86f 	bl	80061e8 <__errno>
 800610a:	4602      	mov	r2, r0
 800610c:	230c      	movs	r3, #12
 800610e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006110:	f04f 33ff 	mov.w	r3, #4294967295
 8006114:	e006      	b.n	8006124 <_sbrk+0x48>
	}

	heap_end += incr;
 8006116:	4b05      	ldr	r3, [pc, #20]	; (800612c <_sbrk+0x50>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4413      	add	r3, r2
 800611e:	4a03      	ldr	r2, [pc, #12]	; (800612c <_sbrk+0x50>)
 8006120:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006122:	68fb      	ldr	r3, [r7, #12]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20002364 	.word	0x20002364
 8006130:	20003068 	.word	0x20003068

08006134 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006138:	4a15      	ldr	r2, [pc, #84]	; (8006190 <SystemInit+0x5c>)
 800613a:	4b15      	ldr	r3, [pc, #84]	; (8006190 <SystemInit+0x5c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f043 0301 	orr.w	r3, r3, #1
 8006142:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006144:	4912      	ldr	r1, [pc, #72]	; (8006190 <SystemInit+0x5c>)
 8006146:	4b12      	ldr	r3, [pc, #72]	; (8006190 <SystemInit+0x5c>)
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	4b12      	ldr	r3, [pc, #72]	; (8006194 <SystemInit+0x60>)
 800614c:	4013      	ands	r3, r2
 800614e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006150:	4a0f      	ldr	r2, [pc, #60]	; (8006190 <SystemInit+0x5c>)
 8006152:	4b0f      	ldr	r3, [pc, #60]	; (8006190 <SystemInit+0x5c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800615a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800615e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006160:	4a0b      	ldr	r2, [pc, #44]	; (8006190 <SystemInit+0x5c>)
 8006162:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <SystemInit+0x5c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800616a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800616c:	4a08      	ldr	r2, [pc, #32]	; (8006190 <SystemInit+0x5c>)
 800616e:	4b08      	ldr	r3, [pc, #32]	; (8006190 <SystemInit+0x5c>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006176:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006178:	4b05      	ldr	r3, [pc, #20]	; (8006190 <SystemInit+0x5c>)
 800617a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800617e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006180:	4b05      	ldr	r3, [pc, #20]	; (8006198 <SystemInit+0x64>)
 8006182:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006186:	609a      	str	r2, [r3, #8]
#endif 
}
 8006188:	bf00      	nop
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr
 8006190:	40021000 	.word	0x40021000
 8006194:	f8ff0000 	.word	0xf8ff0000
 8006198:	e000ed00 	.word	0xe000ed00

0800619c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800619c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800619e:	e003      	b.n	80061a8 <LoopCopyDataInit>

080061a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80061a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80061a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80061a6:	3104      	adds	r1, #4

080061a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80061a8:	480a      	ldr	r0, [pc, #40]	; (80061d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80061aa:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80061ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80061ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80061b0:	d3f6      	bcc.n	80061a0 <CopyDataInit>
  ldr r2, =_sbss
 80061b2:	4a0a      	ldr	r2, [pc, #40]	; (80061dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80061b4:	e002      	b.n	80061bc <LoopFillZerobss>

080061b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80061b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80061b8:	f842 3b04 	str.w	r3, [r2], #4

080061bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80061bc:	4b08      	ldr	r3, [pc, #32]	; (80061e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80061be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80061c0:	d3f9      	bcc.n	80061b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80061c2:	f7ff ffb7 	bl	8006134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80061c6:	f000 f815 	bl	80061f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80061ca:	f7ff fe7f 	bl	8005ecc <main>
  bx lr
 80061ce:	4770      	bx	lr
  ldr r3, =_sidata
 80061d0:	080073b0 	.word	0x080073b0
  ldr r0, =_sdata
 80061d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80061d8:	200001ec 	.word	0x200001ec
  ldr r2, =_sbss
 80061dc:	200001ec 	.word	0x200001ec
  ldr r3, = _ebss
 80061e0:	20003068 	.word	0x20003068

080061e4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80061e4:	e7fe      	b.n	80061e4 <CAN1_RX1_IRQHandler>
	...

080061e8 <__errno>:
 80061e8:	4b01      	ldr	r3, [pc, #4]	; (80061f0 <__errno+0x8>)
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	2000001c 	.word	0x2000001c

080061f4 <__libc_init_array>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	2500      	movs	r5, #0
 80061f8:	4e0c      	ldr	r6, [pc, #48]	; (800622c <__libc_init_array+0x38>)
 80061fa:	4c0d      	ldr	r4, [pc, #52]	; (8006230 <__libc_init_array+0x3c>)
 80061fc:	1ba4      	subs	r4, r4, r6
 80061fe:	10a4      	asrs	r4, r4, #2
 8006200:	42a5      	cmp	r5, r4
 8006202:	d109      	bne.n	8006218 <__libc_init_array+0x24>
 8006204:	f000 fd2a 	bl	8006c5c <_init>
 8006208:	2500      	movs	r5, #0
 800620a:	4e0a      	ldr	r6, [pc, #40]	; (8006234 <__libc_init_array+0x40>)
 800620c:	4c0a      	ldr	r4, [pc, #40]	; (8006238 <__libc_init_array+0x44>)
 800620e:	1ba4      	subs	r4, r4, r6
 8006210:	10a4      	asrs	r4, r4, #2
 8006212:	42a5      	cmp	r5, r4
 8006214:	d105      	bne.n	8006222 <__libc_init_array+0x2e>
 8006216:	bd70      	pop	{r4, r5, r6, pc}
 8006218:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800621c:	4798      	blx	r3
 800621e:	3501      	adds	r5, #1
 8006220:	e7ee      	b.n	8006200 <__libc_init_array+0xc>
 8006222:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006226:	4798      	blx	r3
 8006228:	3501      	adds	r5, #1
 800622a:	e7f2      	b.n	8006212 <__libc_init_array+0x1e>
 800622c:	080073a8 	.word	0x080073a8
 8006230:	080073a8 	.word	0x080073a8
 8006234:	080073a8 	.word	0x080073a8
 8006238:	080073ac 	.word	0x080073ac

0800623c <memcpy>:
 800623c:	b510      	push	{r4, lr}
 800623e:	1e43      	subs	r3, r0, #1
 8006240:	440a      	add	r2, r1
 8006242:	4291      	cmp	r1, r2
 8006244:	d100      	bne.n	8006248 <memcpy+0xc>
 8006246:	bd10      	pop	{r4, pc}
 8006248:	f811 4b01 	ldrb.w	r4, [r1], #1
 800624c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006250:	e7f7      	b.n	8006242 <memcpy+0x6>

08006252 <memset>:
 8006252:	4603      	mov	r3, r0
 8006254:	4402      	add	r2, r0
 8006256:	4293      	cmp	r3, r2
 8006258:	d100      	bne.n	800625c <memset+0xa>
 800625a:	4770      	bx	lr
 800625c:	f803 1b01 	strb.w	r1, [r3], #1
 8006260:	e7f9      	b.n	8006256 <memset+0x4>
	...

08006264 <siprintf>:
 8006264:	b40e      	push	{r1, r2, r3}
 8006266:	f44f 7102 	mov.w	r1, #520	; 0x208
 800626a:	b500      	push	{lr}
 800626c:	b09c      	sub	sp, #112	; 0x70
 800626e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006272:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006276:	9104      	str	r1, [sp, #16]
 8006278:	9107      	str	r1, [sp, #28]
 800627a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800627e:	ab1d      	add	r3, sp, #116	; 0x74
 8006280:	9002      	str	r0, [sp, #8]
 8006282:	9006      	str	r0, [sp, #24]
 8006284:	4808      	ldr	r0, [pc, #32]	; (80062a8 <siprintf+0x44>)
 8006286:	f853 2b04 	ldr.w	r2, [r3], #4
 800628a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800628e:	6800      	ldr	r0, [r0, #0]
 8006290:	a902      	add	r1, sp, #8
 8006292:	9301      	str	r3, [sp, #4]
 8006294:	f000 f934 	bl	8006500 <_svfiprintf_r>
 8006298:	2200      	movs	r2, #0
 800629a:	9b02      	ldr	r3, [sp, #8]
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	b01c      	add	sp, #112	; 0x70
 80062a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80062a4:	b003      	add	sp, #12
 80062a6:	4770      	bx	lr
 80062a8:	2000001c 	.word	0x2000001c

080062ac <strcpy>:
 80062ac:	4603      	mov	r3, r0
 80062ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062b2:	f803 2b01 	strb.w	r2, [r3], #1
 80062b6:	2a00      	cmp	r2, #0
 80062b8:	d1f9      	bne.n	80062ae <strcpy+0x2>
 80062ba:	4770      	bx	lr

080062bc <strstr>:
 80062bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062be:	7803      	ldrb	r3, [r0, #0]
 80062c0:	b133      	cbz	r3, 80062d0 <strstr+0x14>
 80062c2:	4603      	mov	r3, r0
 80062c4:	4618      	mov	r0, r3
 80062c6:	1c5e      	adds	r6, r3, #1
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	b933      	cbnz	r3, 80062da <strstr+0x1e>
 80062cc:	4618      	mov	r0, r3
 80062ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062d0:	780b      	ldrb	r3, [r1, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	bf18      	it	ne
 80062d6:	2000      	movne	r0, #0
 80062d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062da:	1e4d      	subs	r5, r1, #1
 80062dc:	1e44      	subs	r4, r0, #1
 80062de:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80062e2:	2a00      	cmp	r2, #0
 80062e4:	d0f3      	beq.n	80062ce <strstr+0x12>
 80062e6:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80062ea:	4633      	mov	r3, r6
 80062ec:	4297      	cmp	r7, r2
 80062ee:	d0f6      	beq.n	80062de <strstr+0x22>
 80062f0:	e7e8      	b.n	80062c4 <strstr+0x8>

080062f2 <_strtol_l.isra.0>:
 80062f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f6:	4680      	mov	r8, r0
 80062f8:	4689      	mov	r9, r1
 80062fa:	4692      	mov	sl, r2
 80062fc:	461f      	mov	r7, r3
 80062fe:	468b      	mov	fp, r1
 8006300:	465d      	mov	r5, fp
 8006302:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006304:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006308:	f000 f88a 	bl	8006420 <__locale_ctype_ptr_l>
 800630c:	4420      	add	r0, r4
 800630e:	7846      	ldrb	r6, [r0, #1]
 8006310:	f016 0608 	ands.w	r6, r6, #8
 8006314:	d10b      	bne.n	800632e <_strtol_l.isra.0+0x3c>
 8006316:	2c2d      	cmp	r4, #45	; 0x2d
 8006318:	d10b      	bne.n	8006332 <_strtol_l.isra.0+0x40>
 800631a:	2601      	movs	r6, #1
 800631c:	782c      	ldrb	r4, [r5, #0]
 800631e:	f10b 0502 	add.w	r5, fp, #2
 8006322:	b167      	cbz	r7, 800633e <_strtol_l.isra.0+0x4c>
 8006324:	2f10      	cmp	r7, #16
 8006326:	d114      	bne.n	8006352 <_strtol_l.isra.0+0x60>
 8006328:	2c30      	cmp	r4, #48	; 0x30
 800632a:	d00a      	beq.n	8006342 <_strtol_l.isra.0+0x50>
 800632c:	e011      	b.n	8006352 <_strtol_l.isra.0+0x60>
 800632e:	46ab      	mov	fp, r5
 8006330:	e7e6      	b.n	8006300 <_strtol_l.isra.0+0xe>
 8006332:	2c2b      	cmp	r4, #43	; 0x2b
 8006334:	bf04      	itt	eq
 8006336:	782c      	ldrbeq	r4, [r5, #0]
 8006338:	f10b 0502 	addeq.w	r5, fp, #2
 800633c:	e7f1      	b.n	8006322 <_strtol_l.isra.0+0x30>
 800633e:	2c30      	cmp	r4, #48	; 0x30
 8006340:	d127      	bne.n	8006392 <_strtol_l.isra.0+0xa0>
 8006342:	782b      	ldrb	r3, [r5, #0]
 8006344:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006348:	2b58      	cmp	r3, #88	; 0x58
 800634a:	d14b      	bne.n	80063e4 <_strtol_l.isra.0+0xf2>
 800634c:	2710      	movs	r7, #16
 800634e:	786c      	ldrb	r4, [r5, #1]
 8006350:	3502      	adds	r5, #2
 8006352:	2e00      	cmp	r6, #0
 8006354:	bf0c      	ite	eq
 8006356:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800635a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800635e:	2200      	movs	r2, #0
 8006360:	fbb1 fef7 	udiv	lr, r1, r7
 8006364:	4610      	mov	r0, r2
 8006366:	fb07 1c1e 	mls	ip, r7, lr, r1
 800636a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800636e:	2b09      	cmp	r3, #9
 8006370:	d811      	bhi.n	8006396 <_strtol_l.isra.0+0xa4>
 8006372:	461c      	mov	r4, r3
 8006374:	42a7      	cmp	r7, r4
 8006376:	dd1d      	ble.n	80063b4 <_strtol_l.isra.0+0xc2>
 8006378:	1c53      	adds	r3, r2, #1
 800637a:	d007      	beq.n	800638c <_strtol_l.isra.0+0x9a>
 800637c:	4586      	cmp	lr, r0
 800637e:	d316      	bcc.n	80063ae <_strtol_l.isra.0+0xbc>
 8006380:	d101      	bne.n	8006386 <_strtol_l.isra.0+0x94>
 8006382:	45a4      	cmp	ip, r4
 8006384:	db13      	blt.n	80063ae <_strtol_l.isra.0+0xbc>
 8006386:	2201      	movs	r2, #1
 8006388:	fb00 4007 	mla	r0, r0, r7, r4
 800638c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006390:	e7eb      	b.n	800636a <_strtol_l.isra.0+0x78>
 8006392:	270a      	movs	r7, #10
 8006394:	e7dd      	b.n	8006352 <_strtol_l.isra.0+0x60>
 8006396:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800639a:	2b19      	cmp	r3, #25
 800639c:	d801      	bhi.n	80063a2 <_strtol_l.isra.0+0xb0>
 800639e:	3c37      	subs	r4, #55	; 0x37
 80063a0:	e7e8      	b.n	8006374 <_strtol_l.isra.0+0x82>
 80063a2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80063a6:	2b19      	cmp	r3, #25
 80063a8:	d804      	bhi.n	80063b4 <_strtol_l.isra.0+0xc2>
 80063aa:	3c57      	subs	r4, #87	; 0x57
 80063ac:	e7e2      	b.n	8006374 <_strtol_l.isra.0+0x82>
 80063ae:	f04f 32ff 	mov.w	r2, #4294967295
 80063b2:	e7eb      	b.n	800638c <_strtol_l.isra.0+0x9a>
 80063b4:	1c53      	adds	r3, r2, #1
 80063b6:	d108      	bne.n	80063ca <_strtol_l.isra.0+0xd8>
 80063b8:	2322      	movs	r3, #34	; 0x22
 80063ba:	4608      	mov	r0, r1
 80063bc:	f8c8 3000 	str.w	r3, [r8]
 80063c0:	f1ba 0f00 	cmp.w	sl, #0
 80063c4:	d107      	bne.n	80063d6 <_strtol_l.isra.0+0xe4>
 80063c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ca:	b106      	cbz	r6, 80063ce <_strtol_l.isra.0+0xdc>
 80063cc:	4240      	negs	r0, r0
 80063ce:	f1ba 0f00 	cmp.w	sl, #0
 80063d2:	d00c      	beq.n	80063ee <_strtol_l.isra.0+0xfc>
 80063d4:	b122      	cbz	r2, 80063e0 <_strtol_l.isra.0+0xee>
 80063d6:	3d01      	subs	r5, #1
 80063d8:	f8ca 5000 	str.w	r5, [sl]
 80063dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e0:	464d      	mov	r5, r9
 80063e2:	e7f9      	b.n	80063d8 <_strtol_l.isra.0+0xe6>
 80063e4:	2430      	movs	r4, #48	; 0x30
 80063e6:	2f00      	cmp	r7, #0
 80063e8:	d1b3      	bne.n	8006352 <_strtol_l.isra.0+0x60>
 80063ea:	2708      	movs	r7, #8
 80063ec:	e7b1      	b.n	8006352 <_strtol_l.isra.0+0x60>
 80063ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080063f4 <strtol>:
 80063f4:	4b08      	ldr	r3, [pc, #32]	; (8006418 <strtol+0x24>)
 80063f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063f8:	681c      	ldr	r4, [r3, #0]
 80063fa:	4d08      	ldr	r5, [pc, #32]	; (800641c <strtol+0x28>)
 80063fc:	6a23      	ldr	r3, [r4, #32]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	bf08      	it	eq
 8006402:	462b      	moveq	r3, r5
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	4613      	mov	r3, r2
 8006408:	460a      	mov	r2, r1
 800640a:	4601      	mov	r1, r0
 800640c:	4620      	mov	r0, r4
 800640e:	f7ff ff70 	bl	80062f2 <_strtol_l.isra.0>
 8006412:	b003      	add	sp, #12
 8006414:	bd30      	pop	{r4, r5, pc}
 8006416:	bf00      	nop
 8006418:	2000001c 	.word	0x2000001c
 800641c:	20000080 	.word	0x20000080

08006420 <__locale_ctype_ptr_l>:
 8006420:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006424:	4770      	bx	lr

08006426 <__ascii_mbtowc>:
 8006426:	b082      	sub	sp, #8
 8006428:	b901      	cbnz	r1, 800642c <__ascii_mbtowc+0x6>
 800642a:	a901      	add	r1, sp, #4
 800642c:	b142      	cbz	r2, 8006440 <__ascii_mbtowc+0x1a>
 800642e:	b14b      	cbz	r3, 8006444 <__ascii_mbtowc+0x1e>
 8006430:	7813      	ldrb	r3, [r2, #0]
 8006432:	600b      	str	r3, [r1, #0]
 8006434:	7812      	ldrb	r2, [r2, #0]
 8006436:	1c10      	adds	r0, r2, #0
 8006438:	bf18      	it	ne
 800643a:	2001      	movne	r0, #1
 800643c:	b002      	add	sp, #8
 800643e:	4770      	bx	lr
 8006440:	4610      	mov	r0, r2
 8006442:	e7fb      	b.n	800643c <__ascii_mbtowc+0x16>
 8006444:	f06f 0001 	mvn.w	r0, #1
 8006448:	e7f8      	b.n	800643c <__ascii_mbtowc+0x16>

0800644a <__ssputs_r>:
 800644a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800644e:	688e      	ldr	r6, [r1, #8]
 8006450:	4682      	mov	sl, r0
 8006452:	429e      	cmp	r6, r3
 8006454:	460c      	mov	r4, r1
 8006456:	4691      	mov	r9, r2
 8006458:	4698      	mov	r8, r3
 800645a:	d835      	bhi.n	80064c8 <__ssputs_r+0x7e>
 800645c:	898a      	ldrh	r2, [r1, #12]
 800645e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006462:	d031      	beq.n	80064c8 <__ssputs_r+0x7e>
 8006464:	2302      	movs	r3, #2
 8006466:	6825      	ldr	r5, [r4, #0]
 8006468:	6909      	ldr	r1, [r1, #16]
 800646a:	1a6f      	subs	r7, r5, r1
 800646c:	6965      	ldr	r5, [r4, #20]
 800646e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006472:	fb95 f5f3 	sdiv	r5, r5, r3
 8006476:	f108 0301 	add.w	r3, r8, #1
 800647a:	443b      	add	r3, r7
 800647c:	429d      	cmp	r5, r3
 800647e:	bf38      	it	cc
 8006480:	461d      	movcc	r5, r3
 8006482:	0553      	lsls	r3, r2, #21
 8006484:	d531      	bpl.n	80064ea <__ssputs_r+0xa0>
 8006486:	4629      	mov	r1, r5
 8006488:	f000 fb48 	bl	8006b1c <_malloc_r>
 800648c:	4606      	mov	r6, r0
 800648e:	b950      	cbnz	r0, 80064a6 <__ssputs_r+0x5c>
 8006490:	230c      	movs	r3, #12
 8006492:	f8ca 3000 	str.w	r3, [sl]
 8006496:	89a3      	ldrh	r3, [r4, #12]
 8006498:	f04f 30ff 	mov.w	r0, #4294967295
 800649c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a0:	81a3      	strh	r3, [r4, #12]
 80064a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a6:	463a      	mov	r2, r7
 80064a8:	6921      	ldr	r1, [r4, #16]
 80064aa:	f7ff fec7 	bl	800623c <memcpy>
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b8:	81a3      	strh	r3, [r4, #12]
 80064ba:	6126      	str	r6, [r4, #16]
 80064bc:	443e      	add	r6, r7
 80064be:	6026      	str	r6, [r4, #0]
 80064c0:	4646      	mov	r6, r8
 80064c2:	6165      	str	r5, [r4, #20]
 80064c4:	1bed      	subs	r5, r5, r7
 80064c6:	60a5      	str	r5, [r4, #8]
 80064c8:	4546      	cmp	r6, r8
 80064ca:	bf28      	it	cs
 80064cc:	4646      	movcs	r6, r8
 80064ce:	4649      	mov	r1, r9
 80064d0:	4632      	mov	r2, r6
 80064d2:	6820      	ldr	r0, [r4, #0]
 80064d4:	f000 fabb 	bl	8006a4e <memmove>
 80064d8:	68a3      	ldr	r3, [r4, #8]
 80064da:	2000      	movs	r0, #0
 80064dc:	1b9b      	subs	r3, r3, r6
 80064de:	60a3      	str	r3, [r4, #8]
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	441e      	add	r6, r3
 80064e4:	6026      	str	r6, [r4, #0]
 80064e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ea:	462a      	mov	r2, r5
 80064ec:	f000 fb74 	bl	8006bd8 <_realloc_r>
 80064f0:	4606      	mov	r6, r0
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d1e1      	bne.n	80064ba <__ssputs_r+0x70>
 80064f6:	6921      	ldr	r1, [r4, #16]
 80064f8:	4650      	mov	r0, sl
 80064fa:	f000 fac3 	bl	8006a84 <_free_r>
 80064fe:	e7c7      	b.n	8006490 <__ssputs_r+0x46>

08006500 <_svfiprintf_r>:
 8006500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006504:	b09d      	sub	sp, #116	; 0x74
 8006506:	9303      	str	r3, [sp, #12]
 8006508:	898b      	ldrh	r3, [r1, #12]
 800650a:	4680      	mov	r8, r0
 800650c:	061c      	lsls	r4, r3, #24
 800650e:	460d      	mov	r5, r1
 8006510:	4616      	mov	r6, r2
 8006512:	d50f      	bpl.n	8006534 <_svfiprintf_r+0x34>
 8006514:	690b      	ldr	r3, [r1, #16]
 8006516:	b96b      	cbnz	r3, 8006534 <_svfiprintf_r+0x34>
 8006518:	2140      	movs	r1, #64	; 0x40
 800651a:	f000 faff 	bl	8006b1c <_malloc_r>
 800651e:	6028      	str	r0, [r5, #0]
 8006520:	6128      	str	r0, [r5, #16]
 8006522:	b928      	cbnz	r0, 8006530 <_svfiprintf_r+0x30>
 8006524:	230c      	movs	r3, #12
 8006526:	f8c8 3000 	str.w	r3, [r8]
 800652a:	f04f 30ff 	mov.w	r0, #4294967295
 800652e:	e0c4      	b.n	80066ba <_svfiprintf_r+0x1ba>
 8006530:	2340      	movs	r3, #64	; 0x40
 8006532:	616b      	str	r3, [r5, #20]
 8006534:	2300      	movs	r3, #0
 8006536:	9309      	str	r3, [sp, #36]	; 0x24
 8006538:	2320      	movs	r3, #32
 800653a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800653e:	2330      	movs	r3, #48	; 0x30
 8006540:	f04f 0b01 	mov.w	fp, #1
 8006544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006548:	4637      	mov	r7, r6
 800654a:	463c      	mov	r4, r7
 800654c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d13c      	bne.n	80065ce <_svfiprintf_r+0xce>
 8006554:	ebb7 0a06 	subs.w	sl, r7, r6
 8006558:	d00b      	beq.n	8006572 <_svfiprintf_r+0x72>
 800655a:	4653      	mov	r3, sl
 800655c:	4632      	mov	r2, r6
 800655e:	4629      	mov	r1, r5
 8006560:	4640      	mov	r0, r8
 8006562:	f7ff ff72 	bl	800644a <__ssputs_r>
 8006566:	3001      	adds	r0, #1
 8006568:	f000 80a2 	beq.w	80066b0 <_svfiprintf_r+0x1b0>
 800656c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800656e:	4453      	add	r3, sl
 8006570:	9309      	str	r3, [sp, #36]	; 0x24
 8006572:	783b      	ldrb	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 809b 	beq.w	80066b0 <_svfiprintf_r+0x1b0>
 800657a:	2300      	movs	r3, #0
 800657c:	f04f 32ff 	mov.w	r2, #4294967295
 8006580:	9304      	str	r3, [sp, #16]
 8006582:	9307      	str	r3, [sp, #28]
 8006584:	9205      	str	r2, [sp, #20]
 8006586:	9306      	str	r3, [sp, #24]
 8006588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800658c:	931a      	str	r3, [sp, #104]	; 0x68
 800658e:	2205      	movs	r2, #5
 8006590:	7821      	ldrb	r1, [r4, #0]
 8006592:	4850      	ldr	r0, [pc, #320]	; (80066d4 <_svfiprintf_r+0x1d4>)
 8006594:	f000 fa4d 	bl	8006a32 <memchr>
 8006598:	1c67      	adds	r7, r4, #1
 800659a:	9b04      	ldr	r3, [sp, #16]
 800659c:	b9d8      	cbnz	r0, 80065d6 <_svfiprintf_r+0xd6>
 800659e:	06d9      	lsls	r1, r3, #27
 80065a0:	bf44      	itt	mi
 80065a2:	2220      	movmi	r2, #32
 80065a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065a8:	071a      	lsls	r2, r3, #28
 80065aa:	bf44      	itt	mi
 80065ac:	222b      	movmi	r2, #43	; 0x2b
 80065ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065b2:	7822      	ldrb	r2, [r4, #0]
 80065b4:	2a2a      	cmp	r2, #42	; 0x2a
 80065b6:	d016      	beq.n	80065e6 <_svfiprintf_r+0xe6>
 80065b8:	2100      	movs	r1, #0
 80065ba:	200a      	movs	r0, #10
 80065bc:	9a07      	ldr	r2, [sp, #28]
 80065be:	4627      	mov	r7, r4
 80065c0:	783b      	ldrb	r3, [r7, #0]
 80065c2:	3401      	adds	r4, #1
 80065c4:	3b30      	subs	r3, #48	; 0x30
 80065c6:	2b09      	cmp	r3, #9
 80065c8:	d950      	bls.n	800666c <_svfiprintf_r+0x16c>
 80065ca:	b1c9      	cbz	r1, 8006600 <_svfiprintf_r+0x100>
 80065cc:	e011      	b.n	80065f2 <_svfiprintf_r+0xf2>
 80065ce:	2b25      	cmp	r3, #37	; 0x25
 80065d0:	d0c0      	beq.n	8006554 <_svfiprintf_r+0x54>
 80065d2:	4627      	mov	r7, r4
 80065d4:	e7b9      	b.n	800654a <_svfiprintf_r+0x4a>
 80065d6:	4a3f      	ldr	r2, [pc, #252]	; (80066d4 <_svfiprintf_r+0x1d4>)
 80065d8:	463c      	mov	r4, r7
 80065da:	1a80      	subs	r0, r0, r2
 80065dc:	fa0b f000 	lsl.w	r0, fp, r0
 80065e0:	4318      	orrs	r0, r3
 80065e2:	9004      	str	r0, [sp, #16]
 80065e4:	e7d3      	b.n	800658e <_svfiprintf_r+0x8e>
 80065e6:	9a03      	ldr	r2, [sp, #12]
 80065e8:	1d11      	adds	r1, r2, #4
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	9103      	str	r1, [sp, #12]
 80065ee:	2a00      	cmp	r2, #0
 80065f0:	db01      	blt.n	80065f6 <_svfiprintf_r+0xf6>
 80065f2:	9207      	str	r2, [sp, #28]
 80065f4:	e004      	b.n	8006600 <_svfiprintf_r+0x100>
 80065f6:	4252      	negs	r2, r2
 80065f8:	f043 0302 	orr.w	r3, r3, #2
 80065fc:	9207      	str	r2, [sp, #28]
 80065fe:	9304      	str	r3, [sp, #16]
 8006600:	783b      	ldrb	r3, [r7, #0]
 8006602:	2b2e      	cmp	r3, #46	; 0x2e
 8006604:	d10d      	bne.n	8006622 <_svfiprintf_r+0x122>
 8006606:	787b      	ldrb	r3, [r7, #1]
 8006608:	1c79      	adds	r1, r7, #1
 800660a:	2b2a      	cmp	r3, #42	; 0x2a
 800660c:	d132      	bne.n	8006674 <_svfiprintf_r+0x174>
 800660e:	9b03      	ldr	r3, [sp, #12]
 8006610:	3702      	adds	r7, #2
 8006612:	1d1a      	adds	r2, r3, #4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	9203      	str	r2, [sp, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	bfb8      	it	lt
 800661c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006620:	9305      	str	r3, [sp, #20]
 8006622:	4c2d      	ldr	r4, [pc, #180]	; (80066d8 <_svfiprintf_r+0x1d8>)
 8006624:	2203      	movs	r2, #3
 8006626:	7839      	ldrb	r1, [r7, #0]
 8006628:	4620      	mov	r0, r4
 800662a:	f000 fa02 	bl	8006a32 <memchr>
 800662e:	b138      	cbz	r0, 8006640 <_svfiprintf_r+0x140>
 8006630:	2340      	movs	r3, #64	; 0x40
 8006632:	1b00      	subs	r0, r0, r4
 8006634:	fa03 f000 	lsl.w	r0, r3, r0
 8006638:	9b04      	ldr	r3, [sp, #16]
 800663a:	3701      	adds	r7, #1
 800663c:	4303      	orrs	r3, r0
 800663e:	9304      	str	r3, [sp, #16]
 8006640:	7839      	ldrb	r1, [r7, #0]
 8006642:	2206      	movs	r2, #6
 8006644:	4825      	ldr	r0, [pc, #148]	; (80066dc <_svfiprintf_r+0x1dc>)
 8006646:	1c7e      	adds	r6, r7, #1
 8006648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800664c:	f000 f9f1 	bl	8006a32 <memchr>
 8006650:	2800      	cmp	r0, #0
 8006652:	d035      	beq.n	80066c0 <_svfiprintf_r+0x1c0>
 8006654:	4b22      	ldr	r3, [pc, #136]	; (80066e0 <_svfiprintf_r+0x1e0>)
 8006656:	b9fb      	cbnz	r3, 8006698 <_svfiprintf_r+0x198>
 8006658:	9b03      	ldr	r3, [sp, #12]
 800665a:	3307      	adds	r3, #7
 800665c:	f023 0307 	bic.w	r3, r3, #7
 8006660:	3308      	adds	r3, #8
 8006662:	9303      	str	r3, [sp, #12]
 8006664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006666:	444b      	add	r3, r9
 8006668:	9309      	str	r3, [sp, #36]	; 0x24
 800666a:	e76d      	b.n	8006548 <_svfiprintf_r+0x48>
 800666c:	fb00 3202 	mla	r2, r0, r2, r3
 8006670:	2101      	movs	r1, #1
 8006672:	e7a4      	b.n	80065be <_svfiprintf_r+0xbe>
 8006674:	2300      	movs	r3, #0
 8006676:	240a      	movs	r4, #10
 8006678:	4618      	mov	r0, r3
 800667a:	9305      	str	r3, [sp, #20]
 800667c:	460f      	mov	r7, r1
 800667e:	783a      	ldrb	r2, [r7, #0]
 8006680:	3101      	adds	r1, #1
 8006682:	3a30      	subs	r2, #48	; 0x30
 8006684:	2a09      	cmp	r2, #9
 8006686:	d903      	bls.n	8006690 <_svfiprintf_r+0x190>
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0ca      	beq.n	8006622 <_svfiprintf_r+0x122>
 800668c:	9005      	str	r0, [sp, #20]
 800668e:	e7c8      	b.n	8006622 <_svfiprintf_r+0x122>
 8006690:	fb04 2000 	mla	r0, r4, r0, r2
 8006694:	2301      	movs	r3, #1
 8006696:	e7f1      	b.n	800667c <_svfiprintf_r+0x17c>
 8006698:	ab03      	add	r3, sp, #12
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	462a      	mov	r2, r5
 800669e:	4b11      	ldr	r3, [pc, #68]	; (80066e4 <_svfiprintf_r+0x1e4>)
 80066a0:	a904      	add	r1, sp, #16
 80066a2:	4640      	mov	r0, r8
 80066a4:	f3af 8000 	nop.w
 80066a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066ac:	4681      	mov	r9, r0
 80066ae:	d1d9      	bne.n	8006664 <_svfiprintf_r+0x164>
 80066b0:	89ab      	ldrh	r3, [r5, #12]
 80066b2:	065b      	lsls	r3, r3, #25
 80066b4:	f53f af39 	bmi.w	800652a <_svfiprintf_r+0x2a>
 80066b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066ba:	b01d      	add	sp, #116	; 0x74
 80066bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c0:	ab03      	add	r3, sp, #12
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	462a      	mov	r2, r5
 80066c6:	4b07      	ldr	r3, [pc, #28]	; (80066e4 <_svfiprintf_r+0x1e4>)
 80066c8:	a904      	add	r1, sp, #16
 80066ca:	4640      	mov	r0, r8
 80066cc:	f000 f884 	bl	80067d8 <_printf_i>
 80066d0:	e7ea      	b.n	80066a8 <_svfiprintf_r+0x1a8>
 80066d2:	bf00      	nop
 80066d4:	08007272 	.word	0x08007272
 80066d8:	08007278 	.word	0x08007278
 80066dc:	0800727c 	.word	0x0800727c
 80066e0:	00000000 	.word	0x00000000
 80066e4:	0800644b 	.word	0x0800644b

080066e8 <_printf_common>:
 80066e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ec:	4691      	mov	r9, r2
 80066ee:	461f      	mov	r7, r3
 80066f0:	688a      	ldr	r2, [r1, #8]
 80066f2:	690b      	ldr	r3, [r1, #16]
 80066f4:	4606      	mov	r6, r0
 80066f6:	4293      	cmp	r3, r2
 80066f8:	bfb8      	it	lt
 80066fa:	4613      	movlt	r3, r2
 80066fc:	f8c9 3000 	str.w	r3, [r9]
 8006700:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006704:	460c      	mov	r4, r1
 8006706:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800670a:	b112      	cbz	r2, 8006712 <_printf_common+0x2a>
 800670c:	3301      	adds	r3, #1
 800670e:	f8c9 3000 	str.w	r3, [r9]
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	0699      	lsls	r1, r3, #26
 8006716:	bf42      	ittt	mi
 8006718:	f8d9 3000 	ldrmi.w	r3, [r9]
 800671c:	3302      	addmi	r3, #2
 800671e:	f8c9 3000 	strmi.w	r3, [r9]
 8006722:	6825      	ldr	r5, [r4, #0]
 8006724:	f015 0506 	ands.w	r5, r5, #6
 8006728:	d107      	bne.n	800673a <_printf_common+0x52>
 800672a:	f104 0a19 	add.w	sl, r4, #25
 800672e:	68e3      	ldr	r3, [r4, #12]
 8006730:	f8d9 2000 	ldr.w	r2, [r9]
 8006734:	1a9b      	subs	r3, r3, r2
 8006736:	429d      	cmp	r5, r3
 8006738:	db2a      	blt.n	8006790 <_printf_common+0xa8>
 800673a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800673e:	6822      	ldr	r2, [r4, #0]
 8006740:	3300      	adds	r3, #0
 8006742:	bf18      	it	ne
 8006744:	2301      	movne	r3, #1
 8006746:	0692      	lsls	r2, r2, #26
 8006748:	d42f      	bmi.n	80067aa <_printf_common+0xc2>
 800674a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800674e:	4639      	mov	r1, r7
 8006750:	4630      	mov	r0, r6
 8006752:	47c0      	blx	r8
 8006754:	3001      	adds	r0, #1
 8006756:	d022      	beq.n	800679e <_printf_common+0xb6>
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	68e5      	ldr	r5, [r4, #12]
 800675c:	f003 0306 	and.w	r3, r3, #6
 8006760:	2b04      	cmp	r3, #4
 8006762:	bf18      	it	ne
 8006764:	2500      	movne	r5, #0
 8006766:	f8d9 2000 	ldr.w	r2, [r9]
 800676a:	f04f 0900 	mov.w	r9, #0
 800676e:	bf08      	it	eq
 8006770:	1aad      	subeq	r5, r5, r2
 8006772:	68a3      	ldr	r3, [r4, #8]
 8006774:	6922      	ldr	r2, [r4, #16]
 8006776:	bf08      	it	eq
 8006778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800677c:	4293      	cmp	r3, r2
 800677e:	bfc4      	itt	gt
 8006780:	1a9b      	subgt	r3, r3, r2
 8006782:	18ed      	addgt	r5, r5, r3
 8006784:	341a      	adds	r4, #26
 8006786:	454d      	cmp	r5, r9
 8006788:	d11b      	bne.n	80067c2 <_printf_common+0xda>
 800678a:	2000      	movs	r0, #0
 800678c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006790:	2301      	movs	r3, #1
 8006792:	4652      	mov	r2, sl
 8006794:	4639      	mov	r1, r7
 8006796:	4630      	mov	r0, r6
 8006798:	47c0      	blx	r8
 800679a:	3001      	adds	r0, #1
 800679c:	d103      	bne.n	80067a6 <_printf_common+0xbe>
 800679e:	f04f 30ff 	mov.w	r0, #4294967295
 80067a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a6:	3501      	adds	r5, #1
 80067a8:	e7c1      	b.n	800672e <_printf_common+0x46>
 80067aa:	2030      	movs	r0, #48	; 0x30
 80067ac:	18e1      	adds	r1, r4, r3
 80067ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067b8:	4422      	add	r2, r4
 80067ba:	3302      	adds	r3, #2
 80067bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067c0:	e7c3      	b.n	800674a <_printf_common+0x62>
 80067c2:	2301      	movs	r3, #1
 80067c4:	4622      	mov	r2, r4
 80067c6:	4639      	mov	r1, r7
 80067c8:	4630      	mov	r0, r6
 80067ca:	47c0      	blx	r8
 80067cc:	3001      	adds	r0, #1
 80067ce:	d0e6      	beq.n	800679e <_printf_common+0xb6>
 80067d0:	f109 0901 	add.w	r9, r9, #1
 80067d4:	e7d7      	b.n	8006786 <_printf_common+0x9e>
	...

080067d8 <_printf_i>:
 80067d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067dc:	4617      	mov	r7, r2
 80067de:	7e0a      	ldrb	r2, [r1, #24]
 80067e0:	b085      	sub	sp, #20
 80067e2:	2a6e      	cmp	r2, #110	; 0x6e
 80067e4:	4698      	mov	r8, r3
 80067e6:	4606      	mov	r6, r0
 80067e8:	460c      	mov	r4, r1
 80067ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067ec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80067f0:	f000 80bc 	beq.w	800696c <_printf_i+0x194>
 80067f4:	d81a      	bhi.n	800682c <_printf_i+0x54>
 80067f6:	2a63      	cmp	r2, #99	; 0x63
 80067f8:	d02e      	beq.n	8006858 <_printf_i+0x80>
 80067fa:	d80a      	bhi.n	8006812 <_printf_i+0x3a>
 80067fc:	2a00      	cmp	r2, #0
 80067fe:	f000 80c8 	beq.w	8006992 <_printf_i+0x1ba>
 8006802:	2a58      	cmp	r2, #88	; 0x58
 8006804:	f000 808a 	beq.w	800691c <_printf_i+0x144>
 8006808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800680c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006810:	e02a      	b.n	8006868 <_printf_i+0x90>
 8006812:	2a64      	cmp	r2, #100	; 0x64
 8006814:	d001      	beq.n	800681a <_printf_i+0x42>
 8006816:	2a69      	cmp	r2, #105	; 0x69
 8006818:	d1f6      	bne.n	8006808 <_printf_i+0x30>
 800681a:	6821      	ldr	r1, [r4, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006822:	d023      	beq.n	800686c <_printf_i+0x94>
 8006824:	1d11      	adds	r1, r2, #4
 8006826:	6019      	str	r1, [r3, #0]
 8006828:	6813      	ldr	r3, [r2, #0]
 800682a:	e027      	b.n	800687c <_printf_i+0xa4>
 800682c:	2a73      	cmp	r2, #115	; 0x73
 800682e:	f000 80b4 	beq.w	800699a <_printf_i+0x1c2>
 8006832:	d808      	bhi.n	8006846 <_printf_i+0x6e>
 8006834:	2a6f      	cmp	r2, #111	; 0x6f
 8006836:	d02a      	beq.n	800688e <_printf_i+0xb6>
 8006838:	2a70      	cmp	r2, #112	; 0x70
 800683a:	d1e5      	bne.n	8006808 <_printf_i+0x30>
 800683c:	680a      	ldr	r2, [r1, #0]
 800683e:	f042 0220 	orr.w	r2, r2, #32
 8006842:	600a      	str	r2, [r1, #0]
 8006844:	e003      	b.n	800684e <_printf_i+0x76>
 8006846:	2a75      	cmp	r2, #117	; 0x75
 8006848:	d021      	beq.n	800688e <_printf_i+0xb6>
 800684a:	2a78      	cmp	r2, #120	; 0x78
 800684c:	d1dc      	bne.n	8006808 <_printf_i+0x30>
 800684e:	2278      	movs	r2, #120	; 0x78
 8006850:	496f      	ldr	r1, [pc, #444]	; (8006a10 <_printf_i+0x238>)
 8006852:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006856:	e064      	b.n	8006922 <_printf_i+0x14a>
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800685e:	1d11      	adds	r1, r2, #4
 8006860:	6019      	str	r1, [r3, #0]
 8006862:	6813      	ldr	r3, [r2, #0]
 8006864:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006868:	2301      	movs	r3, #1
 800686a:	e0a3      	b.n	80069b4 <_printf_i+0x1dc>
 800686c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006870:	f102 0104 	add.w	r1, r2, #4
 8006874:	6019      	str	r1, [r3, #0]
 8006876:	d0d7      	beq.n	8006828 <_printf_i+0x50>
 8006878:	f9b2 3000 	ldrsh.w	r3, [r2]
 800687c:	2b00      	cmp	r3, #0
 800687e:	da03      	bge.n	8006888 <_printf_i+0xb0>
 8006880:	222d      	movs	r2, #45	; 0x2d
 8006882:	425b      	negs	r3, r3
 8006884:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006888:	4962      	ldr	r1, [pc, #392]	; (8006a14 <_printf_i+0x23c>)
 800688a:	220a      	movs	r2, #10
 800688c:	e017      	b.n	80068be <_printf_i+0xe6>
 800688e:	6820      	ldr	r0, [r4, #0]
 8006890:	6819      	ldr	r1, [r3, #0]
 8006892:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006896:	d003      	beq.n	80068a0 <_printf_i+0xc8>
 8006898:	1d08      	adds	r0, r1, #4
 800689a:	6018      	str	r0, [r3, #0]
 800689c:	680b      	ldr	r3, [r1, #0]
 800689e:	e006      	b.n	80068ae <_printf_i+0xd6>
 80068a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068a4:	f101 0004 	add.w	r0, r1, #4
 80068a8:	6018      	str	r0, [r3, #0]
 80068aa:	d0f7      	beq.n	800689c <_printf_i+0xc4>
 80068ac:	880b      	ldrh	r3, [r1, #0]
 80068ae:	2a6f      	cmp	r2, #111	; 0x6f
 80068b0:	bf14      	ite	ne
 80068b2:	220a      	movne	r2, #10
 80068b4:	2208      	moveq	r2, #8
 80068b6:	4957      	ldr	r1, [pc, #348]	; (8006a14 <_printf_i+0x23c>)
 80068b8:	2000      	movs	r0, #0
 80068ba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80068be:	6865      	ldr	r5, [r4, #4]
 80068c0:	2d00      	cmp	r5, #0
 80068c2:	60a5      	str	r5, [r4, #8]
 80068c4:	f2c0 809c 	blt.w	8006a00 <_printf_i+0x228>
 80068c8:	6820      	ldr	r0, [r4, #0]
 80068ca:	f020 0004 	bic.w	r0, r0, #4
 80068ce:	6020      	str	r0, [r4, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d13f      	bne.n	8006954 <_printf_i+0x17c>
 80068d4:	2d00      	cmp	r5, #0
 80068d6:	f040 8095 	bne.w	8006a04 <_printf_i+0x22c>
 80068da:	4675      	mov	r5, lr
 80068dc:	2a08      	cmp	r2, #8
 80068de:	d10b      	bne.n	80068f8 <_printf_i+0x120>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	07da      	lsls	r2, r3, #31
 80068e4:	d508      	bpl.n	80068f8 <_printf_i+0x120>
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	6862      	ldr	r2, [r4, #4]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	bfde      	ittt	le
 80068ee:	2330      	movle	r3, #48	; 0x30
 80068f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068f8:	ebae 0305 	sub.w	r3, lr, r5
 80068fc:	6123      	str	r3, [r4, #16]
 80068fe:	f8cd 8000 	str.w	r8, [sp]
 8006902:	463b      	mov	r3, r7
 8006904:	aa03      	add	r2, sp, #12
 8006906:	4621      	mov	r1, r4
 8006908:	4630      	mov	r0, r6
 800690a:	f7ff feed 	bl	80066e8 <_printf_common>
 800690e:	3001      	adds	r0, #1
 8006910:	d155      	bne.n	80069be <_printf_i+0x1e6>
 8006912:	f04f 30ff 	mov.w	r0, #4294967295
 8006916:	b005      	add	sp, #20
 8006918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800691c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006920:	493c      	ldr	r1, [pc, #240]	; (8006a14 <_printf_i+0x23c>)
 8006922:	6822      	ldr	r2, [r4, #0]
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	f012 0f80 	tst.w	r2, #128	; 0x80
 800692a:	f100 0504 	add.w	r5, r0, #4
 800692e:	601d      	str	r5, [r3, #0]
 8006930:	d001      	beq.n	8006936 <_printf_i+0x15e>
 8006932:	6803      	ldr	r3, [r0, #0]
 8006934:	e002      	b.n	800693c <_printf_i+0x164>
 8006936:	0655      	lsls	r5, r2, #25
 8006938:	d5fb      	bpl.n	8006932 <_printf_i+0x15a>
 800693a:	8803      	ldrh	r3, [r0, #0]
 800693c:	07d0      	lsls	r0, r2, #31
 800693e:	bf44      	itt	mi
 8006940:	f042 0220 	orrmi.w	r2, r2, #32
 8006944:	6022      	strmi	r2, [r4, #0]
 8006946:	b91b      	cbnz	r3, 8006950 <_printf_i+0x178>
 8006948:	6822      	ldr	r2, [r4, #0]
 800694a:	f022 0220 	bic.w	r2, r2, #32
 800694e:	6022      	str	r2, [r4, #0]
 8006950:	2210      	movs	r2, #16
 8006952:	e7b1      	b.n	80068b8 <_printf_i+0xe0>
 8006954:	4675      	mov	r5, lr
 8006956:	fbb3 f0f2 	udiv	r0, r3, r2
 800695a:	fb02 3310 	mls	r3, r2, r0, r3
 800695e:	5ccb      	ldrb	r3, [r1, r3]
 8006960:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006964:	4603      	mov	r3, r0
 8006966:	2800      	cmp	r0, #0
 8006968:	d1f5      	bne.n	8006956 <_printf_i+0x17e>
 800696a:	e7b7      	b.n	80068dc <_printf_i+0x104>
 800696c:	6808      	ldr	r0, [r1, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006974:	6949      	ldr	r1, [r1, #20]
 8006976:	d004      	beq.n	8006982 <_printf_i+0x1aa>
 8006978:	1d10      	adds	r0, r2, #4
 800697a:	6018      	str	r0, [r3, #0]
 800697c:	6813      	ldr	r3, [r2, #0]
 800697e:	6019      	str	r1, [r3, #0]
 8006980:	e007      	b.n	8006992 <_printf_i+0x1ba>
 8006982:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006986:	f102 0004 	add.w	r0, r2, #4
 800698a:	6018      	str	r0, [r3, #0]
 800698c:	6813      	ldr	r3, [r2, #0]
 800698e:	d0f6      	beq.n	800697e <_printf_i+0x1a6>
 8006990:	8019      	strh	r1, [r3, #0]
 8006992:	2300      	movs	r3, #0
 8006994:	4675      	mov	r5, lr
 8006996:	6123      	str	r3, [r4, #16]
 8006998:	e7b1      	b.n	80068fe <_printf_i+0x126>
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	1d11      	adds	r1, r2, #4
 800699e:	6019      	str	r1, [r3, #0]
 80069a0:	6815      	ldr	r5, [r2, #0]
 80069a2:	2100      	movs	r1, #0
 80069a4:	6862      	ldr	r2, [r4, #4]
 80069a6:	4628      	mov	r0, r5
 80069a8:	f000 f843 	bl	8006a32 <memchr>
 80069ac:	b108      	cbz	r0, 80069b2 <_printf_i+0x1da>
 80069ae:	1b40      	subs	r0, r0, r5
 80069b0:	6060      	str	r0, [r4, #4]
 80069b2:	6863      	ldr	r3, [r4, #4]
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	2300      	movs	r3, #0
 80069b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069bc:	e79f      	b.n	80068fe <_printf_i+0x126>
 80069be:	6923      	ldr	r3, [r4, #16]
 80069c0:	462a      	mov	r2, r5
 80069c2:	4639      	mov	r1, r7
 80069c4:	4630      	mov	r0, r6
 80069c6:	47c0      	blx	r8
 80069c8:	3001      	adds	r0, #1
 80069ca:	d0a2      	beq.n	8006912 <_printf_i+0x13a>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	079b      	lsls	r3, r3, #30
 80069d0:	d507      	bpl.n	80069e2 <_printf_i+0x20a>
 80069d2:	2500      	movs	r5, #0
 80069d4:	f104 0919 	add.w	r9, r4, #25
 80069d8:	68e3      	ldr	r3, [r4, #12]
 80069da:	9a03      	ldr	r2, [sp, #12]
 80069dc:	1a9b      	subs	r3, r3, r2
 80069de:	429d      	cmp	r5, r3
 80069e0:	db05      	blt.n	80069ee <_printf_i+0x216>
 80069e2:	68e0      	ldr	r0, [r4, #12]
 80069e4:	9b03      	ldr	r3, [sp, #12]
 80069e6:	4298      	cmp	r0, r3
 80069e8:	bfb8      	it	lt
 80069ea:	4618      	movlt	r0, r3
 80069ec:	e793      	b.n	8006916 <_printf_i+0x13e>
 80069ee:	2301      	movs	r3, #1
 80069f0:	464a      	mov	r2, r9
 80069f2:	4639      	mov	r1, r7
 80069f4:	4630      	mov	r0, r6
 80069f6:	47c0      	blx	r8
 80069f8:	3001      	adds	r0, #1
 80069fa:	d08a      	beq.n	8006912 <_printf_i+0x13a>
 80069fc:	3501      	adds	r5, #1
 80069fe:	e7eb      	b.n	80069d8 <_printf_i+0x200>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1a7      	bne.n	8006954 <_printf_i+0x17c>
 8006a04:	780b      	ldrb	r3, [r1, #0]
 8006a06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a0e:	e765      	b.n	80068dc <_printf_i+0x104>
 8006a10:	08007294 	.word	0x08007294
 8006a14:	08007283 	.word	0x08007283

08006a18 <__ascii_wctomb>:
 8006a18:	b149      	cbz	r1, 8006a2e <__ascii_wctomb+0x16>
 8006a1a:	2aff      	cmp	r2, #255	; 0xff
 8006a1c:	bf8b      	itete	hi
 8006a1e:	238a      	movhi	r3, #138	; 0x8a
 8006a20:	700a      	strbls	r2, [r1, #0]
 8006a22:	6003      	strhi	r3, [r0, #0]
 8006a24:	2001      	movls	r0, #1
 8006a26:	bf88      	it	hi
 8006a28:	f04f 30ff 	movhi.w	r0, #4294967295
 8006a2c:	4770      	bx	lr
 8006a2e:	4608      	mov	r0, r1
 8006a30:	4770      	bx	lr

08006a32 <memchr>:
 8006a32:	b510      	push	{r4, lr}
 8006a34:	b2c9      	uxtb	r1, r1
 8006a36:	4402      	add	r2, r0
 8006a38:	4290      	cmp	r0, r2
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	d101      	bne.n	8006a42 <memchr+0x10>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	bd10      	pop	{r4, pc}
 8006a42:	781c      	ldrb	r4, [r3, #0]
 8006a44:	3001      	adds	r0, #1
 8006a46:	428c      	cmp	r4, r1
 8006a48:	d1f6      	bne.n	8006a38 <memchr+0x6>
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	bd10      	pop	{r4, pc}

08006a4e <memmove>:
 8006a4e:	4288      	cmp	r0, r1
 8006a50:	b510      	push	{r4, lr}
 8006a52:	eb01 0302 	add.w	r3, r1, r2
 8006a56:	d803      	bhi.n	8006a60 <memmove+0x12>
 8006a58:	1e42      	subs	r2, r0, #1
 8006a5a:	4299      	cmp	r1, r3
 8006a5c:	d10c      	bne.n	8006a78 <memmove+0x2a>
 8006a5e:	bd10      	pop	{r4, pc}
 8006a60:	4298      	cmp	r0, r3
 8006a62:	d2f9      	bcs.n	8006a58 <memmove+0xa>
 8006a64:	1881      	adds	r1, r0, r2
 8006a66:	1ad2      	subs	r2, r2, r3
 8006a68:	42d3      	cmn	r3, r2
 8006a6a:	d100      	bne.n	8006a6e <memmove+0x20>
 8006a6c:	bd10      	pop	{r4, pc}
 8006a6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a72:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006a76:	e7f7      	b.n	8006a68 <memmove+0x1a>
 8006a78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a7c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006a80:	e7eb      	b.n	8006a5a <memmove+0xc>
	...

08006a84 <_free_r>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	4605      	mov	r5, r0
 8006a88:	2900      	cmp	r1, #0
 8006a8a:	d043      	beq.n	8006b14 <_free_r+0x90>
 8006a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a90:	1f0c      	subs	r4, r1, #4
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	bfb8      	it	lt
 8006a96:	18e4      	addlt	r4, r4, r3
 8006a98:	f000 f8d4 	bl	8006c44 <__malloc_lock>
 8006a9c:	4a1e      	ldr	r2, [pc, #120]	; (8006b18 <_free_r+0x94>)
 8006a9e:	6813      	ldr	r3, [r2, #0]
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	b933      	cbnz	r3, 8006ab2 <_free_r+0x2e>
 8006aa4:	6063      	str	r3, [r4, #4]
 8006aa6:	6014      	str	r4, [r2, #0]
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aae:	f000 b8ca 	b.w	8006c46 <__malloc_unlock>
 8006ab2:	42a3      	cmp	r3, r4
 8006ab4:	d90b      	bls.n	8006ace <_free_r+0x4a>
 8006ab6:	6821      	ldr	r1, [r4, #0]
 8006ab8:	1862      	adds	r2, r4, r1
 8006aba:	4293      	cmp	r3, r2
 8006abc:	bf01      	itttt	eq
 8006abe:	681a      	ldreq	r2, [r3, #0]
 8006ac0:	685b      	ldreq	r3, [r3, #4]
 8006ac2:	1852      	addeq	r2, r2, r1
 8006ac4:	6022      	streq	r2, [r4, #0]
 8006ac6:	6063      	str	r3, [r4, #4]
 8006ac8:	6004      	str	r4, [r0, #0]
 8006aca:	e7ed      	b.n	8006aa8 <_free_r+0x24>
 8006acc:	4613      	mov	r3, r2
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	b10a      	cbz	r2, 8006ad6 <_free_r+0x52>
 8006ad2:	42a2      	cmp	r2, r4
 8006ad4:	d9fa      	bls.n	8006acc <_free_r+0x48>
 8006ad6:	6819      	ldr	r1, [r3, #0]
 8006ad8:	1858      	adds	r0, r3, r1
 8006ada:	42a0      	cmp	r0, r4
 8006adc:	d10b      	bne.n	8006af6 <_free_r+0x72>
 8006ade:	6820      	ldr	r0, [r4, #0]
 8006ae0:	4401      	add	r1, r0
 8006ae2:	1858      	adds	r0, r3, r1
 8006ae4:	4282      	cmp	r2, r0
 8006ae6:	6019      	str	r1, [r3, #0]
 8006ae8:	d1de      	bne.n	8006aa8 <_free_r+0x24>
 8006aea:	6810      	ldr	r0, [r2, #0]
 8006aec:	6852      	ldr	r2, [r2, #4]
 8006aee:	4401      	add	r1, r0
 8006af0:	6019      	str	r1, [r3, #0]
 8006af2:	605a      	str	r2, [r3, #4]
 8006af4:	e7d8      	b.n	8006aa8 <_free_r+0x24>
 8006af6:	d902      	bls.n	8006afe <_free_r+0x7a>
 8006af8:	230c      	movs	r3, #12
 8006afa:	602b      	str	r3, [r5, #0]
 8006afc:	e7d4      	b.n	8006aa8 <_free_r+0x24>
 8006afe:	6820      	ldr	r0, [r4, #0]
 8006b00:	1821      	adds	r1, r4, r0
 8006b02:	428a      	cmp	r2, r1
 8006b04:	bf01      	itttt	eq
 8006b06:	6811      	ldreq	r1, [r2, #0]
 8006b08:	6852      	ldreq	r2, [r2, #4]
 8006b0a:	1809      	addeq	r1, r1, r0
 8006b0c:	6021      	streq	r1, [r4, #0]
 8006b0e:	6062      	str	r2, [r4, #4]
 8006b10:	605c      	str	r4, [r3, #4]
 8006b12:	e7c9      	b.n	8006aa8 <_free_r+0x24>
 8006b14:	bd38      	pop	{r3, r4, r5, pc}
 8006b16:	bf00      	nop
 8006b18:	20002368 	.word	0x20002368

08006b1c <_malloc_r>:
 8006b1c:	b570      	push	{r4, r5, r6, lr}
 8006b1e:	1ccd      	adds	r5, r1, #3
 8006b20:	f025 0503 	bic.w	r5, r5, #3
 8006b24:	3508      	adds	r5, #8
 8006b26:	2d0c      	cmp	r5, #12
 8006b28:	bf38      	it	cc
 8006b2a:	250c      	movcc	r5, #12
 8006b2c:	2d00      	cmp	r5, #0
 8006b2e:	4606      	mov	r6, r0
 8006b30:	db01      	blt.n	8006b36 <_malloc_r+0x1a>
 8006b32:	42a9      	cmp	r1, r5
 8006b34:	d903      	bls.n	8006b3e <_malloc_r+0x22>
 8006b36:	230c      	movs	r3, #12
 8006b38:	6033      	str	r3, [r6, #0]
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	bd70      	pop	{r4, r5, r6, pc}
 8006b3e:	f000 f881 	bl	8006c44 <__malloc_lock>
 8006b42:	4a23      	ldr	r2, [pc, #140]	; (8006bd0 <_malloc_r+0xb4>)
 8006b44:	6814      	ldr	r4, [r2, #0]
 8006b46:	4621      	mov	r1, r4
 8006b48:	b991      	cbnz	r1, 8006b70 <_malloc_r+0x54>
 8006b4a:	4c22      	ldr	r4, [pc, #136]	; (8006bd4 <_malloc_r+0xb8>)
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	b91b      	cbnz	r3, 8006b58 <_malloc_r+0x3c>
 8006b50:	4630      	mov	r0, r6
 8006b52:	f000 f867 	bl	8006c24 <_sbrk_r>
 8006b56:	6020      	str	r0, [r4, #0]
 8006b58:	4629      	mov	r1, r5
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	f000 f862 	bl	8006c24 <_sbrk_r>
 8006b60:	1c43      	adds	r3, r0, #1
 8006b62:	d126      	bne.n	8006bb2 <_malloc_r+0x96>
 8006b64:	230c      	movs	r3, #12
 8006b66:	4630      	mov	r0, r6
 8006b68:	6033      	str	r3, [r6, #0]
 8006b6a:	f000 f86c 	bl	8006c46 <__malloc_unlock>
 8006b6e:	e7e4      	b.n	8006b3a <_malloc_r+0x1e>
 8006b70:	680b      	ldr	r3, [r1, #0]
 8006b72:	1b5b      	subs	r3, r3, r5
 8006b74:	d41a      	bmi.n	8006bac <_malloc_r+0x90>
 8006b76:	2b0b      	cmp	r3, #11
 8006b78:	d90f      	bls.n	8006b9a <_malloc_r+0x7e>
 8006b7a:	600b      	str	r3, [r1, #0]
 8006b7c:	18cc      	adds	r4, r1, r3
 8006b7e:	50cd      	str	r5, [r1, r3]
 8006b80:	4630      	mov	r0, r6
 8006b82:	f000 f860 	bl	8006c46 <__malloc_unlock>
 8006b86:	f104 000b 	add.w	r0, r4, #11
 8006b8a:	1d23      	adds	r3, r4, #4
 8006b8c:	f020 0007 	bic.w	r0, r0, #7
 8006b90:	1ac3      	subs	r3, r0, r3
 8006b92:	d01b      	beq.n	8006bcc <_malloc_r+0xb0>
 8006b94:	425a      	negs	r2, r3
 8006b96:	50e2      	str	r2, [r4, r3]
 8006b98:	bd70      	pop	{r4, r5, r6, pc}
 8006b9a:	428c      	cmp	r4, r1
 8006b9c:	bf0b      	itete	eq
 8006b9e:	6863      	ldreq	r3, [r4, #4]
 8006ba0:	684b      	ldrne	r3, [r1, #4]
 8006ba2:	6013      	streq	r3, [r2, #0]
 8006ba4:	6063      	strne	r3, [r4, #4]
 8006ba6:	bf18      	it	ne
 8006ba8:	460c      	movne	r4, r1
 8006baa:	e7e9      	b.n	8006b80 <_malloc_r+0x64>
 8006bac:	460c      	mov	r4, r1
 8006bae:	6849      	ldr	r1, [r1, #4]
 8006bb0:	e7ca      	b.n	8006b48 <_malloc_r+0x2c>
 8006bb2:	1cc4      	adds	r4, r0, #3
 8006bb4:	f024 0403 	bic.w	r4, r4, #3
 8006bb8:	42a0      	cmp	r0, r4
 8006bba:	d005      	beq.n	8006bc8 <_malloc_r+0xac>
 8006bbc:	1a21      	subs	r1, r4, r0
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	f000 f830 	bl	8006c24 <_sbrk_r>
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d0cd      	beq.n	8006b64 <_malloc_r+0x48>
 8006bc8:	6025      	str	r5, [r4, #0]
 8006bca:	e7d9      	b.n	8006b80 <_malloc_r+0x64>
 8006bcc:	bd70      	pop	{r4, r5, r6, pc}
 8006bce:	bf00      	nop
 8006bd0:	20002368 	.word	0x20002368
 8006bd4:	2000236c 	.word	0x2000236c

08006bd8 <_realloc_r>:
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	4607      	mov	r7, r0
 8006bdc:	4614      	mov	r4, r2
 8006bde:	460e      	mov	r6, r1
 8006be0:	b921      	cbnz	r1, 8006bec <_realloc_r+0x14>
 8006be2:	4611      	mov	r1, r2
 8006be4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006be8:	f7ff bf98 	b.w	8006b1c <_malloc_r>
 8006bec:	b922      	cbnz	r2, 8006bf8 <_realloc_r+0x20>
 8006bee:	f7ff ff49 	bl	8006a84 <_free_r>
 8006bf2:	4625      	mov	r5, r4
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bf8:	f000 f826 	bl	8006c48 <_malloc_usable_size_r>
 8006bfc:	4284      	cmp	r4, r0
 8006bfe:	d90f      	bls.n	8006c20 <_realloc_r+0x48>
 8006c00:	4621      	mov	r1, r4
 8006c02:	4638      	mov	r0, r7
 8006c04:	f7ff ff8a 	bl	8006b1c <_malloc_r>
 8006c08:	4605      	mov	r5, r0
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d0f2      	beq.n	8006bf4 <_realloc_r+0x1c>
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4622      	mov	r2, r4
 8006c12:	f7ff fb13 	bl	800623c <memcpy>
 8006c16:	4631      	mov	r1, r6
 8006c18:	4638      	mov	r0, r7
 8006c1a:	f7ff ff33 	bl	8006a84 <_free_r>
 8006c1e:	e7e9      	b.n	8006bf4 <_realloc_r+0x1c>
 8006c20:	4635      	mov	r5, r6
 8006c22:	e7e7      	b.n	8006bf4 <_realloc_r+0x1c>

08006c24 <_sbrk_r>:
 8006c24:	b538      	push	{r3, r4, r5, lr}
 8006c26:	2300      	movs	r3, #0
 8006c28:	4c05      	ldr	r4, [pc, #20]	; (8006c40 <_sbrk_r+0x1c>)
 8006c2a:	4605      	mov	r5, r0
 8006c2c:	4608      	mov	r0, r1
 8006c2e:	6023      	str	r3, [r4, #0]
 8006c30:	f7ff fa54 	bl	80060dc <_sbrk>
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	d102      	bne.n	8006c3e <_sbrk_r+0x1a>
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	b103      	cbz	r3, 8006c3e <_sbrk_r+0x1a>
 8006c3c:	602b      	str	r3, [r5, #0]
 8006c3e:	bd38      	pop	{r3, r4, r5, pc}
 8006c40:	20003064 	.word	0x20003064

08006c44 <__malloc_lock>:
 8006c44:	4770      	bx	lr

08006c46 <__malloc_unlock>:
 8006c46:	4770      	bx	lr

08006c48 <_malloc_usable_size_r>:
 8006c48:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	f1a0 0004 	sub.w	r0, r0, #4
 8006c52:	bfbc      	itt	lt
 8006c54:	580b      	ldrlt	r3, [r1, r0]
 8006c56:	18c0      	addlt	r0, r0, r3
 8006c58:	4770      	bx	lr
	...

08006c5c <_init>:
 8006c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5e:	bf00      	nop
 8006c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c62:	bc08      	pop	{r3}
 8006c64:	469e      	mov	lr, r3
 8006c66:	4770      	bx	lr

08006c68 <_fini>:
 8006c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6a:	bf00      	nop
 8006c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6e:	bc08      	pop	{r3}
 8006c70:	469e      	mov	lr, r3
 8006c72:	4770      	bx	lr
